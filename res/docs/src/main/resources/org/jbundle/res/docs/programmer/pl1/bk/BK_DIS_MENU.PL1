/****************************************************************
	Module: BK_DIS_MENU
	Top Level Logic: USER_MENU_LOGIC
	Date: 20-Mar-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_DIS_MENU
	Top level for user info
****************************************************************/

%replace BK_DIS_MENU_1 by 526;
BK_DIS_MENU:
   procedure(
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD);
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%include "BK_DIS_MENU.DD";
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";

declare		END_USER_MENU_MAIN   bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
   call INITIALIZE;
   END_USER_MENU_MAIN = NO;
   do while (END_USER_MENU_MAIN ^= YES);
      call USER_MENU_MAIN;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   MENU_CODE = "MENU";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_DIS_MENU_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_DIS_MENU_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	USER_MENU_MAIN
	Main logic for user maint.
****************************************************************/

USER_MENU_MAIN:
	procedure;

declare		ANSWER               character (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);

   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (BK_DIS_MENU_1);
   NOT_FIRST_TIME = YES;
   call DISPLAY_DATA_C;

   /* OPEN_MENU_INFO - Open and display this menu screen */

   %replace BK_TEXT_NO by 83;
   %include "BK_TEXT.DD";
   declare	LINE	fixed binary;

   call OPEN_SFILE(BK_TEXT_NO,"MENU:" !! CUT_SPACES_LONG(MENU_CODE),byteaddr(BK_STRING),ERROR_CODE);
   LINE = 0;

   do while (ERROR_CODE = NORMAL_RETURN);
      call READ_SEQN(BK_TEXT_NO,KEY_AREA_1,ERROR_CODE);

      if ERROR_CODE = NORMAL_RETURN then
         do;
         declare LOOP fixed binary;
         do LOOP = 1 to 132;
            if substr(BK_STRING,LOOP,1) < " " then
               substr(BK_STRING,LOOP,1) = " ";
         end;
         MENU_LINE = BK_STRING;
         if LINE > 14 then
            do;
            call OUTPUT_LINE (24,10,"Stop Displaying?");
            call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
            call CLEAR_TO_BOS (24);
            if ANSWER = "Y" then
               ERROR_CODE = END_OF_FILE;
            else
               do;
               LINE = 0;
               call SET_ROW_OFFSET(0);

               /* REDISPLAY_SCREEN - Re-display the screen */

               if NOT_FIRST_TIME then
                  call DISPLAY_SCREEN (BK_DIS_MENU_1);
               NOT_FIRST_TIME = YES;
               call DISPLAY_DATA_C;
               end;
            end;
         call SET_ROW_OFFSET(LINE);
         LINE = LINE + 1;
         if ERROR_CODE = NORMAL_RETURN then
            do;
            call DISPLAY_DATA_B;
            end;
         end;
   end;

   call SET_ROW_OFFSET(0);
   call CLOSE_SFILE(BK_TEXT_NO);


   /* INPUT_DATA_A - Input the data in group A */

   do LOOP_INDEX =  11 to  11;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;

   /* RETURN_IF_END - Return if end typed */

   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_USER_MENU_MAIN = YES;
      return;
      end;


   /* NEW_MENU_INFO - Create the new menu file name */

   if INPUT_LENGTH = 0 then
      do;
      /* Back out by one menu */
      do LOOP = length(CUT_SPACES_LONG(MENU_CODE)) to 1 by -1;
         if substr(MENU_CODE,LOOP,1) = "_" then
            do;
            MENU_CODE = substr(MENU_CODE,1,LOOP-1);
            goto SEARCH_OVER;
            end;
      end;
      do;
      END_USER_MENU_MAIN = YES;
      return;
      end;
      SEARCH_OVER:
      end;
   else
      do;
      /* Set up next menu */
      MENU_CODE = CUT_SPACES_LONG(MENU_CODE) !! "_" !! MENU_ITEM;
      end;

return;
end;	/* USER_MENU_MAIN       */

/****************************************************************
	DISPLAY_DATA_C
	Display the data in screen group C
****************************************************************/

DISPLAY_DATA_C:
	procedure;

do LOOP_INDEX =  13 to  13;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_C       */

/****************************************************************
	DISPLAY_DATA_B
	Display the screen data in group B
****************************************************************/

DISPLAY_DATA_B:
	procedure;

do LOOP_INDEX =  12 to  12;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_B       */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
