/****************************************************************
	Module: BK_PRT_VOUCHER
	Top Level Logic: PRT_VCHR_LOGIC
	Date: 10-Feb-94
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_PRT_VOUCHER
	Top-Level Print a tour voucher
****************************************************************/

%replace BK_PRT_VOUCHER_1 by 784;
BK_PRT_VOUCHER:
   procedure(
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_BOOKING_RECORD,
      BK_PASSENGERS_RECORD,
      BK_CONTROL_RECORD);
%replace AP_OPEN_NO by  32;
%replace AP_VENDOR_NO by  30;
%replace BK_TOUR_DOC_NO by  76;
%replace BK_DET_HOTEL_NO by  67;
%replace BK_HOTEL_NO by   8;
%replace TK_DETAIL_NO by  57;
%replace BK_TELEX_NO by  88;
%replace BK_LAND_NO by  54;
%replace BK_TRANS_NO by  64;
%replace BK_DET_LAND_NO by  68;
%replace BK_ITIN_DET_NO by  79;
%replace BK_HOTEL_CAT_NO by 116;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_BOOKING_NO by   9;
%replace BK_PASSENGERS_NO by  49;
%replace BK_CONTROL_NO by  47;
%include "AP_OPEN.DD";
%include "AP_VENDOR.DD";
%include "BK_TOUR_DOC.DD";
%include "BK_PRT_VOUCHER.DD";
%include "BK_DET_HOTEL.DD";
%include "BK_HOTEL.DD";
%include "TK_DETAIL.DD";
%include "BK_TELEX.DD";
%include "BK_LAND.DD";
%include "BK_TRANS.DD";
%include "BK_DET_LAND.DD";
%include "BK_ITIN_DET.DD";
%include "BK_HOTEL_CAT.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_BOOKING.DD";
%include "BK_PASSENGERS.DD";
%include "BK_CONTROL.DD";

declare		ERROR_CODE           fixed binary (15);
declare		END_PRT_VCHR_MAIN    bit (1);
declare		KEY_NO               fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		FIRST_ITEM           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		ERROR_BK_BOOKING     fixed binary (15);
declare		ERROR_BK_TOUR        fixed binary (15);
   call INITIALIZE;

   /* SAVE_BK_INFO - Save the current booking for a sec */

   declare BOOKING_NO_SAVE fixed binary(31);
   BOOKING_NO_SAVE = BOOKING_NO;

   if BOOKING_NO ^= 0 then
      do;

      /* UPDATE_BOOK_NUL - Update the booking record - Don't unlock */

      call UPDATE_RECORD (BK_BOOKING_NO+?LOCK_RECORD,ERROR_CODE);
      end;


   /* DIS_IF_TOUR - Display vouchers if current tour */

   if BOOKING_NO ^= 0 then if BK_TOUR_NUM ^= 0 then
      do;
      call TABLE_DISPLAY;
      end;

   END_PRT_VCHR_MAIN = NO;
   do while (END_PRT_VCHR_MAIN ^= YES);
      call PRT_VCHR_MAIN;
   end;

   /* RESTORE_BK_INFO - Restore the original booking information */

   if BOOKING_NO_SAVE = 0 then
      do;

      /* INIT_HDR_DATA - Zero everything before starting */

      BOOKING_NO = 0;
      BK_MODIFICATION = 0;
      BK_NEXT_MOD = 0;
      BK_AGENCY = -1;
      BK_PAX = 0;
      BK_TOUR_NUM = 0;
      BK_TOUR_CODE = "";
      BK_DEPARTURE = 0;

      TOUR_NO = 0;
      TOUR_DEP_DATE = 0;
      TOUR_TYPE = " ";
      TOUR_RATE_DEF = "";
      TOUR_RATE_CLASS = "";
      TOUR_DEF_CUTOFF = 0;

      HDR_TOUR_CODE = "";
      HDR_END_ON = 0;

      end;
   else
      do;
      if (BK_MODIFICATION ^= 0) ! (BOOKING_NO ^= BOOKING_NO_SAVE) then
         do;
         BK_MODIFICATION = 0;
         BOOKING_NO = BOOKING_NO_SAVE;

         /* READ_BOOK_LOCK - Read the booking record and lock it */

         call READ_KEYED (BK_BOOKING_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_BK_BOOKING);
         if ERROR_BK_BOOKING = RECORD_LOCKED then
            do;
            call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
            call PRESS_RETURN;
            end;
         if ERROR_BK_BOOKING > 3 then
            call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
         end;
      end;

   /* RESTORE_BK_TOUR - Restore the tour and tour header info */

   if BOOKING_NO ^= 0 then
      do;
      if BK_TOUR_CODE ^= "" then if BK_DEPARTURE ^= 0 then
         if (BK_TOUR_CODE ^= HDR_TOUR_CODE) !
            (BK_DEPARTURE < HDR_START_ON) ! (BK_DEPARTURE > HDR_END_ON) then
               do;

               /* GET_TOUR_HDR - Get the tour header */

               ERROR_CODE = NORMAL_RETURN;

               HDR_TOUR_CODE = BK_TOUR_CODE;
               HDR_END_ON = BK_DEPARTURE;
               if HDR_END_ON = 0 then
                  HDR_END_ON = TODAYS_DATE();
               call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE ^= END_OF_FILE then
                  call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

               if BK_TOUR_CODE ^= HDR_TOUR_CODE then
                  ERROR_CODE = END_OF_FILE;
               if BK_DEPARTURE ^= 0 then if BK_DEPARTURE < HDR_START_ON then
                  ERROR_CODE = END_OF_FILE;

               end;
      if BK_TOUR_NUM ^= 0 then
         if BK_TOUR_NUM ^= TOUR_NO then
            do;
            TOUR_NO = BK_TOUR_NUM;

            /* READ_TOUR_REC - Read the tour file record */

            call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_BK_TOUR);
            if ERROR_BK_TOUR > 3 then
               call PRINT_ERROR (BK_TOUR_NO,ERROR_BK_TOUR);
            end;
      end;


   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AP_OPEN_TOUR_GL = 0;
   AP_SERVICES = "";
   AP_START_SVC = 0;
   AP_END_SVC = 0;
   AP_V_BASED_SEQ = 0;
   AP_LAST_ACTIVITY = 0;
   AP_CUR_BAL = 0;
   AP_MTD_PUR = 0;
   AP_YTD_PUR = 0;
   AP_LAST_PUR = 0;
   AP_SELECT_AMT = 0;
   AP_SELECT_STATUS = "N";
   AP_COMM_CODE = "F";
   AP_VEN_TAX_ID = "";
   ACTION_DESC = "";
   HDET_MOD_CODE = "A";
   HDET_INV = "N";
   HDET_INV_MOD = -1;
   HDET_INV_RATE = "";
   HDET_MANUAL = "";
   HDET_SEND_TO = "Y";
   HDET_ACK_DAYS = 0;
   HDET_MEAL_PRICE = 0;
   HDET_MEAL_PLAN = "";
   HDET_QUAD = 0;
   HDET_MODULE = "";
   HDET_STATUS = "RQ";
   TK_SEQ = 1;
   TK_TIME = NO_TIME;
   TK_DET_MOD_CODE = "A";
   TK_INV = "N";
   TK_INV_MOD = -1;
   TK_ARR_TIME = NO_TIME;
   TK_ARR_DAY = 0;
   TK_DETAIL_MODULE = "";
   TELEX_USER = USER_NAME();
   LAND_TAX = 0;
   LAND_SVC_CHG = 0;
   LAND_COMM = 0;
   LDET_MOD_CODE = "A";
   LDET_INV = "N";
   BK_INV_MOD = -1;
   LDET_VARIES_CODE = "";
   LDET_VARIES_QTY = 0;
   LDET_VARIES_COST = 0;
   LDET_MANUAL = "";
   LDET_MODULE = "";
   LDET_ACK_DAYS = 0;
   LDET_SEND_TO = "Y";
   LDET_STATUS = "OK";
   LDET_SIC_PMC = "";
   LDET_PMC = 0;
   LDET_SIC = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_PRT_VOUCHER_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (AP_OPEN_NO,"AP_OPEN",byteaddr(AP_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_OPEN_NO,ERROR_CODE);
   call OPEN_FILE (AP_VENDOR_NO,"AP_VENDOR",byteaddr(AP_VENDOR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_VENDOR_NO,ERROR_CODE);
   call OPEN_FILE (BK_TOUR_DOC_NO,"BK_TOUR_DOC",byteaddr(BK_TOUR_DOC_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TOUR_DOC_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (BK_PRT_VOUCHER_RECORD) );
   call OPEN_FILE (BK_DET_HOTEL_NO,"BK_DET_HOTEL",byteaddr(BK_DET_HOTEL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_DET_HOTEL_NO,ERROR_CODE);
   call OPEN_FILE (BK_HOTEL_NO,"BK_HOTEL",byteaddr(BK_HOTEL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_HOTEL_NO,ERROR_CODE);
   call OPEN_FILE (TK_DETAIL_NO,"TK_DETAIL",byteaddr(TK_DETAIL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_DETAIL_NO,ERROR_CODE);
   call OPEN_FILE (BK_TELEX_NO,"BK_TELEX",byteaddr(BK_TELEX_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TELEX_NO,ERROR_CODE);
   call OPEN_FILE (BK_LAND_NO,"BK_LAND",byteaddr(BK_LAND_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_LAND_NO,ERROR_CODE);
   call OPEN_FILE (BK_TRANS_NO,"BK_TRANS",byteaddr(BK_TRANS_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TRANS_NO,ERROR_CODE);
   call OPEN_FILE (BK_DET_LAND_NO,"BK_DET_LAND",byteaddr(BK_DET_LAND_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_DET_LAND_NO,ERROR_CODE);
   call OPEN_FILE (BK_ITIN_DET_NO,"BK_ITIN_DET",byteaddr(BK_ITIN_DET_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_ITIN_DET_NO,ERROR_CODE);
   call OPEN_FILE (BK_HOTEL_CAT_NO,"BK_HOTEL_CAT",byteaddr(BK_HOTEL_CAT_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_HOTEL_CAT_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	TABLE_DISPLAY
	Display the table info
****************************************************************/

TABLE_DISPLAY:
	procedure;

declare		AP_OPEN_TOUR_SAVE    fixed binary (31);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		RECORD_NUMBER        fixed binary (15);
declare		AP_START_SVC_ARRAY(11) fixed binary (15);
declare		AP_ENTRY_NO_ARRAY(11) fixed binary (31);
declare		AP_OPEN_ERROR        fixed binary (15);
declare		AP_START_SVC_SAVE    fixed binary (15);
declare		AP_ENTRY_NO_SAVE     fixed binary (31);
declare		ANSWER               character (1);
AP_OPEN_TOUR = BK_TOUR_NUM;
AP_OPEN_TOUR_SAVE = AP_OPEN_TOUR;
AP_START_SVC = 0;
AP_ENTRY_NO = 0;
call SET_POSITION (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (AP_OPEN_TOUR > AP_OPEN_TOUR_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 11;
      AP_START_SVC_ARRAY(RECORD_NUMBER) = 0;
      AP_ENTRY_NO_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      AP_OPEN_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (AP_OPEN_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 11) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =  22 to  27;
            if LOOP_INDEX =  25 then
               do;

               /* SET_V_TYPE - Set voucher type (hotel or land) */

               if AP_V_BASED_BK = 0 then
                  AP_OPEN_TYPE = "";
               else
                  do;
                  if AP_V_BASED_SEQ = -1 then
                     AP_OPEN_TYPE = "Land";
                  else
                     AP_OPEN_TYPE = "Hotel";
                  end;

               end;
            if LOOP_INDEX =  27 then
               do;

               /* SET_V_DESC - Set the Voucher Status Description */

               do case (AP_GL_STATUS + 1);
                  AP_V_DESC = "TO Held";
                  AP_V_DESC = "No stat.";
                  AP_V_DESC = "T.O. Rqd";
                  AP_V_DESC = "Wait Ack";
                  AP_V_DESC = "Ack Rcvd";
                  AP_V_DESC = "TO Prtd";
                  AP_V_DESC = "Xln Reqd";
                  AP_V_DESC = "Wait Xln";
                  AP_V_DESC = "Ackn Xln";
                  AP_V_DESC = "Xln Prtd";
                  AP_V_DESC = "Reprt TO";
                  AP_V_DESC = "Manual T";
                  AP_V_DESC = "Dep Est ";
                  AP_V_DESC = "Invoice ";
                  AP_V_DESC = "Cr memo ";
                  AP_V_DESC = "Prepaymt";
                  AP_V_DESC = "Dr memo ";
                  AP_V_DESC = "Payment ";
                  AP_V_DESC = "Posted  ";
               end;
               otherwise
                  AP_V_DESC = "No TO   ";

               end;
            call OUTPUT_FIELD (LOOP_INDEX);
            if LOOP_INDEX =  23 then
               do;

               /* READ_SECOND - Read info and display secondary fileinfo */

               AP_VEN_NO = AP_OPEN_VENDOR;
               call READ_KEYED (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE = RECORD_NOT_FOUND then
                  do;
                  AP_VEN_NAME = "** RECORD NOT FOUND **";
                  end;
               else
                  do;
                  end;
               end;
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         AP_START_SVC_ARRAY(RECORD_NUMBER) = AP_START_SVC;
         AP_ENTRY_NO_ARRAY(RECORD_NUMBER) = AP_ENTRY_NO;
         call READ_NEXT (AP_OPEN_NO,KEY_AREA_3,AP_OPEN_ERROR);
         if (AP_OPEN_TOUR > AP_OPEN_TOUR_SAVE) then
            AP_OPEN_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      AP_START_SVC_SAVE = AP_START_SVC_ARRAY(11);
      AP_ENTRY_NO_SAVE = AP_ENTRY_NO_ARRAY(11);
      AP_OPEN_TOUR = AP_OPEN_TOUR_SAVE;
      if AP_OPEN_ERROR = END_OF_FILE then
         GET_OUT = YES;
      else
         do;
         call OUTPUT_LINE (24,10,"Stop Displaying?");
         call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
         call CLEAR_TO_BOS (24);
         if (ANSWER = "Y") then
            GET_OUT = YES;
         end;
      end;
   else
      GET_OUT = YES;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 11;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if AP_START_SVC_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX =22 to  27;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_DISPLAY        */

/****************************************************************
	PRT_VCHR_MAIN
	Mainline logic to print vouchers
****************************************************************/

PRT_VCHR_MAIN:
	procedure;

declare		ERROR_AP_OPEN        fixed binary (15);

   /* INPUT_KEY - Input the key-data from the screen */

   KEY_NO = 1;
   INPUT_LENGTH = 1;
   call INPUT_FIELD ( 11,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_PRT_VCHR_MAIN = YES;
      return;
      end;
   FIRST_ITEM = 1;

   /* READ_AND_LOCK - Read the record and lock it */

   call READ_KEYED (AP_OPEN_NO+?LOCK_RECORD,KEY_NO,ERROR_AP_OPEN);
   if ERROR_AP_OPEN = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      return;
      end;
   if ERROR_AP_OPEN > 3 then
      call PRINT_ERROR (AP_OPEN_NO,ERROR_AP_OPEN);

   /* REQ_REC_FOUND - Record found? (If not, can only display) */

   ERROR_INPUT_SCREEN = NO;
   if ERROR_AP_OPEN = NORMAL_RETURN then
      do;
      call DISPLAY_DATA;
      end;
   else
      do;

      /* REC_NOT_FOUND - Display rec not found and do again */


         /* RECORD_NOT_FOUND - Record not found */

         call DISPLAY_MESSAGE("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         ERROR_INPUT_SCREEN = YES;


         /* DO_AGAIN - Return to do it again */

         return;

      if ERROR_INPUT_SCREEN then return;
      end;
   call ENTER_DATA_C;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_PRT_VOUCHER_1);

   /* DIS_IF_TOUR - Display vouchers if current tour */

   if BOOKING_NO ^= 0 then if BK_TOUR_NUM ^= 0 then
      do;
      call TABLE_DISPLAY;
      end;


   /* SET_SCRN_VARS - Set the screen variables pointer */

   call SET_SCREEN_VARS (byteaddr (BK_PRT_VOUCHER_RECORD) );
   call CLEAR_DATA_A;
return;
end;	/* PRT_VCHR_MAIN        */

/****************************************************************
	DISPLAY_DATA
	Display the data for this screen
****************************************************************/

DISPLAY_DATA:
	procedure;

do LOOP_INDEX =  12 to  18;
   call OUTPUT_FIELD (LOOP_INDEX);
   if LOOP_INDEX =  12 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AP_VEN_NO = AP_OPEN_VENDOR;
      call READ_KEYED (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         AP_VEN_NAME = "** RECORD NOT FOUND **";
         end;
      else
         do;
         end;
      end;
   if LOOP_INDEX =  14 then
      do;

      /* READ_SECOND_2 - Read secondary info */

      TOUR_NO = AP_OPEN_TOUR;
      call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         TOUR_DESC = "** RECORD NOT FOUND **";
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA         */

/****************************************************************
	ENTER_DATA_C
	Enter the screen data in group C
****************************************************************/

ENTER_DATA_C:
	procedure;

DOC_DOC_TYPE = "";
VOUCHER_FORMAT = "DEFAULT";
VOUCHER_FORM = "T";
do LOOP_INDEX =  19 to  21;
   if LOOP_INDEX =  19 then
      call DISPLAY_MSG_NO ( 36);
   if LOOP_INDEX =  19 then
      do;

      /* REPRINT_DEF - Set the reprint default */

      if AP_V_BASED_SEQ = -1 then
         DOC_DOC_TYPE = "L";
      else
         DOC_DOC_TYPE = "H";

      end;
   if LOOP_INDEX =  20 then
      call DISPLAY_MSG_NO ( 81);
   if LOOP_INDEX =  21 then
      call DISPLAY_MSG_NO ( 83);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =  19 then
      do;

      /* CHECK_REPRINT - Reprint the voucher? */

      if DOC_DOC_TYPE = " " then
         return;

      if AP_V_BASED_BK = 0 then
         return;

      if AP_V_BASED_SEQ = -1 then
         do;
         if DOC_DOC_TYPE ^= "L" then if DOC_DOC_TYPE ^= "W" then if DOC_DOC_TYPE ^= "S" then
            return;
         end;
      else
         do;
         if DOC_DOC_TYPE ^= "H" then if DOC_DOC_TYPE ^= "V" then if DOC_DOC_TYPE ^= "R" then
            return;
         end;

      end;
   if LOOP_INDEX =  20 then
      do;

      /* CHECK_VOUCHER_FORM - Voucher form? */

      if VOUCHER_FORMAT = "DEFAULT" then
         VOUCHER_FORMAT = "";

      DOC_NAME = VOUCHER_FORMAT;

      end;
   if LOOP_INDEX =  21 then
      do;

      /* PRINT_THIS_VOUCHER - Set the output file and print voucher */

      if VOUCHER_FORM = "" then
         VOUCHER_FORM = "MULTIFORM";

      if VOUCHER_FORM = "DEFAULT" then
         VOUCHER_FORM = "MULTIFORM";

      if (VOUCHER_FORM = "T") ! (VOUCHER_FORM = "M") then
         do;
         declare VCHR_NO character(20);
         VCHR_NO = AP_ENTRY_NO;
         do LOOP_INDEX = 1 to 20;
            if substr(VCHR_NO,1,1) = " " then
               VCHR_NO = substr(VCHR_NO,2,19);
         end;
         if (VOUCHER_FORM = "T") then
            VOUCHER_FORM = ":TELEX:" !! CUT_SPACES(VCHR_NO);
         else
            VOUCHER_FORM = ":TELEX:M" !! CUT_SPACES(VCHR_NO);
         end;

      declare PRINTER_FILE character(20) varying;
      PRINTER_FILE = CUT_SPACES(VOUCHER_FORM);
      call OPEN_PRINTER(PRINTER_FILE);
      BK_H_FORM = "";
      if VOUCHER_FORM = "MULTIFORM" then
         BK_H_FORM = "VOUCHER";

      call PRINTING_OCCURRING;
      call DUMP_BUFFER;
      if AP_V_BASED_BK ^= 0 then
         do;
         if AP_V_BASED_SEQ = -1 then
            do;

            /* BK_L_VOUCHER - Call the module to print this voucher */

            %include "BK_L_VOUCHER.DCL";
            call BK_L_VOUCHER(
               BK_TOUR_RECORD,
               BK_TOUR_HDR_RECORD,
               BK_BOOKING_RECORD,
               BK_PASSENGERS_RECORD,
               BK_DET_LAND_RECORD,
               AP_OPEN_RECORD,
               BK_LAND_RECORD,
               BK_TRANS_RECORD,
               TK_DETAIL_RECORD,
               AP_VENDOR_RECORD,
               BK_HOTEL_RECORD,
               BK_TOUR_DOC_RECORD,
               BK_CONTROL_RECORD,
               BK_DET_HOTEL_RECORD,
               BK_ITIN_DET_RECORD);
            end;
         else
            do;

            /* BK_H_VOUCHER - Call to print this voucher */

            %include "BK_H_VOUCHER.DCL";
            call BK_H_VOUCHER(
               BK_TOUR_RECORD,
               BK_TOUR_HDR_RECORD,
               BK_BOOKING_RECORD,
               BK_PASSENGERS_RECORD,
               BK_DET_HOTEL_RECORD,
               AP_OPEN_RECORD,
               BK_HOTEL_RECORD,
               TK_DETAIL_RECORD,
               AP_VENDOR_RECORD,
               BK_TOUR_DOC_RECORD,
               BK_CONTROL_RECORD,
               BK_HOTEL_CAT_RECORD);
            end;
         end;

      call CLEAR_MESSAGE;

      call CLOSE_PRINTER;

      if substr(VOUCHER_FORM,1,7) = ":TELEX:" then
         do;

         /* GET_NEXT_NO - Get the next sequential telex number */

         TELEX_NO = 0;
         call SET_POSITION(BK_TELEX_NO,KEY_AREA_1,ERROR_CODE);

         do while (ERROR_CODE ^= END_OF_FILE);
            call READ_NEXT(BK_TELEX_NO+?KEY_ONLY,KEY_AREA_1,ERROR_CODE);
         end;

         TELEX_NO = TELEX_NO + 1;


         /* SET_UP_TELEX - Set up the telex record */

         TELEX_OR_FAX = AP_COMM_CODE;
         if TELEX_OR_FAX ^= "E" then if TELEX_OR_FAX ^= "M" then if TELEX_OR_FAX ^= "F" then
            TELEX_OR_FAX = "T";
         TELEX_NUMBER = AP_VEN_TELEX;

         if (AP_COMM_CODE = "F") ! (TELEX_NUMBER = "") then
            do;
            TELEX_OR_FAX = "F";
            TELEX_NUMBER = AP_VEN_FAX;
            end;

         TELEX_ITIN_FMT = "N";
         TELEX_VENDOR = AP_VEN_NO;
         TELEX_NAME = AP_VEN_NAME;
         TELEX_ADDR_1 = AP_ADDR_1;
         TELEX_ADDR_2 = AP_ADDR_2;
         TELEX_ADDR_3 = AP_ADDR_3;
         TELEX_ADDR_4 = AP_ADDR_4;

         TELEX_FILE = "";
         TELEX_USER = USER_NAME();
         TELEX_REF = BK_TOUR_NUM;

         TELEX_FILE = VOUCHER_FORM;
         if substr(VOUCHER_FORM,8,1) = "M" then
            do;
            TELEX_OR_FAX="M";
            TELEX_NUMBER = AP_VEN_NO;
            end;

         /* WRITE_TELEX - Write the empty telex record */

         ERROR_CODE = KEY_ALREADY_EXISTS;
         do while (ERROR_CODE = KEY_ALREADY_EXISTS);
            call WRITE_RECORD (BK_TELEX_NO,ERROR_CODE);
            if ERROR_CODE = KEY_ALREADY_EXISTS then
               TELEX_NO = TELEX_NO + 1;
         end;

         end;

      LOOP_INDEX = 99;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_C         */

/****************************************************************
	CLEAR_DATA_A
	Clear the fields in group A
****************************************************************/

CLEAR_DATA_A:
	procedure;

do LOOP_INDEX =  12 to  18;
   call CLEAR_FIELD(LOOP_INDEX);
end;
return;
end;	/* CLEAR_DATA_A         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AP_OPEN_NO);
   call CLOSE_FILE (AP_VENDOR_NO);
   call CLOSE_FILE (BK_TOUR_DOC_NO);
   call CLOSE_FILE (BK_DET_HOTEL_NO);
   call CLOSE_FILE (BK_HOTEL_NO);
   call CLOSE_FILE (TK_DETAIL_NO);
   call CLOSE_FILE (BK_TELEX_NO);
   call CLOSE_FILE (BK_LAND_NO);
   call CLOSE_FILE (BK_TRANS_NO);
   call CLOSE_FILE (BK_DET_LAND_NO);
   call CLOSE_FILE (BK_ITIN_DET_NO);
   call CLOSE_FILE (BK_HOTEL_CAT_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
