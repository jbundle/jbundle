/****************************************************************
	Module: BK_ANAL_TOUR
	Top Level Logic: ANALYZE_LOGIC
	Date: 21-Jul-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_ANAL_TOUR
	Top Level to analyze the file's info
****************************************************************/

%replace BK_ANAL_TOUR_1 by 890;
%replace BK_ANAL_TOUR_2 by 891;
BK_ANAL_TOUR:
   procedure;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_BOOKING_NO by   9;
%replace AD_CURR_NO by  25;
%replace AP_OPEN_NO by  32;
%replace TK_HEADER_NO by  56;
%include "BK_ANAL_TOUR.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_BOOKING.DD";
%include "AD_CURR.DD";
%include "AP_OPEN.DD";
%include "TK_HEADER.DD";

declare		END_ANALYZE_MAIN     bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		KEY_LENGTH           fixed binary (15);
declare		RECORD_LENGTH        fixed binary (15);
declare		TEMP_RECORD          character (     1000);
declare		END_ANAL_THRU_FILE   bit (1);
declare		END_PRINT_THRU_TEMP  bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		END_RX_SCAN_BK       bit (1);
declare		END_RX_SCAN_AP       bit (1);
declare		FIRST_TIME           bit (1);
declare		END_RX_SCAN_AIR      bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_ANALYZE_MAIN = NO;
   do while (END_ANALYZE_MAIN ^= YES);
      call ANALYZE_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   RX_REPORT_TYPE = "S";
   RX_ANALYZE_BY = "X";
   RX_RPT_DATE = TODAYS_DATE();
   RX_TIME = CURRENT_TIME();
   RX_USER = USER_NAME();
   RX_PAGE = 1;
   RX_COUNT = 0;
   RX_BK_TOTAL = 0;
   RX_PAX_TOTAL = 0;
   RX_TOTAL_GROSS = 0;
   RX_TOTAL_NET = 0;
   RX_TOTAL_LAND = 0;
   RX_TOTAL_AIR = 0;
   RX_TOTAL_PROFIT = 0;
   RX_TOUR_GD = 0;
   RX_BK_GD = 0;
   RX_PAX_GD = 0;
   RX_GROSS_GD = 0;
   RX_NET_GD = 0;
   RX_LAND_GD = 0;
   RX_AIR_GD = 0;
   RX_GD_PROFIT = 0;
   RX_LAST_CODE = "z";
   TOUR_QUADS = 0;
   HDR_TOUR_DESC2 = "";
   HDR_START_ON = 0;
   HDR_END_ON = 0;
   HDR_DEF_RATE = "F";
   HDR_DEF_CLASS = "S ";
   HDR_DEF_CUTOFF = 0;
   HDR_UPGRADE_AGCY = "A";
   HDR_INIT_STATUS = "OK";
   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_TOUR_CODE = "";
   BK_DEPARTURE = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;
   CURR_CODE = "";
   LAST_EX_DATE = TODAYS_DATE();
   COSTING_EXCH = 0;
   CURR_INT_DESC = "Dollar";
   AP_OPEN_TOUR_GL = 0;
   AP_SERVICES = "";
   AP_START_SVC = 0;
   AP_END_SVC = 0;
   AP_V_BASED_SEQ = 0;
   TK_MOD_CODE = "A";
   TK_TAX_P = 0;
   TK_ISSUE_UD_DATE = 0;
   TK_ARC_UD_DATE = 0;
   TK_DEP_UD_DATE = 0;
   TK_OR_UD_DATE = 0;
   TK_BK_DEP_DATE = 0;
   TK_UD_STATUS = 0;
   TK_CREDIT = "N";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_ANAL_TOUR_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_ANAL_TOUR_RECORD) );
   call OPEN_FILE (BK_TOUR_NO,"BK_TOUR",byteaddr(BK_TOUR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TOUR_NO,ERROR_CODE);
   call OPEN_FILE (BK_TOUR_HDR_NO,"BK_TOUR_HDR",byteaddr(BK_TOUR_HDR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TOUR_HDR_NO,ERROR_CODE);
   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
   call OPEN_FILE (AD_CURR_NO,"AD_CURR",byteaddr(AD_CURR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_CURR_NO,ERROR_CODE);
   call OPEN_FILE (AP_OPEN_NO,"AP_OPEN",byteaddr(AP_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_OPEN_NO,ERROR_CODE);
   call OPEN_FILE (TK_HEADER_NO,"TK_HEADER",byteaddr(TK_HEADER_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_HEADER_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	ANALYZE_MAIN
	Mainline logic to analyze the files
****************************************************************/

ANALYZE_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_ANALYZE_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_ANALYZE_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("SSHEET");
   call SETUP_PRINT_FORMAT (BK_ANAL_TOUR_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* SET_TEMP_FILE - Set up the temporary file */

   declare CREATE_TEMP entry(fixed binary,fixed binary);
   KEY_LENGTH =
      bytesize(RX_CODE) +
      bytesize(RX_CODE_2) +
      bytesize(RX_DATE) +
      bytesize(TOUR_NO);
   RECORD_LENGTH = KEY_LENGTH  +
      bytesize(TOUR_CODE) +
      bytesize(RX_BOOKINGS) +
      bytesize(RX_PAX) +
      bytesize(RX_GROSS) +
      bytesize(RX_NET) +
      bytesize(RX_TOUR_COST) +
      bytesize(RX_AIR_COST) +
      bytesize(RX_PROFIT) +
      bytesize(RX_MARGIN) +
      bytesize(RX_STATUS);
   call CREATE_TEMP(KEY_LENGTH,RECORD_LENGTH);
   %replace TEMP_DB by 512;
   call OPEN_FILE (TEMP_DB,"?TEMP_DB",byteaddr(TEMP_RECORD),ERROR_CODE);
   if ERROR_CODE ^= NORMAL_RETURN then
      do;
      END_ANALYZE_MAIN = YES;
      return;
      end;

   /* BEFORE_LOGIC - Before logic */


   /* CHECK_RX_REPORT - Report format? */

   if RX_REPORT_TYPE = "R" then
      do;

      /* CLOSE_LPT - Close the printer */

      call CLOSE_PRINTER;


      /* OPEN_RPT - Open the "REPORT" print file */

      call OPEN_PRINTER("REPORT");
      call SETUP_PRINT_FORMAT (BK_ANAL_TOUR_2);
      call PRINTING_OCCURRING;
      call DUMP_BUFFER;
      end;
   call PRT_PAGE_HEADING;


   /* SET_FIRST - Set the record pointer to the first rec */

   TOUR_DEP_DATE = RX_START_DATE;
   TOUR_NO = 0;
   call SET_POSITION (BK_TOUR_NO,KEY_AREA_3,ERROR_CODE);
   END_ANAL_THRU_FILE = NO;
   do while (END_ANAL_THRU_FILE ^= YES);
      call ANAL_THRU_FILE;
   end;

   /* SET_FIRST_TEMP - Set to the first record in the temp db */

   call SET_POSITION (TEMP_DB+?RESET,KEY_AREA_1,ERROR_CODE);

   END_PRINT_THRU_TEMP = NO;
   do while (END_PRINT_THRU_TEMP ^= YES);
      call PRINT_THRU_TEMP;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* CHECK_RX_TOTAL - Print the total? */

   if RX_REPORT_TYPE = "R" then
      do;

      /* PRT_GRAND_TOTAL - Print the grand total */


      /* CALC_TOTAL_MARGIN - CAlc the margin on the total */

      RX_TOTAL_MARGIN = 0;
      if RX_TOTAL_NET ^= 0 then
         RX_TOTAL_MARGIN = RX_TOTAL_PROFIT / RX_TOTAL_NET * 100;


      /* CALC_GD_MARGIN - Calc the margin for the grand total */

      RX_GD_MARGIN = 0;
      if RX_NET_GD ^= 0 then
         RX_GD_MARGIN = RX_GD_PROFIT / RX_NET_GD * 100;

      do LOOP_INDEX =   8 to  11;
         call PRINT_REPORT_LINE;
      end;
      end;


   /* CLOSE_TEMP_FILE - Close the temporary file */

   call CLOSE_FILE (TEMP_DB);


   /* RETURN - Normal Return */

   do;
   END_ANALYZE_MAIN = YES;
   return;
   end;

return;
end;	/* ANALYZE_MAIN         */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
RX_END_DATE = RX_START_DATE;
RX_END_CODE = RX_START_CODE;
do LOOP_INDEX =   1 to   7;
   if LOOP_INDEX =   1 then
      call DISPLAY_MSG_NO (108);
   if LOOP_INDEX =   2 then
      call DISPLAY_MSG_NO (112);
   if LOOP_INDEX =   5 then
      RX_END_DATE = RX_START_DATE;
   if LOOP_INDEX =   7 then
      RX_END_CODE = RX_START_CODE;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   6 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         RX_START_CODE = "";
         RX_END_CODE = "~";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  7,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  7 then
   do;

      LOOP_INDEX = SELECT;
   if LOOP_INDEX =   1 then
      call DISPLAY_MSG_NO (108);
   if LOOP_INDEX =   2 then
      call DISPLAY_MSG_NO (112);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   6 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         RX_START_CODE = "";
         RX_END_CODE = "~";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   6;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

RX_PAGE = RX_PAGE + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	ANAL_THRU_FILE
	Read sequentially thru file and analyze
****************************************************************/

ANAL_THRU_FILE:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (BK_TOUR_NO,KEY_AREA_3,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_TOUR_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (TOUR_DEP_DATE > RX_END_DATE) then
      do;
      END_ANAL_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CHECK_SELECT_RX - Set up and check tour criteria */

   if TOUR_STATUS = "XL" then
      return;

   if TOUR_STATUS = "NS" then
      return;

   RX_DATE = TOUR_DEP_DATE;

   if (RX_DATE < RX_START_DATE) ! (RX_DATE > RX_END_DATE) then
      return;


   /* FAKE_TOUR_INFO - Fake the booking tour info to get hdr */

   BK_TOUR_CODE = TOUR_CODE;
   BK_DEPARTURE = TOUR_DEP_DATE;


   /* GET_TOUR_HDR - Get the tour header */

   ERROR_CODE = NORMAL_RETURN;

   HDR_TOUR_CODE = BK_TOUR_CODE;
   HDR_END_ON = BK_DEPARTURE;
   if HDR_END_ON = 0 then
      HDR_END_ON = TODAYS_DATE();
   call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE ^= END_OF_FILE then
      call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

   if BK_TOUR_CODE ^= HDR_TOUR_CODE then
      ERROR_CODE = END_OF_FILE;
   if BK_DEPARTURE ^= 0 then if BK_DEPARTURE < HDR_START_ON then
      ERROR_CODE = END_OF_FILE;


   RX_CODE = "";
   if ERROR_CODE = NORMAL_RETURN then
      do;
      if RX_ANALYZE_BY = "T" then
         RX_CODE = HDR_TOUR_TYPE;
      if RX_ANALYZE_BY = "B" then
         RX_CODE = HDR_BROCHURE;
      if RX_ANALYZE_BY = "C" then
         RX_CODE = HDR_CARRIER;
      if RX_ANALYZE_BY = "P" then
         RX_CODE = HDR_PROD_CODE;
      end;

   if (RX_CODE < RX_START_CODE) ! (RX_CODE > RX_END_CODE) then
      return;

   RX_CODE_2 = "";
   if RX_TOUR_ORDER = "Y" then
      RX_CODE_2 = TOUR_CODE;

   RX_BOOKINGS = 0;
   RX_PAX = 0;
   RX_GROSS = 0;
   RX_NET = 0;
   RX_TOUR_COST = 0;
   RX_AIR_COST = 0;


   /* SET_FIRST_BK - Set up for read */

   BK_MODIFICATION = 0;
   BK_TOUR_NUM = TOUR_NO;
   BOOKING_NO = 0;
   call SET_POSITION (BK_BOOKING_NO,KEY_AREA_3,ERROR_CODE);
   END_RX_SCAN_BK = NO;
   do while (END_RX_SCAN_BK ^= YES);
      call RX_SCAN_BK;
   end;

   /* SET_FIRST_AP - Set to the first tour A/P detail */

   AP_OPEN_TOUR = TOUR_NO;
   AP_START_SVC = 0;
   AP_ENTRY_NO = 0;
   call SET_POSITION (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
   END_RX_SCAN_AP = NO;
   do while (END_RX_SCAN_AP ^= YES);
      call RX_SCAN_AP;
   end;

   RX_PROFIT = floor((RX_NET - RX_TOUR_COST - RX_AIR_COST) * 100 + 0.5) / 100;
   RX_MARGIN = 0;
   if RX_NET ^= 0 then
      RX_MARGIN = RX_PROFIT / RX_NET * 100;
   RX_STATUS = TOUR_STATUS;


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      end;
   FIRST_TIME = NO;

   /* ADD_TEMP_RECORD - Add this information to the temp file */

   declare FAKE_FIELD character(100) based;
   TEMP_RECORD =
      substr(byteaddr(RX_CODE)->FAKE_FIELD,1,bytesize(RX_CODE)) !!
      substr(byteaddr(RX_CODE_2)->FAKE_FIELD,1,bytesize(RX_CODE_2)) !!
      substr(byteaddr(RX_DATE)->FAKE_FIELD,1,bytesize(RX_DATE)) !!
      substr(byteaddr(TOUR_NO)->FAKE_FIELD,1,bytesize(TOUR_NO)) !!
      substr(byteaddr(TOUR_CODE)->FAKE_FIELD,1,bytesize(TOUR_CODE)) !!
      substr(byteaddr(RX_BOOKINGS)->FAKE_FIELD,1,bytesize(RX_BOOKINGS)) !!
      substr(byteaddr(RX_PAX)->FAKE_FIELD,1,bytesize(RX_PAX)) !!
      substr(byteaddr(RX_GROSS)->FAKE_FIELD,1,bytesize(RX_GROSS)) !!
      substr(byteaddr(RX_NET)->FAKE_FIELD,1,bytesize(RX_NET)) !!
      substr(byteaddr(RX_TOUR_COST)->FAKE_FIELD,1,bytesize(RX_TOUR_COST)) !!
      substr(byteaddr(RX_AIR_COST)->FAKE_FIELD,1,bytesize(RX_AIR_COST)) !!
      substr(byteaddr(RX_PROFIT)->FAKE_FIELD,1,bytesize(RX_PROFIT)) !!
      substr(byteaddr(RX_MARGIN)->FAKE_FIELD,1,bytesize(RX_MARGIN)) !!
      substr(byteaddr(RX_STATUS)->FAKE_FIELD,1,bytesize(RX_STATUS));

   /* WRITE_TEMP_RECORD - Write the temporary record */

   call WRITE_RECORD (TEMP_DB,ERROR_CODE);


   /* OTHER_LOGIC - Any other logic */

return;
end;	/* ANAL_THRU_FILE       */

/****************************************************************
	RX_SCAN_BK
	Scan all the bookings and air
****************************************************************/

RX_SCAN_BK:
	procedure;


   /* READ_NEXT_BK - Read the next booking record */

   call READ_NEXT (BK_BOOKING_NO,KEY_AREA_3,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_BOOKING_NO,ERROR_CODE);

   /* CHECK_END_BK - No bookings = no docs */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_MODIFICATION > 0) !
   (BK_TOUR_NUM > TOUR_NO) then
      do;
      END_RX_SCAN_BK = YES;
      return;
      end;

   /* SKIP_XL_BK - Skip cancelled bookings */

   if BK_STATUS = "XL" then
      return;


   /* SKIP_NS_BK - Skip bookings with no status */

   if BK_STATUS = "NS" then
      return;


   /* ADD_RX_BK - Add the booking totals */

   RX_BOOKINGS = RX_BOOKINGS + 1;
   RX_PAX = RX_PAX + BK_PAX;
   RX_GROSS = floor((RX_GROSS + BK_TOUR_PRICE) * 100 + 0.5) / 100;
   RX_NET = floor((RX_NET + BK_NET_PRICE) * 100 + 0.5) / 100;


   /* SET_FIRST_TKHDR - Set to the first header record */

   TK_MODIFICATION = 0;
   TK_BK_TK_NO = BOOKING_NO;
   TK_ALT_SEQ = 0;
   TK_ANSW_SEQ = 0;
   call SET_POSITION (TK_HEADER_NO,KEY_AREA_1,ERROR_CODE);
   END_RX_SCAN_AIR = NO;
   do while (END_RX_SCAN_AIR ^= YES);
      call RX_SCAN_AIR;
   end;
return;
end;	/* RX_SCAN_BK           */

/****************************************************************
	RX_SCAN_AIR
	Scan the air detail
****************************************************************/

RX_SCAN_AIR:
	procedure;


   /* READ_NEXT_AIRH - Read the next air header */

   call READ_NEXT (TK_HEADER_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (TK_HEADER_NO,ERROR_CODE);

   /* CHECK_END_TKHDR - Last TK header? */

   if (ERROR_CODE = END_OF_FILE) !
   (TK_MODIFICATION > 0) !
   (TK_BK_TK_NO > BOOKING_NO) then
      do;
      END_RX_SCAN_AIR = YES;
      return;
      end;

   /* ADD_RX_AIR - Add the cost of this ticket */

   if (TOUR_DEPARTED = "Y") ! (TOUR_STATUS = "XL") then
      if TK_ALT_SEQ = 0 then
         return;

   if (TK_ALT_SEQ = 0) & (TK_ANSW_SEQ = 0) then
      do;
      ERROR_CODE = NORMAL_RETURN;
      do while (ERROR_CODE = NORMAL_RETURN);
         call READ_NEXT(TK_HEADER_NO+?KEY_ONLY,KEY_AREA_1,ERROR_CODE);
         if (TK_MODIFICATION > BK_MODIFICATION) !
         (TK_BK_TK_NO > BOOKING_NO) then
            ERROR_CODE = END_OF_FILE;
         if ERROR_CODE = NORMAL_RETURN then
            if TK_ANSW_SEQ = 0 then
               BK_PAX = BK_PAX - 1;
      end;

      /* SET_FIRST_TKHDR - Set to the first header record */

      TK_MODIFICATION = 0;
      TK_BK_TK_NO = BOOKING_NO;
      TK_ALT_SEQ = 0;
      TK_ANSW_SEQ = 0;
      call SET_POSITION (TK_HEADER_NO,KEY_AREA_1,ERROR_CODE);

      /* READ_NEXT_AIRH - Read the next air header */

      call READ_NEXT (TK_HEADER_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE > 3 then
      	call PRINT_ERROR (TK_HEADER_NO,ERROR_CODE);
      if BK_PAX <= 0 then
         return;
      end;

   if TK_VOID = "Y" then
      TK_NET = 0;

   if (TK_ALT_SEQ = 0) & (TK_ANSW_SEQ = 0) then
      do;
      if (TK_UD_STATUS = XL_TK) ! (TK_UD_STATUS = XLD_TK) then
         TK_NET = 0;
      RX_AIR_COST =floor((RX_AIR_COST + TK_NET * BK_PAX) * 100 + 0.5) / 100;
      end;
   else
      do;
      RX_AIR_COST = floor((RX_AIR_COST + TK_NET) * 100 + 0.5) / 100;
      end;

return;
end;	/* RX_SCAN_AIR          */

/****************************************************************
	RX_SCAN_AP
	Scan the tour costs
****************************************************************/

RX_SCAN_AP:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_AD_CURR        fixed binary (15);

   /* READ_NEXT_APT - Read the next A/P tour detail */

   call READ_NEXT (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AP_OPEN_NO,ERROR_CODE);

   /* CHECK_END_APT - Last A/P detail for this tour? */

   if (ERROR_CODE = END_OF_FILE) !
   (AP_OPEN_TOUR > TOUR_NO) then
      do;
      END_RX_SCAN_AP = YES;
      return;
      end;

   /* SET_TOUR_BAL - Fake tour balances for estimates */

   if AP_ENTRY_TYPE = DEP_EST then
      do;
      AP_VEN_INV_AMT = AP_DEP_EST;
      AP_VEN_INV_USD = AP_DEP_EST_USD;
      AP_INV_BAL = AP_DEP_EST;
      AP_INV_BAL_USD = AP_DEP_EST_USD;
      end;
   if AP_ENTRY_TYPE = FIN_EST then
      do;
      AP_VEN_INV_AMT = AP_FINL_EST;
      AP_VEN_INV_USD = 0;
      AP_INV_BAL = AP_FINL_EST;
      if (AP_GL_STATUS ^= NO_VCHR) &
         (AP_GL_STATUS ^= REC_ACK) &
         (AP_GL_STATUS ^= VCHR_PRTD) &
         (AP_GL_STATUS ^= MAN_FINL) then
            AP_INV_BAL = 0;
      AP_INV_BAL_USD = 0;
      end;


   /* ADD_RX_AP - Add the tour cost for this voucher */

   if AP_ENTRY_TYPE = FIN_EST then
      do;
      CURR_CODE = AP_OPEN_CURR;

      /* READ_CURR - Read in the currency */

      call READ_KEYED (AD_CURR_NO,KEY_AREA_1,ERROR_AD_CURR);
      if ERROR_AD_CURR > 3 then
         call PRINT_ERROR (AD_CURR_NO,ERROR_AD_CURR);
      if ERROR_AD_CURR ^= NORMAL_RETURN then
         LAST_EXCHANGE = 0;
      AP_PAID_USD = AP_VEN_INV_AMT * LAST_EXCHANGE;
      end;

   if (AP_ENTRY_TYPE = PRPYMT) !
      (AP_ENTRY_TYPE = DR_MEMO) !
      (AP_ENTRY_TYPE = DIST_PP) !
      (AP_ENTRY_TYPE = DIST_DR) then
         do;
         AP_INV_BAL = 0;
         AP_PAID_USD = 0;
         end;

   if AP_INV_BAL ^= 0 then
      AP_PAID_USD = AP_PAID_USD + AP_INV_BAL_USD;

   RX_TOUR_COST = floor((RX_TOUR_COST + AP_PAID_USD) * 100 + 0.5) / 100;

return;
end;	/* RX_SCAN_AP           */

/****************************************************************
	PRINT_THRU_TEMP
	Read thru the data file and print/write
****************************************************************/

PRINT_THRU_TEMP:
	procedure;


   /* READ_NEXT_TEMP - Read the next temp record */

   call READ_NEXT (TEMP_DB,KEY_AREA_1,ERROR_CODE);


   /* RETURN_IF_EOF - Return if end-of-file error */

   if ERROR_CODE = END_OF_FILE then
      do;
      END_PRINT_THRU_TEMP = YES;
      return;
      end;


   /* GET_TEMP_FILE - Set up all the fields for the temp rec. */

   declare MOVE_FIELD character (100) based;
   declare FIELDPTR pointer;
   declare FIELDBIN fixed binary(31) defined(FIELDPTR);
   FIELDPTR = byteaddr(TEMP_RECORD);
   substr(byteaddr(RX_CODE)->MOVE_FIELD,1,bytesize(RX_CODE)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(RX_CODE));
   FIELDBIN = FIELDBIN + bytesize(RX_CODE);
   substr(byteaddr(RX_CODE_2)->MOVE_FIELD,1,bytesize(RX_CODE_2)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(RX_CODE_2));
   FIELDBIN = FIELDBIN + bytesize(RX_CODE_2);
   substr(byteaddr(RX_DATE)->MOVE_FIELD,1,bytesize(RX_DATE)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(RX_DATE));
   FIELDBIN = FIELDBIN + bytesize(RX_DATE);
   substr(byteaddr(TOUR_NO)->MOVE_FIELD,1,bytesize(TOUR_NO)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(TOUR_NO));
   FIELDBIN = FIELDBIN + bytesize(TOUR_NO);
   substr(byteaddr(TOUR_CODE)->MOVE_FIELD,1,bytesize(TOUR_CODE)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(TOUR_CODE));
   FIELDBIN = FIELDBIN + bytesize(TOUR_CODE);
   substr(byteaddr(RX_BOOKINGS)->MOVE_FIELD,1,bytesize(RX_BOOKINGS)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(RX_BOOKINGS));
   FIELDBIN = FIELDBIN + bytesize(RX_BOOKINGS);
   substr(byteaddr(RX_PAX)->MOVE_FIELD,1,bytesize(RX_PAX)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(RX_PAX));
   FIELDBIN = FIELDBIN + bytesize(RX_PAX);
   substr(byteaddr(RX_GROSS)->MOVE_FIELD,1,bytesize(RX_GROSS)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(RX_GROSS));
   FIELDBIN = FIELDBIN + bytesize(RX_GROSS);
   substr(byteaddr(RX_NET)->MOVE_FIELD,1,bytesize(RX_NET)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(RX_NET));
   FIELDBIN = FIELDBIN + bytesize(RX_NET);
   substr(byteaddr(RX_TOUR_COST)->MOVE_FIELD,1,bytesize(RX_TOUR_COST)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(RX_TOUR_COST));
   FIELDBIN = FIELDBIN + bytesize(RX_TOUR_COST);
   substr(byteaddr(RX_AIR_COST)->MOVE_FIELD,1,bytesize(RX_AIR_COST)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(RX_AIR_COST));
   FIELDBIN = FIELDBIN + bytesize(RX_AIR_COST);
   substr(byteaddr(RX_PROFIT)->MOVE_FIELD,1,bytesize(RX_PROFIT)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(RX_PROFIT));
   FIELDBIN = FIELDBIN + bytesize(RX_PROFIT);
   substr(byteaddr(RX_MARGIN)->MOVE_FIELD,1,bytesize(RX_MARGIN)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(RX_MARGIN));
   FIELDBIN = FIELDBIN + bytesize(RX_MARGIN);
   substr(byteaddr(RX_STATUS)->MOVE_FIELD,1,bytesize(RX_STATUS)) =
      substr(FIELDPTR->MOVE_FIELD,1,bytesize(RX_STATUS));
   FIELDBIN = FIELDBIN + bytesize(RX_STATUS);

   /* PRT_DETAIL - Print the detail lines */


   /* CHECK_RX_FORMAT - Spreadsheet format? */

   if RX_ANALYZE_BY = "X" then if RX_TOUR_ORDER = "Y" then
      RX_CODE = RX_CODE_2;
   if RX_REPORT_TYPE = "R" then
      do;
      if RX_LAST_CODE ^= RX_CODE then
         do;
         if RX_LAST_CODE ^= "z" then
            do;

            /* PRINT_LINE_T1 - Print lines */


            /* CALC_TOTAL_MARGIN - CAlc the margin on the total */

            RX_TOTAL_MARGIN = 0;
            if RX_TOTAL_NET ^= 0 then
               RX_TOTAL_MARGIN = RX_TOTAL_PROFIT / RX_TOTAL_NET * 100;

            do LOOP_INDEX =   8 to   9;
               call PRINT_REPORT_LINE;
            end;

            /* SET_FIELDS - Set the values for these fields */

            RX_COUNT = 0;
            RX_BK_TOTAL = 0;
            RX_PAX_TOTAL = 0;
            RX_TOTAL_GROSS = 0;
            RX_TOTAL_NET = 0;
            RX_TOTAL_LAND = 0;
            RX_TOTAL_AIR = 0;
            RX_TOTAL_PROFIT = 0;
            RX_TOTAL_MARGIN = 0;
            end;
         RX_LAST_CODE = RX_CODE;
         end;

      /* PRINT_LINE_D -  */

      do LOOP_INDEX =   7 to   7;
         call PRINT_REPORT_LINE;
      end;

      /* ADD_TOTALS - Add to the total fields */

      RX_COUNT = RX_COUNT + 1;
      RX_BK_TOTAL = RX_BK_TOTAL + RX_BOOKINGS;
      RX_PAX_TOTAL = RX_PAX_TOTAL + RX_PAX;
      RX_TOTAL_GROSS = floor((RX_TOTAL_GROSS + RX_GROSS) * 100 + 0.5) / 100;
      RX_TOTAL_NET = floor((RX_TOTAL_NET + RX_NET) * 100 + 0.5) / 100;
      RX_TOTAL_LAND = floor((RX_TOTAL_LAND + RX_TOUR_COST) * 100 + 0.5) / 100;
      RX_TOTAL_AIR = floor((RX_TOTAL_AIR + RX_AIR_COST) * 100 + 0.5) / 100;
      RX_TOTAL_PROFIT = floor((RX_TOTAL_PROFIT + RX_PROFIT) * 100 + 0.5) / 100;
      RX_TOUR_GD = RX_TOUR_GD + 1;
      RX_BK_GD = RX_BK_GD + RX_BOOKINGS;
      RX_PAX_GD = RX_PAX_GD + RX_PAX;
      RX_GROSS_GD = floor((RX_GROSS_GD + RX_GROSS) * 100 + 0.5) / 100;
      RX_NET_GD = floor((RX_NET_GD + RX_NET) * 100 + 0.5) / 100;
      RX_LAND_GD = floor((RX_LAND_GD + RX_TOUR_COST) * 100 + 0.5) / 100;
      RX_AIR_GD = floor((RX_AIR_GD + RX_AIR_COST) * 100 + 0.5) / 100;
      RX_GD_PROFIT = floor((RX_GD_PROFIT + RX_PROFIT) * 100 + 0.5) / 100;
      return;
      end;

   do LOOP_INDEX =   7 to   7;
      call SPREAD_SHEET_OUT(LOOP_INDEX);
   end;
return;
end;	/* PRINT_THRU_TEMP      */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (BK_TOUR_NO);
   call CLOSE_FILE (BK_TOUR_HDR_NO);
   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_FILE (AD_CURR_NO);
   call CLOSE_FILE (AP_OPEN_NO);
   call CLOSE_FILE (TK_HEADER_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
