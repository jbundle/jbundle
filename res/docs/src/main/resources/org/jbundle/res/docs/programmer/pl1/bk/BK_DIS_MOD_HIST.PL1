/****************************************************************
	Module: BK_DIS_MOD_HIST
	Top Level Logic: MOD_DIS_LOGIC
	Date: 23-Sep-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_DIS_MOD_HIST
	Display booking mod hist top-level
****************************************************************/

%replace BK_DIS_MOD_HIST_1 by 366;
%replace BK_DIS_MOD_HIST_2 by 750;
BK_DIS_MOD_HIST:
   procedure(
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_PASSENGERS_RECORD,
      BK_LINE_RECORD);
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_PASSENGERS_NO by  49;
%replace BK_LINE_NO by  51;
%include "BK_DIS_MOD_HIST.DD";
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_PASSENGERS.DD";
%include "BK_LINE.DD";

declare		ERROR_CODE           fixed binary (15);
declare		END_DISPLAY_MODS     bit (1);
declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_BOOKING     fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		END_PROCESS_MOD      bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
   call INITIALIZE;
   call DIS_MOD_MAIN;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   MOD_NO = BK_NEXT_MOD;
   OLD_TOUR_NUM = 0;
   MOD_OFFSET = -1;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_DIS_MOD_HIST_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_DIS_MOD_HIST_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	DIS_MOD_MAIN
	Mainline logic
****************************************************************/

DIS_MOD_MAIN:
	procedure;

declare		ERROR_BK_TOUR        fixed binary (15);

   /* CHECK_BOOKING - Is this a booking-in-progress? */

   if BOOKING_NO = 0 then
      return;


   /* CHECK_ALL_INFO - Are all Agency, Pax, and Tour in? */

   if BK_AGENCY = -1 then
      do;
      call DISPLAY_MESSAGE ("Agency not entered!");
      call PRESS_RETURN;
      return;
      end;

   if BK_PAX = 0 then
      do;
      call DISPLAY_MESSAGE ("Passengers not entered!");
      call PRESS_RETURN;
      return;
      end;

   if BK_TOUR_NUM = 0 then
      do;
      call DISPLAY_MESSAGE ("Tour not entered!");
      call PRESS_RETURN;
      return;
      end;


   /* SAVE_BK_INFO - Save the current booking for a sec */

   declare BOOKING_NO_SAVE fixed binary(31);
   BOOKING_NO_SAVE = BOOKING_NO;

   if BOOKING_NO ^= 0 then
      do;

      /* UPDATE_BOOK_NUL - Update the booking record - Don't unlock */

      call UPDATE_RECORD (BK_BOOKING_NO+?LOCK_RECORD,ERROR_CODE);
      end;

   END_DISPLAY_MODS = NO;
   do while (END_DISPLAY_MODS ^= YES);
      call DISPLAY_MODS;
   end;

   /* RESTORE_BK_INFO - Restore the original booking information */

   if BOOKING_NO_SAVE = 0 then
      do;

      /* INIT_HDR_DATA - Zero everything before starting */

      BOOKING_NO = 0;
      BK_MODIFICATION = 0;
      BK_NEXT_MOD = 0;
      BK_AGENCY = -1;
      BK_PAX = 0;
      BK_TOUR_NUM = 0;
      BK_TOUR_CODE = "";
      BK_DEPARTURE = 0;

      TOUR_NO = 0;
      TOUR_DEP_DATE = 0;
      TOUR_TYPE = " ";
      TOUR_RATE_DEF = "";
      TOUR_RATE_CLASS = "";
      TOUR_DEF_CUTOFF = 0;

      HDR_TOUR_CODE = "";
      HDR_END_ON = 0;

      end;
   else
      do;
      if (BK_MODIFICATION ^= 0) ! (BOOKING_NO ^= BOOKING_NO_SAVE) then
         do;
         BK_MODIFICATION = 0;
         BOOKING_NO = BOOKING_NO_SAVE;

         /* READ_BOOK_LOCK - Read the booking record and lock it */

         call READ_KEYED (BK_BOOKING_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_BK_BOOKING);
         if ERROR_BK_BOOKING = RECORD_LOCKED then
            do;
            call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
            call PRESS_RETURN;
            end;
         if ERROR_BK_BOOKING > 3 then
            call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
         end;
      end;

   /* RESTORE_BK_TOUR - Restore the tour and tour header info */

   if BOOKING_NO ^= 0 then
      do;
      if BK_TOUR_CODE ^= "" then if BK_DEPARTURE ^= 0 then
         if (BK_TOUR_CODE ^= HDR_TOUR_CODE) !
            (BK_DEPARTURE < HDR_START_ON) ! (BK_DEPARTURE > HDR_END_ON) then
               do;

               /* GET_TOUR_HDR - Get the tour header */

               ERROR_CODE = NORMAL_RETURN;

               HDR_TOUR_CODE = BK_TOUR_CODE;
               HDR_END_ON = BK_DEPARTURE;
               if HDR_END_ON = 0 then
                  HDR_END_ON = TODAYS_DATE();
               call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE ^= END_OF_FILE then
                  call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

               if BK_TOUR_CODE ^= HDR_TOUR_CODE then
                  ERROR_CODE = END_OF_FILE;
               if BK_DEPARTURE ^= 0 then if BK_DEPARTURE < HDR_START_ON then
                  ERROR_CODE = END_OF_FILE;

               end;
      if BK_TOUR_NUM ^= 0 then
         if BK_TOUR_NUM ^= TOUR_NO then
            do;
            TOUR_NO = BK_TOUR_NUM;

            /* READ_TOUR_REC - Read the tour file record */

            call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_BK_TOUR);
            if ERROR_BK_TOUR > 3 then
               call PRINT_ERROR (BK_TOUR_NO,ERROR_BK_TOUR);
            end;
      end;


return;
end;	/* DIS_MOD_MAIN         */

/****************************************************************
	DISPLAY_MODS
	Display modifications
****************************************************************/

DISPLAY_MODS:
	procedure;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (BK_DIS_MOD_HIST_1);
   NOT_FIRST_TIME = YES;

   /* DIS_MOD_HIST - Diplay the mod. history */

   do BK_MODIFICATION = 1 to MOD_NO;

      /* DISPLAY_MOD - Display the modification */


         /* READ_RECORD - Read the record */

         call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_BK_BOOKING);
         if ERROR_BK_BOOKING > 3 then
            call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);

         /* SET_XS - Set the display array for changes */

         MOD_TOUR = " ";
         MOD_HOTEL = " ";
         MOD_LAND = " ";
         MOD_REMARK = " ";
         MOD_AIR = " ";
         MOD_LINE = " ";
         MOD_PAX = " ";

         if ERROR_BK_BOOKING = NORMAL_RETURN then
            do;
            if OLD_TOUR_NUM ^= BK_TOUR_NUM then
               MOD_TOUR = "T";
            if BK_NEXT_MOD = BK_HOTEL_MOD then
               MOD_HOTEL = "H";
            if BK_NEXT_MOD = BK_TOUR_MOD then
               MOD_LAND = "L";
            if BK_NEXT_MOD = BK_REMARK_MOD then
               MOD_REMARK = "R";
            if BK_NEXT_MOD = BK_AIR_MOD then
               MOD_AIR = "A";
            if BK_NEXT_MOD = BK_LINE_CHGD then
               MOD_LINE = "$";
            if BK_NEXT_MOD = BK_PAX_CHGD then
               MOD_PAX = "P";

            OLD_TOUR_NUM = BK_TOUR_NUM;
            end;
         else
            do;
            if BK_MODIFICATION = 1 then
               do;
               BK_MOD_BY = BK_RES_AGENT;
               BK_MOD_DATE = BK_DATE;
               MOD_PAX = "P";
               MOD_LINE = "$";
               MOD_AIR = "A";
               MOD_REMARK = "R";
               MOD_LAND = "L";
               MOD_HOTEL = "H";
               MOD_TOUR = "T";
               end;
            else
               do;
               BK_MOD_BY = "";
               BK_MOD_DATE = 0;
               end;
            end;


         /* SET_LAST_OS - Set the next offset for display */

         MOD_OFFSET = MOD_OFFSET + 1;
         if MOD_OFFSET > 14 then
            do;
            MOD_OFFSET = 0;

            /* ENTER_MOD - Enter mod number to display */


               /* RESET_OFFSET - Set row offset to 0 */

               call SET_ROW_OFFSET(0);

               call ENTER_DATA_C;

               /* CHECK_MOD - Process if a valid mod is entered */

               if RETURN_CODE = END_TYPED then
                  do;
                  END_DISPLAY_MODS = YES;
                  return;
                  end;

               if MOD_NUMBER ^= 0 then
                  do;
                  END_PROCESS_MOD = NO;
                  do while (END_PROCESS_MOD ^= YES);
                     call PROCESS_MOD;
                  end;
                  MOD_OFFSET = -1;
                  return;
                  end;


            /* DISPLAY_SCREEN - Display the screen */

            call OPEN_SCREEN;
            call DISPLAY_SCREEN (BK_DIS_MOD_HIST_1);
            end;

         call SET_ROW_OFFSET(MOD_OFFSET);

         call DISPLAY_DATA_B;
   end;


   /* RESET_MOD - Reset the modification revision */

   BK_MODIFICATION = 0;


   /* READ_RECORD - Read the record */

   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_BK_BOOKING);
   if ERROR_BK_BOOKING > 3 then
      call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);

   /* SET_XS - Set the display array for changes */

   MOD_TOUR = " ";
   MOD_HOTEL = " ";
   MOD_LAND = " ";
   MOD_REMARK = " ";
   MOD_AIR = " ";
   MOD_LINE = " ";
   MOD_PAX = " ";

   if ERROR_BK_BOOKING = NORMAL_RETURN then
      do;
      if OLD_TOUR_NUM ^= BK_TOUR_NUM then
         MOD_TOUR = "T";
      if BK_NEXT_MOD = BK_HOTEL_MOD then
         MOD_HOTEL = "H";
      if BK_NEXT_MOD = BK_TOUR_MOD then
         MOD_LAND = "L";
      if BK_NEXT_MOD = BK_REMARK_MOD then
         MOD_REMARK = "R";
      if BK_NEXT_MOD = BK_AIR_MOD then
         MOD_AIR = "A";
      if BK_NEXT_MOD = BK_LINE_CHGD then
         MOD_LINE = "$";
      if BK_NEXT_MOD = BK_PAX_CHGD then
         MOD_PAX = "P";

      OLD_TOUR_NUM = BK_TOUR_NUM;
      end;
   else
      do;
      if BK_MODIFICATION = 1 then
         do;
         BK_MOD_BY = BK_RES_AGENT;
         BK_MOD_DATE = BK_DATE;
         MOD_PAX = "P";
         MOD_LINE = "$";
         MOD_AIR = "A";
         MOD_REMARK = "R";
         MOD_LAND = "L";
         MOD_HOTEL = "H";
         MOD_TOUR = "T";
         end;
      else
         do;
         BK_MOD_BY = "";
         BK_MOD_DATE = 0;
         end;
      end;


   /* SET_LAST_OS - Set the next offset for display */

   MOD_OFFSET = MOD_OFFSET + 1;
   if MOD_OFFSET > 14 then
      do;
      MOD_OFFSET = 0;

      /* ENTER_MOD - Enter mod number to display */


         /* RESET_OFFSET - Set row offset to 0 */

         call SET_ROW_OFFSET(0);

         call ENTER_DATA_C;

         /* CHECK_MOD - Process if a valid mod is entered */

         if RETURN_CODE = END_TYPED then
            do;
            END_DISPLAY_MODS = YES;
            return;
            end;

         if MOD_NUMBER ^= 0 then
            do;
            END_PROCESS_MOD = NO;
            do while (END_PROCESS_MOD ^= YES);
               call PROCESS_MOD;
            end;
            MOD_OFFSET = -1;
            return;
            end;


      /* DISPLAY_SCREEN - Display the screen */

      call OPEN_SCREEN;
      call DISPLAY_SCREEN (BK_DIS_MOD_HIST_1);
      end;

   call SET_ROW_OFFSET(MOD_OFFSET);

   call DISPLAY_DATA_B;

   /* ENTER_MOD - Enter mod number to display */


      /* RESET_OFFSET - Set row offset to 0 */

      call SET_ROW_OFFSET(0);

      call ENTER_DATA_C;

      /* CHECK_MOD - Process if a valid mod is entered */

      if RETURN_CODE = END_TYPED then
         do;
         END_DISPLAY_MODS = YES;
         return;
         end;

      if MOD_NUMBER ^= 0 then
         do;
         END_PROCESS_MOD = NO;
         do while (END_PROCESS_MOD ^= YES);
            call PROCESS_MOD;
         end;
         MOD_OFFSET = -1;
         return;
         end;


   /* RETURN - Normal Return */

   do;
   END_DISPLAY_MODS = YES;
   return;
   end;

return;
end;	/* DISPLAY_MODS         */

/****************************************************************
	ENTER_DATA_C
	Enter the screen data in group C
****************************************************************/

ENTER_DATA_C:
	procedure;

do LOOP_INDEX =  23 to  23;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_C         */

/****************************************************************
	PROCESS_MOD
	Read this mod and display menu
****************************************************************/

PROCESS_MOD:
	procedure;


   /* DISPLAY_SCREEN_2 - Display the second screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_DIS_MOD_HIST_2);

   /* SETUP_KEY - Set up this key for a read */

   BK_MODIFICATION = MOD_NUMBER;
   KEY_NO = 1;

   /* READ_RECORD - Read the record */

   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_BK_BOOKING);
   if ERROR_BK_BOOKING > 3 then
      call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);

   /* RETURN_IF_BK_ERR - Return if read error */

   if ERROR_BK_BOOKING ^= NORMAL_RETURN then
      do;
      END_PROCESS_MOD = YES;
      return;
      end;

   call DISPLAY_DATA_D;

   /* INPUT_OPTION - Input the option on the screen */

   call INPUT_FIELD ( 14,INPUT_LENGTH,RETURN_CODE);
   if (MOD_SELECT = 0) !
        (RETURN_CODE ^= NORMAL_RETURN) then
      do;
      END_PROCESS_MOD = YES;
      return;
      end;

   /* FIND_MOD_MOD - Now that option selected, find detl mod */

   if MOD_SELECT > 7 then
      return;

   do BK_MODIFICATION = MOD_NUMBER + 1 to MOD_NO;


      /* READ_RECORD - Read the record */

      call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_BK_BOOKING);
      if ERROR_BK_BOOKING > 3 then
         call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);

      do case (MOD_SELECT);
         MOD_NEXT_MOD = BK_HOTEL_MOD;
         MOD_NEXT_MOD = BK_TOUR_MOD;
         MOD_NEXT_MOD = BK_AIR_MOD;
         MOD_NEXT_MOD = BK_REMARK_MOD;
         MOD_NEXT_MOD = BK_REMARK_MOD;
         MOD_NEXT_MOD = BK_PAX_CHGD;
         MOD_NEXT_MOD = BK_LINE_CHGD;
      end;

      if BK_NEXT_MOD = MOD_NEXT_MOD then
         goto END_LOOP;

   end;

   BK_MODIFICATION = 0;

   /* READ_RECORD - Read the record */

   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_BK_BOOKING);
   if ERROR_BK_BOOKING > 3 then
      call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);

   do case (MOD_SELECT);
      MOD_NEXT_MOD = BK_HOTEL_MOD;
      MOD_NEXT_MOD = BK_TOUR_MOD;
      MOD_NEXT_MOD = BK_AIR_MOD;
      MOD_NEXT_MOD = BK_REMARK_MOD;
      MOD_NEXT_MOD = BK_REMARK_MOD;
      MOD_NEXT_MOD = BK_PAX_CHGD;
      MOD_NEXT_MOD = BK_LINE_CHGD;
   end;

   if BK_NEXT_MOD ^= MOD_NEXT_MOD then
      MOD_NEXT_MOD = 0;

   END_LOOP:
   BK_MODIFICATION = MOD_NEXT_MOD;
   BK_PAX_SEQ = 0;
   BK_PAX_SHARE_SEQ = 0;


   /* CALL_PROGRAM - Dispatch to the right program */

   %include "BK_MOD_HOTEL.DCL";
   %include "BK_MOD_LAND.DCL";
   %include "BK_MOD_AIR.DCL";
   %include "BK_MOD_REMARK.DCL";
   %include "BK_MOD_COMMENT.DCL";
   %include "BK_MOD_PAX.DCL";
   %include "BK_MOD_LINE.DCL";
   do case (MOD_SELECT);
         /* Option   1 */
      call BK_MOD_HOTEL(
         BK_TOUR_HDR_RECORD,
         BK_TOUR_RECORD,
         BK_BOOKING_RECORD,
         BK_PASSENGERS_RECORD);
         /* Option   2 */
      call BK_MOD_LAND(
         BK_TOUR_HDR_RECORD,
         BK_TOUR_RECORD,
         BK_BOOKING_RECORD,
         BK_PASSENGERS_RECORD);
         /* Option   3 */
      call BK_MOD_AIR(
         BK_TOUR_HDR_RECORD,
         BK_TOUR_RECORD,
         BK_BOOKING_RECORD,
         BK_PASSENGERS_RECORD);
         /* Option   4 */
      call BK_MOD_REMARK(
         BK_TOUR_HDR_RECORD,
         BK_TOUR_RECORD,
         BK_BOOKING_RECORD,
         BK_PASSENGERS_RECORD);
         /* Option   5 */
      call BK_MOD_COMMENT(
         BK_TOUR_HDR_RECORD,
         BK_TOUR_RECORD,
         BK_BOOKING_RECORD,
         BK_PASSENGERS_RECORD);
         /* Option   6 */
      call BK_MOD_PAX(
         BK_TOUR_HDR_RECORD,
         BK_TOUR_RECORD,
         BK_BOOKING_RECORD,
         BK_PASSENGERS_RECORD);
         /* Option   7 */
      call BK_MOD_LINE(
         BK_TOUR_HDR_RECORD,
         BK_TOUR_RECORD,
         BK_BOOKING_RECORD,
         BK_LINE_RECORD);
   end;
   otherwise
      do;
      end;
return;
end;	/* PROCESS_MOD          */

/****************************************************************
	DISPLAY_DATA_D
	Display the data in screen group D
****************************************************************/

DISPLAY_DATA_D:
	procedure;

do LOOP_INDEX =  11 to  13;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_D       */

/****************************************************************
	DISPLAY_DATA_B
	Display the screen data in group B
****************************************************************/

DISPLAY_DATA_B:
	procedure;

do LOOP_INDEX =  11 to  21;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_B       */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
