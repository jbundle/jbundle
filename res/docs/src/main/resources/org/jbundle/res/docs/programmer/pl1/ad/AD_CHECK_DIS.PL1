/****************************************************************
	Module: AD_CHECK_DIS
	Top Level Logic: TABLE_FILE_DIS
	Date: 24-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AD_CHECK_DIS
	Display table logic
****************************************************************/

%replace AD_CHECK_DIS_1 by  83;
AD_CHECK_DIS:
   procedure;
%replace AD_ACCT_NO by  24;
%replace AD_CHECKING_NO by  26;
%include "AD_ACCT.DD";
%include "AD_CHECK_DIS.DD";
%include "AD_CHECKING.DD";

declare		END_DISPLAY_IO       bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		END_READ_THRU_CHECKS bit (1);
   call INITIALIZE;
   END_DISPLAY_IO = NO;
   do while (END_DISPLAY_IO ^= YES);
      call DISPLAY_IO;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AD_BALANCE = 0;
   AD_LAST_CHECK = 0;
   AD_LAST_SEQ = 0;
   AD_TRX_SEQ = 0;
   AD_CHECK_TYPE = "M";
   AD_SYS_NUMBER = "";
   AD_TRX_AMT_USD = 0;
   AD_DATE_RECONCILED = 0;
   AD_MANUAL = "Y";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AD_CHECK_DIS_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (AD_ACCT_NO,"AD_ACCT",byteaddr(AD_ACCT_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_ACCT_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (AD_CHECK_DIS_RECORD) );
   call OPEN_FILE (AD_CHECKING_NO,"AD_CHECKING",byteaddr(AD_CHECKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_CHECKING_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	DISPLAY_IO
	Main logic for table display
****************************************************************/

DISPLAY_IO:
	procedure;


   /* RESET_INPUT_ERROR - Set input error to NO */

   ERROR_INPUT_SCREEN = NO;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (AD_CHECK_DIS_1);
   NOT_FIRST_TIME = YES;
   call INPUT_HDR_INFO;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_DISPLAY_IO = YES;
      return;
      end;


   /* BEFORE_LOGIC - Before logic */

   call TABLE_DISPLAY;

   /* AFTER_LOGIC - Other Logic */


   /* OTHER_LOGIC - Any other logic */

return;
end;	/* DISPLAY_IO           */

/****************************************************************
	INPUT_HDR_INFO
	Input the table header information
****************************************************************/

INPUT_HDR_INFO:
	procedure;

AD_START_TRX = TODAYS_DATE();
do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      call READ_KEYED (AD_ACCT_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =   3 to   4;
   if LOOP_INDEX =   3 then
      AD_START_TRX = TODAYS_DATE();
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   4 then
      do;

      /* CHECK_DIS_BAL - Do you want to see the balance? */

      if AD_START_BAL = "Y" then
         do;

         /* DIS_START_BAL - Display the starting check balance */


            /* PROC_OCCURRING - Processing occurring, please wait msg */

            call PROCESSING_OCCURRING;
            call DUMP_BUFFER;

            call CHECK_CALC_BAL;
            call DISPLAY_DATA_D;

            /* ERASE_MES - Erase the message lines */

            call CLEAR_MESSAGE;

         end;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_HDR_INFO       */

/****************************************************************
	CHECK_CALC_BAL
	Calculate the balance from the start
****************************************************************/

CHECK_CALC_BAL:
	procedure;


   /* ZERO_CHECK_BAL - Zero the starting balance */

   AD_BALANCE = 0;


   /* SET_FIRST_CHECK - Set to the first one */

   AD_BANK_NO = AD_ACCOUNT_NO;
   AD_TRX_DATE = 0;
   AD_TRX_TYPE = "";
   AD_TRX_NUMBER = 0;
   AD_TRX_SEQ = 0;
   call SET_POSITION (AD_CHECKING_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_CHECKS = NO;
   do while (END_READ_THRU_CHECKS ^= YES);
      call READ_THRU_CHECKS;
   end;
return;
end;	/* CHECK_CALC_BAL       */

/****************************************************************
	READ_THRU_CHECKS
	Add thru all the checks
****************************************************************/

READ_THRU_CHECKS:
	procedure;


   /* READ_NEXT_CHECK - Read the next check */

   call READ_NEXT (AD_CHECKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AD_CHECKING_NO,ERROR_CODE);

   /* CHECK_END_CHECK - Last check? */

   if (ERROR_CODE = END_OF_FILE) !
   (AD_BANK_NO > AD_ACCOUNT_NO) !
   (AD_TRX_DATE > AD_START_TRX-1) then
      do;
      END_READ_THRU_CHECKS = YES;
      return;
      end;

   /* ADD_CHECK_BAL - Add this detail to the balance */

   AD_BALANCE = floor((AD_BALANCE + AD_TRX_AMOUNT) * 100 + 0.5) / 100;

return;
end;	/* READ_THRU_CHECKS     */

/****************************************************************
	DISPLAY_DATA_D
	Display the data in screen group D
****************************************************************/

DISPLAY_DATA_D:
	procedure;

do LOOP_INDEX =   5 to   5;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_D       */

/****************************************************************
	TABLE_DISPLAY
	Display the table info
****************************************************************/

TABLE_DISPLAY:
	procedure;

declare		AD_BANK_NO_SAVE      fixed binary (15);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		RECORD_NUMBER        fixed binary (15);
declare		AD_TRX_DATE_ARRAY(17) fixed binary (15);
declare		AD_TRX_TYPE_ARRAY(17) character (        1);
declare		AD_TRX_NUMBER_ARRAY(17) fixed binary (31);
declare		AD_TRX_SEQ_ARRAY(17) fixed binary (15);
declare		AD_CHECKING_ERROR    fixed binary (15);
declare		AD_TRX_DATE_SAVE     fixed binary (15);
declare		AD_TRX_TYPE_SAVE     character (        1);
declare		AD_TRX_NUMBER_SAVE   fixed binary (31);
declare		AD_TRX_SEQ_SAVE      fixed binary (15);
declare		ANSWER               character (1);
AD_BALANCE = AD_BALANCE;
AD_BANK_NO = AD_ACCOUNT_NO;
AD_BANK_NO_SAVE = AD_BANK_NO;
AD_TRX_DATE = AD_START_TRX;
AD_TRX_TYPE = "";
AD_TRX_NUMBER = 0;
AD_TRX_SEQ = 0;
call SET_POSITION (AD_CHECKING_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (AD_CHECKING_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (AD_BANK_NO > AD_BANK_NO_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 17;
      AD_TRX_DATE_ARRAY(RECORD_NUMBER) = 0;
      AD_TRX_TYPE_ARRAY(RECORD_NUMBER) = "";
      AD_TRX_NUMBER_ARRAY(RECORD_NUMBER) = 0;
      AD_TRX_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      AD_CHECKING_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (AD_CHECKING_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 17) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =   7 to  12;
            if LOOP_INDEX =   8 then
               do;

               /* SET_AD_DESC - Set the transaction description */

               do case (index("CDSXBI+-",AD_TRX_TYPE) + 1);
                  AD_TRX_DESC = "";
                  AD_TRX_DESC = "Check";
                  AD_TRX_DESC = "Deposit";
                  AD_TRX_DESC = "Start";
                  AD_TRX_DESC = "Xfer";
                  AD_TRX_DESC = "Charge";
                  AD_TRX_DESC = "Interst";
                  AD_TRX_DESC = "Debit";
                  AD_TRX_DESC = "Credit";
               end;
               otherwise
                  AD_TRX_DESC = "";

               end;
            if LOOP_INDEX =  10 then
               do;

               /* SET_SYS_DESC - Set system description */

               do case (index("ARPM",AD_CHECK_TYPE) + 1);
                  AD_SYS_DESC = "";
                  AD_SYS_DESC = "A/P";
                  AD_SYS_DESC = "A/R";
                  AD_SYS_DESC = "P/R";
                  AD_SYS_DESC = "Man";
               end;

               end;
            if LOOP_INDEX =  12 then
               do;

               /* NO_PR_DIS - Don't Display Payroll Amounts */

               if AD_CHECK_TYPE = "P" then
                  LOOP_INDEX = 99;

               end;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         AD_BALANCE = floor((AD_BALANCE + AD_TRX_AMOUNT) * 100 + 0.5) / 100;
         AD_TRX_DATE_ARRAY(RECORD_NUMBER) = AD_TRX_DATE;
         AD_TRX_TYPE_ARRAY(RECORD_NUMBER) = AD_TRX_TYPE;
         AD_TRX_NUMBER_ARRAY(RECORD_NUMBER) = AD_TRX_NUMBER;
         AD_TRX_SEQ_ARRAY(RECORD_NUMBER) = AD_TRX_SEQ;
         call READ_NEXT (AD_CHECKING_NO,KEY_AREA_1,AD_CHECKING_ERROR);
         if (AD_BANK_NO > AD_BANK_NO_SAVE) then
            AD_CHECKING_ERROR = END_OF_FILE;
         if AD_CHECKING_ERROR = END_OF_FILE then
            do;
            call SET_ROW_OFFSET (0);
            do LOOP_INDEX =   6 to   6;
               call OUTPUT_FIELD (LOOP_INDEX);
            end;
            LOOP_INDEX = LOOP_INDEX - 1;
            end;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      AD_TRX_DATE_SAVE = AD_TRX_DATE_ARRAY(17);
      AD_TRX_TYPE_SAVE = AD_TRX_TYPE_ARRAY(17);
      AD_TRX_NUMBER_SAVE = AD_TRX_NUMBER_ARRAY(17);
      AD_TRX_SEQ_SAVE = AD_TRX_SEQ_ARRAY(17);
      AD_BANK_NO = AD_BANK_NO_SAVE;
      if AD_CHECKING_ERROR = END_OF_FILE then
         do;
         GET_OUT = YES;
         call PRESS_RETURN;
         end;
      else
         do;
         call OUTPUT_LINE (24,10,"Stop Displaying?");
         call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
         call CLEAR_TO_BOS (24);
         if (ANSWER = "Y") then
            GET_OUT = YES;
         end;
      end;
   else
      do;
      GET_OUT = YES;
      call PRESS_RETURN;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 17;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if AD_TRX_DATE_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX = 7 to  12;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_DISPLAY        */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AD_ACCT_NO);
   call CLOSE_FILE (AD_CHECKING_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
