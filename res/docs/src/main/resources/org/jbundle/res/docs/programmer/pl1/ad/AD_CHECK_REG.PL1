/****************************************************************
	Module: AD_CHECK_REG
	Top Level Logic: REPORT_LOGIC
	Date: 24-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AD_CHECK_REG
	Standard report logic
****************************************************************/

%replace AD_CHECK_REG_1 by 653;
%replace AD_CHECK_REG_2 by 654;
AD_CHECK_REG:
   procedure;
%replace AD_ACCT_NO by  24;
%replace AD_CHECKING_NO by  26;
%include "AD_CHECK_REG.DD";
%include "AD_ACCT.DD";
%include "AD_CHECKING.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		END_READ_THRU_CHECKS bit (1);
declare		FIRST_TIME           bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AD_DATE_TRX = TODAYS_DATE();
   AD_TIME_TRX = CURRENT_TIME();
   AD_USER_TRX = USER_NAME();
   AD_TRX_PAGE = 1;
   AD_TRX_COUNT = 0;
   AD_BALANCE = 0;
   AD_LAST_CHECK = 0;
   AD_LAST_SEQ = 0;
   AD_TRX_SEQ = 0;
   AD_CHECK_TYPE = "M";
   AD_SYS_NUMBER = "";
   AD_TRX_AMT_USD = 0;
   AD_DATE_RECONCILED = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AD_CHECK_REG_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (AD_CHECK_REG_RECORD) );
   call OPEN_FILE (AD_ACCT_NO,"AD_ACCT",byteaddr(AD_ACCT_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_ACCT_NO,ERROR_CODE);
   call OPEN_FILE (AD_CHECKING_NO,"AD_CHECKING",byteaddr(AD_CHECKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_CHECKING_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (AD_CHECK_REG_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call CHECK_CALC_BAL;
   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   AD_BANK_NO = AD_CHECK_ACCT;
   AD_TRX_DATE = AD_TRX_START;
   AD_TRX_TYPE = "";
   AD_TRX_NUMBER = 0;
   AD_TRX_SEQ = 0;
   call SET_POSITION (AD_CHECKING_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =  10 to  11;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
AD_TRX_END = AD_TRX_START;
do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AD_ACCOUNT_NO = AD_CHECK_ACCT;
      call READ_KEYED (AD_ACCT_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =   3 to   4;
   if LOOP_INDEX =   4 then
      AD_TRX_END = AD_TRX_START;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   3 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         AD_TRX_START = 0;
         AD_TRX_END = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  3,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  3 then
   do;
   if SELECT =  1 then
      LOOP_INDEX =  1;
   if SELECT >=  2 then
      LOOP_INDEX = SELECT +   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AD_ACCOUNT_NO = AD_CHECK_ACCT;
      call READ_KEYED (AD_ACCT_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
   if LOOP_INDEX =   3 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         AD_TRX_START = 0;
         AD_TRX_END = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	CHECK_CALC_BAL
	Calculate the balance from the start
****************************************************************/

CHECK_CALC_BAL:
	procedure;


   /* ZERO_CHECK_BAL - Zero the starting balance */

   AD_BALANCE = 0;


   /* SET_FIRST_CHECK - Set to the first one */

   AD_BANK_NO = AD_ACCOUNT_NO;
   AD_TRX_DATE = 0;
   AD_TRX_TYPE = "";
   AD_TRX_NUMBER = 0;
   AD_TRX_SEQ = 0;
   call SET_POSITION (AD_CHECKING_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_CHECKS = NO;
   do while (END_READ_THRU_CHECKS ^= YES);
      call READ_THRU_CHECKS;
   end;
return;
end;	/* CHECK_CALC_BAL       */

/****************************************************************
	READ_THRU_CHECKS
	Add thru all the checks
****************************************************************/

READ_THRU_CHECKS:
	procedure;


   /* READ_NEXT_CHECK - Read the next check */

   call READ_NEXT (AD_CHECKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AD_CHECKING_NO,ERROR_CODE);

   /* CHECK_END_CHECK - Last check? */

   if (ERROR_CODE = END_OF_FILE) !
   (AD_BANK_NO > AD_ACCOUNT_NO) !
   (AD_TRX_DATE > AD_TRX_START-1) then
      do;
      END_READ_THRU_CHECKS = YES;
      return;
      end;

   /* ADD_CHECK_BAL - Add this detail to the balance */

   AD_BALANCE = floor((AD_BALANCE + AD_TRX_AMOUNT) * 100 + 0.5) / 100;

return;
end;	/* READ_THRU_CHECKS     */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   3;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

AD_TRX_PAGE = AD_TRX_PAGE + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;

declare		OLD_AD_BANK_NO       fixed binary (15);

   /* READNEXT - Read the next record */

   call READ_NEXT (AD_CHECKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AD_CHECKING_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AD_BANK_NO > AD_CHECK_ACCT) !
   (AD_TRX_DATE > AD_TRX_END) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      OLD_AD_BANK_NO = -1;
      end;
   if AD_BANK_NO ^= OLD_AD_BANK_NO then
      do;
      if ^FIRST_TIME then
         do;
         do LOOP_INDEX =  24 to   1;
            call PRINT_REPORT_LINE;
         end;
         end;
      end;
   if AD_BANK_NO ^= OLD_AD_BANK_NO then
      do;
      do LOOP_INDEX =   4 to   8;
         call PRINT_REPORT_LINE;
      end;
      OLD_AD_BANK_NO = AD_BANK_NO;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */


   /* SET_AD_DESC - Set the transaction description */

   do case (index("CDSXBI+-",AD_TRX_TYPE) + 1);
      AD_TRX_DESC = "";
      AD_TRX_DESC = "Check";
      AD_TRX_DESC = "Deposit";
      AD_TRX_DESC = "Start";
      AD_TRX_DESC = "Xfer";
      AD_TRX_DESC = "Charge";
      AD_TRX_DESC = "Interst";
      AD_TRX_DESC = "Debit";
      AD_TRX_DESC = "Credit";
   end;
   otherwise
      AD_TRX_DESC = "";


   /* SET_SYS_DESC - Set system description */

   do case (index("ARPM",AD_CHECK_TYPE) + 1);
      AD_SYS_DESC = "";
      AD_SYS_DESC = "A/P";
      AD_SYS_DESC = "A/R";
      AD_SYS_DESC = "P/R";
      AD_SYS_DESC = "Man";
   end;

   do LOOP_INDEX =   9 to   9;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_CHECK_BAL - Add this detail to the balance */

   AD_BALANCE = floor((AD_BALANCE + AD_TRX_AMOUNT) * 100 + 0.5) / 100;


   /* ADD_TOTALS - Add to the total fields */

   AD_TRX_COUNT = AD_TRX_COUNT + 1;

   /* OTHER_LOGIC - Any other logic */

return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (AD_ACCT_NO);
   call CLOSE_FILE (AD_CHECKING_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
