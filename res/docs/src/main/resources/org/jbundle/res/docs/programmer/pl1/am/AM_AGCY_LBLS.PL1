/****************************************************************
	Module: AM_AGCY_LBLS
	Top Level Logic: LABEL_LOGIC
	Date:  6-Jun-91
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AM_AGCY_LBLS
	Top Level to print agency labels
****************************************************************/

%replace AM_AGCY_LBLS_1 by 392;
%replace AM_AGCY_LBLS_2 by 393;
AM_AGCY_LBLS:
   procedure;
%replace AM_AGCY_NO by  10;
%replace AM_SCF_CONTROL_NO by  11;
%include "AM_AGCY_LBLS.DD";
%include "AM_AGCY.DD";
%include "AM_SCF_CONTROL.DD";

declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_LABELS bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
   call INITIALIZE;
   call PRINT_LABELS;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   DO_ZONE_COUNT = "Y";
   AM_COUNT = 0;
   LABEL_COUNT = 1;
   SCF_TO = "";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AM_AGCY_LBLS_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (AM_AGCY_LBLS_RECORD) );
   call OPEN_FILE (AM_AGCY_NO,"AM_AGCY",byteaddr(AM_AGCY_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AM_AGCY_NO,ERROR_CODE);
   call OPEN_FILE (AM_SCF_CONTROL_NO,"AM_SCF_CONTROL",byteaddr(AM_SCF_CONTROL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AM_SCF_CONTROL_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	PRINT_LABELS
	Print the labels
****************************************************************/

PRINT_LABELS:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (AM_AGCY_LBLS_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* CLEAR_ARRAY - Clear the info array */

   declare		LOOP_2		FIXED BINARY;

   do LOOP_2 = 1 to 4;
      ARC_NO(LOOP_2) = 0;
      AGCY_NAME(LOOP_2) = "";
      AGCY_ADDR1(LOOP_2) = "";
      AGCY_ADDR2(LOOP_2) = "";
      AGCY_ADDR_3(LOOP_2) = "";
      AGCY_ZIP(LOOP_2) = "";
   end;


   /* SET_FIRST - Set the record pointer to the first rec */

   AGENCY_ZIP_CODE = LABEL_START;
   AGENCY_SHORT_NAME = "";
   AGENCY_NUMBER = 0;
   call SET_POSITION (AM_AGCY_NO,KEY_AREA_3,ERROR_CODE);
   END_READ_THRU_LABELS = NO;
   do while (END_READ_THRU_LABELS ^= YES);
      call READ_THRU_LABELS;
   end;

   /* FINISH_LABELS - Print the last line of labels */

   declare		LOOP		FIXED BINARY;

   AGENCY_NUMBER = 0;
   AGENCY_NAME = "";
   AGENCY_ADDRESS_1 = "";
   AGENCY_ADDRESS_2 = "";
   AGENCY_ADDRESS_3 = "";
   AGENCY_ZIP_CODE = "";

   do LOOP = 1 to AGCY_ACCROSS - 1;

      /* PRT_LABEL - Set up and print the label(s) */

      if AGENCY_ADDRESS_1 = "" then
         do;
         AGENCY_ADDRESS_1 = AGENCY_NAME;
         AGENCY_NAME = "";
         end;

      ARC_NO(LABEL_COUNT) = AGENCY_NUMBER;
      AGCY_NAME(LABEL_COUNT) = AGENCY_NAME;
      AGCY_ADDR1(LABEL_COUNT) = AGENCY_ADDRESS_1;
      AGCY_ADDR2(LABEL_COUNT) = AGENCY_ADDRESS_2;
      AGCY_ADDR_3(LABEL_COUNT) = AGENCY_ADDRESS_3;
      AGCY_ZIP(LABEL_COUNT) = AGENCY_ZIP_CODE;

      LABEL_COUNT = LABEL_COUNT + 1;

      if LABEL_COUNT > AGCY_ACCROSS then
         do;

         /* PRT_DETAIL - Print the detail lines */

         do LOOP_INDEX =   7 to  12;
            call PRINT_REPORT_LINE;
         end;
         LABEL_COUNT = 1;
         end;

   end;

   /* PRINT_ZONE_STUFF - Print out the zone counts */

   declare I fixed binary(15);
   declare ZONE char(10) varying;
   declare COUNT char(20) varying;
   if DO_ZONE_COUNT = "Y" then
      do;
      do I = 1 to 10;
         ZONE = I;
         COUNT = AM_ZONE_COUNT(I);
         if I = 10 then
            ZONE = "   ???";
         call PRINT_LINE("ZONE: " !! ZONE !! ",  COUNT: " !! COUNT);
      end;
      COUNT = AM_ZONE_COUNT(1) + AM_ZONE_COUNT(2) + AM_ZONE_COUNT(3) +
      AM_ZONE_COUNT(4) + AM_ZONE_COUNT(5) + AM_ZONE_COUNT(6) +
      AM_ZONE_COUNT(7) + AM_ZONE_COUNT(8) + AM_ZONE_COUNT(9) + AM_ZONE_COUNT(10);
      call PRINT_LINE("TOTAL: " !! COUNT);
      end;



   /* PRINT_LINE_G - PRINT LINES */

   do LOOP_INDEX =  14 to  14;
      call PRINT_REPORT_LINE;
   end;

   /* RETURN - Normal Return */

   return;

return;
end;	/* PRINT_LABELS         */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
LABEL_END = LABEL_START;
AGENCY_COMMENT_1 = "";
AGENCY_COMMENT_2 = "";
AGENCY_COMMENT_3 = "";
AGCY_ACCROSS = 4;
do LOOP_INDEX =   1 to  18;
   if LOOP_INDEX =   2 then
      LABEL_END = LABEL_START;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         LABEL_START = "";
         LABEL_END = "~";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   4 then
      do;

      /* LAST_AGCY_TYPE - Go to next item if return */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 11;

      end;
   if LOOP_INDEX =   5 then
      do;

      /* LAST_AGCY_TYPE - Go to next item if return */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 11;

      end;
   if LOOP_INDEX =   6 then
      do;

      /* LAST_AGCY_TYPE - Go to next item if return */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 11;

      end;
   if LOOP_INDEX =   7 then
      do;

      /* LAST_AGCY_TYPE - Go to next item if return */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 11;

      end;
   if LOOP_INDEX =   8 then
      do;

      /* LAST_AGCY_TYPE - Go to next item if return */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 11;

      end;
   if LOOP_INDEX =   9 then
      do;

      /* LAST_AGCY_TYPE - Go to next item if return */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 11;

      end;
   if LOOP_INDEX =  10 then
      do;

      /* LAST_AGCY_TYPE - Go to next item if return */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 11;

      end;
   if LOOP_INDEX =  12 then
      do;

      /* LAST_AFFIL - Check for return */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 13;

      end;
   if LOOP_INDEX =  14 then
      do;

      /* MOVE_COMMENT - Move the agency comments */

      AGCY_COMM_1 = AGENCY_COMMENT_1;
      AGCY_COMM_2 = AGENCY_COMMENT_2;
      AGCY_COMM_3 = AGENCY_COMMENT_3;

      end;
   if LOOP_INDEX =  15 then
      do;

      /* MOVE_COMMENT - Move the agency comments */

      AGCY_COMM_1 = AGENCY_COMMENT_1;
      AGCY_COMM_2 = AGENCY_COMMENT_2;
      AGCY_COMM_3 = AGENCY_COMMENT_3;

      end;
   if LOOP_INDEX =  16 then
      do;

      /* MOVE_COMMENT - Move the agency comments */

      AGCY_COMM_1 = AGENCY_COMMENT_1;
      AGCY_COMM_2 = AGENCY_COMMENT_2;
      AGCY_COMM_3 = AGENCY_COMMENT_3;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 10,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  3 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         LABEL_START = "";
         LABEL_END = "~";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   end;
if SELECT =  4 then
   do;
   do LOOP_INDEX =   4 to  11;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
      if LOOP_INDEX =   4 then
         do;

         /* LAST_AGCY_TYPE - Go to next item if return */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 11;

         end;
      if LOOP_INDEX =   5 then
         do;

         /* LAST_AGCY_TYPE - Go to next item if return */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 11;

         end;
      if LOOP_INDEX =   6 then
         do;

         /* LAST_AGCY_TYPE - Go to next item if return */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 11;

         end;
      if LOOP_INDEX =   7 then
         do;

         /* LAST_AGCY_TYPE - Go to next item if return */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 11;

         end;
      if LOOP_INDEX =   8 then
         do;

         /* LAST_AGCY_TYPE - Go to next item if return */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 11;

         end;
      if LOOP_INDEX =   9 then
         do;

         /* LAST_AGCY_TYPE - Go to next item if return */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 11;

         end;
      if LOOP_INDEX =  10 then
         do;

         /* LAST_AGCY_TYPE - Go to next item if return */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 11;

         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   end;
if SELECT =  5 then
   do;
   do LOOP_INDEX =  12 to  13;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
      if LOOP_INDEX =  12 then
         do;

         /* LAST_AFFIL - Check for return */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 13;

         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   end;
if SELECT >=  6 then if SELECT <= 10 then
   do;

      LOOP_INDEX = SELECT +   8;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =  14 then
      do;

      /* MOVE_COMMENT - Move the agency comments */

      AGCY_COMM_1 = AGENCY_COMMENT_1;
      AGCY_COMM_2 = AGENCY_COMMENT_2;
      AGCY_COMM_3 = AGENCY_COMMENT_3;

      end;
   if LOOP_INDEX =  15 then
      do;

      /* MOVE_COMMENT - Move the agency comments */

      AGCY_COMM_1 = AGENCY_COMMENT_1;
      AGCY_COMM_2 = AGENCY_COMMENT_2;
      AGCY_COMM_3 = AGENCY_COMMENT_3;

      end;
   if LOOP_INDEX =  16 then
      do;

      /* MOVE_COMMENT - Move the agency comments */

      AGCY_COMM_1 = AGENCY_COMMENT_1;
      AGCY_COMM_2 = AGENCY_COMMENT_2;
      AGCY_COMM_3 = AGENCY_COMMENT_3;

      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	READ_THRU_LABELS
	Read thru the agencies
****************************************************************/

READ_THRU_LABELS:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (AM_AGCY_NO,KEY_AREA_3,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AM_AGCY_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AGENCY_ZIP_CODE > LABEL_END) then
      do;
      END_READ_THRU_LABELS = YES;
      return;
      end;

   /* CHECK_LABEL_OK - Check the selection criteria */

   declare		MATCH		bit(1);

   MATCH = NO;
   if AGCY_TYPE1 = "" then
      do;
      if AGCY_INCLUDE = "N" then
         MATCH = YES;
      end;

   if AGCY_TYPE1 = AGENCY_TYPE then
      MATCH = YES;

   if AGCY_TYPE2 = "" then
      goto CHECK_DONE;

   if AGCY_TYPE2 = AGENCY_TYPE then
      MATCH = YES;

   if AGCY_TYPE3 = "" then
      goto CHECK_DONE;

   if AGCY_TYPE3 = AGENCY_TYPE then
      MATCH = YES;

   if AGCY_TYPE4 = "" then
      goto CHECK_DONE;

   if AGCY_TYPE4 = AGENCY_TYPE then
      MATCH = YES;

   if AGCY_TYPE5 = "" then
      goto CHECK_DONE;

   if AGCY_TYPE5 = AGENCY_TYPE then
      MATCH = YES;

   if AGCY_TYPE6 = "" then
      goto CHECK_DONE;

   if AGCY_TYPE6 = AGENCY_TYPE then
      MATCH = YES;

   if AGCY_TYPE7 = "" then
      goto CHECK_DONE;

   if AGCY_TYPE7 = AGENCY_TYPE then
      MATCH = YES;

   if AGCY_TYPE8 = "" then
      goto CHECK_DONE;

   if AGCY_TYPE8 = AGENCY_TYPE then
      MATCH = YES;

   CHECK_DONE:
   if (AGCY_INCLUDE = "Y") & (MATCH = YES) then
      return;

   if (AGCY_INCLUDE = "N") & (MATCH = NO) then
      return;

   if AGCY_AFFIL1 ^= "" then
      do;
      if (AGCY_AFFIL1 ^= AGENCY_AFFILIATION) & (AGCY_AFFIL2 = "") then
         return;

      if (AGCY_AFFIL1 ^= AGENCY_AFFILIATION) & (AGCY_AFFIL2 ^= AGENCY_AFFILIATION) then
         return;
      end;

   if substr(AGCY_COMM_1,1,1) ^= " " then
      do;
      if AGCY_COMM_1 ^= AGENCY_COMMENT_1 then
         return;
      end;

   if substr(AGCY_COMM_2,1,1) ^= " " then
      do;
      if AGCY_COMM_2 ^= AGENCY_COMMENT_2 then
         return;
      end;

   if substr(AGCY_COMM_3,1,1) ^= " " then
      do;
      if AGCY_COMM_3 ^= AGENCY_COMMENT_3 then
         return;
      end;


   /* ADD_ZONE_COUNT - Add to the zone count */

   declare I fixed binary;
   if DO_ZONE_COUNT = "Y" then
      do;
      ERROR_CODE = 0;
      if (AGENCY_ZIP_CODE < SCF_FROM) ! (AGENCY_ZIP_CODE > SCF_TO) ! (AM_COUNT = 0) then
         do;
         SCF_TO = AGENCY_ZIP_CODE;
         call SET_POSITION(AM_SCF_CONTROL_NO,1,ERROR_CODE);
         call READ_NEXT(AM_SCF_CONTROL_NO,1,ERROR_CODE);
         end;
      if (ERROR_CODE ^= 0) ! (AGENCY_ZIP_CODE > SCF_TO) !
      (AGENCY_ZIP_CODE < SCF_FROM) ! (UPS_ZONE < "1") ! (UPS_ZONE > "9") then
         do;
         AM_ZONE_COUNT(10) = AM_ZONE_COUNT(10) + 1;
         end;
      else
         do;
         I = UPS_ZONE;
         AM_ZONE_COUNT(I) = AM_ZONE_COUNT(I) + 1;
         end;
      end;
   AM_COUNT = AM_COUNT + 1;


   /* PRT_LABEL - Set up and print the label(s) */

   if AGENCY_ADDRESS_1 = "" then
      do;
      AGENCY_ADDRESS_1 = AGENCY_NAME;
      AGENCY_NAME = "";
      end;

   ARC_NO(LABEL_COUNT) = AGENCY_NUMBER;
   AGCY_NAME(LABEL_COUNT) = AGENCY_NAME;
   AGCY_ADDR1(LABEL_COUNT) = AGENCY_ADDRESS_1;
   AGCY_ADDR2(LABEL_COUNT) = AGENCY_ADDRESS_2;
   AGCY_ADDR_3(LABEL_COUNT) = AGENCY_ADDRESS_3;
   AGCY_ZIP(LABEL_COUNT) = AGENCY_ZIP_CODE;

   LABEL_COUNT = LABEL_COUNT + 1;

   if LABEL_COUNT > AGCY_ACCROSS then
      do;

      /* PRT_DETAIL - Print the detail lines */

      do LOOP_INDEX =   7 to  12;
         call PRINT_REPORT_LINE;
      end;
      LABEL_COUNT = 1;
      end;

return;
end;	/* READ_THRU_LABELS     */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (AM_AGCY_NO);
   call CLOSE_FILE (AM_SCF_CONTROL_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
