/****************************************************************
	Module: CHECK_AIR_INV
	Top Level Logic: AIR_INV_LOGIC
	Date: 10-Jan-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	CHECK_AIR_INV
	Top level - check air inventory
****************************************************************/

%replace CHECK_AIR_INV_1 by 790;
CHECK_AIR_INV:
   procedure(
      BK_TOUR_HDR_RECORD,
      BK_TOUR_RECORD,
      BK_BOOKING_RECORD,
      BK_INV_DET_RECORD,
      BK_ENT_HDR_RECORD,
      ERROR_CODE);
%replace TK_DETAIL_NO by  57;
%replace TK_HEADER_NO by  56;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_TOUR_NO by  34;
%replace BK_BOOKING_NO by   9;
%replace BK_INV_DET_NO by  61;
%include "CHECK_AIR_INV.DD";
%include "TK_DETAIL.DD";
%include "TK_HEADER.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_TOUR.DD";
%include "BK_BOOKING.DD";
%include "BK_INV_DET.DD";
%include "BK_ENT_HDR.DD";

declare		ERROR_CODE           fixed binary (15);
declare		END_READ_THRU_ANEW   bit (1);
declare		END_GO_THRU_AOLD     bit (1);
declare		KEY_NO               fixed binary (15);
declare		ERROR_TK_DETAIL      fixed binary (15);

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */


   /* INIT_FILE_VARS - Initialize the file variables */

   NEW_ACOUNT = 0;
   OLD_ACOUNT = 0;
   CUR_PAX_SEQ = 0;
   TK_SEQ = 1;
   TK_TIME = NO_TIME;
   TK_DET_MOD_CODE = "A";
   TK_INV = "N";
   TK_INV_MOD = -1;
   TK_ARR_TIME = NO_TIME;
   TK_ARR_DAY = 0;
   TK_DETAIL_MODULE = "";
   TK_MOD_CODE = "A";
   TK_TAX_P = 0;
   TK_ISSUE_UD_DATE = 0;
   TK_ARC_UD_DATE = 0;
   TK_DEP_UD_DATE = 0;
   TK_OR_UD_DATE = 0;
   TK_BK_DEP_DATE = 0;
   TK_UD_STATUS = 0;
   TK_CREDIT = "N";

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (CHECK_AIR_INV_RECORD) );
   call OPEN_FILE (TK_DETAIL_NO,"TK_DETAIL",byteaddr(TK_DETAIL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_DETAIL_NO,ERROR_CODE);
   call OPEN_FILE (TK_HEADER_NO,"TK_HEADER",byteaddr(TK_HEADER_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_HEADER_NO,ERROR_CODE);
   call AIR_INV_MAIN;
   call END_PROGRAM;
return;

/****************************************************************
	AIR_INV_MAIN
	Mainline logic for air inventory
****************************************************************/

AIR_INV_MAIN:
	procedure;


   /* SETUP_AIR_IF_NEW - Has the air detail been changed before? */

   if BK_AIR_MOD = -1 then
      do;

      /* BK_SET_AIR_DET - Call the program to set up air */

      %include "BK_SET_AIR_DET.DCL";
      call BK_SET_AIR_DET(
         BK_BOOKING_RECORD,
         BK_TOUR_RECORD,
         BK_TOUR_HDR_RECORD,
         TK_DETAIL_RECORD,
         TK_HEADER_RECORD);
      end;


   /* RET_IF_NO_AMOD - Return if no air modifications made */

   ERROR_CODE = NORMAL_RETURN;

   if BK_AIR_UINV ^= "Y" then
      return;

   if BK_NEXT_MOD ^= BK_AIR_MOD then
      if BK_SINGLE = OLD_SINGLE then
      if BK_DOUBLE = OLD_DOUBLE then
      if BK_TRIPLE = OLD_TRIPLE then
      if BK_QUAD = OLD_QUAD then
      if BK_STATUS ^= "XL" then
         return;

   call GET_AHDR_PAX;

   /* RESET_AIR_UINV - Reset the air inventory flag (set in nx) */

   BK_AIR_UINV = "N";


   /* SET_FIRST_AIRD - Set first air */

   TK_DET_MOD = BK_MODIFICATION;
   TK_DET_BK_TK = BOOKING_NO;
   TK_DET_ALT_SEQ = 0;
   TK_DET_ANSW_SEQ = 0;
   TK_DATE = 0;
   TK_SEQ = 0;
   call SET_POSITION (TK_DETAIL_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_ANEW = NO;
   do while (END_READ_THRU_ANEW ^= YES);
      call READ_THRU_ANEW;
   end;

   /* CHECK_AOLD - Go thru old air if exist */

   if BK_NEXT_MOD ^= 0 then
      do;
      CUR_PAX_SEQ = 0;
      if (BK_AIR_MOD = BK_NEXT_MOD) & (BK_STATUS ^= "XL") then
         do;

         /* READ_THRU_AOLD - Read thru the old */


            /* SET_FIRST_2 - Set the file pointer to the first key */

            TK_DET_MOD = BK_NEXT_MOD;
            TK_DET_BK_TK = BOOKING_NO;
            TK_DET_ALT_SEQ = 0;
            TK_DET_ANSW_SEQ = 0;
            TK_DATE = 0;
            TK_SEQ = 0;
            call SET_POSITION (TK_DETAIL_NO,KEY_AREA_1,ERROR_CODE);
            END_GO_THRU_AOLD = NO;
            do while (END_GO_THRU_AOLD ^= YES);
               call GO_THRU_AOLD;
            end;
         end;
      else
         do;
         do ANEW = 1 to NEW_ACOUNT;
            OLD_AIR(ANEW) = NEW_AIR(ANEW);
            OLD_ADATE(ANEW) = NEW_ADATE(ANEW);
            OLD_APAX(ANEW) = NEW_APAX(ANEW);
         end;
         OLD_ACOUNT = NEW_ACOUNT;
         end;
      end;


   /* RET_IF_NO_AMOD - Return if no air modifications made */

   ERROR_CODE = NORMAL_RETURN;

   if BK_AIR_UINV ^= "Y" then
      return;

   if BK_NEXT_MOD ^= BK_AIR_MOD then
      if BK_SINGLE = OLD_SINGLE then
      if BK_DOUBLE = OLD_DOUBLE then
      if BK_TRIPLE = OLD_TRIPLE then
      if BK_QUAD = OLD_QUAD then
      if BK_STATUS ^= "XL" then
         return;

   call SUB_NEW_ABLOCK;

   /* RETURN_IF_ERROR - Return if ERROR_CODE <> 0 */

   if ERROR_CODE ^= NORMAL_RETURN then
      return;

   call ADD_BACK_AOLD;
return;
end;	/* AIR_INV_MAIN         */

/****************************************************************
	GET_AHDR_PAX
	Get the count of header air
****************************************************************/

GET_AHDR_PAX:
	procedure;


/* SET_FIRST_AIRH - Set to read the first Air header */

TK_MODIFICATION = BK_MODIFICATION;
TK_BK_TK_NO = BOOKING_NO;
TK_ALT_SEQ = 0;
TK_ANSW_SEQ = 0;
call SET_POSITION (TK_HEADER_NO,KEY_AREA_1,ERROR_CODE);

ANEW_SEQ = 0;
ANEW_PAX = BK_PAX;
ERROR_CODE = NORMAL_RETURN;
do while (ERROR_CODE = NORMAL_RETURN);
   call READ_NEXT (TK_HEADER_NO+?KEY_ONLY,KEY_AREA_1,ERROR_CODE);
   if (TK_MODIFICATION ^= 0) !
      (TK_BK_TK_NO ^= BOOKING_NO) then
         ERROR_CODE = END_OF_FILE;
   if ERROR_CODE = NORMAL_RETURN then
      do;
      if TK_ALT_SEQ ^= ANEW_SEQ then
         do;
         ANEW_PAX = ANEW_PAX - 1;
         ANEW_SEQ = TK_ALT_SEQ;
         end;
      end;
end;

if BK_NEXT_MOD = 0 then
   do;
   AOLD_PAX = 0;
   return;
   end;

if BK_NEXT_MOD ^= BK_AIR_MOD then
   if BK_SINGLE = OLD_SINGLE then
   if BK_DOUBLE = OLD_DOUBLE then
   if BK_TRIPLE = OLD_TRIPLE then
   if BK_QUAD = OLD_QUAD then
   if BK_STATUS ^= "XL" then
      do;
      AOLD_PAX = ANEW_PAX;
      return;
      end;


/* SET_FIRST - Set the record pointer to the first rec */

TK_MODIFICATION = BK_NEXT_MOD;
TK_BK_TK_NO = BOOKING_NO;
TK_ALT_SEQ = 0;
TK_ANSW_SEQ = 0;
call SET_POSITION (TK_HEADER_NO,KEY_AREA_1,ERROR_CODE);

ANEW_SEQ = 0;
AOLD_PAX = OLD_PAX;
ERROR_CODE = NORMAL_RETURN;
do while (ERROR_CODE = NORMAL_RETURN);
   call READ_NEXT (TK_HEADER_NO+?KEY_ONLY,KEY_AREA_1,ERROR_CODE);
   if (TK_MODIFICATION ^= BK_NEXT_MOD) !
      (TK_BK_TK_NO ^= BOOKING_NO) then
         ERROR_CODE = END_OF_FILE;
   if ERROR_CODE = NORMAL_RETURN then
      do;
      if TK_ALT_SEQ ^= ANEW_SEQ then
         do;
         AOLD_PAX = AOLD_PAX - 1;
         ANEW_SEQ = TK_ALT_SEQ;
         end;
      end;
end;

return;
end;	/* GET_AHDR_PAX         */

/****************************************************************
	READ_THRU_ANEW
	Read thru all the new air blocks
****************************************************************/

READ_THRU_ANEW:
	procedure;


   /* READ_NEXT_AIRD - Read next */

   call READ_NEXT (TK_DETAIL_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (TK_DETAIL_NO,ERROR_CODE);

   /* CHECK_END_AIRD - Check end */

   if (ERROR_CODE = END_OF_FILE) !
   (TK_DET_MOD > BK_MODIFICATION) !
   (TK_DET_BK_TK > BOOKING_NO) then
      do;
      END_READ_THRU_ANEW = YES;
      return;
      end;

   /* SET_NEW_AIR - Set up the array */

   if TK_INV ^= "Y" then
      return;
   else
      BK_AIR_UINV = "Y";

   if TK_DET_ALT_SEQ ^= 0 then
      do ANEW = 1 to NEW_ACOUNT;
         if NEW_AIR(ANEW) = TK_CARRIER !! TK_FLIGHT then
            if NEW_ADATE(ANEW) = TK_DATE then
               do;
               NEW_APAX(ANEW) = NEW_APAX(ANEW) + 1;
               return;
               end;
      end;

   NEW_ACOUNT = NEW_ACOUNT + 1;
   NEW_AALT(NEW_ACOUNT) = TK_DET_ALT_SEQ;
   NEW_AANSW(NEW_ACOUNT) = TK_DET_ANSW_SEQ;
   NEW_AIR(NEW_ACOUNT) = TK_CARRIER !! TK_FLIGHT;
   NEW_ADATE(NEW_ACOUNT) = TK_DATE;
   if TK_DET_ALT_SEQ = 0 then
      NEW_APAX(NEW_ACOUNT) = ANEW_PAX;
   else
      NEW_APAX(NEW_ACOUNT) = 1;

   NEW_ASEQ(NEW_ACOUNT) = TK_SEQ;

return;
end;	/* READ_THRU_ANEW       */

/****************************************************************
	GO_THRU_AOLD
	Go thru the old air detail
****************************************************************/

GO_THRU_AOLD:
	procedure;


   /* READ_NEXT_AIRD - Read next */

   call READ_NEXT (TK_DETAIL_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (TK_DETAIL_NO,ERROR_CODE);

   /* CHECK_END_2 - Check for end of records */

   if (ERROR_CODE = END_OF_FILE) !
   (TK_DET_MOD > BK_NEXT_MOD) !
   (TK_DET_BK_TK > BOOKING_NO) then
      do;
      END_GO_THRU_AOLD = YES;
      return;
      end;

   /* SET_OLD_AIR - Set the old array */

   if TK_INV ^= "Y" then
      return;
   else
      BK_AIR_UINV = "Y";

   if TK_DET_ALT_SEQ ^= 0 then
      do AOLD = 1 to OLD_ACOUNT;
         if OLD_AIR(AOLD) = TK_CARRIER !! TK_FLIGHT then
            if OLD_ADATE(AOLD) = TK_DATE then
               do;
               OLD_APAX(AOLD) = OLD_APAX(AOLD) + 1;
               return;
               end;
      end;

   OLD_ACOUNT = OLD_ACOUNT + 1;
   OLD_AALT(OLD_ACOUNT) = TK_DET_ALT_SEQ;
   OLD_AANSW(OLD_ACOUNT) = TK_DET_ANSW_SEQ;
   OLD_AIR(OLD_ACOUNT) = TK_CARRIER !! TK_FLIGHT;
   OLD_ADATE(OLD_ACOUNT) = TK_DATE;
   if TK_DET_ALT_SEQ = 0 then
      OLD_APAX(OLD_ACOUNT) = AOLD_PAX;
   else
      OLD_APAX(OLD_ACOUNT) = 1;

   OLD_ASEQ(OLD_ACOUNT) = TK_SEQ;

return;
end;	/* GO_THRU_AOLD         */

/****************************************************************
	SUB_NEW_ABLOCK
	Subtract from air inventory
****************************************************************/

SUB_NEW_ABLOCK:
	procedure;


   /* GO_THRU_ANEW - Go thru the air segments */

   do ANEW = 1 to NEW_ACOUNT;

      OLD_AIR_PAX = 0;
      do AOLD = 1 to OLD_ACOUNT;
         if NEW_AIR(ANEW) = OLD_AIR(AOLD) then
         if NEW_ADATE(ANEW) = OLD_ADATE(AOLD) then
            OLD_AIR_PAX = OLD_APAX(AOLD);
      end;

      NEW_AIR_PAX = NEW_APAX(ANEW);
      if BK_STATUS = "XL" then
         NEW_AIR_PAX = 0;


      /* SET_AIRD_KEY - Set up the ket */

      TK_DET_MOD = BK_MODIFICATION;
      TK_DET_BK_TK = BOOKING_NO;
      TK_DET_ALT_SEQ = NEW_AALT(ANEW);
      TK_DET_ANSW_SEQ = NEW_AANSW(ANEW);
      TK_DATE = NEW_ADATE(ANEW);
      TK_SEQ = NEW_ASEQ(ANEW);
      KEY_NO = 1;

      /* READ_AIRD - Read the air detail record */

      call READ_KEYED (TK_DETAIL_NO,KEY_AREA_1,ERROR_TK_DETAIL);
      if ERROR_TK_DETAIL > 3 then
         call PRINT_ERROR (TK_DETAIL_NO,ERROR_TK_DETAIL);

      call UD_INV_ADET;
      if ERROR_CODE ^= NORMAL_RETURN then
         do;

         /* REVERSE_ANEW - Reverse the new air */

         declare		ANEW2		fixed binary;

         ANEW2 = ANEW - 1;
         do ANEW = 1 to ANEW2;

            NEW_AIR_PAX = 0;
            do AOLD = 1 to OLD_ACOUNT;
               if NEW_AIR(ANEW) = OLD_AIR(AOLD) then
               if NEW_ADATE(ANEW) = OLD_ADATE(AOLD) then
                  NEW_AIR_PAX = OLD_APAX(AOLD);
            end;

            OLD_AIR_PAX = NEW_APAX(ANEW);

            /* SET_AIRD_KEY - Set up the ket */

            TK_DET_MOD = BK_MODIFICATION;
            TK_DET_BK_TK = BOOKING_NO;
            TK_DET_ALT_SEQ = NEW_AALT(ANEW);
            TK_DET_ANSW_SEQ = NEW_AANSW(ANEW);
            TK_DATE = NEW_ADATE(ANEW);
            TK_SEQ = NEW_ASEQ(ANEW);
            KEY_NO = 1;

            /* READ_AIRD - Read the air detail record */

            call READ_KEYED (TK_DETAIL_NO,KEY_AREA_1,ERROR_TK_DETAIL);
            if ERROR_TK_DETAIL > 3 then
               call PRINT_ERROR (TK_DETAIL_NO,ERROR_TK_DETAIL);

            call UD_INV_ADET;
            if MATCH_AFOUND = "N" then
               TK_INV_MOD = -1;
            else
               TK_INV_MOD = BK_NEXT_MOD;

            /* UPDATE_AIRD - Update */

            call UPDATE_RECORD (TK_DETAIL_NO,ERROR_CODE);

         end;

         ERROR_CODE = 1;
         return;
         end;
      TK_INV_MOD = BK_NEXT_MOD;

      /* UPDATE_AIRD - Update */

      call UPDATE_RECORD (TK_DETAIL_NO,ERROR_CODE);

   end;

   ERROR_CODE = NORMAL_RETURN;

return;
end;	/* SUB_NEW_ABLOCK       */

/****************************************************************
	UD_INV_ADET
	Update the air detail
****************************************************************/

UD_INV_ADET:
	procedure;

INV_DET_TYPE = "A";
INV_DET_ENTRY = TK_CARRIER !! TK_FLIGHT;
INV_DET_DATE = TK_DATE;
INV_CODE_TYPE = " ";
INV_ROOM_TYPE = 0;
ERROR_CODE = RECORD_LOCKED;
do while (ERROR_CODE = RECORD_LOCKED);
   call READ_KEYED(BK_INV_DET_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_CODE);
end;
if (ERROR_CODE = NORMAL_RETURN) &
(INV_DET_TYPE = "A") &
(INV_DET_ENTRY = TK_CARRIER !! TK_FLIGHT) &
(INV_DET_DATE = TK_DATE) &
(INV_CODE_TYPE = " ") &
(INV_ROOM_TYPE = 0) then
   do;
   INV_USED = INV_USED + NEW_AIR_PAX - OLD_AIR_PAX;
   INV_AVAIL = INV_BLOCKED - INV_USED;
   if INV_AVAIL < 0 then
      do;
      call DISPLAY_MESSAGE ("Warning --- This Air Block is Full<Bel>"c);
      call RELEASE_LOCKS(BK_INV_DET_NO);
      call PRESS_RETURN;
      ERROR_CODE = 1;
      return;
      end;
   call UPDATE_RECORD(BK_INV_DET_NO,ERROR_CODE);
   end;
else
   do;
   call DISPLAY_MESSAGE ("Warning --- This Air Does not have a block<Bel>"c);
   call RELEASE_LOCKS(BK_INV_DET_NO);
   call PRESS_RETURN;
   ERROR_CODE = 1;
   return;
   end;

ERROR_CODE = 0;

return;
end;	/* UD_INV_ADET          */

/****************************************************************
	ADD_BACK_AOLD
	Add back air into inventory
****************************************************************/

ADD_BACK_AOLD:
	procedure;

do AOLD = 1 to OLD_ACOUNT;


   MATCH_AFOUND = "N";
   do ANEW = 1 to NEW_ACOUNT;

      if NEW_AIR(ANEW) = OLD_AIR(AOLD) then
      if NEW_ADATE(ANEW) = OLD_ADATE(AOLD) then
         MATCH_AFOUND = "Y";

   end;

   if MATCH_AFOUND = "N" then
      do;
      OLD_AIR_PAX = OLD_APAX(AOLD);
      NEW_AIR_PAX = 0;
      TK_DET_MOD = BK_NEXT_MOD;
      TK_DET_BK_TK = BOOKING_NO;
      TK_DET_ALT_SEQ = OLD_AALT(AOLD);
      TK_DET_ANSW_SEQ = OLD_AANSW(AOLD);
      TK_DATE = OLD_ADATE(AOLD);
      TK_SEQ  = OLD_ASEQ(AOLD);
      KEY_NO = 1;

      /* READ_AIRD - Read the air detail record */

      call READ_KEYED (TK_DETAIL_NO,KEY_AREA_1,ERROR_TK_DETAIL);
      if ERROR_TK_DETAIL > 3 then
         call PRINT_ERROR (TK_DETAIL_NO,ERROR_TK_DETAIL);
      call UD_INV_ADET;
      end;
end;

return;
end;	/* ADD_BACK_AOLD        */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (TK_DETAIL_NO);
   call CLOSE_FILE (TK_HEADER_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
