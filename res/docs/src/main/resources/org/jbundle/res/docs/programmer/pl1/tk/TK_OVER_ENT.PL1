/****************************************************************
	Module: TK_OVER_ENT
	Top Level Logic: OVER_ENT_LOGIC
	Date: 20-Jun-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	TK_OVER_ENT
	Override Entry Logic
****************************************************************/

%replace TK_OVER_ENT_1 by 699;
TK_OVER_ENT:
   procedure;
%replace TK_AIRLINE_NO by  71;
%replace GL_CHART_NO by  16;
%replace TK_HEADER_NO by  56;
%replace TK_CONTROL_NO by 109;
%include "TK_OVER_ENT.DD";
%include "TK_AIRLINE.DD";
%include "GL_CHART.DD";
%include "TK_HEADER.DD";
%include "TK_CONTROL.DD";

declare		ERROR_CODE           fixed binary (15);
declare		KEY_NO               fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_ENT_ALL_OVER     bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
   call INITIALIZE;
   call OVER_ENT_MAIN;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   TYPICAL_BAL = "D";
   SECTION_SUB = "N";
   COUNTER_BAL_AC = 0;
   GL_INCOME_EXP = "N";
   DISCONTINUED_ON = 0;
   TK_MOD_CODE = "A";
   TK_TAX_P = 0;
   TK_ISSUE_UD_DATE = 0;
   TK_ARC_UD_DATE = 0;
   TK_DEP_UD_DATE = 0;
   TK_OR_UD_DATE = 0;
   TK_BK_DEP_DATE = 0;
   TK_UD_STATUS = 0;
   TK_CREDIT = "N";
   TK_REC_NO = 9999;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (TK_OVER_ENT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (TK_OVER_ENT_RECORD) );
   call OPEN_FILE (TK_AIRLINE_NO,"TK_AIRLINE",byteaddr(TK_AIRLINE_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_AIRLINE_NO,ERROR_CODE);
   call OPEN_FILE (GL_CHART_NO,"GL_CHART",byteaddr(GL_CHART_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_CHART_NO,ERROR_CODE);
   call OPEN_FILE (TK_HEADER_NO,"TK_HEADER",byteaddr(TK_HEADER_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_HEADER_NO,ERROR_CODE);
   call OPEN_FILE (TK_CONTROL_NO,"TK_CONTROL",byteaddr(TK_CONTROL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_CONTROL_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	OVER_ENT_MAIN
	Mainline Logic
****************************************************************/

OVER_ENT_MAIN:
	procedure;

declare		ERROR_TK_CONTROL     fixed binary (15);

   /* READ_TK_CONTROL - Read the control file */


      /* SET_TK_KEY - Set up key */

      TK_REC_NO = 0;
      KEY_NO = 1;

      /* READ_TK_REC - Read the record */

      call READ_KEYED (TK_CONTROL_NO,KEY_NO,ERROR_TK_CONTROL);
      if ERROR_TK_CONTROL > 3 then
         call PRINT_ERROR (TK_CONTROL_NO,ERROR_TK_CONTROL);
   call ENTER_DATA_A;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;


   /* SET_FIRST - Set the record pointer to the first rec */

   TK_MODIFICATION = 0;
   TK_DEP_DATE = TK_START_OVER;
   TK_BK_TK_NO = 0;
   TK_ALT_SEQ = 0;
   TK_ANSW_SEQ = 0;
   call SET_POSITION (TK_HEADER_NO,KEY_AREA_3,ERROR_CODE);
   END_ENT_ALL_OVER = NO;
   do while (END_ENT_ALL_OVER ^= YES);
      call ENT_ALL_OVER;
   end;
return;
end;	/* OVER_ENT_MAIN        */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

TK_CASH_SUM = TK_DEF_OR_CASH;
GL_ACCOUNT_DESC = "";
TK_COLL_DATE = TODAYS_DATE();
do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      if RETURN_CODE ^= END_TYPED then
         do;
         AIRLINE_CODE = TK_OVER_AIRL;
         call READ_KEYED (TK_AIRLINE_NO,KEY_AREA_1,ERROR_CODE);
         if ERROR_CODE = RECORD_NOT_FOUND then
            do;
            call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
            call PRESS_RETURN;
            call CLEAR_MESSAGE;
            RETURN_CODE = DO_AGAIN;
            LOOP_INDEX = LOOP_INDEX - 1;
            end;
         else
            do;
            do LOOP_INDEX =   2 to   2;
               call OUTPUT_FIELD (LOOP_INDEX);
            end;
            LOOP_INDEX = LOOP_INDEX - 1;
            end;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =   3 to   7;
   if LOOP_INDEX =   5 then
      TK_CASH_SUM = TK_DEF_OR_CASH;
   if LOOP_INDEX =   6 then
      do;
      call OUTPUT_FIELD (LOOP_INDEX);
      LOOP_INDEX = LOOP_INDEX + 1;
      end;
   if LOOP_INDEX =   7 then
      TK_COLL_DATE = TODAYS_DATE();
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   5 then
      do;

      /* READ_SECOND_5 - Read second */

      GL_ACCOUNT_NO = TK_CASH_SUM;
      call READ_KEYED (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	ENT_ALL_OVER
	Enter all the overrides
****************************************************************/

ENT_ALL_OVER:
	procedure;

declare		ERROR_TK_HEADER      fixed binary (15);

   /* SET_POSITION - Set the file position */

   TK_ANSW_SEQ = TK_ANSW_SEQ+1;
   call SET_POSITION (TK_HEADER_NO,KEY_AREA_3,ERROR_CODE);

   /* READNEXT - Read the next record */

   call READ_NEXT (TK_HEADER_NO,KEY_AREA_3,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (TK_HEADER_NO,ERROR_CODE);

   /* CHECK_SELECT_OVER - Correct carrier? */

   if (ERROR_CODE = END_OF_FILE) !
   (TK_MODIFICATION > 0) !
   (TK_DEP_DATE > TK_END_OVER) then
      do;
      TK_NUMBER = "0";
      call CLEAR_DATA_C;

      /* CLEAR_DATA_D - Clear fields */

      do LOOP_INDEX =  17 to  17;
         call CLEAR_FIELD(LOOP_INDEX);
      end;
      end;
   else
      do;
      if TK_NUMBER = "" then
         return;

      if TK_ISSUE_DATE = 0 then
         return;

      if TK_ALT_SEQ = 0 then
         return;

      if TK_AIRL_CODE ^= TK_OVER_AIRL then
         return;

      if TK_OR_COLL_DATE ^= 0 then
         return;

      call DISPLAY_DATA_C;
      call DISPLAY_DATA_D;
      end;

   call ENTER_DATA_E;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_ENT_ALL_OVER = YES;
      return;
      end;


   /* READ_OR_TICKET - Read the ticket entered */

   if INPUT_LENGTH = 0 then if TK_NUMBER = "0" then
      do;
      END_ENT_ALL_OVER = YES;
      return;
      end;

   if INPUT_LENGTH ^= 0 then
      do;
      if TK_NUMBER = "+" then
         return;
      TK_BK_TK_NO = 0;
      declare TK_TEMP character(40);
      TK_TEMP = TK_NUMBER;

      /* SET_FIRST_2 - Set the file pointer to the first key */

      TK_MODIFICATION = 0;
      TK_BK_TK_NO = 0;
      TK_ALT_SEQ = 0;
      TK_ANSW_SEQ = 0;
      call SET_POSITION (TK_HEADER_NO,KEY_AREA_2,ERROR_CODE);

      /* READ_NEXT - Read the next record */

      call READ_NEXT (TK_HEADER_NO,KEY_AREA_2,ERROR_CODE);
      if ERROR_CODE > 3 then
      	call PRINT_ERROR (TK_HEADER_NO,ERROR_CODE);
      if (TK_ISSUE_DATE = 0) ! (TK_AIRL_CODE ^= TK_OVER_AIRL) then
         return;
      if TK_TEMP ^= TK_NUMBER then
         do;
         call DISPLAY_MESSAGE ("Ticket number not found");
         call PRESS_RETURN;
         return;
         end;
      if TK_OR_UD_DATE ^= 0 then
         do;
         call DISPLAY_MESSAGE ("Warning - Ticket already posted to G/L");
         call PRESS_RETURN;
         end;
      end;


   /* READ_RECORD - Read the record */

   call READ_KEYED (TK_HEADER_NO+?LOCK_RECORD,KEY_AREA_3,ERROR_TK_HEADER);
   if ERROR_TK_HEADER = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      return;
      end;
   if ERROR_TK_HEADER > 3 then
      call PRINT_ERROR (TK_HEADER_NO,ERROR_TK_HEADER);

   call DISPLAY_DATA_E;
   call DISPLAY_DATA_C;
   call ENTER_DATA_D;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_ENT_ALL_OVER = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_ENT_ALL_OVER = YES;
      return;
      end;


   /* UD_OVERRIDE - Update the Override */

   if RETURN_CODE = DELETE_TYPED then
      do;
      TK_OR_COLL_DATE = 0;
      TK_OVER_CASH = 0;
      TK_OR_COLL = 0;
      end;
   else
      do;
      TK_OR_COLL_DATE = TK_COLL_DATE;
      TK_OVER_CASH = TK_CASH_SUM;
      end;


   /* UPDATE_RECORD - Update the record */

   call UPDATE_RECORD (TK_HEADER_NO,ERROR_CODE);
return;
end;	/* ENT_ALL_OVER         */

/****************************************************************
	CLEAR_DATA_C
	Clear the data in group C
****************************************************************/

CLEAR_DATA_C:
	procedure;

do LOOP_INDEX =   9 to  16;
   call CLEAR_FIELD(LOOP_INDEX);
end;
return;
end;	/* CLEAR_DATA_C         */

/****************************************************************
	DISPLAY_DATA_C
	Display the data in screen group C
****************************************************************/

DISPLAY_DATA_C:
	procedure;

do LOOP_INDEX =   9 to  16;
   call KEEP_TRAILING_SPACES;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_C       */

/****************************************************************
	DISPLAY_DATA_D
	Display the data in screen group D
****************************************************************/

DISPLAY_DATA_D:
	procedure;

do LOOP_INDEX =  17 to  17;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_D       */

/****************************************************************
	ENTER_DATA_E
	Enter the data in screen group E
****************************************************************/

ENTER_DATA_E:
	procedure;

do LOOP_INDEX =   8 to   8;
   if LOOP_INDEX =   8 then
      call DISPLAY_MSG_NO (104);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_E         */

/****************************************************************
	DISPLAY_DATA_E
	Display the data in screen group E
****************************************************************/

DISPLAY_DATA_E:
	procedure;

do LOOP_INDEX =   8 to   8;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_E       */

/****************************************************************
	ENTER_DATA_D
	Enter screen group D
****************************************************************/

ENTER_DATA_D:
	procedure;

do LOOP_INDEX =  17 to  17;
   if LOOP_INDEX =  17 then
      do;

      /* SET_OVER_DEF - Set the override defaults */

      if TK_OR_COLL = 0 then
         do;
         TK_OR_COLL = floor((TK_NET_FARE - TK_NET) * 100 + 0.5) / 100;
         if TK_OR_COLL < 0 then
            TK_OR_COLL = 0;
         end;

      end;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_D         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 96,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT =  1 then
   do;
   call INPUT_FIELD ( 17,INPUT_LENGTH,RETURN_CODE);
   end;
if SELECT = 90 then
   do;
   call INPUT_FIELD(  4,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   3 then
      call DISPLAY_MSG_NO (104);
   call INPUT_FIELD(  8,INPUT_LENGTH,RETURN_CODE);
   end;
if SELECT = 92 then
   do;
   call INPUT_FIELD(  3,INPUT_LENGTH,RETURN_CODE);
   call INPUT_FIELD(  5,INPUT_LENGTH,RETURN_CODE);
      do;

      /* READ_SECOND_5 - Read second */

      GL_ACCOUNT_NO = TK_CASH_SUM;
      call READ_KEYED (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         end;
      end;
   end;
if SELECT >= 95 then if SELECT <= 96 then
   do;
   if SELECT = 95 then
      LOOP_INDEX =  1;
   if SELECT = 96 then
      LOOP_INDEX =  7;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AIRLINE_CODE = TK_OVER_AIRL;
      call READ_KEYED (TK_AIRLINE_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (TK_AIRLINE_NO);
   call CLOSE_FILE (GL_CHART_NO);
   call CLOSE_FILE (TK_HEADER_NO);
   call CLOSE_FILE (TK_CONTROL_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
