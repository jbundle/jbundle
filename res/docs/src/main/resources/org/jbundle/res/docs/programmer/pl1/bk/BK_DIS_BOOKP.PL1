/****************************************************************
	Module: BK_DIS_BOOKP
	Top Level Logic: ENTER_AND_DIS
	Date: 10-Jul-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_DIS_BOOKP
	Enter Header and Display Table
****************************************************************/

%replace BK_DIS_BOOKP_1 by 495;
BK_DIS_BOOKP:
   procedure(
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_PASSENGERS_RECORD);
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_PASSENGERS_NO by  49;
%include "BK_DIS_BOOKP.DD";
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_PASSENGERS.DD";

declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_BOOKING     fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
   call INITIALIZE;
   call ENT_DIS_MAIN;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */


   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_DIS_BOOKP_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_DIS_BOOKP_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	ENT_DIS_MAIN
	Enter and Display - Main Logic
****************************************************************/

ENT_DIS_MAIN:
	procedure;

declare		ERROR_BK_TOUR        fixed binary (15);

   /* RESET_INPUT_ERROR - Set input error to NO */

   ERROR_INPUT_SCREEN = NO;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (BK_DIS_BOOKP_1);
   NOT_FIRST_TIME = YES;
   call ENTER_DATA_A;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;


   /* BEFORE_LOGIC - Before logic */


   /* SAVE_BK_INFO - Save the current booking for a sec */

   declare BOOKING_NO_SAVE fixed binary(31);
   BOOKING_NO_SAVE = BOOKING_NO;

   if BOOKING_NO ^= 0 then
      do;

      /* UPDATE_BOOK_NUL - Update the booking record - Don't unlock */

      call UPDATE_RECORD (BK_BOOKING_NO+?LOCK_RECORD,ERROR_CODE);
      end;

   call TABLE_DISPLAY;

   /* AFTER_LOGIC - Other Logic */


   /* RESTORE_BKP_INFO - Restore booking and reset pax seq */


      /* RESTORE_BK_INFO - Restore the original booking information */

      if BOOKING_NO_SAVE = 0 then
         do;

         /* INIT_HDR_DATA - Zero everything before starting */

         BOOKING_NO = 0;
         BK_MODIFICATION = 0;
         BK_NEXT_MOD = 0;
         BK_AGENCY = -1;
         BK_PAX = 0;
         BK_TOUR_NUM = 0;
         BK_TOUR_CODE = "";
         BK_DEPARTURE = 0;

         TOUR_NO = 0;
         TOUR_DEP_DATE = 0;
         TOUR_TYPE = " ";
         TOUR_RATE_DEF = "";
         TOUR_RATE_CLASS = "";
         TOUR_DEF_CUTOFF = 0;

         HDR_TOUR_CODE = "";
         HDR_END_ON = 0;

         end;
      else
         do;
         if (BK_MODIFICATION ^= 0) ! (BOOKING_NO ^= BOOKING_NO_SAVE) then
            do;
            BK_MODIFICATION = 0;
            BOOKING_NO = BOOKING_NO_SAVE;

            /* READ_BOOK_LOCK - Read the booking record and lock it */

            call READ_KEYED (BK_BOOKING_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_BK_BOOKING);
            if ERROR_BK_BOOKING = RECORD_LOCKED then
               do;
               call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
               call PRESS_RETURN;
               end;
            if ERROR_BK_BOOKING > 3 then
               call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
            end;
         end;

      /* RESTORE_BK_TOUR - Restore the tour and tour header info */

      if BOOKING_NO ^= 0 then
         do;
         if BK_TOUR_CODE ^= "" then if BK_DEPARTURE ^= 0 then
            if (BK_TOUR_CODE ^= HDR_TOUR_CODE) !
               (BK_DEPARTURE < HDR_START_ON) ! (BK_DEPARTURE > HDR_END_ON) then
                  do;

                  /* GET_TOUR_HDR - Get the tour header */

                  ERROR_CODE = NORMAL_RETURN;

                  HDR_TOUR_CODE = BK_TOUR_CODE;
                  HDR_END_ON = BK_DEPARTURE;
                  if HDR_END_ON = 0 then
                     HDR_END_ON = TODAYS_DATE();
                  call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
                  if ERROR_CODE ^= END_OF_FILE then
                     call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

                  if BK_TOUR_CODE ^= HDR_TOUR_CODE then
                     ERROR_CODE = END_OF_FILE;
                  if BK_DEPARTURE ^= 0 then if BK_DEPARTURE < HDR_START_ON then
                     ERROR_CODE = END_OF_FILE;

                  end;
         if BK_TOUR_NUM ^= 0 then
            if BK_TOUR_NUM ^= TOUR_NO then
               do;
               TOUR_NO = BK_TOUR_NUM;

               /* READ_TOUR_REC - Read the tour file record */

               call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_BK_TOUR);
               if ERROR_BK_TOUR > 3 then
                  call PRINT_ERROR (BK_TOUR_NO,ERROR_BK_TOUR);
               end;
         end;



      /* NO_PAX_SEQ - Set pax seq to zero to get booking air */

      BK_PAX_SEQ = 0;
      BK_PAX_SHARE_SEQ = 0;

return;
end;	/* ENT_DIS_MAIN         */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
BK_PAX_DATE = TODAYS_DATE()-365;
do LOOP_INDEX =  11 to  12;
   if LOOP_INDEX =  12 then
      BK_PAX_DATE = TODAYS_DATE()-365;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	TABLE_DISPLAY
	Display the table info
****************************************************************/

TABLE_DISPLAY:
	procedure;

declare		BK_PAX_MOD_SAVE      fixed binary (15);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		RECORD_NUMBER        fixed binary (15);
declare		BK_PAX_LAST_NAME_ARR(15) character (       10);
declare		BK_PAX_BK_NO_ARRAY(15) fixed binary (31);
declare		BK_PAX_SEQ_ARRAY(15) fixed binary (15);
declare		BK_PASSENGERS_ERROR  fixed binary (15);
declare		BK_PAX_LAST_NAME_SAV character (       10);
declare		BK_PAX_BK_NO_SAVE    fixed binary (31);
declare		BK_PAX_SEQ_SAVE      fixed binary (15);
declare		ANSWER               character (1);
BK_PAX_MOD = 0;
BK_PAX_MOD_SAVE = BK_PAX_MOD;
BK_PAX_LAST_NAME = DIS_LAST_NAME;
BK_PAX_BK_NO = 0;
BK_PAX_SEQ = 0;
call SET_POSITION (BK_PASSENGERS_NO,KEY_AREA_2,ERROR_CODE);
DISPLAY_RECORDS = YES;
ERROR_CODE = 1;
do while (ERROR_CODE = 1);
   call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_2,ERROR_CODE);
   if (ERROR_CODE = END_OF_FILE) !
      (BK_PAX_MOD > BK_PAX_MOD_SAVE) then
         DISPLAY_RECORDS = NO;
   ERROR_CODE = 0;
   if DISPLAY_RECORDS = YES then
      do;

      /* CHECK_PAX_DATE - Read in the booking and change bk date */

      BK_MODIFICATION = 0;
      BOOKING_NO = BK_PAX_BK_NO;

      /* READ_BK_REC - Read the booking record */

      call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_BK_BOOKING);
      if ERROR_BK_BOOKING > 3 then
         call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
      if ERROR_BK_BOOKING = NORMAL_RETURN then
         do;
         if BK_DATE <= BK_PAX_DATE then
            ERROR_CODE = 1;
         end;
      else
         do;
         BK_DATE = 0;
         end;

      end;
end;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 15;
      BK_PAX_LAST_NAME_ARR(RECORD_NUMBER) = "";
      BK_PAX_BK_NO_ARRAY(RECORD_NUMBER) = 0;
      BK_PAX_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_PASSENGERS_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_PASSENGERS_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 15) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =  13 to  22;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         BK_PAX_LAST_NAME_ARR(RECORD_NUMBER) = BK_PAX_LAST_NAME;
         BK_PAX_BK_NO_ARRAY(RECORD_NUMBER) = BK_PAX_BK_NO;
         BK_PAX_SEQ_ARRAY(RECORD_NUMBER) = BK_PAX_SEQ;
         ERROR_CODE = 1;
         do while (ERROR_CODE = 1);
            call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_2,BK_PASSENGERS_ERROR);
            if (BK_PAX_MOD > BK_PAX_MOD_SAVE) then
               BK_PASSENGERS_ERROR = END_OF_FILE;
            ERROR_CODE = 0;
            if BK_PASSENGERS_ERROR ^= END_OF_FILE then
               do;

               /* CHECK_PAX_DATE - Read in the booking and change bk date */

               BK_MODIFICATION = 0;
               BOOKING_NO = BK_PAX_BK_NO;

               /* READ_BK_REC - Read the booking record */

               call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_BK_BOOKING);
               if ERROR_BK_BOOKING > 3 then
                  call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
               if ERROR_BK_BOOKING = NORMAL_RETURN then
                  do;
                  if BK_DATE <= BK_PAX_DATE then
                     ERROR_CODE = 1;
                  end;
               else
                  do;
                  BK_DATE = 0;
                  end;

               end;
         end;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      BK_PAX_LAST_NAME_SAV = BK_PAX_LAST_NAME_ARR(15);
      BK_PAX_BK_NO_SAVE = BK_PAX_BK_NO_ARRAY(15);
      BK_PAX_SEQ_SAVE = BK_PAX_SEQ_ARRAY(15);
      BK_PAX_MOD = BK_PAX_MOD_SAVE;
      if BK_PASSENGERS_ERROR = END_OF_FILE then
         GET_OUT = YES;
      else
         do;
         call OUTPUT_LINE (24,10,"Stop Displaying?");
         call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
         call CLEAR_TO_BOS (24);
         if (ANSWER = "Y") then
            GET_OUT = YES;
         end;
      end;
   else
      GET_OUT = YES;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 15;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if BK_PAX_LAST_NAME_ARR(RECORD_NUMBER) ^= "" then
         do LOOP_INDEX =13 to  22;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_DISPLAY        */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
