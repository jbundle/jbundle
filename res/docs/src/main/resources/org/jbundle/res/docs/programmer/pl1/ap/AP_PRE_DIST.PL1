/****************************************************************
	Module: AP_PRE_DIST
	Top Level Logic: PP_DIST_LOGIC
	Date: 24-Jul-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AP_PRE_DIST
	Prepayment Distribution - Top Level
****************************************************************/

%replace AP_PRE_DIST_1 by 123;
AP_PRE_DIST:
   procedure;
%replace AP_OPEN_NO by  32;
%replace AP_VENDOR_NO by  30;
%replace AD_CURR_NO by  25;
%replace AP_PYMT_HIST_NO by  33;
%replace AP_CONTROL_NO by  29;
%include "AP_OPEN.DD";
%include "AP_VENDOR.DD";
%include "AD_CURR.DD";
%include "AP_PRE_DIST.DD";
%include "AP_PYMT_HIST.DD";
%include "AP_CONTROL.DD";

declare		END_PP_DIST_MAIN     bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_COUNT_SELECT     bit (1);
declare		END_UPDATE_SELECT    bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
   call INITIALIZE;
   END_PP_DIST_MAIN = NO;
   do while (END_PP_DIST_MAIN ^= YES);
      call PP_DIST_MAIN;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AP_OPEN_VENDOR = "";
   AP_OPEN_TOUR = 0;
   AP_OPEN_TOUR_GL = 0;
   AP_SERVICES = "";
   AP_END_SVC = 0;
   AP_OPEN_AP_ACCT = 0;
   AP_V_BASED_SEQ = 0;
   AP_LAST_ACTIVITY = 0;
   AP_CUR_BAL = 0;
   AP_MTD_PUR = 0;
   AP_YTD_PUR = 0;
   AP_LAST_PUR = 0;
   AP_SELECT_AMT = 0;
   AP_SELECT_STATUS = "N";
   AP_COMM_CODE = "F";
   AP_VEN_TAX_ID = "";
   CURR_CODE = "";
   LAST_EX_DATE = TODAYS_DATE();
   COSTING_EXCH = 0;
   CURR_INT_DESC = "Dollar";
   AP_REC_NO = 9999;
   AP_DEF_AC = 1;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AP_PRE_DIST_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (AP_OPEN_NO,"AP_OPEN",byteaddr(AP_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_OPEN_NO,ERROR_CODE);
   call OPEN_FILE (AP_VENDOR_NO,"AP_VENDOR",byteaddr(AP_VENDOR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_VENDOR_NO,ERROR_CODE);
   call OPEN_FILE (AD_CURR_NO,"AD_CURR",byteaddr(AD_CURR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_CURR_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (AP_PRE_DIST_RECORD) );
   call OPEN_FILE (AP_PYMT_HIST_NO,"AP_PYMT_HIST",byteaddr(AP_PYMT_HIST_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_PYMT_HIST_NO,ERROR_CODE);
   call OPEN_FILE (AP_CONTROL_NO,"AP_CONTROL",byteaddr(AP_CONTROL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_CONTROL_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	PP_DIST_MAIN
	Mainline logic - Prepayment dist.
****************************************************************/

PP_DIST_MAIN:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_AP_OPEN        fixed binary (15);

   /* RESET_INPUT_ERROR - Set input error to NO */

   ERROR_INPUT_SCREEN = NO;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (AP_PRE_DIST_1);
   NOT_FIRST_TIME = YES;
   call ENTER_DATA_A;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_PP_DIST_MAIN = YES;
      return;
      end;


   /* READ_RECORD - Read the record */

   call READ_KEYED (AP_OPEN_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_AP_OPEN);
   if ERROR_AP_OPEN = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      return;
      end;
   if ERROR_AP_OPEN > 3 then
      call PRINT_ERROR (AP_OPEN_NO,ERROR_AP_OPEN);

   /* CHECK_PP - Record found? */

   ERROR_INPUT_SCREEN = NO;
   if ERROR_AP_OPEN = NORMAL_RETURN then
      do;

      /* CHECK_PP_TYPE - Check prepayment type */

      if AP_ENTRY_TYPE ^= PRPYMT then if AP_ENTRY_TYPE ^= DR_MEMO then
         do;
         call DISPLAY_MESSAGE("This is not a prepayment or debit memo!!!<BEL>"c);
         call PRESS_RETURN;
         return;
         end;

      /*  Don't use this: If it was properly distributed, the type is changed
      if AP_INV_BAL = 0 then
         do;
         call DISPLAY_MESSAGE ("This prepayment memo has already been distributed!!!<BEL>"c);
         call PRESS_RETURN;
         return;
         end;
      */

      end;
   else
      do;

      /* RECORD_NOT_FOUND - Record not found */

      call DISPLAY_MESSAGE("Record not found!!!<BEL>"c);
      call PRESS_RETURN;
      ERROR_INPUT_SCREEN = YES;

      if ERROR_INPUT_SCREEN then return;
      end;
   call DISPLAY_DATA_B;

   /* PROC_OCCURRING - Processing occurring, please wait msg */

   call PROCESSING_OCCURRING;
   call DUMP_BUFFER;


   /* SAVE_PP_ENTRY - Save the prepayment entry number */

   PP_SAVE = AP_ENTRY_NO;
   PP_AMOUNT = -AP_INV_BAL;
   PP_TYPE = AP_ENTRY_TYPE;
   PP_SAVE_EXCH = AP_DEP_EXCH;
   PP_COUNT = 0;
   PP_AMOUNT_USD = -AP_INV_BAL_USD;
   PP_GL_ACCT = AP_OPEN_AP_ACCT;
   PP_DATE = AP_INV_ENTERED;

   PP_CHECK = "N";


   /* GET_TOTAL_SELECT - Add up the total selection */


      /* ZERO_SELECT - Zero the selection */

      AP_SELECT_AMT = 0;


      /* SET_FIRST - Set the record pointer to the first rec */

      AP_OPEN_SELECT = "Y";
      AP_OPEN_VENDOR = AP_VEN_NO;
      AP_START_SVC = 0;
      AP_ENTRY_NO = 0;
      call SET_POSITION (AP_OPEN_NO,KEY_AREA_5,ERROR_CODE);
      END_COUNT_SELECT = NO;
      do while (END_COUNT_SELECT ^= YES);
         call COUNT_SELECT;
      end;
   call DISPLAY_DATA_D;

   /* CHECK_PP_AMOUNT - Is the prepayment amount okay? */

   if ERROR_CODE = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE ("Selection in use by " !! LOCK_NAME() );
      call PRESS_RETURN;
      return;
      end;

   AP_SELECT_AMT = floor(AP_SELECT_AMT * 100 + 0.5) / 100;
   PP_AMOUNT = floor(PP_AMOUNT * 100 + 0.5) / 100;

   if PP_CHECK = "Y" then
      do;
      call DISPLAY_MESSAGE("Selection may only contain invoices and CR memos<BEL>"c);
      call PRESS_RETURN;
      return;
      end;

   if AP_SELECT_AMT = 0 then if AP_INV_BAL ^= 0 then
      do;
      call DISPLAY_MESSAGE("Selection is zero!"c);
      call PRESS_RETURN;
      return;
      end;

   if AP_SELECT_AMT > PP_AMOUNT then
      do;
      call DISPLAY_MESSAGE("Selection is greater than this prepayment<BEL>"c);
      call PRESS_RETURN;
      return;
      end;

   if AP_SELECT_AMT ^= PP_AMOUNT then
      do;
      call DISPLAY_MESSAGE("Warning: selection is not equal to this prepayment");
      end;

   declare ANSWER character(1);
   declare RETURN_CODE fixed binary;
   declare INPUT_LENGTH fixed binary;
   call OUTPUT_LINE(20,10,"Do you want to distribute this prepayment now?");
   call INPUT_DATA(20,57,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
   call CLEAR_TO_BOS(20);

   if ANSWER ^= "Y" then
      return;

   END_UPDATE_SELECT = NO;
   do while (END_UPDATE_SELECT ^= YES);
      call UPDATE_SELECT;
   end;

   /* RESTORE_PP_ENTRY - Get the prepayment number back */

   AP_ENTRY_NO = PP_SAVE;


   /* READ_RECORD - Read the record */

   call READ_KEYED (AP_OPEN_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_AP_OPEN);
   if ERROR_AP_OPEN = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      return;
      end;
   if ERROR_AP_OPEN > 3 then
      call PRINT_ERROR (AP_OPEN_NO,ERROR_AP_OPEN);

   /* UPDATE_PP_AMT - Update the new prepayment balance */

   AP_INV_BAL = floor((AP_INV_BAL + AP_SELECT_AMT) * 100 + 0.5) / 100;
   AP_INV_BAL_USD = -PP_AMOUNT_USD;
   if AP_INV_BAL = 0 then
      do;
      if AP_ENTRY_TYPE = PRPYMT then
         AP_ENTRY_TYPE = DIST_PP;
      if AP_ENTRY_TYPE = DR_MEMO then
         AP_ENTRY_TYPE = DIST_DR;
      end;


   /* UPDATE_RECORD - Update the record */

   call UPDATE_RECORD (AP_OPEN_NO,ERROR_CODE);
return;
end;	/* PP_DIST_MAIN         */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

declare		INPUT_LENGTH         fixed binary (15);
do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	DISPLAY_DATA_B
	Display the screen data in group B
****************************************************************/

DISPLAY_DATA_B:
	procedure;

do LOOP_INDEX =   2 to   2;
   call OUTPUT_FIELD (LOOP_INDEX);
   if LOOP_INDEX =   2 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AP_VEN_NO = AP_OPEN_VENDOR;
      call READ_KEYED (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         AP_VEN_NAME = "** RECORD NOT FOUND **";
         end;
      else
         do;
         do LOOP_INDEX =   3 to   3;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =   4 to   7;
   call OUTPUT_FIELD (LOOP_INDEX);
   if LOOP_INDEX =   4 then
      do;

      /* READ_SECOND_2 - Read secondary info */

      CURR_CODE = AP_OPEN_CURR;
      call READ_KEYED (AD_CURR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         CURR_DESC = "** RECORD NOT FOUND **";
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_B       */

/****************************************************************
	COUNT_SELECT
	Count up the current selection
****************************************************************/

COUNT_SELECT:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (AP_OPEN_NO+?LOCK_RECORD,KEY_AREA_5,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AP_OPEN_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AP_OPEN_SELECT > "Y") !
   (AP_OPEN_VENDOR > AP_VEN_NO) then
      do;
      END_COUNT_SELECT = YES;
      return;
      end;

   /* ADD_SELECT - Add this to the selection */

   AP_SELECT_AMT=floor((AP_SELECT_AMT + AP_AMT_SELECTED) * 100 + 0.5)/100;


   /* OTHER_LOGIC_2 - Other logic */


   /* CHECK_SELECT_TYPE - Check type to make sure either I or C */

   if ERROR_CODE = RECORD_LOCKED then
      do;
      END_COUNT_SELECT = YES;
      return;
      end;

   if AP_ENTRY_TYPE ^= INVOICE then if AP_ENTRY_TYPE ^= CR_MEMO then if AP_ENTRY_TYPE ^= CR_INV then
      do;
      PP_CHECK = "Y";
      do;
      END_COUNT_SELECT = YES;
      return;
      end;
      end;

   PP_COUNT = PP_COUNT + 1;

return;
end;	/* COUNT_SELECT         */

/****************************************************************
	DISPLAY_DATA_D
	Display the data in screen group D
****************************************************************/

DISPLAY_DATA_D:
	procedure;

do LOOP_INDEX =   8 to   9;
   call OUTPUT_FIELD (LOOP_INDEX);
   if LOOP_INDEX =   8 then
      do;

      /* READ_SECOND_2 - Read secondary info */

      CURR_CODE = AP_OPEN_CURR;
      call READ_KEYED (AD_CURR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         CURR_DESC = "** RECORD NOT FOUND **";
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_D       */

/****************************************************************
	UPDATE_SELECT
	Update the current selection
****************************************************************/

UPDATE_SELECT:
	procedure;


   /* SET_FIRST - Set the record pointer to the first rec */

   AP_OPEN_SELECT = "Y";
   AP_OPEN_VENDOR = AP_VEN_NO;
   AP_START_SVC = 0;
   AP_ENTRY_NO = 0;
   call SET_POSITION (AP_OPEN_NO,KEY_AREA_5,ERROR_CODE);

   /* READNEXT - Read the next record */

   call READ_NEXT (AP_OPEN_NO+?LOCK_RECORD,KEY_AREA_5,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AP_OPEN_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AP_OPEN_SELECT > "Y") !
   (AP_OPEN_VENDOR > AP_VEN_NO) then
      do;
      END_UPDATE_SELECT = YES;
      return;
      end;

   /* MOVE_PYMT_PP - Set up the payment history file */

   AP_HIST_BANK = 0;
   AP_HIST_ENTRY = AP_ENTRY_NO;
   AP_HIST_CHECK = PP_SAVE;
   AP_HIST_SEQ = 1;
   AP_HIST_TYPE = "P";
   if PP_TYPE = DR_MEMO then
      AP_HIST_TYPE = "D";
   AP_HIST_CHECK_DATE = TODAYS_DATE();
   AP_HIST_CK_AMT = PP_AMOUNT;
   AP_HIST_AMT_APPL = AP_AMT_SELECTED;
   if (PP_COUNT = 1) & (AP_SELECT_AMT = PP_AMOUNT) then
      AP_HIST_APPL_USD = PP_AMOUNT_USD;
   else
      AP_HIST_APPL_USD=floor(AP_AMT_SELECTED * PP_SAVE_EXCH * 100 + 0.5)/100;
   PP_COUNT = PP_COUNT - 1;
   PP_AMOUNT_USD = floor((PP_AMOUNT_USD - AP_HIST_APPL_USD) * 100 + 0.5) / 100;
   AP_HIST_APPL_GL = 0;
   AP_HIST_GL = PP_GL_ACCT;


   /* WRITE_RECORD_3 - Write the record */

   ERROR_CODE = KEY_ALREADY_EXISTS;
   do while(ERROR_CODE = KEY_ALREADY_EXISTS);
      call WRITE_RECORD (AP_PYMT_HIST_NO,ERROR_CODE);
      if ERROR_CODE = KEY_ALREADY_EXISTS then
         AP_HIST_SEQ = AP_HIST_SEQ + 1;
   end;

   /* UPDATE_PP_INFO - Update the invoice selection to zero */

   AP_INV_BAL = floor((AP_INV_BAL - AP_AMT_SELECTED) * 100 + 0.5) / 100;
   AP_INV_BAL_USD = floor(AP_INV_BAL * PP_SAVE_EXCH * 100 + 0.5) / 100;
   AP_PAID_USD = floor((AP_PAID_USD + AP_HIST_APPL_USD) * 100 + 0.5) / 100;
   if AP_PYMT_DATE = 0 then
      AP_PYMT_DATE = TODAYS_DATE();

   if AP_INV_BAL = 0 then
      do;
      if AP_ENTRY_TYPE = INVOICE then
         AP_ENTRY_TYPE = PD_INV;
      if AP_ENTRY_TYPE = CR_INV then
         AP_ENTRY_TYPE = PD_CINV;
      if AP_ENTRY_TYPE = CR_MEMO then
         AP_ENTRY_TYPE = PD_CRMM;
      end;
   if AP_ENTRY_TYPE = PP_REQ then
      AP_ENTRY_TYPE = PRPYMT;
   if AP_ENTRY_TYPE = BROKER then
      do;
      AP_ENTRY_TYPE = PD_BROK;
      AP_INV_BAL = 0;
      AP_INV_BAL_USD = 0;
      end;

   AP_OPEN_SELECT = "N";
   AP_AMT_SELECTED = 0;

   if AP_GL_STATUS = PA_TYPE then
      AP_GL_ACTION_DATE = AP_PYMT_DATE;


   /* UPDATE_RECORD - Update the record */

   call UPDATE_RECORD (AP_OPEN_NO,ERROR_CODE);
return;
end;	/* UPDATE_SELECT        */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AP_OPEN_NO);
   call CLOSE_FILE (AP_VENDOR_NO);
   call CLOSE_FILE (AD_CURR_NO);
   call CLOSE_FILE (AP_PYMT_HIST_NO);
   call CLOSE_FILE (AP_CONTROL_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
