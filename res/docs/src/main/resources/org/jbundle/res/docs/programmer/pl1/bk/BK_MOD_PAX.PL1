/****************************************************************
	Module: BK_MOD_PAX
	Top Level Logic: DIS_TABLE_DISPLAY
	Date: 23-Dec-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_MOD_PAX
	Top Level - Table Display
****************************************************************/

%replace BK_MOD_PAX_1 by 757;
BK_MOD_PAX:
   procedure(
      BK_TOUR_HDR_RECORD,
      BK_TOUR_RECORD,
      BK_BOOKING_RECORD,
      BK_PASSENGERS_RECORD);
%replace BK_TOUR_HDR_NO by  58;
%replace BK_TOUR_NO by  34;
%replace BK_BOOKING_NO by   9;
%replace BK_PASSENGERS_NO by  49;
%include "BK_TOUR_HDR.DD";
%include "BK_TOUR.DD";
%include "BK_BOOKING.DD";
%include "BK_PASSENGERS.DD";

declare		ERROR_CODE           fixed binary (15);
   call INITIALIZE;
   call DIS_TABLE_DIS;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */


   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */


   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_MOD_PAX_1);

   /* OPEN_FILES - Open all the files for this program */

return;
end;	/* INITIALIZE           */

/****************************************************************
	DIS_TABLE_DIS
	Mainline logic
****************************************************************/

DIS_TABLE_DIS:
	procedure;


   /* BEFORE_LOGIC - Before logic */


   /* CHECK_BOOKING - Is this a booking-in-progress? */

   if BOOKING_NO = 0 then
      return;

   call TABLE_DISPLAY;

   /* AFTER_LOGIC - Other Logic */

return;
end;	/* DIS_TABLE_DIS        */

/****************************************************************
	TABLE_DISPLAY
	Display the table info
****************************************************************/

TABLE_DISPLAY:
	procedure;

declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		BK_PAX_MOD_SAVE      fixed binary (15);
declare		BK_PAX_BK_NO_SAVE    fixed binary (31);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		RECORD_NUMBER        fixed binary (15);
declare		BK_PAX_SEQ_ARRAY(15) fixed binary (15);
declare		BK_PASSENGERS_ERROR  fixed binary (15);
declare		BK_PAX_SEQ_SAVE      fixed binary (15);
declare		ANSWER               character (1);
BK_SINGLE = 0;
BK_DOUBLE = 0;
BK_TRIPLE = 0;
BK_QUAD = 0;
BK_PAX = 0;
BK_PAX_MOD = BK_MODIFICATION;
BK_PAX_MOD_SAVE = BK_PAX_MOD;
BK_PAX_BK_NO = BOOKING_NO;
BK_PAX_BK_NO_SAVE = BK_PAX_BK_NO;
BK_PAX_SEQ = 0;
call SET_POSITION (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (BK_PAX_MOD > BK_PAX_MOD_SAVE) !
   (BK_PAX_BK_NO > BK_PAX_BK_NO_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 15;
      BK_PAX_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_PASSENGERS_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_PASSENGERS_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 15) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =  11 to  14;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;

         /* ADD_PAX - Add to the Pax count */

         BK_PAX = BK_PAX + 1;
         do case (BK_PAX_ROOM_CODE);
         	BK_SINGLE = BK_SINGLE + 1;
         	BK_DOUBLE = BK_DOUBLE + 1;
         	BK_TRIPLE = BK_TRIPLE + 1;
         	BK_QUAD = BK_QUAD + 1;
         end;
         otherwise
         do;
         end;

         BK_PAX_SEQ_ARRAY(RECORD_NUMBER) = BK_PAX_SEQ;
         call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_1,BK_PASSENGERS_ERROR);
         if (BK_PAX_MOD > BK_PAX_MOD_SAVE) !
         (BK_PAX_BK_NO > BK_PAX_BK_NO_SAVE) then
            BK_PASSENGERS_ERROR = END_OF_FILE;
         if BK_PASSENGERS_ERROR = END_OF_FILE then
            do;
            call SET_ROW_OFFSET (0);
            do LOOP_INDEX =  17 to  21;
               call OUTPUT_FIELD (LOOP_INDEX);
            end;
            LOOP_INDEX = LOOP_INDEX - 1;
            end;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      BK_PAX_SEQ_SAVE = BK_PAX_SEQ_ARRAY(15);
      BK_PAX_MOD = BK_PAX_MOD_SAVE;
      BK_PAX_BK_NO = BK_PAX_BK_NO_SAVE;
      if BK_PASSENGERS_ERROR = END_OF_FILE then
         do;
         GET_OUT = YES;
         call PRESS_RETURN;
         end;
      else
         do;
         call OUTPUT_LINE (24,10,"Stop Displaying?");
         call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
         call CLEAR_TO_BOS (24);
         if (ANSWER = "Y") then
            GET_OUT = YES;
         end;
      end;
   else
      do;
      GET_OUT = YES;
      call PRESS_RETURN;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 15;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if BK_PAX_SEQ_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX =11 to  14;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_DISPLAY        */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
