/****************************************************************
	Module: PR_RECOUNT
	Top Level Logic: PR_RECOUNT_LOGIC
	Date: 14-May-91
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	PR_RECOUNT
	Recount the employee totals
****************************************************************/

%replace PR_RECOUNT_1 by 829;
%replace PR_RECOUNT_2 by 830;
PR_RECOUNT:
   procedure;
%replace EMPLOYEE_NO by   6;
%replace PR_HIST_NO by  27;
%include "PR_RECOUNT.DD";
%include "EMPLOYEE.DD";
%include "PR_HIST.DD";

declare		END_PR_RECOUNT_MAIN  bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_RECOUNT_THRU_PR  bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		END_COUNT_THRU_HIST  bit (1);
declare		END_COUNT_THRU_YTD   bit (1);
   call INITIALIZE;
   END_PR_RECOUNT_MAIN = NO;
   do while (END_PR_RECOUNT_MAIN ^= YES);
      call PR_RECOUNT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   EMP_STATE = "CA";
   FED_ALLOW = 2;
   PAY_FREQ = "W";
   PAY_TYPE = "H";
   IN_PENSION = "Y";
   DE_1 = "";
   DE_2 = "";
   DE_3 = "";
   DE_4 = "";
   QTD_SS_GROSS = 0;
   QTD_STATE_GROSS = 0;
   YTD_SS_GROSS = 0;
   YTD_STATE_GROSS = 0;
   PR_HIST_SS_GROSS = 0;
   PR_HIST_STATE_GROSS = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (PR_RECOUNT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (PR_RECOUNT_RECORD) );
   call OPEN_FILE (EMPLOYEE_NO,"EMPLOYEE",byteaddr(EMPLOYEE_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (EMPLOYEE_NO,ERROR_CODE);
   call OPEN_FILE (PR_HIST_NO,"PR_HIST",byteaddr(PR_HIST_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (PR_HIST_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	PR_RECOUNT_MAIN
	Mainline - Recount employee totals
****************************************************************/

PR_RECOUNT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_PR_RECOUNT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_PR_RECOUNT_MAIN = YES;
      return;
      end;


   /* NO_CODE - This section has no code */

   /* No code in this section */

   /* BEFORE_LOGIC - Before logic */


   /* SET_FIRST - Set the record pointer to the first rec */

   EMP_NO = 0;
   call SET_POSITION (EMPLOYEE_NO,KEY_AREA_1,ERROR_CODE);
   END_RECOUNT_THRU_PR = NO;
   do while (END_RECOUNT_THRU_PR ^= YES);
      call RECOUNT_THRU_PR;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* RETURN - Normal Return */

   do;
   END_PR_RECOUNT_MAIN = YES;
   return;
   end;

return;
end;	/* PR_RECOUNT_MAIN      */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   7;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  7,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  7 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	RECOUNT_THRU_PR
	Read thru the employee file and fix
****************************************************************/

RECOUNT_THRU_PR:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_EMPLOYEE       fixed binary (15);

   /* READNEXT - Read the next record */

   call READ_NEXT (EMPLOYEE_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (EMPLOYEE_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) then
      do;
      END_RECOUNT_THRU_PR = YES;
      return;
      end;

   /* INIT_EMP - Initialize the employee values */

   if PR_FIX = "Y" then
      do;
      if QUARTER_RECOUNT = "Y" then
         do;

         /* PR_SET_QTD_ZERO - Set the QTD data to zero! */

         QTD_TXBL_GROSS = 0;
         QTD_SS_GROSS = 0;
         QTD_STATE_GROSS = 0;
         QTD_NON_TAX = 0;
         QTD_FED_WH = 0;
         QTD_STATE_WH = 0;
         QTD_LOCAL_WH = 0;
         QTD_EMP_FICA = 0;
         QTD_SDI_WH = 0;
         QTD_DEDUCT = 0;
         QTD_NET = 0;
         QTD_OT_HRS = 0;
         QTD_SICK_HRS = 0;
         QTD_SICK_PAY = 0;
         QTD_WEEKS = 0;

         end;
      if YEAR_RECOUNT = "Y" then
         do;

         /* PR_SET_YTD_ZERO - Set the YTD data to zero */

         YTD_1 = 0;
         YTD_2 = 0;
         YTD_3 = 0;
         YTD_4 = 0;
         YTD_REGULAR = 0;
         YTD_OT = 0;
         YTD_SP_1 = 0;
         YTD_SP_2 = 0;
         YTD_TAX_GROSS = 0;
         YTD_SS_GROSS = 0;
         YTD_STATE_GROSS = 0;
         YTD_NON_TAX = 0;
         YTD_FED_WH = 0;
         YTD_STATE_WH = 0;
         YTD_LOCAL_WH = 0;
         YTD_EMP_FICA = 0;
         YTD_SDI_WH = 0;
         YTD_DEDUCT = 0;
         YTD_NET_PAID = 0;
         YTD_SUI_PAID = 0;
         YTD_FUI_PAID = 0;
         YTD_OVERTIME = 0;
         YTD_SICK_HRS = 0;
         YTD_SICK_PAY = 0;

         end;
      end;


   /* SET_FIRST_2 - Set the file pointer to the first key */

   EMP_NO_HIST = EMP_NO;
   PR_HIST_CK_DATE = QUARTER_START;
   PR_HIST_CK_NO = 0;
   PR_HIST_SEQ = 0;
   call SET_POSITION (PR_HIST_NO,KEY_AREA_1,ERROR_CODE);
   END_COUNT_THRU_HIST = NO;
   do while (END_COUNT_THRU_HIST ^= YES);
      call COUNT_THRU_HIST;
   end;

   /* SET_FIRST_3 - Set first */

   EMP_NO_HIST = EMP_NO;
   PR_HIST_CK_DATE = YEAR_START;
   PR_HIST_CK_NO = 0;
   PR_HIST_SEQ = 0;
   call SET_POSITION (PR_HIST_NO,KEY_AREA_1,ERROR_CODE);
   END_COUNT_THRU_YTD = NO;
   do while (END_COUNT_THRU_YTD ^= YES);
      call COUNT_THRU_YTD;
   end;

   /* UPDATE_RECORD - Update the record */

   call UPDATE_RECORD (EMPLOYEE_NO,ERROR_CODE);

   /* READ_RECORD - Read the record */

   call READ_KEYED (EMPLOYEE_NO,KEY_AREA_1,ERROR_EMPLOYEE);
   if ERROR_EMPLOYEE > 3 then
      call PRINT_ERROR (EMPLOYEE_NO,ERROR_EMPLOYEE);
return;
end;	/* RECOUNT_THRU_PR      */

/****************************************************************
	COUNT_THRU_HIST
	Add up each history detail
****************************************************************/

COUNT_THRU_HIST:
	procedure;


   /* CHECK_NO_QTD - Don't count if no QTD recount */

   if (QUARTER_RECOUNT ^= "Y") ! (PR_FIX ^= "Y") then
      do;
      END_COUNT_THRU_HIST = YES;
      return;
      end;


   /* READNEXT_2 - Read the next record */

   call READ_NEXT (PR_HIST_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (PR_HIST_NO,ERROR_CODE);

   /* CHECK_END_2 - Check for end of records */

   if (ERROR_CODE = END_OF_FILE) !
   (EMP_NO_HIST > EMP_NO) !
   (PR_HIST_CK_DATE > QUARTER_END) then
      do;
      END_COUNT_THRU_HIST = YES;
      return;
      end;

   /* UPDATE_QTD_INFO - Update the employee QTD fields */

      QTD_TXBL_GROSS = floor((QTD_TXBL_GROSS + PR_HIST_GROSS) * 100 + 0.5) / 100;
      QTD_SS_GROSS = floor((QTD_SS_GROSS + PR_HIST_SS_GROSS) * 100 + 0.5) / 100;
      QTD_STATE_GROSS = floor((QTD_STATE_GROSS + PR_HIST_STATE_GROSS) * 100 + 0.5) / 100;
      QTD_NON_TAX = floor((QTD_NON_TAX + PR_HIST_NON_TAX) * 100 + 0.5) / 100;
      QTD_FED_WH = floor((QTD_FED_WH + PR_HIST_FED) * 100 + 0.5) / 100;
      QTD_STATE_WH = floor((QTD_STATE_WH + PR_HIST_STATE) * 100 + 0.5) / 100;
      QTD_LOCAL_WH = floor((QTD_LOCAL_WH + PR_HIST_LOCAL) * 100 + 0.5) / 100;
      QTD_EMP_FICA = floor((QTD_EMP_FICA + PR_HIST_FICA) * 100 + 0.5) / 100;
      QTD_SDI_WH = floor((QTD_SDI_WH + PR_HIST_SDI) * 100 + 0.5) / 100;
      QTD_DEDUCT = floor((QTD_DEDUCT + PR_HIST_ALL_DED) * 100 + 0.5) / 100;
      QTD_NET = floor((QTD_NET + PR_HIST_NET) * 100 + 0.5) / 100;
      QTD_WEEKS = floor((QTD_WEEKS + PR_HIST_WEEKS) * 100 + 0.5) / 100;

return;
end;	/* COUNT_THRU_HIST      */

/****************************************************************
	COUNT_THRU_YTD
	Count up the YTD values
****************************************************************/

COUNT_THRU_YTD:
	procedure;


   /* CHECK_NO_YTD - Skip if no YTD count */

   if (YEAR_RECOUNT ^= "Y") ! (PR_FIX ^= "Y") then
      do;
      END_COUNT_THRU_YTD = YES;
      return;
      end;


   /* READNEXT_2 - Read the next record */

   call READ_NEXT (PR_HIST_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (PR_HIST_NO,ERROR_CODE);

   /* CHECK_END_3 - Check for end */

   if (ERROR_CODE = END_OF_FILE) !
   (EMP_NO_HIST > EMP_NO) !
   (PR_HIST_CK_DATE > YEAR_END) then
      do;
      END_COUNT_THRU_YTD = YES;
      return;
      end;

   /* UPDATE_YTD_INFO - Update the employee's YTD info */

      YTD_TAX_GROSS = floor((YTD_TAX_GROSS + PR_HIST_GROSS) * 100 + 0.5) / 100;
      YTD_SS_GROSS = floor((YTD_SS_GROSS + PR_HIST_SS_GROSS) * 100 + 0.5) / 100;
      YTD_STATE_GROSS = floor((YTD_STATE_GROSS + PR_HIST_STATE_GROSS) * 100 + 0.5) / 100;
      YTD_NON_TAX = floor((YTD_NON_TAX + PR_HIST_NON_TAX) * 100 + 0.5) / 100;
      YTD_FED_WH = floor((YTD_FED_WH + PR_HIST_FED) * 100 + 0.5) / 100;
      YTD_STATE_WH = floor((YTD_STATE_WH + PR_HIST_STATE) * 100 + 0.5) / 100;
      YTD_LOCAL_WH = floor((YTD_LOCAL_WH + PR_HIST_LOCAL) * 100 + 0.5) / 100;
      YTD_EMP_FICA = floor((YTD_EMP_FICA + PR_HIST_FICA) * 100 + 0.5) / 100;
      YTD_SDI_WH = floor((YTD_SDI_WH + PR_HIST_SDI) * 100 + 0.5) / 100;
      YTD_DEDUCT = floor((YTD_DEDUCT + PR_HIST_ALL_DED) * 100 + 0.5) / 100;
      YTD_NET_PAID = floor((YTD_NET_PAID + PR_HIST_NET) * 100 + 0.5) / 100;

return;
end;	/* COUNT_THRU_YTD       */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (EMPLOYEE_NO);
   call CLOSE_FILE (PR_HIST_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
