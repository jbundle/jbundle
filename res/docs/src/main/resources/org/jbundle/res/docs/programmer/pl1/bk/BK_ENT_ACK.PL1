/****************************************************************
	Module: BK_ENT_ACK
	Top Level Logic: ENT_ACK_LOGIC
	Date: 22-Feb-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_ENT_ACK
	Enter acknowledgment
****************************************************************/

%replace BK_ENT_ACK_1 by 782;
BK_ENT_ACK:
   procedure(
      BK_TOUR_HDR_RECORD,
      BK_TOUR_RECORD,
      BK_BOOKING_RECORD);
%replace AP_OPEN_NO by  32;
%replace AP_VENDOR_NO by  30;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_TOUR_NO by  34;
%replace BK_BOOKING_NO by   9;
%include "AP_OPEN.DD";
%include "AP_VENDOR.DD";
%include "BK_ENT_ACK.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_TOUR.DD";
%include "BK_BOOKING.DD";

declare		END_END_ACK_MAIN     bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		KEY_NO               fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		ERROR_BK_TOUR        fixed binary (15);
   call INITIALIZE;
   END_END_ACK_MAIN = NO;
   do while (END_END_ACK_MAIN ^= YES);
      call END_ACK_MAIN;
   end;

   /* RESTORE_BK_TOUR - Restore the tour and tour header info */

   if BOOKING_NO ^= 0 then
      do;
      if BK_TOUR_CODE ^= "" then if BK_DEPARTURE ^= 0 then
         if (BK_TOUR_CODE ^= HDR_TOUR_CODE) !
            (BK_DEPARTURE < HDR_START_ON) ! (BK_DEPARTURE > HDR_END_ON) then
               do;

               /* GET_TOUR_HDR - Get the tour header */

               ERROR_CODE = NORMAL_RETURN;

               HDR_TOUR_CODE = BK_TOUR_CODE;
               HDR_END_ON = BK_DEPARTURE;
               if HDR_END_ON = 0 then
                  HDR_END_ON = TODAYS_DATE();
               call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE ^= END_OF_FILE then
                  call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

               if BK_TOUR_CODE ^= HDR_TOUR_CODE then
                  ERROR_CODE = END_OF_FILE;
               if BK_DEPARTURE ^= 0 then if BK_DEPARTURE < HDR_START_ON then
                  ERROR_CODE = END_OF_FILE;

               end;
      if BK_TOUR_NUM ^= 0 then
         if BK_TOUR_NUM ^= TOUR_NO then
            do;
            TOUR_NO = BK_TOUR_NUM;

            /* READ_TOUR_REC - Read the tour file record */

            call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_BK_TOUR);
            if ERROR_BK_TOUR > 3 then
               call PRINT_ERROR (BK_TOUR_NO,ERROR_BK_TOUR);
            end;
      end;

   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AP_OPEN_TOUR_GL = 0;
   AP_SERVICES = "";
   AP_START_SVC = 0;
   AP_END_SVC = 0;
   AP_V_BASED_SEQ = 0;
   AP_LAST_ACTIVITY = 0;
   AP_CUR_BAL = 0;
   AP_MTD_PUR = 0;
   AP_YTD_PUR = 0;
   AP_LAST_PUR = 0;
   AP_SELECT_AMT = 0;
   AP_SELECT_STATUS = "N";
   AP_COMM_CODE = "F";
   AP_VEN_TAX_ID = "";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_ENT_ACK_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (AP_OPEN_NO,"AP_OPEN",byteaddr(AP_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_OPEN_NO,ERROR_CODE);
   call OPEN_FILE (AP_VENDOR_NO,"AP_VENDOR",byteaddr(AP_VENDOR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_VENDOR_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (BK_ENT_ACK_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	END_ACK_MAIN
	Main-Logic Enter acknowledgements
****************************************************************/

END_ACK_MAIN:
	procedure;

declare		ERROR_AP_OPEN        fixed binary (15);

   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (BK_ENT_ACK_1);
   NOT_FIRST_TIME = YES;

   /* INPUT_KEY - Input the key-data from the screen */

   KEY_NO = 1;
   INPUT_LENGTH = 1;
   call INPUT_FIELD ( 11,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_END_ACK_MAIN = YES;
      return;
      end;
   FIRST_ITEM = 1;

   /* READ_AND_LOCK - Read the record and lock it */

   call READ_KEYED (AP_OPEN_NO+?LOCK_RECORD,KEY_NO,ERROR_AP_OPEN);
   if ERROR_AP_OPEN = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      return;
      end;
   if ERROR_AP_OPEN > 3 then
      call PRINT_ERROR (AP_OPEN_NO,ERROR_AP_OPEN);

   /* REQ_REC_FOUND - Record found? (If not, can only display) */

   ERROR_INPUT_SCREEN = NO;
   if ERROR_AP_OPEN = NORMAL_RETURN then
      do;
      call DISPLAY_DATA;
      end;
   else
      do;

      /* REC_NOT_FOUND - Display rec not found and do again */


         /* RECORD_NOT_FOUND - Record not found */

         call DISPLAY_MESSAGE("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         ERROR_INPUT_SCREEN = YES;


         /* DO_AGAIN - Return to do it again */

         return;

      if ERROR_INPUT_SCREEN then return;
      end;
   call ENTER_DATA_C;

   /* UPDATE_RECORD - Update the record */

   call UPDATE_RECORD (AP_OPEN_NO,ERROR_CODE);
return;
end;	/* END_ACK_MAIN         */

/****************************************************************
	DISPLAY_DATA
	Display the data for this screen
****************************************************************/

DISPLAY_DATA:
	procedure;

do LOOP_INDEX =  12 to  33;
   if LOOP_INDEX =  13 then
      do;

      /* SET_AP_TYPE - Set up the type description */

      do case (AP_ENTRY_TYPE);
         AP_ENTRY_TYPE_DESC = "Brk Pmt";
         AP_ENTRY_TYPE_DESC = "Dr Memo";
         AP_ENTRY_TYPE_DESC = "PrePymt";
         AP_ENTRY_TYPE_DESC = "Cr Memo";
         AP_ENTRY_TYPE_DESC = "Cr Inv";
         AP_ENTRY_TYPE_DESC = "Invoice";
         AP_ENTRY_TYPE_DESC = "Dr Memo";
         AP_ENTRY_TYPE_DESC = "PrePymt";
         AP_ENTRY_TYPE_DESC = "Brk Dft";
         AP_ENTRY_TYPE_DESC = "PP Req ";
         AP_ENTRY_TYPE_DESC = "Cr Memo";
         AP_ENTRY_TYPE_DESC = "Cr Inv";
         AP_ENTRY_TYPE_DESC = "Invoice";
         AP_ENTRY_TYPE_DESC = "Dep Est";
         AP_ENTRY_TYPE_DESC = "Fin Est";
      end;
      otherwise
         AP_ENTRY_TYPE_DESC = "";

      end;
   if LOOP_INDEX =  30 then
      do;

      /* SET_V_DESC - Set the Voucher Status Description */

      do case (AP_GL_STATUS + 1);
         AP_V_DESC = "Vch Held";
         AP_V_DESC = "No stat.";
         AP_V_DESC = "Vchr Rqd";
         AP_V_DESC = "Wait Ack";
         AP_V_DESC = "Ack Rcvd";
         AP_V_DESC = "Vch Prtd";
         AP_V_DESC = "Xln Reqd";
         AP_V_DESC = "Wait Xln";
         AP_V_DESC = "Ackn Xln";
         AP_V_DESC = "Xln Prtd";
         AP_V_DESC = "Reprt Vh";
         AP_V_DESC = "No V-Man";
         AP_V_DESC = "No V-Dep";
         AP_V_DESC = "No V-Inv";
         AP_V_DESC = "No V-CrM";
         AP_V_DESC = "No V-Pmt";
         AP_V_DESC = "No V-DrM";
         AP_V_DESC = "No V-PyA";
         AP_V_DESC = "No V-Pst";
      end;
      otherwise
         AP_V_DESC = "No Vchr ";

      end;
   call OUTPUT_FIELD (LOOP_INDEX);
   if LOOP_INDEX =  15 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AP_VEN_NO = AP_OPEN_VENDOR;
      call READ_KEYED (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         AP_VEN_NAME = "** RECORD NOT FOUND **";
         end;
      else
         do;
         end;
      end;
   if LOOP_INDEX =  17 then
      do;

      /* READ_SECOND_2 - Read secondary info */

      TOUR_NO = AP_OPEN_TOUR;
      call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         TOUR_DESC = "** RECORD NOT FOUND **";
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA         */

/****************************************************************
	ENTER_DATA_C
	Enter the screen data in group C
****************************************************************/

ENTER_DATA_C:
	procedure;

do LOOP_INDEX =  34 to  34;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =  34 then
      do;

      /* CHECK_ACK - Was acknowledgement set? */

      if ACK_VOUCHER = "Y" then
         do;
         if (AP_GL_STATUS ^= ACK_VCHR) & (AP_GL_STATUS ^= ACK_CXL) then
            do;
            call DISPLAY_MESSAGE ("Voucher is not waiting for acknowledgement!");
            call PRESS_RETURN;
            end;
         else
            do;
            if AP_GL_STATUS = ACK_VCHR then
               AP_GL_STATUS = REC_ACK;
            if AP_GL_STATUS = ACK_CXL then
               AP_GL_STATUS = REC_CXL;
            AP_ACKED_ON = TODAYS_DATE();
            AP_ACK_BY = USER_NAME();
            end;
         end;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_C         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AP_OPEN_NO);
   call CLOSE_FILE (AP_VENDOR_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
