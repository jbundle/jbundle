/****************************************************************
	Module: AP_PURGE
	Top Level Logic: AP_PURGE_LOGIC
	Date: 13-Mar-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AP_PURGE
	Top-Level to Purge A/P files
****************************************************************/

%replace AP_PURGE_1 by 677;
AP_PURGE:
   procedure;
%replace AP_OPEN_NO by  32;
%replace AP_PYMT_HIST_NO by  33;
%include "AP_PURGE.DD";
%include "AP_OPEN.DD";
%include "AP_PYMT_HIST.DD";

declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		END_PURGE_THRU_AP    bit (1);
declare		END_PURGE_PYMT_HIST  bit (1);
   call INITIALIZE;
   call AP_PURGE_MAIN;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AP_PURGE_DATE = TODAYS_DATE()-365;
   AP_OPEN_TOUR_GL = 0;
   AP_SERVICES = "";
   AP_START_SVC = 0;
   AP_END_SVC = 0;
   AP_V_BASED_SEQ = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AP_PURGE_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (AP_PURGE_RECORD) );
   call OPEN_FILE (AP_OPEN_NO+?EXCLUSIVE_OPEN,"AP_OPEN",byteaddr(AP_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_OPEN_NO,ERROR_CODE);
   call OPEN_FILE (AP_PYMT_HIST_NO+?EXCLUSIVE_OPEN,"AP_PYMT_HIST",byteaddr(AP_PYMT_HIST_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_PYMT_HIST_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	AP_PURGE_MAIN
	Main logic for A/P purge
****************************************************************/

AP_PURGE_MAIN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		ANSWER               character (1);

   /* INPUT_DATA_A - Input the data in group A */

   do LOOP_INDEX =   1 to   1;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;


   /* CHECK_SURE - Are you sure? */

   call OUTPUT_LINE(23,10,"Are you sure?");
   call INPUT_DATA(23,24,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
   call CLEAR_TO_BOS(23);
   call DUMP_BUFFER;
   if ANSWER ^= "Y" then
      return;


   /* PROC_OCCURRING - Processing occurring, please wait msg */

   call PROCESSING_OCCURRING;
   call DUMP_BUFFER;


   /* SET_FIRST - Set the record pointer to the first rec */

   AP_ENTRY_NO = 0;
   call SET_POSITION (AP_OPEN_NO,KEY_AREA_1,ERROR_CODE);
   END_PURGE_THRU_AP = NO;
   do while (END_PURGE_THRU_AP ^= YES);
      call PURGE_THRU_AP;
   end;
return;
end;	/* AP_PURGE_MAIN        */

/****************************************************************
	PURGE_THRU_AP
	Read thru and purge A/P
****************************************************************/

PURGE_THRU_AP:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_AP_OPEN        fixed binary (15);

   /* READNEXT - Read the next record */

   call READ_NEXT (AP_OPEN_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AP_OPEN_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) then
      do;
      END_PURGE_THRU_AP = YES;
      return;
      end;

   /* CHECK_PURGE_SELECT - Should this A/P detail be purged? */

   if AP_INV_ENTERED > AP_PURGE_DATE then
      return;

   if AP_ENTRY_TYPE > PD_INV then
      return;

   if AP_GL_STATUS ^= AP_GL_DONE then
      return;

   END_PURGE_PYMT_HIST = NO;
   do while (END_PURGE_PYMT_HIST ^= YES);
      call PURGE_PYMT_HIST;
   end;

   /* DELETE_RECORD - Delete the record */

   call DELETE_RECORD (AP_OPEN_NO,ERROR_CODE);

   /* READ_RECORD - Read the record */

   call READ_KEYED (AP_OPEN_NO,KEY_AREA_1,ERROR_AP_OPEN);
   if ERROR_AP_OPEN > 3 then
      call PRINT_ERROR (AP_OPEN_NO,ERROR_AP_OPEN);
return;
end;	/* PURGE_THRU_AP        */

/****************************************************************
	PURGE_PYMT_HIST
	Purge the payment history
****************************************************************/

PURGE_PYMT_HIST:
	procedure;


   /* SET_FIRST_2 - Set the file pointer to the first key */

   AP_HIST_ENTRY = AP_ENTRY_NO;
   AP_HIST_CHECK_DATE = 0;
   AP_HIST_SEQ = 0;
   call SET_POSITION (AP_PYMT_HIST_NO,KEY_AREA_1,ERROR_CODE);

   /* READNEXT_2 - Read the next record */

   call READ_NEXT (AP_PYMT_HIST_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AP_PYMT_HIST_NO,ERROR_CODE);

   /* CHECK_END_2 - Check for end of records */

   if (ERROR_CODE = END_OF_FILE) !
   (AP_HIST_ENTRY > AP_ENTRY_NO) then
      do;
      END_PURGE_PYMT_HIST = YES;
      return;
      end;

   /* DELETE_RECORD_2 - Delete the record */

   call DELETE_RECORD (AP_PYMT_HIST_NO,ERROR_CODE);
return;
end;	/* PURGE_PYMT_HIST      */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AP_OPEN_NO);
   call CLOSE_FILE (AP_PYMT_HIST_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
