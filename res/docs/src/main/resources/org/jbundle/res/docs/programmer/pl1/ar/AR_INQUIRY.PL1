/****************************************************************
	Module: AR_INQUIRY
	Top Level Logic: TABLE_FILE_DIS
	Date: 26-Jan-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AR_INQUIRY
	Display table logic
****************************************************************/

%replace AR_INQUIRY_1 by 150;
AR_INQUIRY:
   procedure;
%replace BK_BOOKING_NO by   9;
%replace AM_AGCY_NO by  10;
%replace AR_OPEN_NO by  43;
%include "BK_BOOKING.DD";
%include "AM_AGCY.DD";
%include "AR_OPEN.DD";

declare		END_DISPLAY_IO       bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		END_ADD_AR_DETAIL    bit (1);
   call INITIALIZE;
   END_DISPLAY_IO = NO;
   do while (END_DISPLAY_IO ^= YES);
      call DISPLAY_IO;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;
   AR_ACCT_DR = 0;
   AR_ACCT_DEP = 0;
   AR_POSTED = 0;
   AR_ACTION = 0;
   AR_DEPARTURE = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AR_INQUIRY_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
   call OPEN_FILE (AM_AGCY_NO,"AM_AGCY",byteaddr(AM_AGCY_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AM_AGCY_NO,ERROR_CODE);
   call OPEN_FILE (AR_OPEN_NO,"AR_OPEN",byteaddr(AR_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AR_OPEN_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	DISPLAY_IO
	Main logic for table display
****************************************************************/

DISPLAY_IO:
	procedure;


   /* RESET_INPUT_ERROR - set input erro to no */

   ERROR_INPUT_SCREEN = NO;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (AR_INQUIRY_1);
   NOT_FIRST_TIME = YES;
   call INPUT_HDR_INFO;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_DISPLAY_IO = YES;
      return;
      end;


   /* BEFORE_LOGIC - Before logic */

   call TABLE_DISPLAY;

   /* AFTER_LOGIC - Other Logic */


   /* OTHER_LOGIC - Any other logic */

return;
end;	/* DISPLAY_IO           */

/****************************************************************
	INPUT_HDR_INFO
	Input the table header information
****************************************************************/

INPUT_HDR_INFO:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AGENCY_NUMBER = BK_AGENCY;
      call READ_KEYED (AM_AGCY_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_HDR_INFO       */

/****************************************************************
	TABLE_DISPLAY
	Display the table info
****************************************************************/

TABLE_DISPLAY:
	procedure;

declare		BK_MODIFICATION_SAVE fixed binary (15);
declare		BK_AGENCY_SAVE       fixed binary (31);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		RECORD_NUMBER        fixed binary (15);
declare		BOOKING_NO_ARRAY(18) fixed binary (31);
declare		BK_BOOKING_ERROR     fixed binary (15);
declare		BOOKING_NO_SAVE      fixed binary (31);
declare		ANSWER               character (1);
AGENCY_BALANCE_DUE = 0;
BK_MODIFICATION = 0;
BK_MODIFICATION_SAVE = BK_MODIFICATION;
BK_AGENCY_SAVE = BK_AGENCY;
BOOKING_NO = 0;
call SET_POSITION (BK_BOOKING_NO,KEY_AREA_2,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_BOOKING_NO,KEY_AREA_2,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (BK_MODIFICATION > BK_MODIFICATION_SAVE) !
   (BK_AGENCY > BK_AGENCY_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 18;
      BOOKING_NO_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_BOOKING_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_BOOKING_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 18) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =   4 to  11;
            if LOOP_INDEX =  11 then
               do;

               /* CALC_BK_BALANCE - Calculate the balance from the A/R detl */


                  /* SET_INIT_BALANCE - Set up the initial balance */

                  BK_BALANCE = BK_NET_PRICE;
                  if BK_STATUS = "XL" then
                     BK_BALANCE = 0;


                  /* SET_FIRST_AR - Set on the first A/R open record */

                  AR_BOOKING_NO = BOOKING_NO;
                  AR_SEQ_NO = 0;
                  call SET_POSITION (AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);

                  /* READ_NEXT_AR - Read the next A/R record */

                  call READ_NEXT (AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);
                  if ERROR_CODE > 3 then
                  	call PRINT_ERROR (AR_OPEN_NO,ERROR_CODE);

                  /* GET_AR_TOTAL - Get the A/R total if there is detail */

                  if ERROR_CODE = NORMAL_RETURN then
                     if AR_BOOKING_NO = BOOKING_NO then
                        do;
                        BK_BALANCE = 0;
                        END_ADD_AR_DETAIL = NO;
                        do while (END_ADD_AR_DETAIL ^= YES);
                           call ADD_AR_DETAIL;
                        end;
                        end;

               end;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         AGENCY_BALANCE_DUE = floor((AGENCY_BALANCE_DUE + BK_BALANCE) * 100 + 0.5) / 100;
         BOOKING_NO_ARRAY(RECORD_NUMBER) = BOOKING_NO;
         call READ_NEXT (BK_BOOKING_NO,KEY_AREA_2,BK_BOOKING_ERROR);
         if (BK_MODIFICATION > BK_MODIFICATION_SAVE) !
         (BK_AGENCY > BK_AGENCY_SAVE) then
            BK_BOOKING_ERROR = END_OF_FILE;
         if BK_BOOKING_ERROR = END_OF_FILE then
            do;
            call SET_ROW_OFFSET (0);
            do LOOP_INDEX =   3 to   3;
               call OUTPUT_FIELD (LOOP_INDEX);
            end;
            LOOP_INDEX = LOOP_INDEX - 1;
            end;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      BOOKING_NO_SAVE = BOOKING_NO_ARRAY(18);
      BK_MODIFICATION = BK_MODIFICATION_SAVE;
      BK_AGENCY = BK_AGENCY_SAVE;
      if BK_BOOKING_ERROR = END_OF_FILE then
         do;
         GET_OUT = YES;
         call PRESS_RETURN;
         end;
      else
         do;
         call OUTPUT_LINE (24,10,"Stop Displaying?");
         call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
         call CLEAR_TO_BOS (24);
         if (ANSWER = "Y") then
            GET_OUT = YES;
         end;
      end;
   else
      do;
      GET_OUT = YES;
      call PRESS_RETURN;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 18;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if BOOKING_NO_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX = 4 to  11;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_DISPLAY        */

/****************************************************************
	ADD_AR_DETAIL
	Add up the A/R detail
****************************************************************/

ADD_AR_DETAIL:
	procedure;


   /* ADD_BK_BALANCE - Add to the BK balance */

   BK_BALANCE = floor((BK_BALANCE + AR_AMOUNT) * 100 + 0.5) / 100;


   /* OTHER_LOGIC_2 - Other logic */


   /* READ_NEXT_AR - Read the next A/R record */

   call READ_NEXT (AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AR_OPEN_NO,ERROR_CODE);

   /* CHECK_END_AR - Last A/R booking detail? */

   if (ERROR_CODE = END_OF_FILE) !
   (AR_BOOKING_NO > BOOKING_NO) then
      do;
      END_ADD_AR_DETAIL = YES;
      return;
      end;
return;
end;	/* ADD_AR_DETAIL        */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_FILE (AM_AGCY_NO);
   call CLOSE_FILE (AR_OPEN_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
