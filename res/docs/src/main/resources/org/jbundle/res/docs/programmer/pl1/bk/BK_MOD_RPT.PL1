/****************************************************************
	Module: BK_MOD_RPT
	Top Level Logic: MOD_RPT_LOGIC
	Date: 14-Nov-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_MOD_RPT
	Top-Level logic
****************************************************************/

%replace BK_MOD_RPT_1 by 368;
%replace BK_MOD_RPT_2 by 369;
BK_MOD_RPT:
   procedure;
%replace BK_BOOKING_NO by   9;
%replace BK_DET_HOTEL_NO by  67;
%replace BK_DET_LAND_NO by  68;
%replace BK_COMMENT_NO by  48;
%replace TK_HEADER_NO by  56;
%replace TK_DETAIL_NO by  57;
%replace BK_LINE_NO by  51;
%replace BK_PASSENGERS_NO by  49;
%include "BK_MOD_RPT.DD";
%include "BK_BOOKING.DD";
%include "BK_DET_HOTEL.DD";
%include "BK_DET_LAND.DD";
%include "BK_COMMENT.DD";
%include "TK_HEADER.DD";
%include "TK_DETAIL.DD";
%include "BK_LINE.DD";
%include "BK_PASSENGERS.DD";

declare		ERROR_INPUT_SCREEN   bit (1);
declare		END_CHANGE_ITEM      bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   call REPORT_SCREEN;
   call PRT_PAGE_HEADING;

   /* READ_THRU_BK - Read thru all of the booking mods */

   BOOKING_NO = BK_TEMP_BK;
   BK_MODIFICATION = 0;

   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE ^= NORMAL_RETURN then return;

   BK_TEMP_CTR = BK_NEXT_MOD;

   do BK_MODIFICATION = 0 TO BK_TEMP_CTR;

   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE ^= NORMAL_RETURN then return;
   call PRINT_BK_DETAIL;

   end;

   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;

declare		ERROR_CODE           fixed binary (15);

   /* INIT_FILE_VARS - Initialize the file variables */

   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;
   HDET_MOD_CODE = "A";
   HDET_INV = "N";
   HDET_INV_MOD = -1;
   HDET_INV_RATE = "";
   HDET_MANUAL = "";
   HDET_SEND_TO = "Y";
   HDET_ACK_DAYS = 0;
   HDET_MEAL_PRICE = 0;
   HDET_MEAL_PLAN = "";
   HDET_QUAD = 0;
   HDET_MODULE = "";
   HDET_STATUS = "RQ";
   LDET_MOD_CODE = "A";
   LDET_INV = "N";
   BK_INV_MOD = -1;
   LDET_VARIES_CODE = "";
   LDET_VARIES_QTY = 0;
   LDET_VARIES_COST = 0;
   LDET_MANUAL = "";
   LDET_MODULE = "";
   LDET_ACK_DAYS = 0;
   LDET_SEND_TO = "Y";
   LDET_STATUS = "OK";
   LDET_SIC_PMC = "";
   LDET_PMC = 0;
   LDET_SIC = 0;
   BK_TOUR_MOD_CODE = "A";
   BK_TOUR_SEQ = 0;
   BK_COMM_MOD_CODE = "";
   TK_MOD_CODE = "A";
   TK_TAX_P = 0;
   TK_ISSUE_UD_DATE = 0;
   TK_ARC_UD_DATE = 0;
   TK_DEP_UD_DATE = 0;
   TK_OR_UD_DATE = 0;
   TK_BK_DEP_DATE = 0;
   TK_UD_STATUS = 0;
   TK_CREDIT = "N";
   TK_SEQ = 1;
   TK_DET_MOD_CODE = "A";
   TK_INV = "N";
   TK_INV_MOD = -1;
   TK_ARR_DAY = 0;
   TK_DETAIL_MODULE = "";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_MOD_RPT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_MOD_RPT_RECORD) );
   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
   call OPEN_FILE (BK_DET_HOTEL_NO,"BK_DET_HOTEL",byteaddr(BK_DET_HOTEL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_DET_HOTEL_NO,ERROR_CODE);
   call OPEN_FILE (BK_DET_LAND_NO,"BK_DET_LAND",byteaddr(BK_DET_LAND_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_DET_LAND_NO,ERROR_CODE);
   call OPEN_FILE (BK_COMMENT_NO,"BK_COMMENT",byteaddr(BK_COMMENT_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_COMMENT_NO,ERROR_CODE);
   call OPEN_FILE (TK_HEADER_NO,"TK_HEADER",byteaddr(TK_HEADER_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_HEADER_NO,ERROR_CODE);
   call OPEN_FILE (TK_DETAIL_NO,"TK_DETAIL",byteaddr(TK_DETAIL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_DETAIL_NO,ERROR_CODE);
   call OPEN_FILE (BK_LINE_NO,"BK_LINE",byteaddr(BK_LINE_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_LINE_NO,ERROR_CODE);
   call OPEN_FILE (BK_PASSENGERS_NO,"BK_PASSENGERS",byteaddr(BK_PASSENGERS_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_PASSENGERS_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_SCREEN
	Get the report data from the screen
****************************************************************/

REPORT_SCREEN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("@LPT");
   call SETUP_PRINT_FORMAT (BK_MOD_RPT_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;
return;
end;	/* REPORT_SCREEN        */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  1,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT =  1 then
   do;
   call INPUT_FIELD (  1,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   2;
   call PRINT_REPORT_LINE;
end;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	PRINT_BK_DETAIL
	Temp - written in PL/1
****************************************************************/

PRINT_BK_DETAIL:
	procedure;

call PRINT_LINE_OUT(3);

HDET_MOD = BK_MODIFICATION;
HDET_BK_TR_NO = BOOKING_NO;
call SET_POSITION(BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
if ERROR_CODE ^= END_OF_FILE then
	do while (YES);
	call READ_NEXT(BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
	if (ERROR_CODE = END_OF_FILE) !
		(HDET_MOD ^= BK_MODIFICATION) !
		(HDET_BK_TR_NO ^= BOOKING_NO) then goto H_OVER;
	call PRINT_LINE_OUT(4);
	end;
H_OVER:

LDET_MOD = BK_MODIFICATION;
LDET_BK_TK_NO = BOOKING_NO;
call SET_POSITION(BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
if ERROR_CODE ^= END_OF_FILE then
	do while (YES);
	call READ_NEXT(BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
	if (ERROR_CODE = END_OF_FILE) !
		(LDET_MOD ^= BK_MODIFICATION) !
		(LDET_BK_TK_NO ^= BOOKING_NO) then goto L_OVER;
	call PRINT_LINE_OUT(5);
	end;
L_OVER:

BK_TOUR_MOD_NO = BK_MODIFICATION;
BK_OR_TOUR_NO = BOOKING_NO;
call SET_POSITION(BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);
if ERROR_CODE ^= END_OF_FILE then
	do while (YES);
	call READ_NEXT(BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);
	if (ERROR_CODE = END_OF_FILE) !
		(BK_TOUR_MOD_NO ^= BK_MODIFICATION) !
		(BK_OR_TOUR_NO ^= BOOKING_NO) then goto C_OVER;
	call PRINT_LINE_OUT(6);
	end;
C_OVER:

TK_MODIFICATION = BK_MODIFICATION;
TK_BK_TK_NO = BOOKING_NO;
TK_ALT_SEQ = 0;
TK_ANSW_SEQ = 0;
call READ_KEYED(TK_HEADER_NO,KEY_AREA_1,ERROR_CODE);
if ERROR_CODE = NORMAL_RETURN then
	call PRINT_LINE_OUT(7);
	
TK_DET_MOD = BK_MODIFICATION;
TK_DET_BK_TK = BOOKING_NO;
call SET_POSITION(TK_DETAIL_NO,KEY_AREA_1,ERROR_CODE);
if ERROR_CODE ^= END_OF_FILE then
	do while (YES);
	call READ_NEXT(TK_DETAIL_NO,KEY_AREA_1,ERROR_CODE);
	if (ERROR_CODE = END_OF_FILE) !
		(TK_DET_MOD ^= BK_MODIFICATION) !
		(TK_DET_BK_TK ^= BOOKING_NO) then goto A_OVER;
	call PRINT_LINE_OUT(8);
	end;
A_OVER:
	
BK_LINE_MOD = BK_MODIFICATION;
BK_LINE_BK_NO = BOOKING_NO;
call SET_POSITION(BK_LINE_NO,KEY_AREA_1,ERROR_CODE);
if ERROR_CODE ^= END_OF_FILE then
	do while (YES);
	call READ_NEXT(BK_LINE_NO,KEY_AREA_1,ERROR_CODE);
	if (ERROR_CODE = END_OF_FILE) !
		(BK_LINE_MOD ^= BK_MODIFICATION) !
		(BK_LINE_BK_NO ^= BOOKING_NO) then goto B_OVER;
	call PRINT_LINE_OUT(9);
	end;
B_OVER:
	
BK_PAX_MOD = BK_MODIFICATION;
BK_PAX_BK_NO = BOOKING_NO;
call SET_POSITION(BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
if ERROR_CODE ^= END_OF_FILE then
	do while (YES);
	call READ_NEXT(BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
	if (ERROR_CODE = END_OF_FILE) !
		(BK_PAX_MOD ^= BK_MODIFICATION) !
		(BK_PAX_BK_NO ^= BOOKING_NO) then goto P_OVER;
	call PRINT_LINE_OUT(10);
	end;
P_OVER:

return;
end;	/* PRINT_BK_DETAIL      */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_FILE (BK_DET_HOTEL_NO);
   call CLOSE_FILE (BK_DET_LAND_NO);
   call CLOSE_FILE (BK_COMMENT_NO);
   call CLOSE_FILE (TK_HEADER_NO);
   call CLOSE_FILE (TK_DETAIL_NO);
   call CLOSE_FILE (BK_LINE_NO);
   call CLOSE_FILE (BK_PASSENGERS_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
