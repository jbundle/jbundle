/****************************************************************
	Module: AR_REFUND_PRT
	Top Level Logic: REPORT_LOGIC
	Date: 18-Feb-92
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AR_REFUND_PRT
	Standard report logic
****************************************************************/

%replace AR_REFUND_PRT_1 by 161;
%replace AR_REFUND_PRT_2 by 647;
%replace AR_REFUND_PRT_3 by 648;
AR_REFUND_PRT:
   procedure;
%replace AD_ACCT_NO by  24;
%replace AR_OPEN_NO by  43;
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace AD_CHECKING_NO by  26;
%replace AR_PYMT_HIST_NO by  44;
%replace AR_CONTROL_NO by  41;
%replace BK_PASSENGERS_NO by  49;
%include "AR_REFUND_PRT.DD";
%include "AD_ACCT.DD";
%include "AR_OPEN.DD";
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "AD_CHECKING.DD";
%include "AR_PYMT_HIST.DD";
%include "AR_CONTROL.DD";
%include "BK_PASSENGERS.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		KEY_NO               fixed binary (15);
declare		ERROR_AR_CONTROL     fixed binary (15);
declare		FIRST_TIME           bit (1);
declare		LINE                 fixed binary (15);
declare		END_PRINT_AR_CHECKS  bit (1);
declare		END_UD_THRU_REFUNDS  bit (1);
declare		END_SET_RE_PAX       bit (1);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AR_CHECK_DATE = TODAYS_DATE();
   AR_REP_DATE = TODAYS_DATE();
   AR_REF_TIME = CURRENT_TIME();
   AR_REF_PAGE = 1;
   AR_REF_TOTAL = 0;
   AR_TOTAL_REF = 0;
   AR_REF_USER = USER_NAME();
   AD_BALANCE = 0;
   AD_LAST_CHECK = 0;
   AD_LAST_SEQ = 0;
   AR_ACCT_DR = 0;
   AR_ACCT_DEP = 0;
   AR_POSTED = 0;
   AR_ACTION = 0;
   AR_DEPARTURE = 0;
   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;
   TOUR_QUADS = 0;
   AD_TRX_SEQ = 0;
   AD_CHECK_TYPE = "M";
   AD_SYS_NUMBER = "";
   AD_TRX_AMT_USD = 0;
   AD_DATE_RECONCILED = 0;
   AR_REC_NO = 9999;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AR_REFUND_PRT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (AR_REFUND_PRT_RECORD) );
   call OPEN_FILE (AD_ACCT_NO,"AD_ACCT",byteaddr(AD_ACCT_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_ACCT_NO,ERROR_CODE);
   call OPEN_FILE (AR_OPEN_NO,"AR_OPEN",byteaddr(AR_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AR_OPEN_NO,ERROR_CODE);
   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
   call OPEN_FILE (BK_TOUR_NO,"BK_TOUR",byteaddr(BK_TOUR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TOUR_NO,ERROR_CODE);
   call OPEN_FILE (AD_CHECKING_NO,"AD_CHECKING",byteaddr(AD_CHECKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_CHECKING_NO,ERROR_CODE);
   call OPEN_FILE (AR_PYMT_HIST_NO,"AR_PYMT_HIST",byteaddr(AR_PYMT_HIST_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AR_PYMT_HIST_NO,ERROR_CODE);
   call OPEN_FILE (AR_CONTROL_NO,"AR_CONTROL",byteaddr(AR_CONTROL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AR_CONTROL_NO,ERROR_CODE);
   call OPEN_FILE (BK_PASSENGERS_NO,"BK_PASSENGERS",byteaddr(BK_PASSENGERS_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_PASSENGERS_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (AR_REFUND_PRT_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   AR_POSTED = 1;
   AR_ACTION = 0;
   AR_BOOKING_NO = 0;
   AR_SEQ_NO = 0;
   call SET_POSITION (AR_OPEN_NO,KEY_AREA_2,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =   7 to   8;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */

   call UD_AR_CHECKS;

   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
AR_REFUND_AC = 0;
do LOOP_INDEX =   1 to   1;
   if LOOP_INDEX =   1 then
      do;

      /* GET_REFUND_DEF - Get the default refund account */


      /* GET_AR_CONTROL - Get the A/R control record */


         /* SET_AR_CONTROL - Set up the key */

         AR_REC_NO = 0;
         KEY_NO = 1;

         /* READ_AR_CONTROL - Read the record */

         call READ_KEYED (AR_CONTROL_NO,KEY_NO,ERROR_AR_CONTROL);
         if ERROR_AR_CONTROL > 3 then
            call PRINT_ERROR (AR_CONTROL_NO,ERROR_AR_CONTROL);
      AR_REFUND_AC = AR_REFUND_DEF_AC;

      end;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AD_ACCOUNT_NO = AR_REFUND_AC;
      call READ_KEYED (AD_ACCT_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =   3 to   4;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   4 then
      do;

      /* SET_CHECK_NO - Set the first check number */

      AR_CHECK_NUM = AR_START_CHECK;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  3,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  3 then
   do;
   if SELECT =  1 then
      LOOP_INDEX =  1;
   if SELECT >=  2 then
      LOOP_INDEX = SELECT +   1;
   if LOOP_INDEX =   1 then
      do;

      /* GET_REFUND_DEF - Get the default refund account */


      /* GET_AR_CONTROL - Get the A/R control record */


         /* SET_AR_CONTROL - Set up the key */

         AR_REC_NO = 0;
         KEY_NO = 1;

         /* READ_AR_CONTROL - Read the record */

         call READ_KEYED (AR_CONTROL_NO,KEY_NO,ERROR_AR_CONTROL);
         if ERROR_AR_CONTROL > 3 then
            call PRINT_ERROR (AR_CONTROL_NO,ERROR_AR_CONTROL);
      AR_REFUND_AC = AR_REFUND_DEF_AC;

      end;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AD_ACCOUNT_NO = AR_REFUND_AC;
      call READ_KEYED (AD_ACCT_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
   if LOOP_INDEX =   4 then
      do;

      /* SET_CHECK_NO - Set the first check number */

      AR_CHECK_NUM = AR_START_CHECK;

      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   5;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

AR_REF_PAGE = AR_REF_PAGE + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (AR_OPEN_NO,KEY_AREA_2,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AR_OPEN_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AR_POSTED > 1) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* SKIP_REFUND_HOLD - Skip refund if a hold has been placed */

   if AR_DEPARTURE = -1 then
      return;


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */


   /* READ_SECOND_2 - Read secondary info */

   BK_MODIFICATION = 0;
   BOOKING_NO = AR_BOOKING_NO;
   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      end;
   do LOOP_INDEX =   6 to   6;
      call PRINT_REPORT_LINE;
   end;

   /* BUMP_CHECK_NO - Increment by one */

   AR_CHECK_NUM = AR_CHECK_NUM + 1;


   /* ADD_TOTALS - Add to the total fields */

   AR_REF_TOTAL = AR_REF_TOTAL + 1;
   AR_TOTAL_REF = floor((AR_TOTAL_REF + AR_AMOUNT) * 100 + 0.5) / 100;

   /* OTHER_LOGIC - Any other logic */

return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	UD_AR_CHECKS
	Logic to print and update the checks
****************************************************************/

UD_AR_CHECKS:
	procedure;

declare		ANSWER               character (1);
declare		ERROR_AD_ACCT        fixed binary (15);

   /* CLOSE_LPT - Close the printer */

   call CLOSE_PRINTER;


   /* SURE_CHECKS - Are you sure you want to print checks? */

   call OUTPUT_LINE(23,10,"Are you sure you want to print these checks?");
   call INPUT_DATA(23,56,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
   call CLEAR_TO_BOS(23);
   call DUMP_BUFFER;
   if ANSWER ^= "Y" then
      return;


   /* OPEN_CHECKS - Open the printer for check output */

   call OPEN_PRINTER("CHECK");
   call SETUP_PRINT_FORMAT (AR_REFUND_PRT_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* SET_CHECK_NO - Set the first check number */

   AR_CHECK_NUM = AR_START_CHECK;


   /* SET_FIRST - Set the record pointer to the first rec */

   AR_POSTED = 1;
   AR_ACTION = 0;
   AR_BOOKING_NO = 0;
   AR_SEQ_NO = 0;
   call SET_POSITION (AR_OPEN_NO,KEY_AREA_2,ERROR_CODE);
   END_PRINT_AR_CHECKS = NO;
   do while (END_PRINT_AR_CHECKS ^= YES);
      call PRINT_AR_CHECKS;
   end;

   /* CLOSE_LPT - Close the printer */

   call CLOSE_PRINTER;


   /* SURE_UD_REFUNDS - Are you sure? */

   call OUTPUT_LINE(23,10,"Are you sure you want to post these checks?");
   call INPUT_DATA(23,55,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
   call CLEAR_TO_BOS(23);
   call DUMP_BUFFER;
   if ANSWER ^= "Y" then
      return;


   /* PROC_OCCURRING - Processing occurring, please wait msg */

   call PROCESSING_OCCURRING;
   call DUMP_BUFFER;


   /* READ_RECORD_2 - Read from another file */

   call READ_KEYED (AD_ACCT_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_AD_ACCT);
   if ERROR_AD_ACCT = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      end;
   if ERROR_AD_ACCT > 3 then
      call PRINT_ERROR (AD_ACCT_NO,ERROR_AD_ACCT);

   /* SET_CHECK_NO - Set the first check number */

   AR_CHECK_NUM = AR_START_CHECK;


   /* SET_FIRST - Set the record pointer to the first rec */

   AR_POSTED = 1;
   AR_ACTION = 0;
   AR_BOOKING_NO = 0;
   AR_SEQ_NO = 0;
   call SET_POSITION (AR_OPEN_NO,KEY_AREA_2,ERROR_CODE);
   END_UD_THRU_REFUNDS = NO;
   do while (END_UD_THRU_REFUNDS ^= YES);
      call UD_THRU_REFUNDS;
   end;

   /* UPDATE_RECORD_2 - Update the record */

   call UPDATE_RECORD (AD_ACCT_NO,ERROR_CODE);
return;
end;	/* UD_AR_CHECKS         */

/****************************************************************
	PRINT_AR_CHECKS
	Print the check detail
****************************************************************/

PRINT_AR_CHECKS:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (AR_OPEN_NO,KEY_AREA_2,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AR_OPEN_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AR_POSTED > 1) then
      do;
      END_PRINT_AR_CHECKS = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* SKIP_REFUND_HOLD - Skip refund if a hold has been placed */

   if AR_DEPARTURE = -1 then
      return;


   /* PRINT_LINE_E - Print lines */

   call SETUP_PRINT_FORMAT (AR_REFUND_PRT_3);

   /* READ_SECOND_2 - Read secondary info */

   BK_MODIFICATION = 0;
   BOOKING_NO = AR_BOOKING_NO;
   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      end;

   /* SET_CHECK_AMT - Set the check amount */

   AR_CHECK_AMT = AR_AMOUNT;


   /* SETUP_AR_DESC - Setup the pay desc */

   declare		STRING		character(60)varying;
   declare		CENTS		character(9);
   declare		NUMBERS		character (45);
   declare		TEENS		character (90);
   declare		TEN		character (56);
   declare		THOUSANDS	fixed binary;
   declare		SETUP		fixed binary;
   declare		(ONES,TENS,HUNDREDS)	fixed binary;
   declare		AMOUNT		fixed binary;
   declare		REST		fixed binary;

   NUMBERS = "One  Two  ThreeFour Five Six  SevenEightNine ";
   TEENS = "Ten      Eleven   Twelve   Thirteen Fourteen Fifteen  Sixteen  SeventeenEighteen Nineteen ";
   TEN = "Twenty Thirty Forty  Fifty  Sixty  SeventyEighty Ninety ";
   THOUSANDS = (AR_CHECK_AMT + 0.005) / 1000;
   REST = AR_CHECK_AMT - THOUSANDS * 1000 + 0.005;

   STRING = "";
   if trunc(AR_CHECK_AMT) = 0 then
      STRING = "Zero ";
   else
      do SETUP = 1 to 2;
         IF SETUP = 1 then
            AMOUNT = THOUSANDS;
         else
            AMOUNT = REST;

         HUNDREDS = divide(AMOUNT,100,15);
         TENS = divide((AMOUNT - HUNDREDS * 100),10,15);
         ONES = AMOUNT - HUNDREDS * 100 - TENS * 10;
         if HUNDREDS ^= 0 then
         	STRING= STRING !! CUT_SPACES(substr(NUMBERS,HUNDREDS * 5 - 4,5))
         			!! " Hundred ";
         if TENS * 10 + ONES > 19 then
         	STRING = STRING !! CUT_SPACES(substr(TEN,TENS*7-13,7)) !! " ";
         else
         	do;
         	if TENS = 1 then
         		do;
         		STRING = STRING !! CUT_SPACES(substr(TEENS,ONES*9+1,9)) !! " ";
         		ONES = 0;
         		end;
         	end;
         if ONES ^= 0 then
            STRING =STRING !! CUT_SPACES(substr(NUMBERS,ONES*5-4,5)) !! " ";
         if SETUP = 1 then if AMOUNT ^= 0 then
            STRING = STRING !! "Thousand ";

      end; /* do loop */

   declare STR_FP float binary(53);
   declare STR_NUM character(20);
   if (length(STRING) > 54) ! (AR_CHECK_AMT > 1000000) then
      do;
      STR_FP = floor(AR_CHECK_AMT + 0.5);
      call CONV_FP(STR_FP,STR_NUM);
      do SETUP = 1 to 20;
         if substr(STR_NUM,1,1) = " " then
            STR_NUM = substr(STR_NUM,2,19);
      end;
      STRING = CUT_SPACES(STR_NUM);
      STRING = substr(STRING,1,length(STRING)-3) !! " ";
      end;

   CENTS = fixed((AR_CHECK_AMT - trunc(AR_CHECK_AMT + 0.001) + 0.005) * 100,15);
   if substr(CENTS,8,1) = " " then
      substr(CENTS,8,1) = "0";

   AMOUNT = divide(55-length(STRING),2,15); /*Starting byte to center*/
   AR_AMOUNT_DESC = "";
   substr(AR_AMOUNT_DESC,AMOUNT,86-AMOUNT) =
   "*****" !! STRING !! "Dollars and" !! substr(CENTS,7,3) !! " Cents*****";


   /* READ_SECOND_2 - Read secondary info */

   BK_MODIFICATION = 0;
   BOOKING_NO = AR_BOOKING_NO;
   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      end;

   /* READ_SECOND_2 - Read secondary info */

   BK_MODIFICATION = 0;
   BOOKING_NO = AR_BOOKING_NO;
   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      end;

   /* SET_CHECK_AMT - Set the check amount */

   AR_CHECK_AMT = AR_AMOUNT;


   /* READ_SECOND_3 - Read second */

   TOUR_NO = BK_TOUR_NUM;
   call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      TOUR_DESC = "** RECORD NOT FOUND **";
      end;

   /* GET_REFUND_PAX - Set up the passengers for the refund rpt */

   do RE_PAX_SEQ = 1 to 4;
      REFUND_PAX(RE_PAX_SEQ) = "";
   end;

   RE_PAX_SEQ = 1;
   if BOOKING_NO ^= 0 then
      do;

      /* SET_FIRST_PAX - Set up for seq read */

      BK_PAX_MOD = BK_MODIFICATION;
      BK_PAX_BK_NO = BOOKING_NO;
      BK_PAX_SEQ = 0;
      call SET_POSITION (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
      END_SET_RE_PAX = NO;
      do while (END_SET_RE_PAX ^= YES);
         call SET_RE_PAX;
      end;
      end;

   do LOOP_INDEX =   1 to  20;
      call PRINT_LINE_OUT(LOOP_INDEX);
   end;

   /* BUMP_CHECK_NO - Increment by one */

   AR_CHECK_NUM = AR_CHECK_NUM + 1;


   /* FORM_FEED - Print a form feed to the printer */

   call PRINT_LINE ("<FF>"c);

return;
end;	/* PRINT_AR_CHECKS      */

/****************************************************************
	SET_RE_PAX
	Set up the pax for refund printinf
****************************************************************/

SET_RE_PAX:
	procedure;


   /* READ_NEXT_PAX - Read the next passenger */

   call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_PASSENGERS_NO,ERROR_CODE);

   /* CHECK_END_PAX - Check for the end of the passengers */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_PAX_MOD > BK_MODIFICATION) !
   (BK_PAX_BK_NO > BOOKING_NO) then
      do;
      END_SET_RE_PAX = YES;
      return;
      end;

   /* SET_RE_PAX_NAME - Set the pax name */

   if RE_PAX_SEQ > 4 then
      do;
      END_SET_RE_PAX = YES;
      return;
      end;

   REFUND_PAX(RE_PAX_SEQ) = BK_PAX_NAME;

   RE_PAX_SEQ = RE_PAX_SEQ + 1;

return;
end;	/* SET_RE_PAX           */

/****************************************************************
	UD_THRU_REFUNDS
	Update the refund information
****************************************************************/

UD_THRU_REFUNDS:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (AR_OPEN_NO,KEY_AREA_2,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AR_OPEN_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AR_POSTED > 1) then
      do;
      END_UD_THRU_REFUNDS = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* SKIP_REFUND_HOLD - Skip refund if a hold has been placed */

   if AR_DEPARTURE = -1 then
      return;


   /* READ_SECOND_2 - Read secondary info */

   BK_MODIFICATION = 0;
   BOOKING_NO = AR_BOOKING_NO;
   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
      call PRESS_RETURN;
      call CLEAR_MESSAGE;
      RETURN_CODE = DO_AGAIN;
      LOOP_INDEX = LOOP_INDEX - 1;
      end;

   /* UPDATE_AR_OPEN - Update the record */

   AR_POSTED = 0;
   AR_ACCT_DR = AD_GL_ACCT_NO;
   if AR_REF = "Refund Pending" then
      do;
      AR_AMOUNT_DESC = AR_CHECK_NUM;
      AR_REF = "Refund Paid ck no " !! substr(AR_AMOUNT_DESC,7,10);
      end;


   /* UPDATE_AR_PAYMENT - Set up the Check record */


      /* MOVE_AR_CHECK_INFO - Set up check record */

      AD_BANK_NO = AR_REFUND_AC;
      AD_TRX_TYPE = "C";
      AD_TRX_NUMBER = AR_CHECK_NUM;
      AD_TRX_SEQ = 1;
      AD_TRX_DATE = AR_CHECK_DATE;
      AD_CHECK_TYPE = "R";
      AD_ARC_EMP = BK_AGENCY;
      AD_PAYEE = BK_AGENCY_NAME;
      AD_TRX_AMOUNT = -AR_AMOUNT;
      AD_TRX_AMT_USD = AD_TRX_AMOUNT;
      AD_TRX_COMMENT = AR_REF;
      AD_DATE_RECONCILED = 0;
      AD_MANUAL = "N";


      /* WRITE_RECORD_4 - Write the record */

      ERROR_CODE = KEY_ALREADY_EXISTS;
      do while(ERROR_CODE = KEY_ALREADY_EXISTS);
         call WRITE_RECORD (AD_CHECKING_NO,ERROR_CODE);
         if ERROR_CODE = KEY_ALREADY_EXISTS then
            AD_TRX_SEQ = AD_TRX_SEQ + 1;
      end;

   /* UPDATE_AR_AD_BAL - Update the account balance */

   AD_BALANCE = floor((AD_BALANCE + AD_TRX_AMOUNT) * 100 + 0.5) / 100;


   /* UPDATE_AR_HIST - Update the A/R history file */


      /* UD_AR_HIST - Move the info to the A/R history file */

      AR_HIST_BANK = AR_REFUND_AC;
      AR_HIST_BOOKING = AR_BOOKING_NO;
      AR_HIST_SEQ = AR_SEQ_NO;
      AR_HIST_CHECK = AR_CHECK_NUM;
      AR_HIST_CHECK_DATE = AR_CHECK_DATE;
      AR_HIST_CK_AMT = AR_CHECK_AMT;
      AR_HIST_AR = AR_ACCT;
      AR_HIST_TYPE = AR_DOC_TYPE;


      /* WRITE_RECORD_3 - Write the record */

      ERROR_CODE = KEY_ALREADY_EXISTS;
      do while(ERROR_CODE = KEY_ALREADY_EXISTS);
         call WRITE_RECORD (AR_PYMT_HIST_NO,ERROR_CODE);
         if ERROR_CODE = KEY_ALREADY_EXISTS then
            AR_HIST_SEQ = AR_HIST_SEQ + 1;
      end;

   /* UPDATE_RECORD - Update the record */

   call UPDATE_RECORD (AR_OPEN_NO,ERROR_CODE);

   /* BUMP_CHECK_NO - Increment by one */

   AR_CHECK_NUM = AR_CHECK_NUM + 1;


   /* SET_FIRST_3 - Set first */

   AR_POSTED = 1;
   call SET_POSITION (AR_OPEN_NO,KEY_AREA_2,ERROR_CODE);
return;
end;	/* UD_THRU_REFUNDS      */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (AD_ACCT_NO);
   call CLOSE_FILE (AR_OPEN_NO);
   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_FILE (BK_TOUR_NO);
   call CLOSE_FILE (AD_CHECKING_NO);
   call CLOSE_FILE (AR_PYMT_HIST_NO);
   call CLOSE_FILE (AR_CONTROL_NO);
   call CLOSE_FILE (BK_PASSENGERS_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
