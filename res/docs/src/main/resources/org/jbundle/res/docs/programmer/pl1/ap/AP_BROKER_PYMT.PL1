/****************************************************************
	Module: AP_BROKER_PYMT
	Top Level Logic: BROKER_LOGIC
	Date: 10-Mar-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AP_BROKER_PYMT
	Top Level for entering broker payments
****************************************************************/

%replace AP_BROKER_PYMT_1 by 101;
AP_BROKER_PYMT:
   procedure;
%replace AP_VENDOR_NO by  30;
%replace AP_OPEN_NO by  32;
%replace AP_CONTROL_NO by  29;
%include "AP_BROKER_PYMT.DD";
%include "AP_VENDOR.DD";
%include "AP_OPEN.DD";
%include "AP_CONTROL.DD";

declare		ERROR_CODE           fixed binary (15);
declare		END_TABLE_IO         bit (1);
declare		NOT_FIRST_TIME       bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		AP_ENTRY_NO_ARRAY(17) fixed binary (31);
declare		END_CHANGE_ITEM      bit (1);
declare		END_COUNT_SELECT     bit (1);
declare		KEY_NO               fixed binary (15);
declare		ERROR_AP_CONTROL     fixed binary (15);
   call INITIALIZE;

   /* GET_AP_CONTROL - Read the A/P control file */


      /* SET_AP_CONTROL - Set the key to read A/P control file */

      AP_REC_NO = 0;
      KEY_NO = 1;

      /* READ_AP_CONTROL - Read the A/P control file */

      call READ_KEYED (AP_CONTROL_NO,KEY_NO,ERROR_AP_CONTROL);
      if ERROR_AP_CONTROL > 3 then
         call PRINT_ERROR (AP_CONTROL_NO,ERROR_AP_CONTROL);
   END_TABLE_IO = NO;
   do while (END_TABLE_IO ^= YES);
      call TABLE_IO;
   end;

   /* SET_HIGH_NEW - Set the highest new entry */

   AP_ENTRY_NO = AP_NEXT_ENTRY;


   /* BACK_OUT_AP - Set the AP entry number back */

   AP_REC_NO = 0;

   call READ_KEYED (AP_CONTROL_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = NORMAL_RETURN then
      do;
      if AP_ENTRY_NO >= AP_NEXT_ENTRY then
         AP_NEXT_ENTRY = AP_ENTRY_NO;
      call UPDATE_RECORD (AP_CONTROL_NO,ERROR_CODE);
      end;

   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AP_LAST_ACTIVITY = 0;
   AP_CUR_BAL = 0;
   AP_MTD_PUR = 0;
   AP_YTD_PUR = 0;
   AP_LAST_PUR = 0;
   AP_SELECT_AMT = 0;
   AP_SELECT_STATUS = "N";
   AP_COMM_CODE = "F";
   AP_VEN_TAX_ID = "";
   AP_OPEN_TOUR_GL = 0;
   AP_SERVICES = "";
   AP_START_SVC = 0;
   AP_END_SVC = 0;
   AP_V_BASED_SEQ = 0;
   AP_REC_NO = 9999;
   AP_DEF_AC = 1;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AP_BROKER_PYMT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (AP_BROKER_PYMT_RECORD) );
   call OPEN_FILE (AP_VENDOR_NO,"AP_VENDOR",byteaddr(AP_VENDOR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_VENDOR_NO,ERROR_CODE);
   call OPEN_FILE (AP_OPEN_NO,"AP_OPEN",byteaddr(AP_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_OPEN_NO,ERROR_CODE);
   call OPEN_FILE (AP_CONTROL_NO,"AP_CONTROL",byteaddr(AP_CONTROL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_CONTROL_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	TABLE_IO
	Table file with header info maint.
****************************************************************/

TABLE_IO:
	procedure;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (AP_BROKER_PYMT_1);
   NOT_FIRST_TIME = YES;
   call INPUT_HDR_INFO;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_ERR - Return if error/end typed */

   if RETURN_CODE = END_TYPED then
      do;
      END_TABLE_IO = YES;
      return;
      end;

   /* OTHER_LOGIC - Any other logic */


   /* BEFORE_LOGIC - Before logic */

   call TABLE_MAINT;

   /* AFTER_LOGIC - Other Logic */

return;
end;	/* TABLE_IO             */

/****************************************************************
	INPUT_HDR_INFO
	Input the table header information
****************************************************************/

INPUT_HDR_INFO:
	procedure;

do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AP_VEN_NO = BROKER_DIST_VEN;
      call READ_KEYED (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_HDR_INFO       */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		AP_OPEN_VENDOR_SAVE  character (        6);
declare		AP_ENTRY_TYPE_SAVE   fixed binary (15);
declare		AP_START_SVC_SAVE    fixed binary (15);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		AP_OPEN_ERROR        fixed binary (15);
declare		AP_ENTRY_NO_SAVE     fixed binary (31);
declare		ANSWER               character (1);
BROKER_TOTAL = 0;
AP_OPEN_VENDOR = BROKER_DIST_VEN;
AP_OPEN_VENDOR_SAVE = AP_OPEN_VENDOR;
AP_ENTRY_TYPE = BROKER;
AP_ENTRY_TYPE_SAVE = AP_ENTRY_TYPE;
AP_START_SVC = 0;
AP_START_SVC_SAVE = AP_START_SVC;
AP_ENTRY_NO = 0;
call SET_POSITION (AP_OPEN_NO,KEY_AREA_2,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (AP_OPEN_NO,KEY_AREA_2,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (AP_OPEN_VENDOR > AP_OPEN_VENDOR_SAVE) !
   (AP_ENTRY_TYPE > AP_ENTRY_TYPE_SAVE) !
   (AP_START_SVC > AP_START_SVC_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 17;
      AP_ENTRY_NO_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      AP_OPEN_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (AP_OPEN_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 17) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =   3 to   8;
            if LOOP_INDEX =   5 then
               do;

               /* SET_BROKER_CURR - Set the currency */

               AP_OPEN_CURR = AP_VEN_CURR;

               end;
            call OUTPUT_FIELD (LOOP_INDEX);
            if LOOP_INDEX =   3 then
               do;

               /* READ_SECOND_2 - Read secondary info */

               AP_VEN_NO = AP_OPEN_BROKER;
               call READ_KEYED (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE = RECORD_NOT_FOUND then
                  do;
                  AP_VEN_NAME = "** RECORD NOT FOUND **";
                  end;
               end;
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         BROKER_TOTAL = floor((BROKER_TOTAL + AP_VEN_INV_USD) * 100 + 0.5) / 100;
         AP_ENTRY_NO_ARRAY(RECORD_NUMBER) = AP_ENTRY_NO;
         call READ_NEXT (AP_OPEN_NO,KEY_AREA_2,AP_OPEN_ERROR);
         if (AP_OPEN_VENDOR > AP_OPEN_VENDOR_SAVE) !
         (AP_ENTRY_TYPE > AP_ENTRY_TYPE_SAVE) !
         (AP_START_SVC > AP_START_SVC_SAVE) then
            AP_OPEN_ERROR = END_OF_FILE;
         if AP_OPEN_ERROR = END_OF_FILE then
            do;
            call SET_ROW_OFFSET (0);
            do LOOP_INDEX =   9 to   9;
               call OUTPUT_FIELD (LOOP_INDEX);
            end;
            LOOP_INDEX = LOOP_INDEX - 1;
            end;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      AP_ENTRY_NO_SAVE = AP_ENTRY_NO_ARRAY(17);
      AP_OPEN_VENDOR = AP_OPEN_VENDOR_SAVE;
      AP_ENTRY_TYPE = AP_ENTRY_TYPE_SAVE;
      AP_START_SVC = AP_START_SVC_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if RETURN_CODE = END_TYPED then
         if AP_ENTRY_NO_ARRAY(17) ^= 0 then
            do;
            AP_OPEN_ERROR = NORMAL_RETURN;
            do while (AP_OPEN_ERROR ^= END_OF_FILE);
               BROKER_TOTAL = floor((BROKER_TOTAL + AP_VEN_INV_USD) * 100 + 0.5) / 100;
               call READ_NEXT (AP_OPEN_NO,KEY_AREA_2,AP_OPEN_ERROR);
               if (AP_OPEN_VENDOR > AP_OPEN_VENDOR_SAVE) !
               (AP_ENTRY_TYPE > AP_ENTRY_TYPE_SAVE) !
               (AP_START_SVC > AP_START_SVC_SAVE) then
                  AP_OPEN_ERROR = END_OF_FILE;
            end;
            end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if AP_OPEN_ERROR ^= END_OF_FILE then
            do;
            AP_ENTRY_NO = AP_ENTRY_NO_SAVE;
            call SET_POSITION (AP_OPEN_NO,KEY_AREA_2,ERROR_CODE);
            call READ_NEXT (AP_OPEN_NO,KEY_AREA_2,ERROR_CODE);
            call READ_NEXT (AP_OPEN_NO,KEY_AREA_2,ERROR_CODE);
            end;
         else
            if AP_ENTRY_NO_ARRAY(17) = 0 then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      AP_OPEN_VENDOR = AP_OPEN_VENDOR_SAVE;
      AP_ENTRY_TYPE = AP_ENTRY_TYPE_SAVE;
      AP_START_SVC = AP_START_SVC_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <= 17) );
         call AP_OPEN_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (AP_ENTRY_NO_ARRAY(17) = 0) then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 17;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if AP_ENTRY_NO_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX = 3 to   8;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 91,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 17 then
   do;
   RECORD_NUMBER = SELECT;
   call AP_OPEN_LINE;
   call SET_ROW_OFFSET (0);
   end;
if SELECT = 91 then
   do;
   call INPUT_FIELD (  1,INPUT_LENGTH,RETURN_CODE);
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AP_VEN_NO = BROKER_DIST_VEN;
      call READ_KEYED (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	AP_OPEN_LINE
	Change one line in the secondary file
****************************************************************/

AP_OPEN_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if AP_ENTRY_NO_ARRAY(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   AP_ENTRY_NO = AP_ENTRY_NO_ARRAY(RECORD_NUMBER);
   call READ_KEYED (AP_OPEN_NO+?LOCK_RECORD,KEY_AREA_2,ERROR_CODE);
   if ERROR_CODE = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      return;
      end;
   do LOOP_INDEX =  3 to   8;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   BROKER_TOTAL = floor((BROKER_TOTAL - AP_VEN_INV_USD) * 100 + 0.5) / 100;
   end;
else
   do;
   AP_OPEN_CURR = "";
   AP_OPEN_TOUR = 0;
   AP_OPEN_TOUR_CODE = "";
   AP_OPEN_TOUR_GL = 0;
   AP_OPEN_DEP = 0;
   AP_FINL_EST = 0;
   AP_FINL_DATE = 0;
   AP_DEP_EST = 0;
   AP_DEP_EXCH = 0;
   AP_DEP_EST_USD = 0;
   AP_DEP_EST_GL = 0;
   AP_EST_GL = 0;
   AP_VEN_INV_NO = "";
   AP_INV_ENTERED = 0;
   AP_VEN_INV_DATE = 0;
   AP_VEN_INV_GL = 0;
   AP_VEN_INV_AMT = 0;
   AP_VEN_INV_USD = 0;
   AP_INV_BAL = 0;
   AP_INV_BAL_USD = 0;
   AP_OPEN_AP_ACCT = 0;
   AP_OVER_UNDER_GL = 0;
   AP_OPEN_SELECT = "N";
   AP_AMT_SELECTED = 0;
   AP_GAIN_LOSS_GL = 0;
   AP_PAID_USD = 0;
   AP_PYMT_DATE = 0;
   AP_V_BASED_BK = 0;
   AP_V_BASED_MOD = 0;
   AP_V_BASED_PAX = 0;
   AP_V_BASED_SEQ = 0;
   BK_V_DATE = 0;
   AP_ACK_DATE = 0;
   AP_ACKED_ON = 0;
   AP_ACK_BY = "";
   AP_GL_STATUS = 0;
   AP_GL_ACTION_DATE = 0;
   AP_ENTRY_TYPE_DESC = "";
   AP_V_DESC = "";
   AP_OPEN_TYPE = "";
   AP_OPEN_CURRENT = "N";
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =   3 to   3;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
      if LOOP_INDEX =   3 then
         do;

         /* READ_SECOND_2 - Read secondary info */

         if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
            do;
            AP_VEN_NO = AP_OPEN_BROKER;
            call READ_KEYED (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
            if ERROR_CODE = RECORD_NOT_FOUND then
               do;
               call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
               call PRESS_RETURN;
               call CLEAR_MESSAGE;
               RETURN_CODE = DO_AGAIN;
               LOOP_INDEX = LOOP_INDEX - 1;
               end;
            end;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =   4 to   8;
         if LOOP_INDEX =   4 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =   5 then
            do;

            /* SET_BROKER_CURR - Set the currency */

            AP_OPEN_CURR = AP_VEN_CURR;

            end;
         if LOOP_INDEX =   5 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =   6 then
            do;

            /* GET_BROKER_DEF - Get the broker default amount */

            if REWRITE = NO then
               do;

               /* CALC_BROKER_DEF - Calculate the default payment amount */


                  /* GET_TOTAL_SELECT - Add up the total selection */


                     /* ZERO_SELECT - Zero the selection */

                     AP_SELECT_AMT = 0;


                     /* SET_FIRST - Set the record pointer to the first rec */

                     AP_OPEN_SELECT = "Y";
                     AP_OPEN_VENDOR = AP_VEN_NO;
                     AP_START_SVC = 0;
                     AP_ENTRY_NO = 0;
                     call SET_POSITION (AP_OPEN_NO,KEY_AREA_5,ERROR_CODE);
                     END_COUNT_SELECT = NO;
                     do while (END_COUNT_SELECT ^= YES);
                        call COUNT_SELECT;
                     end;

                  /* SET_BROKER_DEFAULT - Set the broker default amount */

                  AP_VEN_INV_AMT = AP_SELECT_AMT;
                  if REWRITE = NO then
                     do;
                     AP_VEN_INV_USD = 0;
                     AP_DEP_EXCH = 0;
                     AP_SERVICES = CUT_SPACES(AP_VEN_NAME) !! " Draft";
                     AP_START_SVC = 0;
                     AP_END_SVC = 0;
                     AP_GL_STATUS = AP_GL_DONE;
                     AP_GL_ACTION_DATE = LARGE_DATE;
                     end;

               end;

            end;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
         if LOOP_INDEX =   7 then
            do;

            /* CHECK_USD_ENTERED - Was the USD broker amount entered? */

            if AP_VEN_INV_USD ^= 0 then
               do;
               if AP_VEN_INV_AMT ^= 0 then
                  AP_DEP_EXCH = AP_VEN_INV_USD / AP_VEN_INV_AMT;
               LOOP_INDEX = LOOP_INDEX + 1;
               call OUTPUT_FIELD(LOOP_INDEX);
               end;

            end;
         if LOOP_INDEX =   8 then
            do;

            /* CHECK_EXCH_ENTERED - Check to make sure the usd amt entered */

            if AP_DEP_EXCH = 0 then
               LOOP_INDEX = LOOP_INDEX - 2;
            else
               do;
               if AP_VEN_INV_USD = 0 then
                  do;
                  AP_VEN_INV_USD = floor(AP_VEN_INV_AMT * AP_DEP_EXCH * 100 + 0.5) / 100;
                  LOOP_INDEX = LOOP_INDEX - 1;
                  call OUTPUT_FIELD(LOOP_INDEX);
                  LOOP_INDEX = LOOP_INDEX + 1;
                  end;

               /* DIS_NEW_BROKER - Display the new broker amount */


                  /* SAVE_DRAFT_AMT - Save the draft amount for a second */

                  DRAFT_AMT_SAVE = AP_VEN_INV_AMT;
                  DRAFT_USD_SAVE = AP_VEN_INV_USD;


                  /* SAVE_LOOP - Save the loop index for a second */

                  declare LOOP_SAVE fixed binary;
                  LOOP_SAVE = LOOP_INDEX;


                  /* RESET_OFFSET - Set row offset to 0 */

                  call SET_ROW_OFFSET(0);

                  call DISPLAY_DATA_E;

                  /* RESTORE_LOOP - Restore the index */

                  LOOP_INDEX = LOOP_SAVE;


                  /* SET_REC_OFFSET - Set record offset */

                  call SET_ROW_OFFSET (RECORD_NUMBER - 1);


                  /* SET_BROKER_DATA - Set up the record as a broker request */

                  if REWRITE = NO then
                     do;

                     /* SET_FIELDS - Set the values for these fields */

                     AP_ENTRY_TYPE = 0;
                     AP_OPEN_VENDOR = "";
                     AP_OPEN_CURR = "";
                     AP_OPEN_TOUR = 0;
                     AP_OPEN_TOUR_CODE = "";
                     AP_OPEN_TOUR_GL = 0;
                     AP_OPEN_DEP = 0;
                     AP_FINL_EST = 0;
                     AP_FINL_DATE = 0;
                     AP_DEP_EST = 0;
                     AP_DEP_EXCH = 0;
                     AP_DEP_EST_USD = 0;
                     AP_DEP_EST_GL = 0;
                     AP_EST_GL = 0;
                     AP_VEN_INV_NO = "";
                     AP_INV_ENTERED = 0;
                     AP_VEN_INV_DATE = 0;
                     AP_VEN_INV_GL = 0;
                     AP_VEN_INV_AMT = 0;
                     AP_VEN_INV_USD = 0;
                     AP_INV_BAL = 0;
                     AP_INV_BAL_USD = 0;
                     AP_OPEN_AP_ACCT = 0;
                     AP_OVER_UNDER_GL = 0;
                     AP_OPEN_SELECT = "N";
                     AP_AMT_SELECTED = 0;
                     AP_GAIN_LOSS_GL = 0;
                     AP_PAID_USD = 0;
                     AP_PYMT_DATE = 0;
                     AP_V_BASED_BK = 0;
                     AP_V_BASED_MOD = 0;
                     AP_V_BASED_PAX = 0;
                     AP_V_BASED_SEQ = 0;
                     BK_V_DATE = 0;
                     AP_ACK_DATE = 0;
                     AP_ACKED_ON = 0;
                     AP_ACK_BY = "";
                     AP_GL_STATUS = 0;
                     AP_GL_ACTION_DATE = 0;
                     AP_ENTRY_TYPE_DESC = "";
                     AP_V_DESC = "";
                     AP_OPEN_TYPE = "";
                     AP_OPEN_CURRENT = "N";

                     AP_ENTRY_NO = AP_NEXT_ENTRY;
                     AP_ENTRY_TYPE = BROKER;
                     AP_OPEN_VENDOR = BROKER_DIST_VEN;
                     AP_OPEN_BROKER = AP_VEN_NO;
                     AP_START_SVC = 0;
                     AP_OPEN_CURR = AP_VEN_CURR;

                     AP_OPEN_TOUR_CODE = "";
                     AP_OPEN_DEP = 0;
                     AP_SERVICES = CUT_SPACES(AP_VEN_NAME) !! " Draft";
                     AP_START_SVC = 0;
                     AP_END_SVC = 0;
                     AP_GL_STATUS = AP_GL_DONE;
                     AP_GL_ACTION_DATE = LARGE_DATE;
                     end;

                  AP_VEN_INV_AMT = DRAFT_AMT_SAVE;
                  AP_VEN_INV_USD = DRAFT_USD_SAVE;
                  AP_INV_BAL = DRAFT_AMT_SAVE;
                  AP_INV_BAL_USD = DRAFT_USD_SAVE;
                  if AP_VEN_INV_AMT ^= 0 then
                     AP_DEP_EXCH = AP_VEN_INV_USD / AP_VEN_INV_AMT;
                  AP_PYMT_DATE = TODAYS_DATE();

                  AP_OPEN_SELECT = "Y";
                  AP_AMT_SELECTED = AP_INV_BAL_USD;

               end;

            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      AP_ENTRY_NO = AP_ENTRY_NO_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (AP_OPEN_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      AP_ENTRY_NO = 0;
      end;
   else
      do;
      if REWRITE = NO then
         do;
         if RECORD_NUMBER = 1 then
            AP_ENTRY_NO = AP_NEXT_ENTRY;
         else
            AP_ENTRY_NO = AP_ENTRY_NO_ARRAY(RECORD_NUMBER - 1) + 1;
         ERROR_CODE = KEY_ALREADY_EXISTS;
         do while (ERROR_CODE = KEY_ALREADY_EXISTS);
            call WRITE_RECORD (AP_OPEN_NO,ERROR_CODE);
            if ERROR_CODE = KEY_ALREADY_EXISTS then
               AP_ENTRY_NO = AP_ENTRY_NO + 1;
         end;
         end;
      else
         call UPDATE_RECORD (AP_OPEN_NO,ERROR_CODE);
      BROKER_TOTAL = floor((BROKER_TOTAL + AP_VEN_INV_USD) * 100 + 0.5) / 100;
      end;
   call SET_ROW_OFFSET(0);
   do LOOP_INDEX =   9 to   9;
      call OUTPUT_FIELD (LOOP_INDEX);
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   call SET_ROW_OFFSET (RECORD_NUMBER - 1);
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      AP_ENTRY_NO_ARRAY(RECORD_NUMBER) = AP_ENTRY_NO;
      end;
end;
return;
end;	/* AP_OPEN_LINE         */

/****************************************************************
	COUNT_SELECT
	Count up the current selection
****************************************************************/

COUNT_SELECT:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (AP_OPEN_NO,KEY_AREA_5,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AP_OPEN_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AP_OPEN_SELECT > "Y") !
   (AP_OPEN_VENDOR > AP_VEN_NO) then
      do;
      END_COUNT_SELECT = YES;
      return;
      end;

   /* ADD_SELECT - Add this to the selection */

   AP_SELECT_AMT=floor((AP_SELECT_AMT + AP_AMT_SELECTED) * 100 + 0.5)/100;


   /* OTHER_LOGIC_2 - Other logic */

return;
end;	/* COUNT_SELECT         */

/****************************************************************
	DISPLAY_DATA_E
	Display the data in screen group E
****************************************************************/

DISPLAY_DATA_E:
	procedure;

do LOOP_INDEX =   9 to   9;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_E       */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AP_VENDOR_NO);
   call CLOSE_FILE (AP_OPEN_NO);
   call CLOSE_FILE (AP_CONTROL_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
