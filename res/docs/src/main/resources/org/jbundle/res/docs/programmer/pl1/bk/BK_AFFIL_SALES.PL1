/****************************************************************
	Module: BK_AFFIL_SALES
	Top Level Logic: AFFIL_RPT_LOGIC
	Date: 31-Oct-91
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_AFFIL_SALES
	Top-Level for affiliation sales print
****************************************************************/

%replace BK_AFFIL_SALES_1 by 444;
%replace BK_AFFIL_SALES_2 by 445;
BK_AFFIL_SALES:
   procedure;
%replace BK_BOOKING_NO by   9;
%replace AM_AGCY_NO by  10;
%include "BK_AFFIL_SALES.DD";
%include "BK_BOOKING.DD";
%include "AM_AGCY.DD";

declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		END_GET_ALL_AFFIL    bit (1);
declare		END_READ_THROUGH     bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   call REPORT_SCREEN;

   /* ALL_AFFIL - All affiliations? */

   if AFFIL_MATCH = "ALL" then
      do;
      call PRT_ALL_AFFIL;
      end;
   else
      do;
      call PRT_REPORT;
      end;

   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   START_AFFIL_DEP = 0;
   AFFIL_MATCH = "";
   AFFIL_TOTAL_PRICE = 0;
   AFFIL_TOTAL_NET = 0;
   AFFIL_TOTAL_BOOKINGS = 0;
   DATE_AFFIL = TODAYS_DATE();
   TIME_AFFIL = CURRENT_TIME();
   USER_AFFIL = USER_NAME();
   PAGE_AFFIL = 1;
   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_AFFIL_SALES_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_AFFIL_SALES_RECORD) );
   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
   call OPEN_FILE (AM_AGCY_NO,"AM_AGCY",byteaddr(AM_AGCY_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AM_AGCY_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_SCREEN
	Get the report data from the screen
****************************************************************/

REPORT_SCREEN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (BK_AFFIL_SALES_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;
return;
end;	/* REPORT_SCREEN        */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
END_AFFIL_DEP = START_AFFIL_DEP;
do LOOP_INDEX =   1 to   3;
   if LOOP_INDEX =   2 then
      END_AFFIL_DEP = START_AFFIL_DEP;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         START_AFFIL_DEP = 0;
         END_AFFIL_DEP = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   3 then
      do;

      /* CHECK_ALL_AFFIL - Check for all affil. entered */

      if RETURN_CODE = ALL_TYPED then
         AFFIL_MATCH = "ALL";

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  3,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  3 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         START_AFFIL_DEP = 0;
         END_AFFIL_DEP = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   3 then
      do;

      /* CHECK_ALL_AFFIL - Check for all affil. entered */

      if RETURN_CODE = ALL_TYPED then
         AFFIL_MATCH = "ALL";

      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_ALL_AFFIL
	Print all affiliations
****************************************************************/

PRT_ALL_AFFIL:
	procedure;


   /* INIT_AFFIL - Init the affiliation matrix */

   do LOOP_AFFIL = 1 to 99;
      AFFIL_MATRIX(LOOP_AFFIL) = "";
   end;


   /* SET_FIRST - Set the record pointer to the first rec */

   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   call SET_POSITION (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   END_GET_ALL_AFFIL = NO;
   do while (END_GET_ALL_AFFIL ^= YES);
      call GET_ALL_AFFIL;
   end;

   /* PRT_EACH_AFFIL - Print a page for each valid affiliation */

   do LOOP_AFFIL = 1 to 99;
      if AFFIL_MATRIX(LOOP_AFFIL) ^= "" then
         do;
         AFFIL_MATCH = AFFIL_MATRIX(LOOP_AFFIL);
         AFFIL_TOTAL_BOOKINGS = 0;
         AFFIL_TOTAL_NET = 0;
         AFFIL_TOTAL_PRICE = 0;
         call PRT_REPORT;
         end;
   end;

return;
end;	/* PRT_ALL_AFFIL        */

/****************************************************************
	GET_ALL_AFFIL
	Get all valid affiliation codes
****************************************************************/

GET_ALL_AFFIL:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_BOOKING_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_MODIFICATION > 0) then
      do;
      END_GET_ALL_AFFIL = YES;
      return;
      end;

   /* GET_AFFIL_CODE - Get the affiliation code */

   if BK_STATUS ^= "OK" then
      return;
   If (BK_DEPARTURE < START_AFFIL_DEP) ! (BK_DEPARTURE > END_AFFIL_DEP) then
      return;

   AGENCY_NUMBER = BK_AGENCY;
   call READ_KEYED (AM_AGCY_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE ^= NORMAL_RETURN then
      return;

   if AGENCY_AFFILIATION = "" then
      return;

   do LOOP_AFFIL = 1 to 99;
      if AGENCY_AFFILIATION = AFFIL_MATRIX(LOOP_AFFIL) then
         return;
      if AFFIL_MATRIX(LOOP_AFFIL) = "" then
         do;
         AFFIL_MATRIX(LOOP_AFFIL) = AGENCY_AFFILIATION;
         return;
         end;
   end;

return;
end;	/* GET_ALL_AFFIL        */

/****************************************************************
	PRT_REPORT
	Print the report
****************************************************************/

PRT_REPORT:
	procedure;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   call SET_POSITION (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THROUGH = NO;
   do while (END_READ_THROUGH ^= YES);
      call READ_THROUGH;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =   6 to   7;
      call PRINT_REPORT_LINE;
   end;
return;
end;	/* PRT_REPORT           */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   4;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

PAGE_AFFIL = PAGE_AFFIL + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THROUGH
	Read through the file
****************************************************************/

READ_THROUGH:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_BOOKING_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_MODIFICATION > 0) then
      do;
      END_READ_THROUGH = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CHECK_AFFIL - Check selection parameters */

   if BK_STATUS ^= "OK" then
      return;
   If (BK_DEPARTURE < START_AFFIL_DEP) ! (BK_DEPARTURE > END_AFFIL_DEP) then
      return;

   AGENCY_NUMBER = BK_AGENCY;
   call READ_KEYED (AM_AGCY_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE ^= NORMAL_RETURN then
      return;

   if AGENCY_AFFILIATION ^= AFFIL_MATCH then
      return;


   /* PRT_DETAIL - Print the detail lines */

   do LOOP_INDEX =   5 to   5;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_TO_TOTALS - Add to the totals */


   /* ADD_AFFIL_TOTALS - Add to the affiliation totals */

   AFFIL_TOTAL_BOOKINGS = AFFIL_TOTAL_BOOKINGS + 1;
   AFFIL_TOTAL_NET = AFFIL_TOTAL_NET + BK_NET_PRICE;
   AFFIL_TOTAL_PRICE = AFFIL_TOTAL_PRICE + BK_TOUR_PRICE;


   /* OTHER_LOGIC - Any other logic */

return;
end;	/* READ_THROUGH         */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_FILE (AM_AGCY_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
