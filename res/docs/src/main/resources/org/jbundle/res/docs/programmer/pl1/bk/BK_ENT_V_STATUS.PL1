/****************************************************************
	Module: BK_ENT_V_STATUS
	Top Level Logic: DIS_FILE_MAINT
	Date: 21-Feb-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_ENT_V_STATUS
	Display/Change the table
****************************************************************/

%replace BK_ENT_V_STATUS_1 by 780;
BK_ENT_V_STATUS:
   procedure(
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_BOOKING_RECORD);
%replace AP_OPEN_NO by  32;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_BOOKING_NO by   9;
%include "AP_OPEN.DD";
%include "BK_ENT_V_STATUS.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_BOOKING.DD";

declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		AP_START_SVC_ARRAY(15) fixed binary (15);
declare		AP_ENTRY_NO_ARRAY(15) fixed binary (31);
declare		END_CHANGE_ITEM      bit (1);
   call INITIALIZE;
   call DIS_TABLE_IO;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AP_OPEN_TOUR_GL = 0;
   AP_SERVICES = "";
   AP_START_SVC = 0;
   AP_END_SVC = 0;
   AP_V_BASED_SEQ = 0;
   REPRT_VOUCHER = "N";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_ENT_V_STATUS_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (AP_OPEN_NO,"AP_OPEN",byteaddr(AP_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_OPEN_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (BK_ENT_V_STATUS_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	DIS_TABLE_IO
	Display the table
****************************************************************/

DIS_TABLE_IO:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_TOUR        fixed binary (15);

   /* BEFORE_LOGIC - Before logic */


   /* CHECK_V_OK - Check if info is here and enter tour */

      call ENTER_DATA_A;

      /* RETURN_IF_INP_ERR - Return if input error */

      if ERROR_INPUT_SCREEN then
         return;

   call TABLE_MAINT;

   /* AFTER_LOGIC - Other Logic */


   /* RESTORE_BK_TOUR - Restore the tour and tour header info */

   if BOOKING_NO ^= 0 then
      do;
      if BK_TOUR_CODE ^= "" then if BK_DEPARTURE ^= 0 then
         if (BK_TOUR_CODE ^= HDR_TOUR_CODE) !
            (BK_DEPARTURE < HDR_START_ON) ! (BK_DEPARTURE > HDR_END_ON) then
               do;

               /* GET_TOUR_HDR - Get the tour header */

               ERROR_CODE = NORMAL_RETURN;

               HDR_TOUR_CODE = BK_TOUR_CODE;
               HDR_END_ON = BK_DEPARTURE;
               if HDR_END_ON = 0 then
                  HDR_END_ON = TODAYS_DATE();
               call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE ^= END_OF_FILE then
                  call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

               if BK_TOUR_CODE ^= HDR_TOUR_CODE then
                  ERROR_CODE = END_OF_FILE;
               if BK_DEPARTURE ^= 0 then if BK_DEPARTURE < HDR_START_ON then
                  ERROR_CODE = END_OF_FILE;

               end;
      if BK_TOUR_NUM ^= 0 then
         if BK_TOUR_NUM ^= TOUR_NO then
            do;
            TOUR_NO = BK_TOUR_NUM;

            /* READ_TOUR_REC - Read the tour file record */

            call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_BK_TOUR);
            if ERROR_BK_TOUR > 3 then
               call PRINT_ERROR (BK_TOUR_NO,ERROR_BK_TOUR);
            end;
      end;

return;
end;	/* DIS_TABLE_IO         */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =  11 to  11;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =  11 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =  12 to  12;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		AP_OPEN_TOUR_SAVE    fixed binary (31);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		AP_OPEN_ERROR        fixed binary (15);
declare		AP_START_SVC_SAVE    fixed binary (15);
declare		AP_ENTRY_NO_SAVE     fixed binary (31);
declare		ANSWER               character (1);
AP_OPEN_TOUR = TOUR_NO;
AP_OPEN_TOUR_SAVE = AP_OPEN_TOUR;
AP_START_SVC = 0;
AP_ENTRY_NO = 0;
call SET_POSITION (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (AP_OPEN_TOUR > AP_OPEN_TOUR_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 15;
      AP_START_SVC_ARRAY(RECORD_NUMBER) = 0;
      AP_ENTRY_NO_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      AP_OPEN_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (AP_OPEN_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 15) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =  13 to  20;
            if LOOP_INDEX =  20 then
               do;

               /* SET_V_DESC - Set the Voucher Status Description */

               do case (AP_GL_STATUS + 1);
                  AP_V_DESC = "Vch Held";
                  AP_V_DESC = "No stat.";
                  AP_V_DESC = "Vchr Rqd";
                  AP_V_DESC = "Wait Ack";
                  AP_V_DESC = "Ack Rcvd";
                  AP_V_DESC = "Vch Prtd";
                  AP_V_DESC = "Xln Reqd";
                  AP_V_DESC = "Wait Xln";
                  AP_V_DESC = "Ackn Xln";
                  AP_V_DESC = "Xln Prtd";
                  AP_V_DESC = "Reprt Vh";
                  AP_V_DESC = "No V-Man";
                  AP_V_DESC = "No V-Dep";
                  AP_V_DESC = "No V-Inv";
                  AP_V_DESC = "No V-CrM";
                  AP_V_DESC = "No V-Pmt";
                  AP_V_DESC = "No V-DrM";
                  AP_V_DESC = "No V-PyA";
                  AP_V_DESC = "No V-Pst";
               end;
               otherwise
                  AP_V_DESC = "No Vchr ";

               end;
            call OUTPUT_FIELD (LOOP_INDEX);
            if LOOP_INDEX =  13 then
               do;

               /* FAKE_INPUT_LENGTH - Set the input length to a non-zero no. */

               INPUT_LENGTH = 1;

               end;
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         AP_START_SVC_ARRAY(RECORD_NUMBER) = AP_START_SVC;
         AP_ENTRY_NO_ARRAY(RECORD_NUMBER) = AP_ENTRY_NO;
         call READ_NEXT (AP_OPEN_NO,KEY_AREA_3,AP_OPEN_ERROR);
         if (AP_OPEN_TOUR > AP_OPEN_TOUR_SAVE) then
            AP_OPEN_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      AP_START_SVC_SAVE = AP_START_SVC_ARRAY(15);
      AP_ENTRY_NO_SAVE = AP_ENTRY_NO_ARRAY(15);
      AP_OPEN_TOUR = AP_OPEN_TOUR_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if AP_OPEN_ERROR ^= END_OF_FILE then
            do;
            AP_START_SVC = AP_START_SVC_SAVE;
            AP_ENTRY_NO = AP_ENTRY_NO_SAVE;
            call SET_POSITION (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
            call READ_NEXT (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
            call READ_NEXT (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
            end;
         else
            if AP_START_SVC_ARRAY(15) = 0 then
               GET_OUT = YES;
            else
               do;
               ANSWER = "N";
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      call DISPLAY_MESSAGE("There are no records to display");
      call PRESS_RETURN;
      GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 15;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if AP_START_SVC_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX =13 to  20;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 95,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 15 then
   do;
   RECORD_NUMBER = SELECT;
   call BK_ENT_V_STATUS_LINE;
   call SET_ROW_OFFSET (0);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	BK_ENT_V_STATUS_LINE
	Change one line in the secondary file
****************************************************************/

BK_ENT_V_STATUS_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if AP_START_SVC_ARRAY(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   AP_START_SVC = AP_START_SVC_ARRAY(RECORD_NUMBER);
   AP_ENTRY_NO = AP_ENTRY_NO_ARRAY(RECORD_NUMBER);
   call READ_KEYED (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
   do LOOP_INDEX = 13 to  20;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   end;
else
   do;
   call DISPLAY_MESSAGE ("Records may not be added!!!<BEL>"c);
   call PRESS_RETURN;
   return;
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =  13 to  13;
      if LOOP_INDEX =  13 then
         do;
         call OUTPUT_FIELD (LOOP_INDEX);
         LOOP_INDEX = 99;
         end;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
      if LOOP_INDEX =  13 then
         do;

         /* FAKE_INPUT_LENGTH - Set the input length to a non-zero no. */

         INPUT_LENGTH = 1;

         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   if AP_ENTRY_NO = 0 then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =  14 to  20;
         if LOOP_INDEX =  14 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =  15 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =  16 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =  17 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =  18 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =  20 then
            do;

            /* SET_V_DESC - Set the Voucher Status Description */

            do case (AP_GL_STATUS + 1);
               AP_V_DESC = "Vch Held";
               AP_V_DESC = "No stat.";
               AP_V_DESC = "Vchr Rqd";
               AP_V_DESC = "Wait Ack";
               AP_V_DESC = "Ack Rcvd";
               AP_V_DESC = "Vch Prtd";
               AP_V_DESC = "Xln Reqd";
               AP_V_DESC = "Wait Xln";
               AP_V_DESC = "Ackn Xln";
               AP_V_DESC = "Xln Prtd";
               AP_V_DESC = "Reprt Vh";
               AP_V_DESC = "No V-Man";
               AP_V_DESC = "No V-Dep";
               AP_V_DESC = "No V-Inv";
               AP_V_DESC = "No V-CrM";
               AP_V_DESC = "No V-Pmt";
               AP_V_DESC = "No V-DrM";
               AP_V_DESC = "No V-PyA";
               AP_V_DESC = "No V-Pst";
            end;
            otherwise
               AP_V_DESC = "No Vchr ";

            end;
         if LOOP_INDEX =  20 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = 99;
            end;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
         if LOOP_INDEX =  19 then
            do;

            /* CHECK_PRT_STATUS - Was the status set to a valid number? */

            if REPRT_VOUCHER = "Y" then
               do;
               if (AP_GL_STATUS <= REQ_VCHR) then
                  AP_GL_STATUS = REQ_VCHR;
               if ( (AP_GL_STATUS >= ACK_VCHR) & (AP_GL_STATUS <= VCHR_PRTD) ) !
               (AP_GL_STATUS = REQ_REPRT) then
                  AP_GL_STATUS = REQ_REPRT;
               if (AP_GL_STATUS >= CXL_REQ) & (AP_GL_STATUS <= CXL_PRTD) then
                  AP_GL_STATUS = CXL_REQ;
               end;

            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      AP_START_SVC = AP_START_SVC_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (AP_OPEN_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      AP_START_SVC = 0;
      end;
   else
      do;
      if REWRITE = NO then
         call WRITE_RECORD (AP_OPEN_NO,ERROR_CODE);
      else
         call UPDATE_RECORD (AP_OPEN_NO,ERROR_CODE);
      end;
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      AP_START_SVC_ARRAY(RECORD_NUMBER) = AP_START_SVC;
      AP_ENTRY_NO_ARRAY(RECORD_NUMBER) = AP_ENTRY_NO;
      end;
end;
return;
end;	/* BK_ENT_V_STATUS_LINE */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AP_OPEN_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
