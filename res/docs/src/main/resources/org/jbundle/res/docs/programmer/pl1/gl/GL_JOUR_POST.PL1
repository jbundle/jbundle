/****************************************************************
	Module: GL_JOUR_POST
	Top Level Logic: GL_POST_MAIN
	Date: 25-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	GL_JOUR_POST
	Top-level logic for G/L Posting
****************************************************************/

%replace GL_JOUR_POST_1 by  57;
%replace GL_JOUR_POST_2 by  56;
GL_JOUR_POST:
   procedure(
      GL_DET_BATCH_RECORD);
%replace GL_DET_TRX_NO by  18;
%replace GL_CHART_NO by  16;
%replace GL_DETAIL_NO by  17;
%replace GL_CONTROL_NO by  20;
%replace GL_DET_BATCH_NO by  19;
%include "GL_DET_TRX.DD";
%include "GL_CHART.DD";
%include "GL_JOUR_POST.DD";
%include "GL_DETAIL.DD";
%include "GL_CONTROL.DD";
%include "GL_DET_BATCH.DD";

declare		ERROR_CODE           fixed binary (15);
declare		GL_SAVE_REF          character (       30);
declare		GL_SAVE_SOURCE       character (        5);
declare		GL_SAVE_TRX_DATE     fixed binary (15);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		END_GL_POST_THRU     bit (1);
declare		FIRST_TIME           bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   call GL_POST_LOGIC;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   GL_DET_BATCH_USER = GL_DBATCH_USER;
   GL_DET_TRX_NUM = 1;
   GL_DET_TRX_AMT = 0;
   GL_DET_SOURCE = GL_DBATCH_DEF_SOURCE;
   GL_DET_REF = GL_DBATCH_DEF_COM;
   GL_DET_ACREV = "N";
   TYPICAL_BAL = "D";
   SECTION_SUB = "N";
   COUNTER_BAL_AC = 0;
   GL_INCOME_EXP = "N";
   DISCONTINUED_ON = 0;
   GL_POST_DATE = TODAYS_DATE();
   GL_POST_TIME = CURRENT_TIME();
   GL_POST_PAGE = 1;
   GL_POST_TRX_COUNT = 0;
   GL_POST_DEBIT_TOTAL = 0;
   GL_POST_CREDIT_TOTAL = 0;
   GL_TRX_DATE = TODAYS_DATE();
   GL_TRX_ENTRY = TODAYS_DATE();
   GL_TRX_AMOUNT = 0;
   GL_REC_NUMBER = 9999;
   GL_NEXT_SEQ = 1;
   GL_LAST_POST = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (GL_JOUR_POST_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (GL_DET_TRX_NO,"GL_DET_TRX",byteaddr(GL_DET_TRX_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_DET_TRX_NO,ERROR_CODE);
   call OPEN_FILE (GL_CHART_NO,"GL_CHART",byteaddr(GL_CHART_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_CHART_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (GL_JOUR_POST_RECORD) );
   call OPEN_FILE (GL_DETAIL_NO,"GL_DETAIL",byteaddr(GL_DETAIL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_DETAIL_NO,ERROR_CODE);
   call OPEN_FILE (GL_CONTROL_NO,"GL_CONTROL",byteaddr(GL_CONTROL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_CONTROL_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	GL_POST_LOGIC
	Top level for G/L journal posting
****************************************************************/

GL_POST_LOGIC:
	procedure;

declare		ANSWER               character (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);

   /* GL_POST_OK - Post to G/L? */

   call OUTPUT_LINE (23,12,"Print transaction journal?");
   call INPUT_DATA (23,40,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
   call CLEAR_TO_BOS(23);
   if ANSWER ^= "Y" then
      return;


   /* GL_GET_CINFO - Get the info from the control file */

   GL_REC_NUMBER = 0;
   call READ_KEYED (GL_CONTROL_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 1 then
      call PRINT_ERROR (GL_CONTROL_NO,ERROR_CODE);


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (GL_JOUR_POST_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;
   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   GL_DET_BATCH_USER = GL_DBATCH_USER;
   GL_DET_TRX_NUM = 0;
   GL_DET_SEQ_NO = 0;
   call SET_POSITION (GL_DET_TRX_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =   9 to  10;
      call PRINT_REPORT_LINE;
   end;

   /* CLOSE_LPT - Close the printer */

   call CLOSE_PRINTER;


   /* GL_POST_OK2 - Post to G/L? */

   call OUTPUT_LINE (23,10,"Do you want to post to G/L?");
   call INPUT_DATA (23,38,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
   call CLEAR_TO_BOS(23);
   if ANSWER ^= "Y" then
      return;

   END_GL_POST_THRU = NO;
   do while (END_GL_POST_THRU ^= YES);
      call GL_POST_THRU;
   end;

   /* DELETE_RECORD_3 - Delete the record */

   call DELETE_RECORD (GL_DET_BATCH_NO,ERROR_CODE);

   /* GL_SET_DELCODE - Set the return code that Gl_BATCH is del */

   GL_DBATCH_BAL = -1;

   GL_LAST_POST = TODAYS_DATE();


   /* GL_UPDATE_CINFO - Update the control info */

   call UPDATE_RECORD (GL_CONTROL_NO,ERROR_CODE);
   if ERROR_CODE > 1 then
      call PRINT_ERROR (GL_CONTROL_NO,ERROR_CODE);

return;
end;	/* GL_POST_LOGIC        */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   5;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

GL_POST_PAGE = GL_POST_PAGE + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;

declare		OLD_GL_DET_TRX_NUM   fixed binary (15);

   /* READNEXT - Read the next record */

   call READ_NEXT (GL_DET_TRX_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (GL_DET_TRX_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (GL_DET_BATCH_USER > GL_DBATCH_USER) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      OLD_GL_DET_TRX_NUM = -1;
      end;
   if GL_DET_TRX_NUM ^= OLD_GL_DET_TRX_NUM then
      do;
      if ^FIRST_TIME then
         do;
         do LOOP_INDEX =  24 to   1;
            call PRINT_REPORT_LINE;
         end;
         end;
      end;
   if GL_DET_TRX_NUM ^= OLD_GL_DET_TRX_NUM then
      do;

      /* READ_SECOND_DIS - Read Second - Display line version */

      GL_ACCOUNT_NO = GL_AC_NUMBER;
      call READ_KEYED (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         GL_ACCOUNT_DESC = "** RECORD NOT FOUND **";
         end;

      /* SET_POST_DR_CR - Set the Debit or credit */

      GL_POST_DEBIT = 0;
      GL_POST_CREDIT = 0;
      if GL_DET_TRX_AMT >= 0 then
         GL_POST_DEBIT = GL_DET_TRX_AMT;
      else
         GL_POST_CREDIT = -GL_DET_TRX_AMT;

      do LOOP_INDEX =   6 to   7;
         call PRINT_REPORT_LINE;
      end;

      /* ADD_TOTALS_2 - Add to the totals */

      GL_POST_TRX_COUNT = GL_POST_TRX_COUNT + 1;
      OLD_GL_DET_TRX_NUM = GL_DET_TRX_NUM;
      end;
   else
      do;

      /* READ_SECOND_DIS - Read Second - Display line version */

      GL_ACCOUNT_NO = GL_AC_NUMBER;
      call READ_KEYED (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         GL_ACCOUNT_DESC = "** RECORD NOT FOUND **";
         end;

      /* SET_POST_DR_CR - Set the Debit or credit */

      GL_POST_DEBIT = 0;
      GL_POST_CREDIT = 0;
      if GL_DET_TRX_AMT >= 0 then
         GL_POST_DEBIT = GL_DET_TRX_AMT;
      else
         GL_POST_CREDIT = -GL_DET_TRX_AMT;

      do LOOP_INDEX =   8 to   8;
         call PRINT_REPORT_LINE;
      end;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */

   do LOOP_INDEX =  24 to   1;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_TOTALS - Add to the total fields */

   GL_POST_DEBIT_TOTAL = floor((GL_POST_DEBIT_TOTAL + GL_POST_DEBIT) * 100 + 0.5) / 100;
   GL_POST_CREDIT_TOTAL = floor((GL_POST_CREDIT_TOTAL + GL_POST_CREDIT) * 100 + 0.5) / 100;

   /* OTHER_LOGIC - Any other logic */

return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	GL_POST_THRU
	Post thru the transactions
****************************************************************/

GL_POST_THRU:
	procedure;


   /* SET_FIRST - Set the record pointer to the first rec */

   GL_DET_BATCH_USER = GL_DBATCH_USER;
   GL_DET_TRX_NUM = 0;
   GL_DET_SEQ_NO = 0;
   call SET_POSITION (GL_DET_TRX_NO,KEY_AREA_1,ERROR_CODE);

   /* READNEXT - Read the next record */

   call READ_NEXT (GL_DET_TRX_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (GL_DET_TRX_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (GL_DET_BATCH_USER > GL_DBATCH_USER) then
      do;
      END_GL_POST_THRU = YES;
      return;
      end;

   /* GL_MOVE_FIELDS - Move the fields to the G/L for posting */

   GL_NEXT_SEQ = GL_NEXT_SEQ + 1;

   GL_AC_NO = GL_AC_NUMBER;
   GL_TRX_DATE = GL_DET_TRX_DATE;
   GL_SEQ_NO = GL_NEXT_SEQ;
   GL_TRX_AMOUNT = GL_DET_TRX_AMT;
   GL_SOURCE = GL_DET_SOURCE;
   GL_REFERENCE = GL_DET_REF;


   /* WRITE_RECORD_2 - Write the record */

   ERROR_CODE = KEY_ALREADY_EXISTS;
   do while(ERROR_CODE = KEY_ALREADY_EXISTS);
      call WRITE_RECORD (GL_DETAIL_NO,ERROR_CODE);
      if ERROR_CODE = KEY_ALREADY_EXISTS then
         GL_SEQ_NO = GL_SEQ_NO + 1;
   end;

   /* SET_NEXT_GL_SEQ - Set the next G/L sequence number */

   GL_NEXT_SEQ = GL_SEQ_NO;


   /* DELETE_RECORD - Delete the record */

   call DELETE_RECORD (GL_DET_TRX_NO,ERROR_CODE);
return;
end;	/* GL_POST_THRU         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (GL_DET_TRX_NO);
   call CLOSE_FILE (GL_CHART_NO);
   call CLOSE_FILE (GL_DETAIL_NO);
   call CLOSE_FILE (GL_CONTROL_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
