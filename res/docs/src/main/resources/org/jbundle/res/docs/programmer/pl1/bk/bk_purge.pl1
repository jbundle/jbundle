/****************************************************************
	Module: BK_PURGE
	Top Level Logic: BK_PURGE_LOGIC
	Date: 16-Feb-94
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_PURGE
	Top Level Logic to purge booking file
****************************************************************/

%replace BK_PURGE_1 by 902;
BK_PURGE:
   procedure;
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace BK_DET_HOTEL_NO by  67;
%replace BK_DET_LAND_NO by  68;
%replace BK_COMMENT_NO by  48;
%replace BK_LINE_NO by  51;
%replace BK_PASSENGERS_NO by  49;
%replace TK_HEADER_NO by  56;
%replace TK_DETAIL_NO by  57;
%include "BK_PURGE.DD";
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "BK_DET_HOTEL.DD";
%include "BK_DET_LAND.DD";
%include "BK_COMMENT.DD";
%include "BK_LINE.DD";
%include "BK_PASSENGERS.DD";
%include "TK_HEADER.DD";
%include "TK_DETAIL.DD";

declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_BK_PURGE_THRU    bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		END_DELETE_HOTEL     bit (1);
declare		END_DELETE_TOUR      bit (1);
declare		END_DEL_TKHDR        bit (1);
declare		END_DELETE_TKDET     bit (1);
declare		END_DEL_REMARK       bit (1);
declare		END_DELETE_LINE      bit (1);
declare		END_DELETE_PAX       bit (1);
   call INITIALIZE;
   call BK_PURGE_MAIN;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;
   TOUR_QUADS = 0;
   HDET_MOD_CODE = "A";
   HDET_INV = "N";
   HDET_INV_MOD = -1;
   HDET_INV_RATE = "";
   HDET_MANUAL = "";
   HDET_SEND_TO = "Y";
   HDET_ACK_DAYS = 0;
   HDET_MEAL_PRICE = 0;
   HDET_MEAL_PLAN = "";
   HDET_QUAD = 0;
   HDET_MODULE = "";
   HDET_STATUS = "RQ";
   LDET_MOD_CODE = "A";
   LDET_INV = "N";
   BK_INV_MOD = -1;
   LDET_VARIES_CODE = "";
   LDET_VARIES_QTY = 0;
   LDET_VARIES_COST = 0;
   LDET_MANUAL = "";
   LDET_MODULE = "";
   LDET_ACK_DAYS = 0;
   LDET_SEND_TO = "Y";
   LDET_STATUS = "OK";
   LDET_SIC_PMC = "";
   LDET_PMC = 0;
   LDET_SIC = 0;
   BK_TOUR_MOD_CODE = "A";
   BK_TOUR_SEQ = 0;
   BK_COMM_MOD_CODE = "";
   TK_MOD_CODE = "A";
   TK_TAX_P = 0;
   TK_ISSUE_UD_DATE = 0;
   TK_ARC_UD_DATE = 0;
   TK_DEP_UD_DATE = 0;
   TK_OR_UD_DATE = 0;
   TK_BK_DEP_DATE = 0;
   TK_UD_STATUS = 0;
   TK_CREDIT = "N";
   TK_SEQ = 1;
   TK_TIME = NO_TIME;
   TK_DET_MOD_CODE = "A";
   TK_INV = "N";
   TK_INV_MOD = -1;
   TK_ARR_TIME = NO_TIME;
   TK_ARR_DAY = 0;
   TK_DETAIL_MODULE = "";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_PURGE_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_PURGE_RECORD) );
   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
   call OPEN_FILE (BK_TOUR_NO,"BK_TOUR",byteaddr(BK_TOUR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TOUR_NO,ERROR_CODE);
   call OPEN_FILE (BK_DET_HOTEL_NO,"BK_DET_HOTEL",byteaddr(BK_DET_HOTEL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_DET_HOTEL_NO,ERROR_CODE);
   call OPEN_FILE (BK_DET_LAND_NO,"BK_DET_LAND",byteaddr(BK_DET_LAND_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_DET_LAND_NO,ERROR_CODE);
   call OPEN_FILE (BK_COMMENT_NO,"BK_COMMENT",byteaddr(BK_COMMENT_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_COMMENT_NO,ERROR_CODE);
   call OPEN_FILE (BK_LINE_NO,"BK_LINE",byteaddr(BK_LINE_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_LINE_NO,ERROR_CODE);
   call OPEN_FILE (BK_PASSENGERS_NO,"BK_PASSENGERS",byteaddr(BK_PASSENGERS_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_PASSENGERS_NO,ERROR_CODE);
   call OPEN_FILE (TK_HEADER_NO,"TK_HEADER",byteaddr(TK_HEADER_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_HEADER_NO,ERROR_CODE);
   call OPEN_FILE (TK_DETAIL_NO,"TK_DETAIL",byteaddr(TK_DETAIL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_DETAIL_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	BK_PURGE_MAIN
	Mainline logic
****************************************************************/

BK_PURGE_MAIN:
	procedure;

declare		ANSWER               character (1);
   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;


   /* CHECK_SURE - Are you sure? */

   call OUTPUT_LINE(23,10,"Are you sure?");
   call INPUT_DATA(23,24,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
   call CLEAR_TO_BOS(23);
   call DUMP_BUFFER;
   if ANSWER ^= "Y" then
      return;


   /* PROC_OCCURRING - Processing occurring, please wait msg */

   call PROCESSING_OCCURRING;
   call DUMP_BUFFER;


   /* SET_FIRST - Set the record pointer to the first rec */

   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   call SET_POSITION (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   END_BK_PURGE_THRU = NO;
   do while (END_BK_PURGE_THRU ^= YES);
      call BK_PURGE_THRU;
   end;
return;
end;	/* BK_PURGE_MAIN        */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX = FIRST_ITEM to   3;
   if LOOP_INDEX =   2 then
      call DISPLAY_MSG_NO (116);
   if LOOP_INDEX =   3 then
      call DISPLAY_MSG_NO (116);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_PASS - Check the password */

      if BK_FIX_PASS ^= "DONWPP" then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  3,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  3 then
   do;

      LOOP_INDEX = SELECT;
   if LOOP_INDEX =   2 then
      call DISPLAY_MSG_NO (116);
   if LOOP_INDEX =   3 then
      call DISPLAY_MSG_NO (116);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_PASS - Check the password */

      if BK_FIX_PASS ^= "DONWPP" then
         do;
         ERROR_INPUT_SCREEN = YES;
         do;
         END_CHANGE_ITEM = YES;
         return;
         end;
         end;

      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	BK_PURGE_THRU
	Purge thru the file
****************************************************************/

BK_PURGE_THRU:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_TOUR        fixed binary (15);
declare		ERROR_BK_BOOKING     fixed binary (15);

   /* READNEXT - Read the next record */

   call READ_NEXT (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_BOOKING_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) then
      do;
      END_BK_PURGE_THRU = YES;
      return;
      end;

   /* CHECK_BK_PURGE - Delete this record? */

   if BK_MODIFICATION = 0 then
      do;
      if (BK_PURGE_DATE = 0) ! (BK_DEPARTURE >= BK_PURGE_DATE) then
         return;
      end;
   else
      do;
      if (BK_PURGE_HIST = 0) ! (BK_DEPARTURE >= BK_PURGE_HIST) then
         do;
         if (BK_PURGE_DATE = 0) ! (BK_DEPARTURE >= BK_PURGE_DATE) then
            return;
         end;
      end;

   END_DELETE_HOTEL = NO;
   do while (END_DELETE_HOTEL ^= YES);
      call DELETE_HOTEL;
   end;
   END_DELETE_TOUR = NO;
   do while (END_DELETE_TOUR ^= YES);
      call DELETE_TOUR;
   end;
   END_DEL_TKHDR = NO;
   do while (END_DEL_TKHDR ^= YES);
      call DEL_TKHDR;
   end;
   END_DELETE_TKDET = NO;
   do while (END_DELETE_TKDET ^= YES);
      call DELETE_TKDET;
   end;
   END_DEL_REMARK = NO;
   do while (END_DEL_REMARK ^= YES);
      call DEL_REMARK;
   end;
   END_DELETE_LINE = NO;
   do while (END_DELETE_LINE ^= YES);
      call DELETE_LINE;
   end;
   END_DELETE_PAX = NO;
   do while (END_DELETE_PAX ^= YES);
      call DELETE_PAX;
   end;

   /* DELETE_THE_TOUR - Delete the tour record */

   if BK_MODIFICATION = 0 then
      do;
      TOUR_NO = BK_TOUR_NUM;

      /* READ_TOUR_LOCK - Read the tour record and lock it */

      ERROR_BK_TOUR = RECORD_LOCKED;
      do while (ERROR_BK_TOUR = RECORD_LOCKED);

         /* READ_TOUR_LK - Read and lock the tour */

         call READ_KEYED (BK_TOUR_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_BK_TOUR);
         if ERROR_BK_TOUR > 3 then
            call PRINT_ERROR (BK_TOUR_NO,ERROR_BK_TOUR);
      end;

      if ERROR_BK_TOUR = NORMAL_RETURN then
         do;

         /* DELETE_BK_TOUR - Delete the tour record */

         call DELETE_RECORD (BK_TOUR_NO,ERROR_CODE);
         end;
      end;


   /* DELETE_RECORD - Delete the record */

   call DELETE_RECORD (BK_BOOKING_NO,ERROR_CODE);

   /* READ_RECORD - Read the record */

   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_BK_BOOKING);
   if ERROR_BK_BOOKING > 3 then
      call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
return;
end;	/* BK_PURGE_THRU        */

/****************************************************************
	DELETE_HOTEL
	Delete the hotel detail
****************************************************************/

DELETE_HOTEL:
	procedure;


   /* SET_FIRST_HOTELD - Set first hotel detail */

   HDET_MOD = BK_MODIFICATION;
   HDET_BK_TR_NO = BOOKING_NO;
   HDET_ALT_SEQ = 0;
   HDET_ANSW_SEQ = 0;
   HDET_DAY = 0;
   HDET_SEQ = 0;
   call SET_POSITION (BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_CODE);

   /* READ_NEXT_HOTELD - Read next */

   call READ_NEXT (BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_DET_HOTEL_NO,ERROR_CODE);

   /* CHECK_END_HOTELD - Check end */

   if (ERROR_CODE = END_OF_FILE) !
   (HDET_MOD > BK_MODIFICATION) !
   (HDET_BK_TR_NO > BOOKING_NO) then
      do;
      END_DELETE_HOTEL = YES;
      return;
      end;

   /* DELETE_HOTELD - Delete */

   call DELETE_RECORD (BK_DET_HOTEL_NO,ERROR_CODE);
return;
end;	/* DELETE_HOTEL         */

/****************************************************************
	DELETE_TOUR
	Delete the tour detail
****************************************************************/

DELETE_TOUR:
	procedure;


   /* SET_FIRST_LANDD - Set to the first land detail record */

   LDET_MOD = BK_MODIFICATION;
   LDET_BK_TK_NO = BOOKING_NO;
   LDET_ALT_SEQ = 0;
   LDET_ANSW_SEQ = 0;
   LDET_DAY = 0;
   LDET_SEQ = 0;
   call SET_POSITION (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);

   /* READ_NEXT_LANDD - Read the next land detail record */

   call READ_NEXT (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_DET_LAND_NO,ERROR_CODE);

   /* CHECK_END_LANDD - Last land detail record? */

   if (ERROR_CODE = END_OF_FILE) !
   (LDET_MOD > BK_MODIFICATION) !
   (LDET_BK_TK_NO > BOOKING_NO) then
      do;
      END_DELETE_TOUR = YES;
      return;
      end;

   /* DELETE_LANDD - Delete land detail */

   call DELETE_RECORD (BK_DET_LAND_NO,ERROR_CODE);
return;
end;	/* DELETE_TOUR          */

/****************************************************************
	DEL_TKHDR
	Delete the ticket header records
****************************************************************/

DEL_TKHDR:
	procedure;


   /* SET_FIRST_AIRH_COPY - Set to first header to copy */

   TK_MODIFICATION = BK_MODIFICATION;
   TK_BK_TK_NO = BOOKING_NO;
   TK_ALT_SEQ = 0;
   TK_ANSW_SEQ = 0;
   call SET_POSITION (TK_HEADER_NO,KEY_AREA_1,ERROR_CODE);

   /* READ_NEXT_AIRH - Read the next air header */

   call READ_NEXT (TK_HEADER_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (TK_HEADER_NO,ERROR_CODE);

   /* CHECK_END_AIRH_COPY - Last air header in booking? */

   if (ERROR_CODE = END_OF_FILE) !
   (TK_MODIFICATION > BK_MODIFICATION) !
   (TK_BK_TK_NO > BOOKING_NO) then
      do;
      END_DEL_TKHDR = YES;
      return;
      end;

   /* RETURN_IF_TICKET - Return if this is a valid ticket */

   if TK_ALT_SEQ ^= 0 then if TK_UD_STATUS >= TICK_TK then
      if ((TK_ISSUE_UD_DATE ^= 0) ! (TK_ARC_UD_DATE ^= 0) ! (TK_DEP_UD_DATE ^= 0)) then
         do;
         END_DEL_TKHDR = YES;
         return;
         end;


   /* DELETE_AIRH - Delete the air header record */

   call DELETE_RECORD (TK_HEADER_NO,ERROR_CODE);
return;
end;	/* DEL_TKHDR            */

/****************************************************************
	DELETE_TKDET
	Delete ticket detail
****************************************************************/

DELETE_TKDET:
	procedure;


   /* SET_FIRST_AIRD - Set first air */

   TK_DET_MOD = BK_MODIFICATION;
   TK_DET_BK_TK = BOOKING_NO;
   TK_DET_ALT_SEQ = 0;
   TK_DET_ANSW_SEQ = 0;
   TK_DATE = 0;
   TK_SEQ = 0;
   call SET_POSITION (TK_DETAIL_NO,KEY_AREA_1,ERROR_CODE);

   /* READ_NEXT_AIRD - Read next */

   call READ_NEXT (TK_DETAIL_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (TK_DETAIL_NO,ERROR_CODE);

   /* CHECK_END_AIRD - Check end */

   if (ERROR_CODE = END_OF_FILE) !
   (TK_DET_MOD > BK_MODIFICATION) !
   (TK_DET_BK_TK > BOOKING_NO) then
      do;
      END_DELETE_TKDET = YES;
      return;
      end;

   /* DELETE_AIRD - Delete */

   call DELETE_RECORD (TK_DETAIL_NO,ERROR_CODE);
return;
end;	/* DELETE_TKDET         */

/****************************************************************
	DEL_REMARK
	Delete all the comments and remarks
****************************************************************/

DEL_REMARK:
	procedure;


   /* SET_FIRST_REMARKD - Set first */

   BK_TOUR_MOD_NO = BK_MODIFICATION;
   BK_OR_TOUR_NO = BOOKING_NO;
   BK_COMM_ALT_SEQ = 0;
   BK_COMM_ANSW_SEQ = 0;
   BK_TOUR_C_R = "";
   BK_TOUR_SEQ = 0;
   call SET_POSITION (BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);

   /* READ_NEXT_REMARKD - Read next */

   call READ_NEXT (BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_COMMENT_NO,ERROR_CODE);

   /* CHECK_END_REMARKD - Check end */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_TOUR_MOD_NO > BK_MODIFICATION) !
   (BK_OR_TOUR_NO > BOOKING_NO) !
   (BK_COMM_ALT_SEQ > BK_COMM_ALT_SEQ) !
   (BK_COMM_ANSW_SEQ > BK_COMM_ANSW_SEQ) !
   (BK_TOUR_C_R > BK_TOUR_C_R) then
      do;
      END_DEL_REMARK = YES;
      return;
      end;

   /* DELETE_REMARKD - Delete */

   call DELETE_RECORD (BK_COMMENT_NO,ERROR_CODE);
return;
end;	/* DEL_REMARK           */

/****************************************************************
	DELETE_LINE
	Delete the line items
****************************************************************/

DELETE_LINE:
	procedure;


   /* SET_FIRST_LINED - Set first */

   BK_LINE_MOD = BK_MODIFICATION;
   BK_LINE_BK_NO = BOOKING_NO;
   BK_LINE_SEQ = 0;
   call SET_POSITION (BK_LINE_NO,KEY_AREA_1,ERROR_CODE);

   /* READ_NEXT_LINED - Read next */

   call READ_NEXT (BK_LINE_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_LINE_NO,ERROR_CODE);

   /* CHECK_END_LINED - Check end */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_LINE_MOD > BK_MODIFICATION) !
   (BK_LINE_BK_NO > BOOKING_NO) then
      do;
      END_DELETE_LINE = YES;
      return;
      end;

   /* DELETE_LINED - Delete a detail line */

   call DELETE_RECORD (BK_LINE_NO,ERROR_CODE);
return;
end;	/* DELETE_LINE          */

/****************************************************************
	DELETE_PAX
	Delete the passenger detail
****************************************************************/

DELETE_PAX:
	procedure;


   /* SET_FIRST_PAXD - Set first */

   BK_PAX_MOD = BK_MODIFICATION;
   BK_PAX_BK_NO = BOOKING_NO;
   BK_PAX_SEQ = 0;
   call SET_POSITION (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);

   /* READ_NEXT_PAXD - Read next */

   call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_PASSENGERS_NO,ERROR_CODE);

   /* CHECK_END_PAXD - Check end */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_PAX_MOD > BK_MODIFICATION) !
   (BK_PAX_BK_NO > BOOKING_NO) then
      do;
      END_DELETE_PAX = YES;
      return;
      end;

   /* DELETE_PAXD - Delete */

   call DELETE_RECORD (BK_PASSENGERS_NO,ERROR_CODE);
return;
end;	/* DELETE_PAX           */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_FILE (BK_TOUR_NO);
   call CLOSE_FILE (BK_DET_HOTEL_NO);
   call CLOSE_FILE (BK_DET_LAND_NO);
   call CLOSE_FILE (BK_COMMENT_NO);
   call CLOSE_FILE (BK_LINE_NO);
   call CLOSE_FILE (BK_PASSENGERS_NO);
   call CLOSE_FILE (TK_HEADER_NO);
   call CLOSE_FILE (TK_DETAIL_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
