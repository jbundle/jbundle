/****************************************************************
	Module: BK_V_HOTEL
	Top Level Logic: V_HOTEL_LOGIC
	Date: 11-Jul-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_V_HOTEL
	Top-Level Build Hotel A/P estimates/vhrs
****************************************************************/

%replace BK_V_HOTEL_1 by 769;
BK_V_HOTEL:
   procedure(
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_BOOKING_RECORD,
      BK_PASSENGERS_RECORD,
      BK_DET_HOTEL_RECORD,
      AP_OPEN_RECORD,
      AP_CONTROL_RECORD,
      BK_HOTEL_RECORD,
      BK_HOTEL_DET_RECORD,
      AD_CURR_RECORD,
      ERROR_CODE);
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_BOOKING_NO by   9;
%replace BK_PASSENGERS_NO by  49;
%replace BK_DET_HOTEL_NO by  67;
%replace AP_OPEN_NO by  32;
%replace AP_CONTROL_NO by  29;
%replace BK_HOTEL_NO by   8;
%replace BK_HOTEL_DET_NO by  52;
%replace AD_CURR_NO by  25;
%include "BK_V_HOTEL.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_BOOKING.DD";
%include "BK_PASSENGERS.DD";
%include "BK_DET_HOTEL.DD";
%include "AP_OPEN.DD";
%include "AP_CONTROL.DD";
%include "BK_HOTEL.DD";
%include "BK_HOTEL_DET.DD";
%include "AD_CURR.DD";

declare		ERROR_CODE           fixed binary (15);
declare		KEY_NO               fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		ERROR_BK_BOOKING     fixed binary (15);
declare		ERROR_BK_DET_HOTEL   fixed binary (15);
declare		END_SCAN_AP_OPEN     bit (1);
declare		END_SCAN_BK_HOTELS   bit (1);
declare		END_SCAN_BK_HOTELD   bit (1);
declare		ERROR_AP_OPEN        fixed binary (15);
declare		ERROR_AP_CONTROL     fixed binary (15);

   /* INIT_FILE_VARS - Initialize the file variables */


   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */


   /* GET_AP_CONTROL - Read the A/P control file */


      /* SET_AP_CONTROL - Set the key to read A/P control file */

      AP_REC_NO = 0;
      KEY_NO = 1;

      /* READ_AP_CONTROL - Read the A/P control file */

      call READ_KEYED (AP_CONTROL_NO,KEY_NO,ERROR_AP_CONTROL);
      if ERROR_AP_CONTROL > 3 then
         call PRINT_ERROR (AP_CONTROL_NO,ERROR_AP_CONTROL);
   call V_HOTEL_MAIN;

   /* RELEASE_LOCKS - Release all locks on this file */

   call RELEASE_LOCKS (BK_BOOKING_NO);

   /* RELEASE_LOCKS_2 - Release Locks */

   call RELEASE_LOCKS (AP_OPEN_NO);

   /* SAVE_ERROR_CODE - Save the error code */

   declare ERROR_SAVE fixed binary;
   ERROR_SAVE = ERROR_CODE;


   /* BACK_OUT_AP - Set the AP entry number back */

   AP_REC_NO = 0;

   call READ_KEYED (AP_CONTROL_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = NORMAL_RETURN then
      do;
      if AP_ENTRY_NO >= AP_NEXT_ENTRY then
         AP_NEXT_ENTRY = AP_ENTRY_NO;
      call UPDATE_RECORD (AP_CONTROL_NO,ERROR_CODE);
      end;


   /* RESTORE_ERROR_CODE - Restore the error code */

   ERROR_CODE = ERROR_SAVE;

   call END_PROGRAM;
return;

/****************************************************************
	V_HOTEL_MAIN
	Mainline logic
****************************************************************/

V_HOTEL_MAIN:
	procedure;


   /* NO_PAX_SEQ - Set pax seq to zero to get booking air */

   BK_PAX_SEQ = 0;
   BK_PAX_SHARE_SEQ = 0;


   /* HOTEL_TABLE_INIT - Init the hotel table */

   HV_HOTEL(1) = "";

   call SCAN_HOTELS;

   /* RETURN_IF_LOCK - Return if ERROR_CODE = locked */

   if ERROR_CODE = RECORD_LOCKED then
      return;


   /* CREATE_HV - Create the Hotel Est/Vouchers */

   do LOOP_INDEX = 1 to 25;
      if HV_HOTEL(LOOP_INDEX) = "" then
         LOOP_INDEX = 99;
      else
         do;
         if (BK_MODIFICATION ^= 0) !
         (BOOKING_NO ^= HV_FIRST_BK(LOOP_INDEX)) !
         (HV_MATCH_COUNT(LOOP_INDEX) > 1) then
            do;
            BK_MODIFICATION = 0;
            BOOKING_NO = HV_FIRST_BK(LOOP_INDEX);
            KEY_NO = 1;

            /* READ_BK_REC - Read the booking record */

            call READ_KEYED (BK_BOOKING_NO+?LOCK_RECORD,KEY_NO,ERROR_BK_BOOKING);
            if ERROR_BK_BOOKING > 3 then
               call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
            if HV_MATCH_COUNT(LOOP_INDEX) ^= 1 then
               do;
               /* Fix this later (Scan all bookings, add up pax) */
               BK_SINGLE = TOUR_SINGLES;
               BK_DOUBLE = TOUR_DOUBLES;
               BK_TRIPLE = TOUR_TRIPLES;
               BK_QUAD = TOUR_QUADS;
               end;
            end;

         HDET_MOD = BK_MODIFICATION;
         HDET_BK_TR_NO = BOOKING_NO;
         HDET_ALT_SEQ = HV_PAX_MOD(LOOP_INDEX);
         HDET_ANSW_SEQ = 0;
         HDET_DATE = HV_DATE(LOOP_INDEX);
         HDET_SEQ = HV_SEQ(LOOP_INDEX);

         /* READ_HOTELD - Read the hotel detail record */

         call READ_KEYED (BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_BK_DET_HOTEL);
         if ERROR_BK_DET_HOTEL > 3 then
            call PRINT_ERROR (BK_DET_HOTEL_NO,ERROR_BK_DET_HOTEL);
         if ERROR_BK_DET_HOTEL = NORMAL_RETURN then
            do;
            call CREATE_H_VOUCHER;
            if ERROR_CODE = RECORD_LOCKED then
               return;
            end;
         HV_VOUCHER(LOOP_INDEX) = AP_ENTRY_NO;

         end;
   end;


   /* SET_FIRST_AP_OPEN - Set to the first tour detail */

   AP_OPEN_TOUR = TOUR_NO;
   AP_START_SVC = 0;
   AP_ENTRY_NO = 0;
   call SET_POSITION (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
   END_SCAN_AP_OPEN = NO;
   do while (END_SCAN_AP_OPEN ^= YES);
      call SCAN_AP_OPEN;
   end;
return;
end;	/* V_HOTEL_MAIN         */

/****************************************************************
	SCAN_HOTELS
	Scan curr hotels, set up array Any Chg?
****************************************************************/

SCAN_HOTELS:
	procedure;


   /* RETURN_IF_XL - Don't scan current if tour is XLD */

   if ACTION_TYPE = XL_UD then
      return;


   /* SET_FIRST_BK - Set up for read */

   BK_MODIFICATION = 0;
   BK_TOUR_NUM = TOUR_NO;
   BOOKING_NO = 0;
   call SET_POSITION (BK_BOOKING_NO,KEY_AREA_3,ERROR_CODE);
   END_SCAN_BK_HOTELS = NO;
   do while (END_SCAN_BK_HOTELS ^= YES);
      call SCAN_BK_HOTELS;
   end;
return;
end;	/* SCAN_HOTELS          */

/****************************************************************
	SCAN_BK_HOTELS
	Scan the booking, then hotel detail
****************************************************************/

SCAN_BK_HOTELS:
	procedure;


   /* READ_NEXT_BK - Read the next booking record */

   call READ_NEXT (BK_BOOKING_NO+?LOCK_RECORD,KEY_AREA_3,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_BOOKING_NO,ERROR_CODE);

   /* CHECK_END_BK - No bookings = no docs */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_MODIFICATION > 0) !
   (BK_TOUR_NUM > TOUR_NO) then
      do;
      END_SCAN_BK_HOTELS = YES;
      return;
      end;

   /* RETURN_IF_LOCK - Return if ERROR_CODE = locked */

   if ERROR_CODE = RECORD_LOCKED then
      do;
      END_SCAN_BK_HOTELS = YES;
      return;
      end;


   /* SKIP_XL_BK - Skip cancelled bookings */

   if BK_STATUS = "XL" then
      return;


   /* SKIP_NS_BK - Skip bookings with no status */

   if BK_STATUS = "NS" then
      return;


   /* SET_FIRST_HOTELD - Set first hotel detail */

   HDET_MOD = BK_MODIFICATION;
   HDET_BK_TR_NO = BOOKING_NO;
   HDET_ALT_SEQ = 0;
   HDET_ANSW_SEQ = 0;
   HDET_DAY = 0;
   HDET_SEQ = 0;
   call SET_POSITION (BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
   END_SCAN_BK_HOTELD = NO;
   do while (END_SCAN_BK_HOTELD ^= YES);
      call SCAN_BK_HOTELD;
   end;
return;
end;	/* SCAN_BK_HOTELS       */

/****************************************************************
	SCAN_BK_HOTELD
	Scan the hotel detail
****************************************************************/

SCAN_BK_HOTELD:
	procedure;


   /* READ_NEXT_HOTELD - Read next */

   call READ_NEXT (BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_DET_HOTEL_NO,ERROR_CODE);

   /* CHECK_END_HOTELD - Check end */

   if (ERROR_CODE = END_OF_FILE) !
   (HDET_MOD > BK_MODIFICATION) !
   (HDET_BK_TR_NO > BOOKING_NO) then
      do;
      END_SCAN_BK_HOTELD = YES;
      return;
      end;

   /* SKIP_MAN_HOTEL - Skip manual hotels */

   if HDET_MANUAL ^= "" then
      return;


   /* HOTEL_TABLE_CHECK - Check and add hotel to table */

   if HDET_ALT_SEQ ^= 0 then
      return;		/* Temporary - No pax mods */

   do LOOP_INDEX = 1 to 24;
      if HV_HOTEL(LOOP_INDEX) = "" then
         do;
         HV_HOTEL(LOOP_INDEX) = HDET_HOTEL;
         HV_DATE(LOOP_INDEX) = HDET_DATE;
         HV_SEQ(LOOP_INDEX) = HDET_SEQ;
         HV_NIGHTS(LOOP_INDEX) = HDET_NIGHTS;
         HV_RATE_TYPE(LOOP_INDEX) = HDET_RATE_TYPE;
         HV_CLASS(LOOP_INDEX) = HDET_CLASS;
         HV_FIRST_BK(LOOP_INDEX) = BOOKING_NO;
         HV_PAX_MOD(LOOP_INDEX) = HDET_ALT_SEQ;
         HV_MATCH_COUNT(LOOP_INDEX) = 1;
         HV_HOTEL(LOOP_INDEX + 1) = "";
         LOOP_INDEX = 99;
         end;
      else
         do;
         if HDET_HOTEL = HV_HOTEL(LOOP_INDEX) then
         if HDET_DATE = HV_DATE(LOOP_INDEX) then
         if HDET_NIGHTS = HV_NIGHTS(LOOP_INDEX) then
         if HDET_RATE_TYPE = HV_RATE_TYPE(LOOP_INDEX) then
         if HDET_CLASS = HV_CLASS(LOOP_INDEX) then
            do;
            HV_MATCH_COUNT(LOOP_INDEX) = HV_MATCH_COUNT(LOOP_INDEX) + 1;
            LOOP_INDEX = 99;
            end;
         end;
   end;

return;
end;	/* SCAN_BK_HOTELD       */

/****************************************************************
	CREATE_H_VOUCHER
	Create the Hotel Voucher
****************************************************************/

CREATE_H_VOUCHER:
	procedure;

declare		ERROR_AD_CURR        fixed binary (15);
   call BK_COST_HOTEL;

   /* SETUP_KEY - Set up this key for a read */

   AP_ENTRY_NO = HDET_VOUCHER;
   KEY_NO = 1;

   /* GET_OLD_VOUCHER - Read the old voucher if it exists */

   if AP_ENTRY_NO ^= 0 then
      do;

      /* READ_AP_OPEN - Read the A/P Open record */

      call READ_KEYED (AP_OPEN_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_AP_OPEN);
      if ERROR_AP_OPEN > 3 then
         call PRINT_ERROR (AP_OPEN_NO,ERROR_AP_OPEN);
      end;
   else
      ERROR_AP_OPEN = RECORD_NOT_FOUND;

   if ERROR_AP_OPEN = RECORD_LOCKED then
      do;
      ERROR_CODE = RECORD_LOCKED;
      return;
      end;


   /* CHECK_NEW_HOTEL - Different Hotel? */

   if ERROR_AP_OPEN = NORMAL_RETURN then
      if HOTEL_VENDOR_NO ^= AP_OPEN_VENDOR then
         ERROR_AP_OPEN = RECORD_NOT_FOUND;


   /* CHECK_MAN_H_AP - Is there a manual A/P entry here already */

   if ERROR_AP_OPEN = NORMAL_RETURN then if HDET_HOTEL ^= HOTEL_CODE then
      do;
      AP_ENTRY_NO = 0;
      return;
      end;

   if ERROR_AP_OPEN = RECORD_NOT_FOUND then
      do;
      AP_OPEN_TOUR = TOUR_NO;
      AP_START_SVC = HDET_DATE;
      AP_ENTRY_NO = 0;

      call SET_POSITION(AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
      ERROR_CODE = NORMAL_RETURN;
      do while (ERROR_CODE = NORMAL_RETURN);
         call READ_NEXT(AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
         if AP_OPEN_TOUR ^= TOUR_NO then
            ERROR_CODE = END_OF_FILE;
         if AP_START_SVC ^= HDET_DATE then
            ERROR_CODE = END_OF_FILE;
         if ERROR_CODE = NORMAL_RETURN then
            do;
            if HOTEL_VENDOR_NO = AP_OPEN_VENDOR then
               if AP_END_SVC = HDET_DATE + HDET_NIGHTS then
               if AP_V_BASED_BK = 0 then
                  do;
                  return;
                  end;
            end;
      end;

      /* INIT_AP_OPEN - Initialize the A/P open fields */

      AP_ENTRY_TYPE = 0;
      AP_OPEN_VENDOR = "";
      AP_OPEN_CURR = "";
      AP_OPEN_TOUR = 0;
      AP_OPEN_TOUR_CODE = "";
      AP_OPEN_TOUR_GL = 0;
      AP_OPEN_DEP = 0;
      AP_FINL_EST = 0;
      AP_FINL_DATE = 0;
      AP_DEP_EST = 0;
      AP_DEP_EXCH = 0;
      AP_DEP_EST_USD = 0;
      AP_DEP_EST_GL = 0;
      AP_EST_GL = 0;
      AP_VEN_INV_NO = "";
      AP_INV_ENTERED = 0;
      AP_VEN_INV_DATE = 0;
      AP_VEN_INV_GL = 0;
      AP_VEN_INV_AMT = 0;
      AP_VEN_INV_USD = 0;
      AP_INV_BAL = 0;
      AP_INV_BAL_USD = 0;
      AP_OPEN_AP_ACCT = 0;
      AP_OVER_UNDER_GL = 0;
      AP_OPEN_SELECT = "N";
      AP_AMT_SELECTED = 0;
      AP_GAIN_LOSS_GL = 0;
      AP_PAID_USD = 0;
      AP_PYMT_DATE = 0;
      AP_V_BASED_BK = 0;
      AP_V_BASED_MOD = 0;
      AP_V_BASED_PAX = 0;
      AP_V_BASED_SEQ = 0;
      BK_V_DATE = 0;
      AP_ACK_DATE = 0;
      AP_ACKED_ON = 0;
      AP_ACK_BY = "";
      AP_GL_STATUS = 0;
      AP_GL_ACTION_DATE = 0;
      AP_ENTRY_TYPE_DESC = "";
      AP_V_DESC = "";
      AP_OPEN_TYPE = "";
      AP_OPEN_CURRENT = "N";

      end;


   /* SET_HOTEL_EST - Set up the Hotel Estimate */

   if ACTION_TYPE ^= DEPARTURE_UD then
      do;	/* Finalization update */
      if ERROR_AP_OPEN = RECORD_NOT_FOUND then
         do;
         AP_ENTRY_TYPE = FIN_EST;
         AP_ENTRY_NO = AP_NEXT_ENTRY;
         end;
      else
         do;

         /* UPDATE_HOTELD - Update */

         call UPDATE_RECORD (BK_DET_HOTEL_NO,ERROR_CODE);
         HS_INV = HDET_INV;
         HS_HOTEL = HDET_HOTEL;
         HS_NIGHTS = HDET_NIGHTS;
         HS_RATE_TYPE = HDET_RATE_TYPE;
         HS_CLASS = HDET_CLASS;
         HS_MANUAL = HDET_MANUAL;
         HS_SEND_TO = HDET_SEND_TO;
         HS_MEAL = HDET_MEAL;
         HS_MEAL_QTY = HDET_MEAL_QTY;
         HS_MEAL_DAY = HDET_MEAL_DAYS;

         HDET_BK_TR_NO = AP_V_BASED_BK;
         HDET_ALT_SEQ = AP_V_BASED_PAX;
         HDET_ANSW_SEQ = 0;
         HOTEL_SAME = "Y";
         do HDET_MOD = AP_V_BASED_MOD to BK_HOTEL_MOD;

            /* READ_HOTELD - Read the hotel detail record */

            call READ_KEYED (BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_BK_DET_HOTEL);
            if ERROR_BK_DET_HOTEL > 3 then
               call PRINT_ERROR (BK_DET_HOTEL_NO,ERROR_BK_DET_HOTEL);
            if ERROR_BK_DET_HOTEL = NORMAL_RETURN then
               do;
               if (HS_INV ^= HDET_INV) !
               (HS_HOTEL ^= HDET_HOTEL) !
               (HS_NIGHTS ^= HDET_NIGHTS) !
               (HS_RATE_TYPE ^= HDET_RATE_TYPE) !
               (HS_CLASS ^= HDET_CLASS) !
               (HS_MANUAL ^= HDET_MANUAL) !
               (HS_SEND_TO ^= HDET_SEND_TO) then
                  HOTEL_SAME = "N";
               declare LOOP_3 fixed binary;
               do LOOP_3 = 1 to 4;
                  if (HS_MEAL(LOOP_3) ^= "") ! (HDET_MEAL(LOOP_3) ^= "") then
                     if (HS_MEAL(LOOP_3) ^= HDET_MEAL(LOOP_3)) !
                     (HS_MEAL_QTY(LOOP_3) ^= HDET_MEAL_QTY(LOOP_3)) !
                     (HS_MEAL_DAY(LOOP_3) ^= HDET_MEAL_DAYS(LOOP_3)) then
                        HOTEL_SAME = "N";
               end;
               HDET_MOD = BK_HOTEL_MOD + 1;
               end;
         end;
         if HOTEL_SAME = "Y" then
            do;
            /* No changes -- see if any change in room configuration */
            BK_V_SINGLE = BK_SINGLE;
            BK_V_DOUBLE = BK_DOUBLE;
            BK_V_TRIPLE = BK_TRIPLE;
            BK_V_QUAD = BK_QUAD;
            BK_MODIFICATION = AP_V_BASED_MOD;

            /* READ_BK_REC - Read the booking record */

            call READ_KEYED (BK_BOOKING_NO+?LOCK_RECORD,KEY_NO,ERROR_BK_BOOKING);
            if ERROR_BK_BOOKING > 3 then
               call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
            if BK_V_SINGLE = BK_SINGLE then
            if BK_V_DOUBLE = BK_DOUBLE then
            if BK_V_TRIPLE = BK_TRIPLE then
            if BK_V_QUAD = BK_QUAD then
               return;
            BK_MODIFICATION = 0;

            /* READ_BK_REC - Read the booking record */

            call READ_KEYED (BK_BOOKING_NO+?LOCK_RECORD,KEY_NO,ERROR_BK_BOOKING);
            if ERROR_BK_BOOKING > 3 then
               call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
            end;
         HDET_MOD = 0;

         /* READ_HOTELD - Read the hotel detail record */

         call READ_KEYED (BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_BK_DET_HOTEL);
         if ERROR_BK_DET_HOTEL > 3 then
            call PRINT_ERROR (BK_DET_HOTEL_NO,ERROR_BK_DET_HOTEL);
         end;
      AP_OPEN_VENDOR = HOTEL_VENDOR_NO;
      AP_OPEN_CURR = HOTEL_CURR;
      AP_OPEN_TOUR = TOUR_NO;
      AP_OPEN_TOUR_CODE = TOUR_CODE;
      AP_OPEN_DEP = TOUR_DEP_DATE;
      AP_SERVICES = HDET_NIGHTS;
      if substr(AP_SERVICES,8,1) = " " then
         AP_SERVICES = substr(AP_SERVICES,9,1) !! " night hotel stay";
      else
         AP_SERVICES = substr(AP_SERVICES,8,2) !! " night hotel stay";
      AP_START_SVC = HDET_DATE;
      AP_END_SVC = HDET_DATE + HDET_NIGHTS;
      AP_V_BASED_BK = HDET_BK_TR_NO;
      AP_V_BASED_PAX = HDET_ALT_SEQ;
      AP_V_BASED_SEQ = HDET_SEQ;
      AP_V_BASED_MOD = BK_NEXT_MOD + 1;
      if HDET_SEND_TO = "N" then
         AP_GL_STATUS = NO_VCHR;
      else
         do;
         if ((AP_GL_STATUS >= ACK_VCHR) & (AP_GL_STATUS <= VCHR_PRTD)) !
         (AP_GL_STATUS = REQ_REPRT) then
            AP_GL_STATUS = REQ_REPRT;
         else
            AP_GL_STATUS = REQ_VCHR;
         end;
      AP_FINL_DATE = TODAYS_DATE();
      AP_GL_ACTION_DATE = AP_FINL_DATE;
      AP_ACK_DATE = 0;
      AP_FINL_EST = 0;
      AP_FINL_EST = floor((HDET_RM_COST+HDET_ML_COST) * 100 + 0.5) /100;
      end;
   else
      do;
      if ERROR_AP_OPEN = RECORD_NOT_FOUND then
         do;
         AP_ENTRY_NO = AP_NEXT_ENTRY;
         end;
      AP_OPEN_VENDOR = HOTEL_VENDOR_NO;
      AP_OPEN_CURR = HOTEL_CURR;
      AP_OPEN_TOUR = TOUR_NO;
      AP_OPEN_TOUR_CODE = TOUR_CODE;
      AP_OPEN_DEP = TOUR_DEP_DATE;
      AP_SERVICES = HDET_NIGHTS;
      if substr(AP_SERVICES,8,1) = " " then
         AP_SERVICES = substr(AP_SERVICES,9,1) !! " night hotel stay";
      else
         AP_SERVICES = substr(AP_SERVICES,8,2) !! " night hotel stay";
      AP_START_SVC = HDET_DATE;
      AP_END_SVC = HDET_DATE + HDET_NIGHTS;
      AP_V_BASED_BK = HDET_BK_TR_NO;
      AP_V_BASED_MOD = BK_NEXT_MOD + 1;
      AP_V_BASED_PAX = HDET_ALT_SEQ;
      AP_V_BASED_SEQ = HDET_SEQ;

      AP_ENTRY_TYPE = DEP_EST;

      AP_GL_STATUS = DEP_TYPE;
      AP_GL_ACTION_DATE = AP_OPEN_DEP;

      AP_DEP_EST = 0;
      if CURR_CODE ^= AP_OPEN_CURR then
         do;
         CURR_CODE = AP_OPEN_CURR;

         /* READ_CURR - Read in the currency */

         call READ_KEYED (AD_CURR_NO,KEY_AREA_1,ERROR_AD_CURR);
         if ERROR_AD_CURR > 3 then
            call PRINT_ERROR (AD_CURR_NO,ERROR_AD_CURR);
         if (ERROR_AD_CURR ^= NORMAL_RETURN) ! (LAST_EXCHANGE = 0) then
            LAST_EXCHANGE = HDET_EXCHANGE;
         end;
      AP_DEP_EST = floor((HDET_RM_COST+HDET_ML_COST) * 100 + 0.5)/100;
      AP_DEP_EXCH = LAST_EXCHANGE;
      AP_DEP_EST_USD =
         floor((HDET_RM_COST+HDET_ML_COST) * AP_DEP_EXCH * 100 + 0.5) /100;
      AP_DEP_EST_GL = 0;


      /* INIT_AP_DATA - Init data for any invoice */

      if AP_OPEN_TOUR_GL = 0 then
         AP_OPEN_TOUR_GL = HDR_LAND_GL;
      if AP_OPEN_TOUR_GL = 0 then
         AP_OPEN_TOUR_GL = AP_DEF_TOUR_GL;
      if AP_EST_GL = 0 then
         AP_EST_GL = HDR_UNINV_GL;
      if AP_EST_GL = 0 then
         AP_EST_GL = AP_DEF_EST;
      if AP_OVER_UNDER_GL = 0 then
         AP_OVER_UNDER_GL = HDR_COST_OU_GL;
      if AP_OVER_UNDER_GL = 0 then
         AP_OVER_UNDER_GL = AP_DEF_OU;
      if AP_OPEN_AP_ACCT = 0 then
         AP_OPEN_AP_ACCT = HDR_AP_GL;
      if AP_OPEN_AP_ACCT = 0 then
         AP_OPEN_AP_ACCT = AP_DEF_AP;
      if AP_GAIN_LOSS_GL = 0 then
         AP_GAIN_LOSS_GL = HDR_CURR_OU_GL;
      if AP_GAIN_LOSS_GL = 0 then
         AP_GAIN_LOSS_GL = AP_DEF_GL;

      end;


   /* AP_UPDATE_WRITE - Update or Write the A/P open */

   if ERROR_AP_OPEN = NORMAL_RETURN then
      do;

      /* UPDATE_AP_OPEN - Update the A/P Open Record */

      call UPDATE_RECORD (AP_OPEN_NO,ERROR_CODE);
      end;
   else
      do;

      /* WRITE_AP_OPN - Write new file and update control file */


         /* WRITE_AP_OPEN - Write the A/P Open file */

         ERROR_CODE = KEY_ALREADY_EXISTS;
         do while(ERROR_CODE = KEY_ALREADY_EXISTS);
            call WRITE_RECORD (AP_OPEN_NO,ERROR_CODE);
            if ERROR_CODE = KEY_ALREADY_EXISTS then
               AP_ENTRY_NO = AP_ENTRY_NO + 1;
         end;

         /* SET_NEXT_AP - Set new next A/P number */

         AP_NEXT_ENTRY = AP_ENTRY_NO + 1;

      end;

   /* SET_HVOUCHER - Set the Hotel Detail's Voucher number */

   HDET_VOUCHER = AP_ENTRY_NO;


   /* UPDATE_HOTELD - Update */

   call UPDATE_RECORD (BK_DET_HOTEL_NO,ERROR_CODE);
return;
end;	/* CREATE_H_VOUCHER     */

/****************************************************************
	BK_COST_HOTEL
	Do a hotel costing
****************************************************************/

BK_COST_HOTEL:
	procedure;

%include "BK_COST_HOTEL.DCL";
call BK_COST_HOTEL(
   BK_BOOKING_RECORD,
   BK_TOUR_RECORD,
   BK_TOUR_HDR_RECORD,
   BK_DET_HOTEL_RECORD,
   BK_HOTEL_RECORD,
   BK_HOTEL_DET_RECORD,
   AD_CURR_RECORD);
return;
end;	/* BK_COST_HOTEL        */

/****************************************************************
	SCAN_AP_OPEN
	See if any old vouchers to XL
****************************************************************/

SCAN_AP_OPEN:
	procedure;


   /* READ_NEXT_AP_OPEN - Read next */

   call READ_NEXT (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AP_OPEN_NO,ERROR_CODE);

   /* CHECK_END_AP_OPEN - Last detail? */

   if (ERROR_CODE = END_OF_FILE) !
   (AP_OPEN_TOUR > TOUR_NO) then
      do;
      END_SCAN_AP_OPEN = YES;
      return;
      end;

   /* SKIP_AP_NON_FIN - Skip if this isn't a finalization est. */

   if AP_ENTRY_TYPE ^= FIN_EST then
      return;


   /* SKIP_AP_LAND - Skip A/P land vouchers */

   if AP_V_BASED_SEQ = -1 then
      return;


   /* SKIP_MAN_VOUCHER - Skip manually entered A/P voucher */

   if AP_V_BASED_BK = 0 then
      return;


   /* CHECK_AP_OPEN - Is this an old A/P open? */

   do LOOP_INDEX = 1 to 25;
      if HV_HOTEL(LOOP_INDEX) = "" then
         LOOP_INDEX = 99;
      else
         do;
         if HV_VOUCHER(LOOP_INDEX) = AP_ENTRY_NO then
            return;
         end;

   end;

   if (AP_GL_STATUS >= CXL_REQ) & (AP_GL_STATUS <= CXL_PRTD) then
      return;
   if AP_GL_STATUS > REQ_REPRT then
      return;

   if ACTION_TYPE = DEPARTURE_UD then
      return;

   AP_FINL_EST = 0;
   if AP_GL_STATUS <= REQ_VCHR then
      AP_GL_STATUS = AP_GL_DONE;
   else
      AP_GL_STATUS = CXL_REQ;
   AP_GL_ACTION_DATE = TODAYS_DATE();


   /* UPDATE_AP_OPEN - Update the A/P Open Record */

   call UPDATE_RECORD (AP_OPEN_NO,ERROR_CODE);

   /* READ_RECORD - Read the record */

   call READ_KEYED (AP_OPEN_NO,KEY_AREA_3,ERROR_AP_OPEN);
   if ERROR_AP_OPEN > 3 then
      call PRINT_ERROR (AP_OPEN_NO,ERROR_AP_OPEN);
return;
end;	/* SCAN_AP_OPEN         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
