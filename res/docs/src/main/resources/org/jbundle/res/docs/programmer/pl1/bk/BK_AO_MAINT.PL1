/****************************************************************
	Module: BK_AO_MAINT
	Top Level Logic: AO_DIS_MAINT
	Date: 27-Nov-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_AO_MAINT
	Display Questions and Answer Maintenance
****************************************************************/

%replace BK_AO_MAINT_1 by 720;
BK_AO_MAINT:
   procedure(
      BK_TOUR_HDR_RECORD,
      BK_OPT_ALT_RECORD);
%replace BK_TOUR_HDR_NO by  58;
%replace BK_OPT_ALT_NO by  62;
%include "BK_AO_MAINT.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_OPT_ALT.DD";

declare		ERROR_CODE           fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		ALT_ANSW_SEQ_ARRAY( 7) fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
   call INITIALIZE;
   call AO_DIS_MAIN;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */


   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_AO_MAINT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_AO_MAINT_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	AO_DIS_MAIN
	Mainline logic
****************************************************************/

AO_DIS_MAIN:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_OPT_ALT     fixed binary (15);

   /* SAVE_AO_INFO - Save the current Question/Answer */

   OLD_QUES_SEQ = ALT_SEQ;
   OLD_ANSW_SEQ = ALT_ANSW_SEQ;

   ALT_TOUR_CODE = HDR_TOUR_CODE;
   ALT_ANSW_SEQ = 0;
   call SET_POSITION(BK_OPT_ALT_NO,KEY_AREA_1,ERROR_CODE);
   call READ_NEXT(BK_OPT_ALT_NO,KEY_AREA_1,ERROR_CODE);
   if (ERROR_CODE = END_OF_FILE) !
      (ALT_TOUR_CODE ^= HDR_TOUR_CODE) !
      (ALT_SEQ ^= OLD_QUES_SEQ) then
         do;
         ALT_SEQ = OLD_QUES_SEQ;
         NEW_QUESTION = "";
         NEW_RESOLVE = "N";
         NEW_ASK_ANSW = "Y";
         end;
      else
         do;
         NEW_QUESTION = ALT_QUESTION;
         NEW_RESOLVE = ALT_OR_OPT;
         NEW_ASK_ANSW = ALT_SELECT_BY;
         end;

   OLD_QUESTION = NEW_QUESTION;
   OLD_RESOLVE = NEW_RESOLVE;
   OLD_ASK_ANSW = NEW_ASK_ANSW;

   call DISPLAY_DATA_A;
   call TABLE_MAINT;

   /* RESTORE_AO_INFO - Restore the old question/answer */

   if (NEW_QUESTION ^= OLD_QUESTION) !
      (NEW_RESOLVE ^= OLD_RESOLVE) !
      (NEW_ASK_ANSW ^= OLD_ASK_ANSW) then
         do;
         ALT_TOUR_CODE = HDR_TOUR_CODE;
         ALT_SEQ = OLD_QUES_SEQ;
         ALT_ANSW_SEQ = 0;
         call SET_POSITION(BK_OPT_ALT_NO,KEY_AREA_1,ERROR_CODE);

         ERROR_CODE = NORMAL_RETURN;
         do while (ERROR_CODE = NORMAL_RETURN);
            call READ_NEXT(BK_OPT_ALT_NO,KEY_AREA_1,ERROR_CODE);
            if ALT_TOUR_CODE ^= HDR_TOUR_CODE then
               ERROR_CODE = END_OF_FILE;
            if ALT_SEQ ^= OLD_QUES_SEQ then
               ERROR_CODE = END_OF_FILE;

            if ERROR_CODE ^= END_OF_FILE then
               do;
               ALT_QUESTION = NEW_QUESTION;
               ALT_OR_OPT = NEW_RESOLVE;
               ALT_SELECT_BY = NEW_ASK_ANSW;
               call UPDATE_RECORD (BK_OPT_ALT_NO,ERROR_CODE);

               call READ_KEYED (BK_OPT_ALT_NO,KEY_AREA_1,ERROR_CODE);
               end;
         end;
         end;


   /* SETUP_KEY - Set up this key for a read */

   ALT_TOUR_CODE = HDR_TOUR_CODE;
   ALT_SEQ = OLD_QUES_SEQ;
   ALT_ANSW_SEQ = OLD_ANSW_SEQ;
   KEY_NO = 1;

   /* READ_RECORD - Read the record */

   call READ_KEYED (BK_OPT_ALT_NO,KEY_NO,ERROR_BK_OPT_ALT);
   if ERROR_BK_OPT_ALT > 3 then
      call PRINT_ERROR (BK_OPT_ALT_NO,ERROR_BK_OPT_ALT);

   /* CHECK_AO_ERR - Set A/O fields if not found */

   if ERROR_BK_OPT_ALT = RECORD_NOT_FOUND then
      do;
      ALT_QUESTION = "* Question/Answer not found *";
      ALT_ANSWER = "* Question/Answer not found *";
      ALT_START = 0;
      ALT_END = 0;
      end;

return;
end;	/* AO_DIS_MAIN          */

/****************************************************************
	DISPLAY_DATA_A
	Display the items in screen group A
****************************************************************/

DISPLAY_DATA_A:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   6;
   if LOOP_INDEX =   6 then
      do;

      /* CHECK_ANSW - Can't change if not answer type */

      if NEW_ASK_ANSW = "N" then
         LOOP_INDEX = 99;

      end;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_A       */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		ALT_TOUR_CODE_SAVE   character (        4);
declare		ALT_SEQ_SAVE         fixed binary (15);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		BK_OPT_ALT_ERROR     fixed binary (15);
declare		ALT_ANSW_SEQ_SAVE    fixed binary (15);
declare		ANSWER               character (1);
ALT_TOUR_CODE = HDR_TOUR_CODE;
ALT_TOUR_CODE_SAVE = ALT_TOUR_CODE;
ALT_SEQ = OLD_QUES_SEQ;
ALT_SEQ_SAVE = ALT_SEQ;
ALT_ANSW_SEQ = 0;
call SET_POSITION (BK_OPT_ALT_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_OPT_ALT_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (ALT_TOUR_CODE > ALT_TOUR_CODE_SAVE) !
   (ALT_SEQ > ALT_SEQ_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to  7;
      ALT_ANSW_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_OPT_ALT_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_OPT_ALT_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <=  7) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 2 - 2);
         do LOOP_INDEX =   7 to  14;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         ALT_ANSW_SEQ_ARRAY(RECORD_NUMBER) = ALT_ANSW_SEQ;
         call READ_NEXT (BK_OPT_ALT_NO,KEY_AREA_1,BK_OPT_ALT_ERROR);
         if (ALT_TOUR_CODE > ALT_TOUR_CODE_SAVE) !
         (ALT_SEQ > ALT_SEQ_SAVE) then
            BK_OPT_ALT_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      ALT_ANSW_SEQ_SAVE = ALT_ANSW_SEQ_ARRAY( 7);
      ALT_TOUR_CODE = ALT_TOUR_CODE_SAVE;
      ALT_SEQ = ALT_SEQ_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if BK_OPT_ALT_ERROR ^= END_OF_FILE then
            do;
            ALT_ANSW_SEQ = ALT_ANSW_SEQ_SAVE;
            call SET_POSITION (BK_OPT_ALT_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_OPT_ALT_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_OPT_ALT_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if ALT_ANSW_SEQ_ARRAY( 7) = 0 then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      ALT_TOUR_CODE = ALT_TOUR_CODE_SAVE;
      ALT_SEQ = ALT_SEQ_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <=  7) );
         call BK_OPT_ALT_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (ALT_ANSW_SEQ_ARRAY( 7) = 0) then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to  7;
      call SET_ROW_OFFSET (RECORD_NUMBER * 2 - 2);
      if ALT_ANSW_SEQ_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX = 7 to  14;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 12,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  3 then
   do;

      LOOP_INDEX = SELECT +   3;
   if LOOP_INDEX =   6 then
      do;

      /* CHECK_ANSW - Can't change if not answer type */

      if NEW_ASK_ANSW = "N" then
         LOOP_INDEX = 99;

      end;
   if LOOP_INDEX =   6 then
      call DISPLAY_MSG_NO (  3);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   5 then
      do;

      /* CHECK_ANSWER - Check to see if this isn't a answer! */

      if NEW_ASK_ANSW = "N" then
         do;
         NEW_RESOLVE = "Y";
         LOOP_INDEX = LOOP_INDEX + 1;
         call OUTPUT_FIELD(LOOP_INDEX);
         end;

      end;
   end;
if SELECT >=  4 then if SELECT <= 11 then
   do;
   RECORD_NUMBER = SELECT - 3;
   call BK_OPT_ALT_LINE;
   call SET_ROW_OFFSET (0);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	BK_OPT_ALT_LINE
	Change one line in the secondary file
****************************************************************/

BK_OPT_ALT_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
call SET_ROW_OFFSET (RECORD_NUMBER * 2 - 2);
REWRITE = NO;
if ALT_ANSW_SEQ_ARRAY(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   ALT_ANSW_SEQ = ALT_ANSW_SEQ_ARRAY(RECORD_NUMBER);
   call READ_KEYED (BK_OPT_ALT_NO,KEY_AREA_1,ERROR_CODE);
   do LOOP_INDEX =  7 to  14;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   end;
else
   do;
   ALT_OR_OPT = "N";
   ALT_SELECT_BY = "N";
   ALT_QUESTION = "";
   ALT_ANSW_SEQ = 0;
   ALT_START = HDR_START_ON;
   ALT_END = HDR_END_ON;
   ALT_ANSWER = " ";
   ALT_USE_SEQ = 0;
   ALT_GATEWAY = "";
   ALT_DAY_OF_WEEK = "";
   ALT_COMMENT = "";
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =   7 to   7;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   if ALT_ANSW_SEQ = 0 then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =   8 to  14;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
         if LOOP_INDEX =  13 then
            do;

            /* SET_ALT_HDR - Set up the Header info for new record */

            ALT_OR_OPT = OLD_RESOLVE;
            ALT_SELECT_BY = OLD_ASK_ANSW;
            ALT_QUESTION = OLD_QUESTION;

            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      ALT_ANSW_SEQ = ALT_ANSW_SEQ_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (BK_OPT_ALT_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      ALT_ANSW_SEQ = 0;
      end;
   else
      do;
      if REWRITE = NO then
         call WRITE_RECORD (BK_OPT_ALT_NO,ERROR_CODE);
      else
         call UPDATE_RECORD (BK_OPT_ALT_NO,ERROR_CODE);
      end;
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      ALT_ANSW_SEQ_ARRAY(RECORD_NUMBER) = ALT_ANSW_SEQ;
      end;
end;
return;
end;	/* BK_OPT_ALT_LINE      */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
