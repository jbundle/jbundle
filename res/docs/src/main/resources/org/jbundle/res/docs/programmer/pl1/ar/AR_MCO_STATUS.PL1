/****************************************************************
	Module: AR_MCO_STATUS
	Top Level Logic: MCO_STATUS_LOGIC
	Date: 20-Jun-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AR_MCO_STATUS
	Top Level to get an MCO
****************************************************************/

%replace AR_MCO_STATUS_1 by 153;
AR_MCO_STATUS:
   procedure;
%replace AR_MCO_DET_NO by  50;
%include "AR_MCO_DET.DD";
%include "AR_MCO_STATUS.DD";

declare		END_MCO_STATUS_MAIN  bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_DIS_THRU_AR_BK   bit (1);
declare		END_DIS_THRU_MCO     bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		ANSWER               character (1);
declare		KEY_NO               fixed binary (15);
declare		ERROR_AR_MCO_DET     fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
   call INITIALIZE;
   END_MCO_STATUS_MAIN = NO;
   do while (END_MCO_STATUS_MAIN ^= YES);
      call MCO_STATUS_MAIN;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AR_MCO_STATUS = 1;
   AR_MCO_CARRIER = "";
   AR_MCO_AMT_APLY = 0;
   AR_MCO_DATE_SUBM = 0;
   AR_MCO_DATE_PAID = 0;
   AR_MCO_AMT_PAID = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AR_MCO_STATUS_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (AR_MCO_DET_NO,"AR_MCO_DET",byteaddr(AR_MCO_DET_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AR_MCO_DET_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (AR_MCO_STATUS_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	MCO_STATUS_MAIN
	Mainline logic
****************************************************************/

MCO_STATUS_MAIN:
	procedure;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (AR_MCO_STATUS_1);
   NOT_FIRST_TIME = YES;
   call ENTER_DATA_AA;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_MCO_STATUS_MAIN = YES;
      return;
      end;


   /* CHECK_AA_ENT - Was the booking number entered? */

   if INPUT_LENGTH ^= 0 then
      do;
      AR_BK_SAVE = AR_MCO_BK_NO;

      /* DISPLAY_AR_BK - Display all MCOs */


         /* SET_FIRST - Set the record pointer to the first rec */

         AR_MCO_BK_NO = AR_BK_SAVE;
         AR_MCO_SEQ_NO = 0;
         call SET_POSITION (AR_MCO_DET_NO,KEY_AREA_2,ERROR_CODE);
         END_DIS_THRU_AR_BK = NO;
         do while (END_DIS_THRU_AR_BK ^= YES);
            call DIS_THRU_AR_BK;
         end;
      return;
      end;

   call ENTER_DATA_AB;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_MCO_STATUS_MAIN = YES;
      return;
      end;


   /* CHECK_AB_ENT - Was the MCO number entered? */

   if INPUT_LENGTH ^= 0 then
      do;
      AR_MCO_SAVE = AR_MCO_NO;

      /* DISPLAY_AR_MCO - Display the detail */


         /* SET_FIRST_2 - Set the file pointer to the first key */

         AR_MCO_NO = AR_MCO_SAVE;
         AR_MCO_DATE_REC = 0;
         AR_MCO_SEQ = 0;
         call SET_POSITION (AR_MCO_DET_NO,KEY_AREA_4,ERROR_CODE);
         END_DIS_THRU_MCO = NO;
         do while (END_DIS_THRU_MCO ^= YES);
            call DIS_THRU_MCO;
         end;
      return;
      end;


   /* RETURN - Normal Return */

   do;
   END_MCO_STATUS_MAIN = YES;
   return;
   end;

return;
end;	/* MCO_STATUS_MAIN      */

/****************************************************************
	ENTER_DATA_AA
	Enter
****************************************************************/

ENTER_DATA_AA:
	procedure;

AR_MCO_BK_NO = 0;
do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_AA        */

/****************************************************************
	DIS_THRU_AR_BK
	Display the detail
****************************************************************/

DIS_THRU_AR_BK:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (AR_MCO_DET_NO,KEY_AREA_2,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AR_MCO_DET_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AR_MCO_BK_NO > AR_BK_SAVE) then
      do;
      END_DIS_THRU_AR_BK = YES;
      return;
      end;
   call DISPLAY_DATA_A;

   /* RIGHT_MCO - Right MCO to display/change */

   if AR_MCO_STATUS = 5 then
      do;

      /* PRESS_RETURN - Press return */

      call PRESS_RETURN;

      end;
   else
      do;
      call OUTPUT_LINE(23,10,"Right MCO?");
      call INPUT_DATA(23,21,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
      call CLEAR_TO_BOS(23);
      call DUMP_BUFFER;
      if ANSWER = "Y" then
         do;

         /* READ_AND_LOCK - Read the record and lock it */

         call READ_KEYED (AR_MCO_DET_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_AR_MCO_DET);
         if ERROR_AR_MCO_DET = RECORD_LOCKED then
            do;
            call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
            call PRESS_RETURN;
            return;
            end;
         if ERROR_AR_MCO_DET > 3 then
            call PRINT_ERROR (AR_MCO_DET_NO,ERROR_AR_MCO_DET);
         AR_MCO_AMT_SAVE = AR_MCO_AMT_APPLIED;
         END_CHANGE_ITEM = NO;
         do while (END_CHANGE_ITEM ^= YES);
            call CHANGE_ITEM;
         end;

         /* RETURN_IF_INP_ERR - Return if input error */

         if ERROR_INPUT_SCREEN then
            do;
            END_DIS_THRU_AR_BK = YES;
            return;
            end;

         AR_MCO_AMT_APPLIED = AR_MCO_AMT_SAVE;

         /* UPDATE_RECORD - Update the record */

         call UPDATE_RECORD (AR_MCO_DET_NO,ERROR_CODE);
         do;
         END_DIS_THRU_AR_BK = YES;
         return;
         end;
         end;
      end;

return;
end;	/* DIS_THRU_AR_BK       */

/****************************************************************
	DISPLAY_DATA_A
	Display the items in screen group A
****************************************************************/

DISPLAY_DATA_A:
	procedure;

do LOOP_INDEX =   1 to  13;
   if LOOP_INDEX =   4 then
      do;

      /* SET_MCO_STATUS - Set up the MCO status description */

      do case (AR_MCO_STATUS);
         AR_MCO_STATUS_DESC = "Entered";
         AR_MCO_STATUS_DESC = "Posted";
         AR_MCO_STATUS_DESC = "Submitted";
         AR_MCO_STATUS_DESC = "Paid";
         AR_MCO_STATUS_DESC = "Paid G/L";
      end;
      otherwise
         AR_MCO_STATUS_DESC = "";

      end;
   call KEEP_TRAILING_SPACES;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =  15 to  20;
   call KEEP_TRAILING_SPACES;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =  14 to  14;
   call KEEP_TRAILING_SPACES;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_A       */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,103,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  7 then
   do;
   if SELECT <=  4 then
      LOOP_INDEX = SELECT +   4;
   if SELECT =  5 then
      LOOP_INDEX = 10;
   if SELECT =  6 then
      LOOP_INDEX = 12;
   if SELECT =  7 then
      LOOP_INDEX = 16;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   7 then
      do;
      call RECALC_MCO_NET;
      end;
   if LOOP_INDEX =   8 then
      do;

      /* CHECK_MCO_COMM - Was a comm % entered? */

      if AR_MCO_COMM_PER = 0 then
         call INPUT_FIELD (LOOP_INDEX+1,INPUT_LENGTH,RETURN_CODE);
      else
         do;
         AR_MCO_COMM_AMT = floor(AR_MCO_GROSS * AR_MCO_COMM_PER + 0.5) / 100;
         call OUTPUT_FIELD (LOOP_INDEX+1);
         end;
      call RECALC_MCO_NET;

      end;
   if LOOP_INDEX =  10 then
      do;

      /* CHECK_MCO_TAX - Tax percentage entered? */

      if AR_MCO_TAX_PER = 0 then
         call INPUT_FIELD (LOOP_INDEX+1,INPUT_LENGTH,RETURN_CODE);
      else
         do;
         AR_MCO_TAX_AMT = floor(AR_MCO_GROSS * AR_MCO_TAX_PER + 0.5) / 100;
         call OUTPUT_FIELD (LOOP_INDEX+1);
         end;
      call RECALC_MCO_NET;

      end;
   if LOOP_INDEX =  12 then
      do;

      /* CHECK_MCO_SVC_CHG - Recalc MCO svc charge */

      if AR_MCO_SVC_PER = 0 then
         call INPUT_FIELD (LOOP_INDEX+1,INPUT_LENGTH,RETURN_CODE);
      else
         do;
         AR_MCO_SVC_AMT = floor(AR_MCO_GROSS * AR_MCO_SVC_PER + 0.5) / 100;
         call OUTPUT_FIELD (LOOP_INDEX+1);
         end;
      call RECALC_MCO_NET;

      end;
   end;
if SELECT =101 then
   do;
   call INPUT_FIELD (  2,INPUT_LENGTH,RETURN_CODE);
   end;
if SELECT =103 then
   do;
   call INPUT_FIELD (  1,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	RECALC_MCO_NET
	Recalculate the net MCO amount
****************************************************************/

RECALC_MCO_NET:
	procedure;

declare LOOP_SAVE fixed binary;
LOOP_SAVE = LOOP_INDEX;
AR_MCO_NET = floor((AR_MCO_GROSS - AR_MCO_COMM_AMT + AR_MCO_TAX_AMT -
   AR_MCO_SVC_AMT) * 100 + 0.5) / 100;
call DISPLAY_DATA_I;
AR_MCO_AMT_APPLIED = AR_MCO_NET;
call DISPLAY_DATA_F;
LOOP_INDEX = LOOP_SAVE;

return;
end;	/* RECALC_MCO_NET       */

/****************************************************************
	DISPLAY_DATA_I
	Display screen group I
****************************************************************/

DISPLAY_DATA_I:
	procedure;

do LOOP_INDEX =  14 to  14;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_I       */

/****************************************************************
	DISPLAY_DATA_F
	Display the data in group F
****************************************************************/

DISPLAY_DATA_F:
	procedure;

return;
end;	/* DISPLAY_DATA_F       */

/****************************************************************
	ENTER_DATA_AB
	Input screen data
****************************************************************/

ENTER_DATA_AB:
	procedure;

AR_MCO_NO = "";
do LOOP_INDEX =   2 to   2;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_AB        */

/****************************************************************
	DIS_THRU_MCO
	Display the detail
****************************************************************/

DIS_THRU_MCO:
	procedure;


   /* READNEXT_2 - Read the next record */

   call READ_NEXT (AR_MCO_DET_NO,KEY_AREA_4,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AR_MCO_DET_NO,ERROR_CODE);

   /* CHECK_END_2 - Check for end of records */

   if (ERROR_CODE = END_OF_FILE) !
   (AR_MCO_NO > AR_MCO_SAVE) then
      do;
      END_DIS_THRU_MCO = YES;
      return;
      end;
   call DISPLAY_DATA_A;

   /* RIGHT_MCO - Right MCO to display/change */

   if AR_MCO_STATUS = 5 then
      do;

      /* PRESS_RETURN - Press return */

      call PRESS_RETURN;

      end;
   else
      do;
      call OUTPUT_LINE(23,10,"Right MCO?");
      call INPUT_DATA(23,21,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
      call CLEAR_TO_BOS(23);
      call DUMP_BUFFER;
      if ANSWER = "Y" then
         do;

         /* READ_AND_LOCK - Read the record and lock it */

         call READ_KEYED (AR_MCO_DET_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_AR_MCO_DET);
         if ERROR_AR_MCO_DET = RECORD_LOCKED then
            do;
            call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
            call PRESS_RETURN;
            return;
            end;
         if ERROR_AR_MCO_DET > 3 then
            call PRINT_ERROR (AR_MCO_DET_NO,ERROR_AR_MCO_DET);
         AR_MCO_AMT_SAVE = AR_MCO_AMT_APPLIED;
         END_CHANGE_ITEM = NO;
         do while (END_CHANGE_ITEM ^= YES);
            call CHANGE_ITEM;
         end;

         /* RETURN_IF_INP_ERR - Return if input error */

         if ERROR_INPUT_SCREEN then
            do;
            END_DIS_THRU_MCO = YES;
            return;
            end;

         AR_MCO_AMT_APPLIED = AR_MCO_AMT_SAVE;

         /* UPDATE_RECORD - Update the record */

         call UPDATE_RECORD (AR_MCO_DET_NO,ERROR_CODE);
         do;
         END_DIS_THRU_MCO = YES;
         return;
         end;
         end;
      end;

return;
end;	/* DIS_THRU_MCO         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AR_MCO_DET_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
