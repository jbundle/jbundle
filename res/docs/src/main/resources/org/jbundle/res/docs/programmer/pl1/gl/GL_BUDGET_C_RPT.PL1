/****************************************************************
	Module: GL_BUDGET_C_RPT
	Top Level Logic: REPORT_LOGIC
	Date: 25-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	GL_BUDGET_C_RPT
	Standard report logic
****************************************************************/

%replace GL_BUDGET_C_RPT_1 by 620;
%replace GL_BUDGET_C_RPT_2 by 621;
GL_BUDGET_C_RPT:
   procedure;
%replace GL_BUDGET_C_NO by 103;
%replace GL_CHART_NO by  16;
%include "GL_BUDGET_C_RPT.DD";
%include "GL_BUDGET_C.DD";
%include "GL_CHART.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		FIRST_TIME           bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   GL_BC_CHOICE = "B";
   GL_BUD_RPT_DATE = TODAYS_DATE();
   GL_BUD_TIME = CURRENT_TIME();
   GL_BUD_PAGE_NO = 1;
   GL_BUD_USER = USER_NAME();
   GL_BUD_CODE = "B";
   TYPICAL_BAL = "D";
   SECTION_SUB = "N";
   COUNTER_BAL_AC = 0;
   GL_INCOME_EXP = "N";
   DISCONTINUED_ON = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (GL_BUDGET_C_RPT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (GL_BUDGET_C_RPT_RECORD) );
   call OPEN_FILE (GL_BUDGET_C_NO,"GL_BUDGET_C",byteaddr(GL_BUDGET_C_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_BUDGET_C_NO,ERROR_CODE);
   call OPEN_FILE (GL_CHART_NO,"GL_CHART",byteaddr(GL_CHART_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_CHART_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (GL_BUDGET_C_RPT_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   GL_BUD_CODE = GL_BC_CHOICE;
   GL_BUD_ACCT = GL_START_BC_ACCT;
   GL_BUD_DATE = 0;
   call SET_POSITION (GL_BUDGET_C_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =  24 to   1;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
GL_END_BC_ACCT = GL_START_BC_ACCT;
GL_BC_END_DATE = GL_BC_START_DATE;
do LOOP_INDEX =   1 to   5;
   if LOOP_INDEX =   2 then
      GL_END_BC_ACCT = GL_START_BC_ACCT;
   if LOOP_INDEX =   3 then
      call DISPLAY_MSG_NO ( 65);
   if LOOP_INDEX =   5 then
      GL_BC_END_DATE = GL_BC_START_DATE;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         GL_START_BC_ACCT = 0;
         GL_END_BC_ACCT = 9999999;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   4 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         GL_BC_START_DATE = 0;
         GL_BC_END_DATE = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  5,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  5 then
   do;

      LOOP_INDEX = SELECT;
   if LOOP_INDEX =   3 then
      call DISPLAY_MSG_NO ( 65);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         GL_START_BC_ACCT = 0;
         GL_END_BC_ACCT = 9999999;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   4 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         GL_BC_START_DATE = 0;
         GL_BC_END_DATE = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;


/* SET_GL_RPT_TYPE - Set report description */

if GL_BUD_CODE = "B" then
   GL_REPORT_TYPE = "     Budget";
else
   GL_REPORT_TYPE = "Comparative";

do LOOP_INDEX =   1 to   4;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

GL_BUD_PAGE_NO = GL_BUD_PAGE_NO + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;

declare		OLD_GL_BUD_ACCT      fixed binary (31);

   /* READNEXT - Read the next record */

   call READ_NEXT (GL_BUDGET_C_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (GL_BUDGET_C_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (GL_BUD_CODE > GL_BC_CHOICE) !
   (GL_BUD_ACCT > GL_END_BC_ACCT) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CHECK_DATE_RANGE - Check the G/L date range */

   if GL_BUD_DATE < GL_BC_START_DATE then
      return;

   if GL_BUD_DATE > GL_BC_END_DATE then
      return;


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      OLD_GL_BUD_ACCT = -1;
      end;
   if GL_BUD_ACCT ^= OLD_GL_BUD_ACCT then
      do;
      if ^FIRST_TIME then
         do;
         do LOOP_INDEX =  24 to   1;
            call PRINT_REPORT_LINE;
         end;
         end;
      end;
   if GL_BUD_ACCT ^= OLD_GL_BUD_ACCT then
      do;

      /* READ_SECOND_DIS - Read Second - Display line version */

      GL_ACCOUNT_NO = GL_BUD_ACCT;
      call READ_KEYED (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         GL_ACCOUNT_DESC = "** RECORD NOT FOUND **";
         end;
      do LOOP_INDEX =   5 to   6;
         call PRINT_REPORT_LINE;
      end;
      OLD_GL_BUD_ACCT = GL_BUD_ACCT;
      end;
   else
      do;
      do LOOP_INDEX =   7 to   7;
         call PRINT_REPORT_LINE;
      end;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */

   do LOOP_INDEX =  24 to   1;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_TOTALS - Add to the total fields */


   /* OTHER_LOGIC - Any other logic */

return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (GL_BUDGET_C_NO);
   call CLOSE_FILE (GL_CHART_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
