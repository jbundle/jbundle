/****************************************************************
	Module: BK_SUMM_BK
	Top Level Logic: SUMMARY_LOGIC
	Date: 30-Mar-92
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_SUMM_BK
	Top-level Analyze and Summarize data
****************************************************************/

%replace BK_SUMM_BK_1 by 879;
%replace BK_SUMM_BK_2 by 880;
BK_SUMM_BK:
   procedure;
%replace AR_OPEN_NO by  43;
%replace BK_BOOKING_NO by   9;
%include "BK_SUMM_BK.DD";
%include "AR_OPEN.DD";
%include "BK_BOOKING.DD";

declare		END_SUMMARY_MAIN     bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		KEY_LENGTH           fixed binary (15);
declare		RECORD_LENGTH        fixed binary (15);
declare		TEMP_RECORD          character (     1000);
declare		END_ANAL_THRU_SUMM   bit (1);
declare		END_PRINT_THRU_SUMM  bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_SUMMARY_MAIN = NO;
   do while (END_SUMMARY_MAIN ^= YES);
      call SUMMARY_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   RS_BK_START = 0;
   RS_BK_END = 0;
   RS_DATE_TYPE = "D";
   RS_PERIOD_TYPE = "D";
   RS_PERIOD_LENGTH = 1;
   RS_TIME = CURRENT_TIME();
   RS_USER = USER_NAME();
   RS_BOOKINGS = 0;
   RS_TIME_ELAPSED = 0;
   RS_PAX = 0;
   RS_GROSS = 0;
   RS_NET = 0;
   RS_BALANCE = 0;
   RS_XLD = 0;
   RS_XL_TIME = 0;
   RS_DATE_RPT = TODAYS_DATE();
   AR_ACCT_DR = 0;
   AR_ACCT_DEP = 0;
   AR_POSTED = 0;
   AR_ACTION = 0;
   AR_DEPARTURE = 0;
   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_SUMM_BK_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_SUMM_BK_RECORD) );
   call OPEN_FILE (AR_OPEN_NO,"AR_OPEN",byteaddr(AR_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AR_OPEN_NO,ERROR_CODE);
   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	SUMMARY_MAIN
	Mainline logic
****************************************************************/

SUMMARY_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_SUMMARY_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_SUMMARY_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("SSHEET");
   call SETUP_PRINT_FORMAT (BK_SUMM_BK_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;
   call PRT_PAGE_HEADING;

   /* SET_TEMP_FILE - Set up the temporary file */

   declare CREATE_TEMP entry(fixed binary,fixed binary);
   KEY_LENGTH =
      bytesize(RS_RES_AGENT) +
      bytesize(RS_DATE);
   RECORD_LENGTH = KEY_LENGTH  +
      bytesize(RS_BOOKINGS) +
      bytesize(RS_PAX) +
      bytesize(RS_GROSS) +
      bytesize(RS_NET) +
      bytesize(RS_BALANCE) +
      bytesize(RS_TIME_ELAPSED);
   call CREATE_TEMP(KEY_LENGTH,RECORD_LENGTH);
   %replace TEMP_DB by 512;
   call OPEN_FILE (TEMP_DB,"?TEMP_DB",byteaddr(TEMP_RECORD),ERROR_CODE);
   if ERROR_CODE ^= NORMAL_RETURN then
      do;
      END_SUMMARY_MAIN = YES;
      return;
      end;

   /* BEFORE_LOGIC - Before logic */


   /* SET_FIRST - Set the record pointer to the first rec */

   BK_MOD_DATE = RS_BK_START;
   BOOKING_NO = 0;
   BK_MODIFICATION = 0;
   call SET_POSITION (BK_BOOKING_NO,KEY_AREA_5,ERROR_CODE);
   END_ANAL_THRU_SUMM = NO;
   do while (END_ANAL_THRU_SUMM ^= YES);
      call ANAL_THRU_SUMM;
   end;

   /* SET_FIELDS - Set the values for these fields */

   RS_RES_AGENT = "";
   RS_DATE = 0;
   RS_BOOKINGS = 0;
   RS_PAX = 0;
   RS_GROSS = 0;
   RS_NET = 0;
   RS_BALANCE = 0;
   RS_TIME_ELAPSED = 0;

   /* AFTER_LOGIC - Other Logic */


   /* SET_ERROR_CODE - Set the ERROR_CODE flag to a 1 */

   ERROR_CODE = 1;

   END_PRINT_THRU_SUMM = NO;
   do while (END_PRINT_THRU_SUMM ^= YES);
      call PRINT_THRU_SUMM;
   end;

   /* CLOSE_TEMP_FILE - Close the temporary file */

   call CLOSE_FILE (TEMP_DB);


   /* RETURN - Normal Return */

   do;
   END_SUMMARY_MAIN = YES;
   return;
   end;

return;
end;	/* SUMMARY_MAIN         */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   7;
   if LOOP_INDEX =   3 then
      call DISPLAY_MSG_NO (109);
   if LOOP_INDEX =   4 then
      call DISPLAY_MSG_NO (110);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         RS_BK_START = 0;
         RS_BK_END = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   6 then
      do;

      /* CALC_RS_MONTH - Set up the month for later */

      call DAY_TO_DMY(RS_START_DATE,RS_DAY,RS_MONTH,RS_YEAR);

      end;
   if LOOP_INDEX =   7 then
      do;

      /* CALC_RS_END - Calc and redisplay the ending date */

      declare PERIOD_LENGTH fixed binary;
      if RS_PERIOD_TYPE ^= "M" then
         do;
         PERIOD_LENGTH = RS_PERIOD_LENGTH;
         if RS_PERIOD_TYPE = "W" then
            PERIOD_LENGTH = RS_PERIOD_LENGTH * 7;
         RS_END_DATE = RS_START_DATE+divide((RS_END_DATE-RS_START_DATE),PERIOD_LENGTH,15)*PERIOD_LENGTH + PERIOD_LENGTH - 1;
         end;
      else
         do;
         declare (DAY,MONTH,YEAR) fixed binary;
         call DAY_TO_DMY(RS_END_DATE,DAY,MONTH,YEAR);
         if DAY >= RS_DAY then
            MONTH = MONTH + 1;
         DAY = RS_DAY;
         MONTH = RS_MONTH + divide((((MONTH+YEAR*12)-(RS_MONTH+RS_YEAR*12))+RS_PERIOD_LENGTH-1),RS_PERIOD_LENGTH,15) *
            RS_PERIOD_LENGTH;
         YEAR = RS_YEAR;
         do while (MONTH > 12);
            MONTH = MONTH - 12;
            YEAR = YEAR + 1;
         end;
         call DMY_TO_DAY(RS_END_DATE,DAY,MONTH,YEAR);
         RS_END_DATE = RS_END_DATE - 1;
         end;

      call OUTPUT_FIELD (LOOP_INDEX);

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  7,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  7 then
   do;

      LOOP_INDEX = SELECT;
   if LOOP_INDEX =   3 then
      call DISPLAY_MSG_NO (109);
   if LOOP_INDEX =   4 then
      call DISPLAY_MSG_NO (110);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         RS_BK_START = 0;
         RS_BK_END = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   6 then
      do;

      /* CALC_RS_MONTH - Set up the month for later */

      call DAY_TO_DMY(RS_START_DATE,RS_DAY,RS_MONTH,RS_YEAR);

      end;
   if LOOP_INDEX =   7 then
      do;

      /* CALC_RS_END - Calc and redisplay the ending date */

      declare PERIOD_LENGTH fixed binary;
      if RS_PERIOD_TYPE ^= "M" then
         do;
         PERIOD_LENGTH = RS_PERIOD_LENGTH;
         if RS_PERIOD_TYPE = "W" then
            PERIOD_LENGTH = RS_PERIOD_LENGTH * 7;
         RS_END_DATE = RS_START_DATE+divide((RS_END_DATE-RS_START_DATE),PERIOD_LENGTH,15)*PERIOD_LENGTH + PERIOD_LENGTH - 1;
         end;
      else
         do;
         declare (DAY,MONTH,YEAR) fixed binary;
         call DAY_TO_DMY(RS_END_DATE,DAY,MONTH,YEAR);
         if DAY >= RS_DAY then
            MONTH = MONTH + 1;
         DAY = RS_DAY;
         MONTH = RS_MONTH + divide((((MONTH+YEAR*12)-(RS_MONTH+RS_YEAR*12))+RS_PERIOD_LENGTH-1),RS_PERIOD_LENGTH,15) *
            RS_PERIOD_LENGTH;
         YEAR = RS_YEAR;
         do while (MONTH > 12);
            MONTH = MONTH - 12;
            YEAR = YEAR + 1;
         end;
         call DMY_TO_DAY(RS_END_DATE,DAY,MONTH,YEAR);
         RS_END_DATE = RS_END_DATE - 1;
         end;

      call OUTPUT_FIELD (LOOP_INDEX);

      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   4;
   call PRINT_REPORT_LINE;
end;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	ANAL_THRU_SUMM
	Analyze data and add to summary slot
****************************************************************/

ANAL_THRU_SUMM:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (BK_BOOKING_NO,KEY_AREA_5,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_BOOKING_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) then
      do;
      END_ANAL_THRU_SUMM = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* BK_SUMM_SELECT - Set up and check the selection criteria */

   if BK_MODIFICATION ^= 0 then
      return;
   /*	This is commented out if the history has been purged
   if BK_MODIFICATION = 0 then if BK_NEXT_MOD > 0 then
      return;
   if BK_MODIFICATION > 1 then
      return;
   if BK_MODIFICATION = 1 then
      do;
      declare (ERROR,DATE_SAVE) fixed binary;
      BK_MODIFICATION = 0;
      DATE_SAVE = BK_MOD_DATE;
      call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
      BK_MODIFICATION = 32767;
      BK_MOD_DATE = DATE_SAVE;
      call SET_POSITION (BK_BOOKING_NO,KEY_AREA_5,ERROR);
      if ERROR_CODE ^= NORMAL_RETURN then
         return;
      end;
   */

   if BK_DATE < RS_BK_START then
      return;
   if BK_DATE > RS_BK_END then
      return;

   if BK_STATUS = "XL" then
      return;

   if BK_STATUS = "NS" then
      return;

   if RS_DATE_TYPE = "B" then
      do;
      RS_DATE = BK_DATE;
      end;

   if RS_DATE_TYPE = "A" then
      do;
      AR_BOOKING_NO = BOOKING_NO;
      AR_SEQ_NO = 0;
      call SET_POSITION (AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);
      call READ_NEXT (AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);
      if AR_BOOKING_NO ^= BOOKING_NO then
         ERROR_CODE = END_OF_FILE;
      if ERROR_CODE = NORMAL_RETURN then
         do;
         RS_DATE = AR_TRX_DATE;
         end;

      if ERROR_CODE = END_OF_FILE then
         return;
      end;

   if RS_DATE_TYPE = "D" then
      do;
      if BK_NET_PRICE <= BK_BALANCE then
         return;

      AR_BOOKING_NO = BOOKING_NO;
      AR_SEQ_NO = 0;
      call SET_POSITION (AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);
      ERROR_CODE = NORMAL_RETURN;
      do while (ERROR_CODE = NORMAL_RETURN);
         call READ_NEXT (AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);
         if AR_BOOKING_NO ^= BOOKING_NO then
            ERROR_CODE = END_OF_FILE;
         if ERROR_CODE = NORMAL_RETURN then if (AR_DOC_TYPE = "P") ! (AR_DOC_TYPE = "M") ! (AR_DOC_TYPE = "C") then
            do;
            RS_DATE = AR_TRX_DATE;
            ERROR_CODE = 1;
            end;
         end;

      if ERROR_CODE = END_OF_FILE then
         return;
      end;

   if RS_DATE_TYPE = "F" then
      do;
      if BK_BALANCE > 0 then
         return;

      BK_BALANCE = 0;
      AR_BOOKING_NO = BOOKING_NO;
      AR_SEQ_NO = 0;
      call SET_POSITION (AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);
      ERROR_CODE = NORMAL_RETURN;
      do while (ERROR_CODE = NORMAL_RETURN);
         call READ_NEXT (AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);
         if AR_BOOKING_NO ^= BOOKING_NO then
            ERROR_CODE = END_OF_FILE;
         else
            BK_BALANCE = floor((BK_BALANCE + AR_AMOUNT) * 100 + 0.5) / 100;
         if BK_BALANCE <= 0 then
            do;
            RS_DATE = AR_TRX_DATE;
            ERROR_CODE = 1;
            end;
         end;

      if ERROR_CODE = END_OF_FILE then
         return;
      end;

   if RS_DATE_TYPE = "P" then
      do;
      RS_DATE = BK_DEPARTURE;
      end;

   if RS_DATE_TYPE = "L" then
      do;
      RS_DATE = BK_MOD_DATE;
      end;

   declare PERIOD_LENGTH fixed binary;
   if RS_PERIOD_TYPE ^= "M" then
      do;
      PERIOD_LENGTH = RS_PERIOD_LENGTH;
      if RS_PERIOD_TYPE = "W" then
         PERIOD_LENGTH = RS_PERIOD_LENGTH * 7;
      RS_DATE = RS_START_DATE+divide((RS_DATE-RS_START_DATE),PERIOD_LENGTH,15)*PERIOD_LENGTH;
      end;
   else
      do;
      declare (DAY,MONTH,YEAR) fixed binary;
      call DAY_TO_DMY(RS_DATE,DAY,MONTH,YEAR);
      if DAY >= RS_DAY then
         MONTH = MONTH + 1;
      DAY = RS_DAY;
      MONTH = RS_MONTH + divide((((MONTH+YEAR*12)-(RS_MONTH+RS_YEAR*12))+RS_PERIOD_LENGTH-1),RS_PERIOD_LENGTH,15) *
         RS_PERIOD_LENGTH - RS_PERIOD_LENGTH;
      YEAR = RS_YEAR;
      do while (MONTH > 12);
         MONTH = MONTH - 12;
         YEAR = YEAR + 1;
      end;
      call DMY_TO_DAY(RS_DATE,DAY,MONTH,YEAR);
      end;

   if (RS_DATE < RS_START_DATE) ! (RS_DATE > RS_END_DATE) then
      return;

   RS_RES_AGENT = BK_RES_AGENT;

   RS_TIME_MIN = float(BK_TIME_ELAPSED,21)/30;


   /* OTHER_LOGIC_2 - Other logic */


   /* ADD_THIS_SUMM - Add this summary */

      call SET_TEMP_KEY;

      /* READ_TEMP_RECORD - Read the temp record */

      call READ_KEYED(TEMP_DB,KEY_AREA_1,ERROR_CODE);


      /* TEMP_RECORD_FOUND - Was the record found? */

      if ERROR_CODE = NORMAL_RETURN then
         begin;

         /* GET_TEMP_FILE - Set up all the fields for the temp rec. */

         declare MOVE_FIELD character (100) based;
         declare FIELDPTR pointer;
         declare FIELDBIN fixed binary(31) defined(FIELDPTR);
         FIELDPTR = byteaddr(TEMP_RECORD);
         substr(byteaddr(RS_RES_AGENT)->MOVE_FIELD,1,bytesize(RS_RES_AGENT)) =
            substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_RES_AGENT));
         FIELDBIN = FIELDBIN + bytesize(RS_RES_AGENT);
         substr(byteaddr(RS_DATE)->MOVE_FIELD,1,bytesize(RS_DATE)) =
            substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_DATE));
         FIELDBIN = FIELDBIN + bytesize(RS_DATE);
         substr(byteaddr(RS_BOOKINGS)->MOVE_FIELD,1,bytesize(RS_BOOKINGS)) =
            substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_BOOKINGS));
         FIELDBIN = FIELDBIN + bytesize(RS_BOOKINGS);
         substr(byteaddr(RS_PAX)->MOVE_FIELD,1,bytesize(RS_PAX)) =
            substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_PAX));
         FIELDBIN = FIELDBIN + bytesize(RS_PAX);
         substr(byteaddr(RS_GROSS)->MOVE_FIELD,1,bytesize(RS_GROSS)) =
            substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_GROSS));
         FIELDBIN = FIELDBIN + bytesize(RS_GROSS);
         substr(byteaddr(RS_NET)->MOVE_FIELD,1,bytesize(RS_NET)) =
            substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_NET));
         FIELDBIN = FIELDBIN + bytesize(RS_NET);
         substr(byteaddr(RS_BALANCE)->MOVE_FIELD,1,bytesize(RS_BALANCE)) =
            substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_BALANCE));
         FIELDBIN = FIELDBIN + bytesize(RS_BALANCE);
         substr(byteaddr(RS_TIME_ELAPSED)->MOVE_FIELD,1,bytesize(RS_TIME_ELAPSED)) =
            substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_TIME_ELAPSED));
         FIELDBIN = FIELDBIN + bytesize(RS_TIME_ELAPSED);
         end;
      else
         do;

         /* SET_FIELDS - Set the values for these fields */

         RS_RES_AGENT = "";
         RS_DATE = 0;
         RS_BOOKINGS = 0;
         RS_PAX = 0;
         RS_GROSS = 0;
         RS_NET = 0;
         RS_BALANCE = 0;
         RS_TIME_ELAPSED = 0;
         call RESTORE_KEY;
         end;


      /* ADD_TOTALS - Add to the total fields */

      RS_BOOKINGS = RS_BOOKINGS + 1;
      RS_PAX = RS_PAX + BK_PAX;
      RS_GROSS = floor((RS_GROSS + BK_TOUR_PRICE) * 100 + 0.5) / 100;
      RS_NET = floor((RS_NET + BK_NET_PRICE) * 100 + 0.5) / 100;
      RS_BALANCE = floor((RS_BALANCE + BK_BALANCE) * 100 + 0.5) / 100;
      RS_TIME_ELAPSED = floor((RS_TIME_ELAPSED + RS_TIME_MIN) * 100 + 0.5) / 100;

      /* OTHER_LOGIC - Any other logic */


      /* ADD_TEMP_RECORD - Add this information to the temp file */

      declare FAKE_FIELD character(100) based;
      TEMP_RECORD =
         substr(byteaddr(RS_RES_AGENT)->FAKE_FIELD,1,bytesize(RS_RES_AGENT)) !!
         substr(byteaddr(RS_DATE)->FAKE_FIELD,1,bytesize(RS_DATE)) !!
         substr(byteaddr(RS_BOOKINGS)->FAKE_FIELD,1,bytesize(RS_BOOKINGS)) !!
         substr(byteaddr(RS_PAX)->FAKE_FIELD,1,bytesize(RS_PAX)) !!
         substr(byteaddr(RS_GROSS)->FAKE_FIELD,1,bytesize(RS_GROSS)) !!
         substr(byteaddr(RS_NET)->FAKE_FIELD,1,bytesize(RS_NET)) !!
         substr(byteaddr(RS_BALANCE)->FAKE_FIELD,1,bytesize(RS_BALANCE)) !!
         substr(byteaddr(RS_TIME_ELAPSED)->FAKE_FIELD,1,bytesize(RS_TIME_ELAPSED));

      /* UPDATE_WRITE_TEMP - Update or write the temporary record */

      if ERROR_CODE = NORMAL_RETURN then
         do;

         /* UPDATE_TEMP_RECORD - Update the temp record */

         call UPDATE_RECORD (TEMP_DB,ERROR_CODE);

         end;
      else
         do;

         /* WRITE_TEMP_RECORD - Write the temporary record */

         call WRITE_RECORD (TEMP_DB,ERROR_CODE);

         end;

return;
end;	/* ANAL_THRU_SUMM       */

/****************************************************************
	SET_TEMP_KEY
	Set up the temporary key
****************************************************************/

SET_TEMP_KEY:
	procedure;

declare FAKE_FIELD character(100) based;
TEMP_RECORD =
   substr(byteaddr(RS_RES_AGENT)->FAKE_FIELD,1,bytesize(RS_RES_AGENT)) !!
   substr(byteaddr(RS_DATE)->FAKE_FIELD,1,bytesize(RS_DATE));
return;
end;	/* SET_TEMP_KEY         */

/****************************************************************
	RESTORE_KEY
	Key the key back, now that it was erased
****************************************************************/

RESTORE_KEY:
	procedure;

declare MOVE_FIELD character (100) based;
declare FIELDPTR pointer;
declare FIELDBIN fixed binary(31) defined(FIELDPTR);
FIELDPTR = byteaddr(TEMP_RECORD);
substr(byteaddr(RS_RES_AGENT)->MOVE_FIELD,1,bytesize(RS_RES_AGENT)) =
   substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_RES_AGENT));
FIELDBIN = FIELDBIN + bytesize(RS_RES_AGENT);
substr(byteaddr(RS_DATE)->MOVE_FIELD,1,bytesize(RS_DATE)) =
   substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_DATE));
FIELDBIN = FIELDBIN + bytesize(RS_DATE);
return;
end;	/* RESTORE_KEY          */

/****************************************************************
	PRINT_THRU_SUMM
	Print out the summary data
****************************************************************/

PRINT_THRU_SUMM:
	procedure;


   /* FIRST_LOGIC - Write this logic */


   /* CHECK_RES_BREAK - Reservation agent break? */

   declare PERIOD_LENGTH fixed binary;
   if RS_PERIOD_TYPE ^= "M" then
      do;
      PERIOD_LENGTH = RS_PERIOD_LENGTH;
      if RS_PERIOD_TYPE = "W" then
         PERIOD_LENGTH = RS_PERIOD_LENGTH * 7;
      RS_DATE = RS_DATE + PERIOD_LENGTH;
      end;
   else
      do;
      declare (DAY,MONTH,YEAR) fixed binary;
      call DAY_TO_DMY(RS_DATE,DAY,MONTH,YEAR);
      DAY = 1;
      MONTH = MONTH + RS_PERIOD_LENGTH;
      if MONTH > 12 then
         do;
         MONTH = MONTH - 12;
         YEAR = YEAR + 1;
         end;
      call DMY_TO_DAY(RS_DATE,DAY,MONTH,YEAR);
      end;


   if RS_DATE > RS_END_DATE then
      ERROR_CODE = 1;

   if ERROR_CODE = 1 then
      RS_DATE = LARGE_DATE;


   /* SET_NEW_TEMP - Next detail group? */

   if ERROR_CODE = 1 then
      do;
      call SET_TEMP_KEY;

      /* SET_TEMP_POS - Set to the current key */

      call SET_POSITION (TEMP_DB,KEY_AREA_1,ERROR_CODE);


      /* READ_NEXT_TEMP - Read the next temp record */

      call READ_NEXT (TEMP_DB,KEY_AREA_1,ERROR_CODE);


      /* RETURN_IF_EOF - Return if end-of-file error */

      if ERROR_CODE = END_OF_FILE then
         do;
         END_PRINT_THRU_SUMM = YES;
         return;
         end;

      call RESTORE_KEY;

      /* SET_INIT_DATE - Code to set the first date up */


      /* SET_RS_DATE - Set the first date */

      RS_DATE = RS_START_DATE;

      end;

   call SET_TEMP_KEY;

   /* READ_TEMP_RECORD - Read the temp record */

   call READ_KEYED(TEMP_DB,KEY_AREA_1,ERROR_CODE);


   /* DATE_FOUND - Was this date's data found? */

   if ERROR_CODE = NORMAL_RETURN then
      do;

      /* GET_TEMP_FILE - Set up all the fields for the temp rec. */

      declare MOVE_FIELD character (100) based;
      declare FIELDPTR pointer;
      declare FIELDBIN fixed binary(31) defined(FIELDPTR);
      FIELDPTR = byteaddr(TEMP_RECORD);
      substr(byteaddr(RS_RES_AGENT)->MOVE_FIELD,1,bytesize(RS_RES_AGENT)) =
         substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_RES_AGENT));
      FIELDBIN = FIELDBIN + bytesize(RS_RES_AGENT);
      substr(byteaddr(RS_DATE)->MOVE_FIELD,1,bytesize(RS_DATE)) =
         substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_DATE));
      FIELDBIN = FIELDBIN + bytesize(RS_DATE);
      substr(byteaddr(RS_BOOKINGS)->MOVE_FIELD,1,bytesize(RS_BOOKINGS)) =
         substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_BOOKINGS));
      FIELDBIN = FIELDBIN + bytesize(RS_BOOKINGS);
      substr(byteaddr(RS_PAX)->MOVE_FIELD,1,bytesize(RS_PAX)) =
         substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_PAX));
      FIELDBIN = FIELDBIN + bytesize(RS_PAX);
      substr(byteaddr(RS_GROSS)->MOVE_FIELD,1,bytesize(RS_GROSS)) =
         substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_GROSS));
      FIELDBIN = FIELDBIN + bytesize(RS_GROSS);
      substr(byteaddr(RS_NET)->MOVE_FIELD,1,bytesize(RS_NET)) =
         substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_NET));
      FIELDBIN = FIELDBIN + bytesize(RS_NET);
      substr(byteaddr(RS_BALANCE)->MOVE_FIELD,1,bytesize(RS_BALANCE)) =
         substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_BALANCE));
      FIELDBIN = FIELDBIN + bytesize(RS_BALANCE);
      substr(byteaddr(RS_TIME_ELAPSED)->MOVE_FIELD,1,bytesize(RS_TIME_ELAPSED)) =
         substr(FIELDPTR->MOVE_FIELD,1,bytesize(RS_TIME_ELAPSED));
      FIELDBIN = FIELDBIN + bytesize(RS_TIME_ELAPSED);
      end;
   else
      do;

      /* SET_FIELDS - Set the values for these fields */

      RS_RES_AGENT = "";
      RS_DATE = 0;
      RS_BOOKINGS = 0;
      RS_PAX = 0;
      RS_GROSS = 0;
      RS_NET = 0;
      RS_BALANCE = 0;
      RS_TIME_ELAPSED = 0;
      call RESTORE_KEY;
      end;


   /* PRT_DETAIL - Print the detail lines */

   do LOOP_INDEX =   5 to   5;
      call SPREAD_SHEET_OUT(LOOP_INDEX);
   end;

   /* RESET_ERROR - Reset the error code to zero */

   ERROR_CODE = 0;

return;
end;	/* PRINT_THRU_SUMM      */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (AR_OPEN_NO);
   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
