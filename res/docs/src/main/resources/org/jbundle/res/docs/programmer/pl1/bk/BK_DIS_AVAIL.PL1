/****************************************************************
	Module: BK_DIS_AVAIL
	Top Level Logic: DIS_AVAIL_LOGIC
	Date: 23-Feb-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_DIS_AVAIL
	Display availability - Top Level Logic
****************************************************************/

%replace BK_DIS_AVAIL_1 by 361;
BK_DIS_AVAIL:
   procedure(
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_INV_DET_RECORD);
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_INV_DET_NO by  61;
%include "BK_DIS_AVAIL.DD";
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_INV_DET.DD";

declare		ERROR_CODE           fixed binary (15);
declare		KEY_NO               fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		ERROR_BK_TOUR        fixed binary (15);
   call INITIALIZE;
   call DIS_AVAIL_MAIN;

   /* RESTORE_BK_TOUR - Restore the tour and tour header info */

   if BOOKING_NO ^= 0 then
      do;
      if BK_TOUR_CODE ^= "" then if BK_DEPARTURE ^= 0 then
         if (BK_TOUR_CODE ^= HDR_TOUR_CODE) !
            (BK_DEPARTURE < HDR_START_ON) ! (BK_DEPARTURE > HDR_END_ON) then
               do;

               /* GET_TOUR_HDR - Get the tour header */

               ERROR_CODE = NORMAL_RETURN;

               HDR_TOUR_CODE = BK_TOUR_CODE;
               HDR_END_ON = BK_DEPARTURE;
               if HDR_END_ON = 0 then
                  HDR_END_ON = TODAYS_DATE();
               call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE ^= END_OF_FILE then
                  call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

               if BK_TOUR_CODE ^= HDR_TOUR_CODE then
                  ERROR_CODE = END_OF_FILE;
               if BK_DEPARTURE ^= 0 then if BK_DEPARTURE < HDR_START_ON then
                  ERROR_CODE = END_OF_FILE;

               end;
      if BK_TOUR_NUM ^= 0 then
         if BK_TOUR_NUM ^= TOUR_NO then
            do;
            TOUR_NO = BK_TOUR_NUM;

            /* READ_TOUR_REC - Read the tour file record */

            call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_BK_TOUR);
            if ERROR_BK_TOUR > 3 then
               call PRINT_ERROR (BK_TOUR_NO,ERROR_BK_TOUR);
            end;
      end;

   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   TOUR_A_START_DATE = TODAYS_DATE();

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_DIS_AVAIL_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_DIS_AVAIL_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	DIS_AVAIL_MAIN
	Display availability
****************************************************************/

DIS_AVAIL_MAIN:
	procedure;


   /* RESET_INPUT_ERROR - Set input error to NO */

   ERROR_INPUT_SCREEN = NO;

   call ENTER_DATA_A;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;

   call DISPLAY_DATA_C;
   call TABLE_MAINT;
return;
end;	/* DIS_AVAIL_MAIN       */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

do LOOP_INDEX =  11 to  11;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =  11 then
      do;
      call READ_TOUR_HDR;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =  14 to  14;
   if LOOP_INDEX =  14 then
      TOUR_A_START_DATE = TODAYS_DATE();
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	READ_TOUR_HDR
	Read the tour header
****************************************************************/

READ_TOUR_HDR:
	procedure;


   /* SET_POSITION - Set the file position */

   HDR_TOUR_CODE = TOUR_DIS_CODE;
   HDR_END_ON = TODAYS_DATE();
   call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

   /* READNEXT - Read the next record */

   call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_TOUR_HDR_NO,ERROR_CODE);

   /* OTHER_LOGIC - Any other logic */


   /* CHECK_AVAIL_HDR - Is this the right header? */

   if (ERROR_CODE ^= NORMAL_RETURN) !
      (HDR_TOUR_CODE ^= TOUR_DIS_CODE) !
      (HDR_START_ON > TODAYS_DATE()) then
         ERROR_INPUT_SCREEN = YES;

return;
end;	/* READ_TOUR_HDR        */

/****************************************************************
	DISPLAY_DATA_C
	Display the data in screen group C
****************************************************************/

DISPLAY_DATA_C:
	procedure;

do LOOP_INDEX =  12 to  13;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_C       */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		TOUR_CODE_SAVE       character (        4);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		RECORD_NUMBER        fixed binary (15);
declare		TOUR_DEP_DATE_ARRAY(14) fixed binary (15);
declare		TOUR_NO_ARRAY(14) fixed binary (31);
declare		BK_TOUR_ERROR        fixed binary (15);
declare		TOUR_DEP_DATE_SAVE   fixed binary (15);
declare		TOUR_NO_SAVE         fixed binary (31);
declare		ANSWER               character (1);
TOUR_CODE = TOUR_DIS_CODE;
TOUR_CODE_SAVE = TOUR_CODE;
TOUR_DEP_DATE = TOUR_A_START_DATE;
TOUR_NO = 0;
call SET_POSITION (BK_TOUR_NO,KEY_AREA_2,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_TOUR_NO,KEY_AREA_2,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (TOUR_CODE > TOUR_CODE_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 14;
      TOUR_DEP_DATE_ARRAY(RECORD_NUMBER) = 0;
      TOUR_NO_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_TOUR_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_TOUR_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 14) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =  15 to  16;
            call OUTPUT_FIELD (LOOP_INDEX);
            if LOOP_INDEX =  16 then
               do;
               call GET_TOUR_INV;
               end;
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         TOUR_DEP_DATE_ARRAY(RECORD_NUMBER) = TOUR_DEP_DATE;
         TOUR_NO_ARRAY(RECORD_NUMBER) = TOUR_NO;
         call READ_NEXT (BK_TOUR_NO,KEY_AREA_2,BK_TOUR_ERROR);
         if (TOUR_CODE > TOUR_CODE_SAVE) then
            BK_TOUR_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      TOUR_DEP_DATE_SAVE = TOUR_DEP_DATE_ARRAY(14);
      TOUR_NO_SAVE = TOUR_NO_ARRAY(14);
      TOUR_CODE = TOUR_CODE_SAVE;
      if BK_TOUR_ERROR = END_OF_FILE then
         GET_OUT = YES;
      else
         do;
         call OUTPUT_LINE (24,10,"Stop Displaying?");
         call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
         call CLEAR_TO_BOS (24);
         if (ANSWER = "Y") then
            GET_OUT = YES;
         end;
      end;
   else
      GET_OUT = YES;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 14;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if TOUR_DEP_DATE_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX =15 to  16;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	GET_TOUR_INV
	Get the correct inventory info
****************************************************************/

GET_TOUR_INV:
	procedure;

declare		ERROR_BK_INV_DET     fixed binary (15);

   /* RESET_INV - Set to zero in case not found */

   INV_BLOCKED = 0;
   INV_USED = 0;
   INV_AVAIL = 0;


   /* SETUP_KEY - Set up this key for a read */

   INV_DET_TYPE = "T";
   INV_DET_ENTRY = TOUR_CODE;
   INV_DET_DATE = TOUR_DEP_DATE;
   INV_CODE_TYPE = " ";
   INV_ROOM_TYPE = 0;
   KEY_NO = 1;

   /* READ_RECORD - Read the record */

   call READ_KEYED (BK_INV_DET_NO,KEY_NO,ERROR_BK_INV_DET);
   if ERROR_BK_INV_DET > 3 then
      call PRINT_ERROR (BK_INV_DET_NO,ERROR_BK_INV_DET);

   /* RETURN_IF_INV_ERR - Return if inventory error */

   if ERROR_BK_INV_DET ^= NORMAL_RETURN then
      return;

   call DISPLAY_DATA_D;
return;
end;	/* GET_TOUR_INV         */

/****************************************************************
	DISPLAY_DATA_D
	Display the data in screen group D
****************************************************************/

DISPLAY_DATA_D:
	procedure;

do LOOP_INDEX =  17 to  19;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_D       */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
