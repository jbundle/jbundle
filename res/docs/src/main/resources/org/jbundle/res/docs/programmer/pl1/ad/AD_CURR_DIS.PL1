/****************************************************************
	Module: AD_CURR_DIS
	Top Level Logic: TABLE_MAINT_DIS
	Date: 23-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AD_CURR_DIS
	Table File Display - No header
****************************************************************/

%replace AD_CURR_DIS_1 by 576;
AD_CURR_DIS:
   procedure;
%replace AD_CURR_NO by  25;
%include "AD_CURR.DD";
%include "AD_CURR_DIS.DD";

declare		ERROR_CODE           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		CURR_CODE_ARRAY(20) character (        3);
declare		END_CHANGE_ITEM      bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
   call INITIALIZE;
   call TABLE_MAINT;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   CURR_CODE = "";
   LAST_EX_DATE = TODAYS_DATE();
   COSTING_EXCH = 0;
   CURR_INT_DESC = "Dollar";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AD_CURR_DIS_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (AD_CURR_NO,"AD_CURR",byteaddr(AD_CURR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_CURR_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (AD_CURR_DIS_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		AD_CURR_ERROR        fixed binary (15);
declare		CURR_CODE_SAVE       character (        3);
declare		ANSWER               character (1);
CURR_CODE = "";
call SET_POSITION (AD_CURR_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (AD_CURR_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 20;
      CURR_CODE_ARRAY(RECORD_NUMBER) = "";
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      AD_CURR_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (AD_CURR_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 20) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =   1 to   6;
            if LOOP_INDEX =   5 then
               do;

               /* CALC_AD_INDIR - Calculate indirect rate */

               if COSTING_EXCH = 0 then
                  AD_INDIRECTZ = 0;
               else
                  AD_INDIRECTZ = 1 / COSTING_EXCH;

               end;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         CURR_CODE_ARRAY(RECORD_NUMBER) = CURR_CODE;
         call READ_NEXT (AD_CURR_NO,KEY_AREA_1,AD_CURR_ERROR);
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      CURR_CODE_SAVE = CURR_CODE_ARRAY(20);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if AD_CURR_ERROR ^= END_OF_FILE then
            do;
            CURR_CODE = CURR_CODE_SAVE;
            call SET_POSITION (AD_CURR_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (AD_CURR_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (AD_CURR_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if CURR_CODE_ARRAY(20) = "" then
               GET_OUT = YES;
            else
               do;
               ANSWER = "N";
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      call DISPLAY_MESSAGE("There are no records to display");
      call PRESS_RETURN;
      GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 20;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if CURR_CODE_ARRAY(RECORD_NUMBER) ^= "" then
         do LOOP_INDEX = 1 to   6;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 20,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 20 then
   do;
   RECORD_NUMBER = SELECT;
   call AD_CURR_LINE;
   call SET_ROW_OFFSET (0);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	AD_CURR_LINE
	Change one line in the secondary file
****************************************************************/

AD_CURR_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if CURR_CODE_ARRAY(RECORD_NUMBER) ^= "" then
   do;
   REWRITE = YES;
   CURR_CODE = CURR_CODE_ARRAY(RECORD_NUMBER);
   call READ_KEYED (AD_CURR_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      return;
      end;
   do LOOP_INDEX =  1 to   6;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   end;
else
   do;
   call DISPLAY_MESSAGE ("Records may not be added!!!<BEL>"c);
   call PRESS_RETURN;
   return;
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =   1 to   1;
      if LOOP_INDEX =   1 then
         do;

         /* SKIP_CURR_CODE - Skip the currency code */

         call OUTPUT_FIELD(LOOP_INDEX);
         LOOP_INDEX = 99;
         INPUT_LENGTH = 1;

         end;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
      if LOOP_INDEX =   1 then
         do;

         /* SET_INPUT_LENGTH - Set a fake input length */

         INPUT_LENGTH = 1;

         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   if CURR_CODE = "" then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =   2 to   6;
         if LOOP_INDEX =   2 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =   3 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =   5 then
            do;

            /* CALC_AD_INDIR - Calculate indirect rate */

            if COSTING_EXCH = 0 then
               AD_INDIRECTZ = 0;
            else
               AD_INDIRECTZ = 1 / COSTING_EXCH;

            end;
         if LOOP_INDEX =   5 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =   6 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = 99;
            end;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
         if LOOP_INDEX =   4 then
            do;

            /* CHECK_RATE_TYPED - Check the rate typed in */

            LOOP_INDEX = LOOP_INDEX + 1;
            if COSTING_EXCH = 0 then
               do;
               call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
               if AD_INDIRECTZ = 0 then
                  COSTING_EXCH = 0;
               else
                  COSTING_EXCH = 1 / AD_INDIRECTZ;
               call OUTPUT_FIELD(LOOP_INDEX - 1);
               end;
            else
               do;
               AD_INDIRECTZ = 1 / COSTING_EXCH;
               call OUTPUT_FIELD(LOOP_INDEX);
               end;
            LOOP_INDEX = LAST_ITEM_NUMBER();
            COST_EXCH_CHG_BY = USER_NAME();
            COST_EX_DATE = TODAYS_DATE();
            call OUTPUT_FIELD(LOOP_INDEX);

            LAST_EXCHANGE = COSTING_EXCH;
            LAST_EX_DATE = COST_EX_DATE;
            LAST_EX_CHG_BY = COST_EXCH_CHG_BY;
            LOOP_INDEX = 99;

            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      CURR_CODE = CURR_CODE_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (AD_CURR_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      CURR_CODE = "";
      end;
   else
      do;
      if REWRITE = NO then
         call WRITE_RECORD (AD_CURR_NO,ERROR_CODE);
      else
         call UPDATE_RECORD (AD_CURR_NO,ERROR_CODE);
      end;
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      CURR_CODE_ARRAY(RECORD_NUMBER) = CURR_CODE;
      end;
end;
return;
end;	/* AD_CURR_LINE         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AD_CURR_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
