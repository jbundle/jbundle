/****************************************************************
	Module: GL_TRIAL_BAL
	Top Level Logic: REPORT_LOGIC
	Date: 25-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	GL_TRIAL_BAL
	Standard report logic
****************************************************************/

%replace GL_TRIAL_BAL_1 by  61;
%replace GL_TRIAL_BAL_2 by  60;
GL_TRIAL_BAL:
   procedure;
%replace GL_CHART_NO by  16;
%replace GL_DETAIL_NO by  17;
%include "GL_TRIAL_BAL.DD";
%include "GL_CHART.DD";
%include "GL_DETAIL.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		FIRST_TIME           bit (1);
declare		END_GL_GET_BALANCE   bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   GL_CUT_OFF_DATE = TODAYS_DATE();
   GL_TRIAL_DATE = TODAYS_DATE();
   GL_TRIAL_TIME = CURRENT_TIME();
   GL_TRIAL_PAGE = 1;
   GL_TRIAL_COUNT = 0;
   GL_TRIAL_DR_TOTAL = 0;
   GL_TRIAL_CR_TOTAL = 0;
   GL_TRIAL_PC = 1000;
   GL_TRIAL_SUB = "Y";
   GL_SUB_DEBIT = 0;
   GL_SUB_CREDIT = 0;
   GL_TRIAL_USER = USER_NAME();
   TYPICAL_BAL = "D";
   SECTION_SUB = "N";
   COUNTER_BAL_AC = 0;
   GL_INCOME_EXP = "N";
   DISCONTINUED_ON = 0;
   GL_TRX_DATE = TODAYS_DATE();
   GL_TRX_ENTRY = TODAYS_DATE();
   GL_TRX_AMOUNT = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (GL_TRIAL_BAL_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (GL_TRIAL_BAL_RECORD) );
   call OPEN_FILE (GL_CHART_NO,"GL_CHART",byteaddr(GL_CHART_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_CHART_NO,ERROR_CODE);
   call OPEN_FILE (GL_DETAIL_NO,"GL_DETAIL",byteaddr(GL_DETAIL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_DETAIL_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (GL_TRIAL_BAL_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   GL_ACCOUNT_NO = GL_START_ACCT;
   call SET_POSITION (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =  10 to  11;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
GL_END_ACCT_NO = GL_START_ACCT;
do LOOP_INDEX =   1 to   5;
   if LOOP_INDEX =   2 then
      GL_END_ACCT_NO = GL_START_ACCT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         GL_START_ACCT = 0;
         GL_END_ACCT_NO = 9999999;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  5,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  5 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         GL_START_ACCT = 0;
         GL_END_ACCT_NO = 9999999;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   6;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

GL_TRIAL_PAGE = GL_TRIAL_PAGE + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (GL_CHART_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (GL_ACCOUNT_NO > GL_END_ACCT_NO) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CHECK_PC_MATCH - Correct profit center? */

   if GL_TRIAL_PC ^= 1000 then
      if GL_ACCOUNT_NO - (floor(divide(GL_ACCOUNT_NO,1000,31)) * 1000) ^= GL_TRIAL_PC then
         return;


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */

   call GL_GET_ACCT_BAL;

   /* GL_CHECK_STAR - Check to see if the balance is abnormal */

   if ((TYPICAL_BAL = "D") & (ACCOUNT_BALANCE < 0 )) !
      ((TYPICAL_BAL = "C") & (ACCOUNT_BALANCE > 0)) then
         GL_STAR = "*";
      else
         GL_STAR = "";

   do LOOP_INDEX =   7 to   7;
      call PRINT_REPORT_LINE;
   end;

   /* CHECK_TRIAL_SUB - Section sub-total? */

   if GL_TRIAL_SUB = "Y" then
      do;
      GL_SUB_DEBIT= floor((GL_SUB_DEBIT + ACCOUNT_BALANCE) * 100 + 0.5) / 100;
      if SECTION_SUB = "Y" then
         do;
         GL_SUB_CREDIT = 0;
         if GL_SUB_DEBIT < 0 then
            do;
            GL_SUB_CREDIT = -GL_SUB_DEBIT;
            GL_SUB_DEBIT = 0;
            end;

         /* PRINT_LINE_G2 - Print */

         do LOOP_INDEX =   8 to   9;
            call PRINT_REPORT_LINE;
         end;
         GL_SUB_DEBIT = 0;
         end;
      end;


   /* ADD_TOTALS - Add to the total fields */

   GL_TRIAL_COUNT = GL_TRIAL_COUNT + 1;
   GL_TRIAL_DR_TOTAL = floor((GL_TRIAL_DR_TOTAL + GL_DEBIT) * 100 + 0.5) / 100;
   GL_TRIAL_CR_TOTAL = floor((GL_TRIAL_CR_TOTAL + GL_CREDIT) * 100 + 0.5) / 100;

   /* OTHER_LOGIC - Any other logic */

return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	GL_GET_ACCT_BAL
	Get the account balance
****************************************************************/

GL_GET_ACCT_BAL:
	procedure;


   /* GL_RESET_BAL - Reset the chart of accounts balance */

   ACCOUNT_BALANCE = 0;


   /* SET_FIRST_2 - Set the file pointer to the first key */

   GL_AC_NO = GL_ACCOUNT_NO;
   GL_TRX_DATE = 0;
   GL_SEQ_NO = 0;
   call SET_POSITION (GL_DETAIL_NO,KEY_AREA_2,ERROR_CODE);
   END_GL_GET_BALANCE = NO;
   do while (END_GL_GET_BALANCE ^= YES);
      call GL_GET_BALANCE;
   end;

   /* GL_SET_BALANCE - Set the balance up for output */

   if ACCOUNT_BALANCE > 0 then
      do;
      GL_DEBIT = ACCOUNT_BALANCE;
      GL_CREDIT = 0;
      end;
   else
      do;
      GL_DEBIT = 0;
      GL_CREDIT = -ACCOUNT_BALANCE;
      end;

return;
end;	/* GL_GET_ACCT_BAL      */

/****************************************************************
	GL_GET_BALANCE
	Get the balance as of the cut-off date
****************************************************************/

GL_GET_BALANCE:
	procedure;


   /* READNEXT_2 - Read the next record */

   call READ_NEXT (GL_DETAIL_NO,KEY_AREA_2,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (GL_DETAIL_NO,ERROR_CODE);

   /* CHECK_END_2 - Check for end of records */

   if (ERROR_CODE = END_OF_FILE) !
   (GL_AC_NO > GL_ACCOUNT_NO) !
   (GL_TRX_DATE > GL_CUT_OFF_DATE) then
      do;
      END_GL_GET_BALANCE = YES;
      return;
      end;

   /* GL_ADD_BAL - Add the the running balance */

   ACCOUNT_BALANCE = floor((ACCOUNT_BALANCE + GL_TRX_AMOUNT) * 100 + 0.5) / 100;

return;
end;	/* GL_GET_BALANCE       */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (GL_CHART_NO);
   call CLOSE_FILE (GL_DETAIL_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
