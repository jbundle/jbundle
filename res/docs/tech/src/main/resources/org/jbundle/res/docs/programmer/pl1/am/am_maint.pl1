/****************************************************************
	Module: AM_MAINT
	Top Level Logic: STANDARD_FILE_MAINT
	Date: 14-Feb-97
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AM_MAINT
	Screen file maintenance (standard)
****************************************************************/

%replace AM_MAINT_1 by   3;
AM_MAINT:
   procedure;
%replace AM_AGCY_NO by  10;
%include "AM_AGCY.DD";

declare		END_SCREEN_IO        bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		KEY_NO               fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		END_SEQ_ACCESS_2     bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		END_CHANGE_ITEM      bit (1);
declare		LOOP_INDEX           fixed binary (15);
   call INITIALIZE;
   END_SCREEN_IO = NO;
   do while (END_SCREEN_IO ^= YES);
      call SCREEN_IO;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */


   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AM_MAINT_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (AM_AGCY_NO,"AM_AGCY",byteaddr(AM_AGCY_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AM_AGCY_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	SCREEN_IO
	Screen I/O (Input display write)
****************************************************************/

SCREEN_IO:
	procedure;

declare		ERROR_AM_AGCY        fixed binary (15);

   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (AM_MAINT_1);
   NOT_FIRST_TIME = YES;

   /* INPUT_KEY - Input the key-data from the screen */

   KEY_NO = 1;
   INPUT_LENGTH = 1;
   call INPUT_FIELD (  1,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_SCREEN_IO = YES;
      return;
      end;
   FIRST_ITEM = 2;
   if INPUT_LENGTH = 0 then
      do;
      KEY_NO = 3;
      INPUT_LENGTH = 1;
      AGENCY_NAME = "";
      call INPUT_FIELD (  2,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         END_SCREEN_IO = YES;
         return;
         end;
      AGENCY_ZIP_CODE = "";
      call INPUT_FIELD (  6,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         END_SCREEN_IO = YES;
         return;
         end;
      FIRST_ITEM = 1;
      if INPUT_LENGTH = 0 then
         do;
         END_SCREEN_IO = YES;
         return;
         end;
      END_SEQ_ACCESS_2 = NO;
      call SEQ_ACCESS_2;
      if END_SEQ_ACCESS_2 then
         return;
      end;

   /* READ_AND_LOCK - Read the record and lock it */

   call READ_KEYED (AM_AGCY_NO+?LOCK_RECORD,KEY_NO,ERROR_AM_AGCY);
   if ERROR_AM_AGCY = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      end;
   if ERROR_AM_AGCY > 3 then
      call PRINT_ERROR (AM_AGCY_NO,ERROR_AM_AGCY);

   /* RECORD_FOUND - Was the record found? */

   ERROR_INPUT_SCREEN = NO;
   if ERROR_AM_AGCY = NORMAL_RETURN then
      do;
      call DISPLAY_DATA;
      end;
   else
      do;

      /* ENTER_SCREEN - Enter screen for the first time */


         /* CLEAR_FIELDS - Clear non-screen file fields */

         AGENCY_SHORT_NAME = "";
         call INPUT_SCREEN;
      if ERROR_INPUT_SCREEN then return;
      end;
   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* DISPLAY_OR_INPUTED - Was the data displayed or inputed? */

   if ERROR_AM_AGCY = NORMAL_RETURN then
      do;

      /* DIS_DELETED_OR_OK - Displayed, was this record deleted? */

      if RETURN_CODE = DELETE_TYPED then
         do;

         /* DELETE_RECORD - Delete the record */

         call DELETE_RECORD (AM_AGCY_NO,ERROR_CODE);
         end;
      else
         do;

         /* UPDATE_RECORD - Update the record */

         call UPDATE_RECORD (AM_AGCY_NO,ERROR_CODE);
         end;
      end;
   else
      do;

      /* INP_DELETED_OR_OK - Inputed data, should I delete or it ok */

      if RETURN_CODE = DELETE_TYPED then
         do;

         /* NO_CODE - This section has no code */

         /* No code in this section */
         end;
      else
         do;

         /* WRITE_RECORD - Write the record */

         call WRITE_RECORD (AM_AGCY_NO,ERROR_CODE);
         end;
      end;
return;
end;	/* SCREEN_IO            */

/****************************************************************
	SEQ_ACCESS_2
	Sequential access for secondary key
****************************************************************/

SEQ_ACCESS_2:
	procedure;

declare		ANSWER               character (1);
declare		RECORD_MATCH         bit (1);
declare	TEMP_AGENCY_NAME	character ( 30) varying;
declare	TEMP_AGENCY_ZIP_CODE	character ( 10) varying;
AGENCY_SHORT_NAME = AGENCY_NAME;
TEMP_AGENCY_NAME = CUT_SPACES(AGENCY_NAME);
TEMP_AGENCY_ZIP_CODE = CUT_SPACES(AGENCY_ZIP_CODE);
call SET_POSITION (AM_AGCY_NO,KEY_NO,ERROR_CODE);
do while (YES);
   call READ_NEXT (AM_AGCY_NO+?KEY_ONLY,KEY_NO,ERROR_CODE);
   if substr(AGENCY_ZIP_CODE,1,length(TEMP_AGENCY_ZIP_CODE)) >
      TEMP_AGENCY_ZIP_CODE then
         ERROR_CODE = END_OF_FILE;
   if ERROR_CODE = END_OF_FILE then
      do;
      call DISPLAY_MESSAGE ("<BEL>End of records!"c);
      call PRESS_RETURN;
      END_SEQ_ACCESS_2 = YES;
      return;
      end;
      RECORD_MATCH = NO;
   if substr(AGENCY_SHORT_NAME,1,min( 6,length(TEMP_AGENCY_NAME))) =
      substr(TEMP_AGENCY_NAME,1,min( 6,length(TEMP_AGENCY_NAME))) then
   if substr(AGENCY_ZIP_CODE,1,length(TEMP_AGENCY_ZIP_CODE)) =
      TEMP_AGENCY_ZIP_CODE then
         RECORD_MATCH = YES;
   if RECORD_MATCH then
      do;
      call READ_KEYED (AM_AGCY_NO,KEY_NO,ERROR_CODE);
      if length (TEMP_AGENCY_NAME) >  6 then
         if substr (AGENCY_NAME,1,length(TEMP_AGENCY_NAME)) ^= TEMP_AGENCY_NAME then
            RECORD_MATCH = NO;
      end;
   if RECORD_MATCH then
      do;
      call READ_KEYED (AM_AGCY_NO,KEY_NO,ERROR_CODE);
      end;
   if RECORD_MATCH then
      do;
      FIRST_ITEM = 1;
      call DISPLAY_DATA;
      call OUTPUT_LINE (23,20,"Correct record?");
      call INPUT_DATA (23,36,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
      call CLEAR_MESSAGE;
      call DUMP_BUFFER;
      if ANSWER = "Y" then
         do;
         FIRST_ITEM = LAST_ITEM_NUMBER() + 1;
         return;
         end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         END_SEQ_ACCESS_2 = YES;
         return;
         end;
      end;
end; /* do loop */
return;
end;	/* SEQ_ACCESS_2         */

/****************************************************************
	DISPLAY_DATA
	Display the data for this screen
****************************************************************/

DISPLAY_DATA:
	procedure;

do LOOP_INDEX = FIRST_ITEM to  23;
   call KEEP_TRAILING_SPACES;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA         */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

AGENCY_NAME = "";
AGENCY_ADDRESS_1 = "";
AGENCY_ADDRESS_2 = "";
AGENCY_ADDRESS_3 = "";
AGENCY_ZIP_CODE = "";
AGENCY_PHONE = "";
AGENCY_FAX = "";
AGENCY_CONTACT = "";
AGENCY_AFFILIATION = "";
AGENCY_TYPE = "N";
DATE_ESTABLISHED = TODAYS_DATE();
AGENCY_COMMENT_1 = "";
AGENCY_COMMENT_2 = "";
AGENCY_COMMENT_3 = "";
AGENCY_SALES_TO_DATE = 0;
AGENCY_SALES_YTD = 0;
AGENCY_BALANCE_DUE = 0;
AGENCY_DATE_LAST_REC = 0;
AGENCY_NO_BOOKINGS = 0;
AGENCY_LAST_REVISED = 0;
do LOOP_INDEX = FIRST_ITEM to  16;
   if LOOP_INDEX =  10 then
      do;
      call OUTPUT_FIELD (LOOP_INDEX);
      LOOP_INDEX = LOOP_INDEX + 1;
      end;
   if LOOP_INDEX =  11 then
      do;
      call OUTPUT_FIELD (LOOP_INDEX);
      LOOP_INDEX = LOOP_INDEX + 1;
      end;
   if LOOP_INDEX =  13 then
      do;
      call OUTPUT_FIELD (LOOP_INDEX);
      LOOP_INDEX = LOOP_INDEX + 1;
      end;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   2 then
      do;

      /* UPDATE_SHORT_NAME - Update the short name field for AGY file */

      AGENCY_SHORT_NAME = AGENCY_NAME;
      call CONVERT_TO_UPPER (AGENCY_SHORT_NAME);

      end;
   if LOOP_INDEX =  14 then
      do;

      /* SKIP_OTHER_2 - If you hit return, skip next two fields */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = LOOP_INDEX + 2;

      end;
   if LOOP_INDEX =  15 then
      do;

      /* SKIP_OTHER_1 - Skip the next line if you hit return */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = LOOP_INDEX + 1;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX = max(FIRST_ITEM, 17) to  23;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 14,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 13 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   2 then
      do;

      /* UPDATE_SHORT_NAME - Update the short name field for AGY file */

      AGENCY_SHORT_NAME = AGENCY_NAME;
      call CONVERT_TO_UPPER (AGENCY_SHORT_NAME);

      end;
   end;
if SELECT = 14 then
   do;
   do LOOP_INDEX =  14 to  16;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
      if LOOP_INDEX =  14 then
         do;

         /* SKIP_OTHER_2 - If you hit return, skip next two fields */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = LOOP_INDEX + 2;

         end;
      if LOOP_INDEX =  15 then
         do;

         /* SKIP_OTHER_1 - Skip the next line if you hit return */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = LOOP_INDEX + 1;

         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AM_AGCY_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
