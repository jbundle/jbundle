/****************************************************************
	Module: TK_FLIGHT_ADJ
	Top Level Logic: TABLE_FILE_MAINT
	Date: 27-Mar-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	TK_FLIGHT_ADJ
	Top Level for table display/maintenance
****************************************************************/

%replace TK_FLIGHT_ADJ_1 by 688;
TK_FLIGHT_ADJ:
   procedure;
%replace TK_FLIGHTS_NO by  73;
%include "TK_FLIGHTS.DD";

declare		END_TABLE_IO         bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		FLIGHT_NO_ARRAY(18) character (        4);
declare		FLIGHT_END_ARRAY(18) fixed binary (15);
declare		FLIGHT_DAYS_ARRAY(18) character (        4);
declare		FLIGHT_SEGMENT_ARRAY(18) fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
   call INITIALIZE;
   END_TABLE_IO = NO;
   do while (END_TABLE_IO ^= YES);
      call TABLE_IO;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   FLIGHT_ADD = 0;
   FLIGHT_DAYS = "";
   FLIGHT_SEGMENT = 1;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (TK_FLIGHT_ADJ_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (TK_FLIGHTS_NO,"TK_FLIGHTS",byteaddr(TK_FLIGHTS_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_FLIGHTS_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	TABLE_IO
	Table file with header info maint.
****************************************************************/

TABLE_IO:
	procedure;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (TK_FLIGHT_ADJ_1);
   NOT_FIRST_TIME = YES;
   call INPUT_HDR_INFO;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_ERR - Return if error/end typed */

   if RETURN_CODE = END_TYPED then
      do;
      END_TABLE_IO = YES;
      return;
      end;

   /* OTHER_LOGIC - Any other logic */


   /* BEFORE_LOGIC - Before logic */

   call TABLE_MAINT;

   /* AFTER_LOGIC - Other Logic */

return;
end;	/* TABLE_IO             */

/****************************************************************
	INPUT_HDR_INFO
	Input the table header information
****************************************************************/

INPUT_HDR_INFO:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_HDR_INFO       */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		FLIGHT_AIRLINE_SAVE  character (        2);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		TK_FLIGHTS_ERROR     fixed binary (15);
declare		FLIGHT_NO_SAVE       character (        4);
declare		FLIGHT_END_SAVE      fixed binary (15);
declare		FLIGHT_DAYS_SAVE     character (        4);
declare		FLIGHT_SEGMENT_SAVE  fixed binary (15);
declare		ANSWER               character (1);
FLIGHT_AIRLINE_SAVE = FLIGHT_AIRLINE;
FLIGHT_NO = "";
FLIGHT_END = 0;
FLIGHT_DAYS = "";
FLIGHT_SEGMENT = 0;
call SET_POSITION (TK_FLIGHTS_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (TK_FLIGHTS_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (FLIGHT_AIRLINE > FLIGHT_AIRLINE_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 18;
      FLIGHT_NO_ARRAY(RECORD_NUMBER) = "";
      FLIGHT_END_ARRAY(RECORD_NUMBER) = 0;
      FLIGHT_DAYS_ARRAY(RECORD_NUMBER) = "";
      FLIGHT_SEGMENT_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      TK_FLIGHTS_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (TK_FLIGHTS_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 18) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =   2 to  14;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         FLIGHT_NO_ARRAY(RECORD_NUMBER) = FLIGHT_NO;
         FLIGHT_END_ARRAY(RECORD_NUMBER) = FLIGHT_END;
         FLIGHT_DAYS_ARRAY(RECORD_NUMBER) = FLIGHT_DAYS;
         FLIGHT_SEGMENT_ARRAY(RECORD_NUMBER) = FLIGHT_SEGMENT;
         call READ_NEXT (TK_FLIGHTS_NO,KEY_AREA_1,TK_FLIGHTS_ERROR);
         if (FLIGHT_AIRLINE > FLIGHT_AIRLINE_SAVE) then
            TK_FLIGHTS_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      FLIGHT_NO_SAVE = FLIGHT_NO_ARRAY(18);
      FLIGHT_END_SAVE = FLIGHT_END_ARRAY(18);
      FLIGHT_DAYS_SAVE = FLIGHT_DAYS_ARRAY(18);
      FLIGHT_SEGMENT_SAVE = FLIGHT_SEGMENT_ARRAY(18);
      FLIGHT_AIRLINE = FLIGHT_AIRLINE_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if TK_FLIGHTS_ERROR ^= END_OF_FILE then
            do;
            FLIGHT_NO = FLIGHT_NO_SAVE;
            FLIGHT_END = FLIGHT_END_SAVE;
            FLIGHT_DAYS = FLIGHT_DAYS_SAVE;
            FLIGHT_SEGMENT = FLIGHT_SEGMENT_SAVE;
            call SET_POSITION (TK_FLIGHTS_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (TK_FLIGHTS_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (TK_FLIGHTS_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if FLIGHT_NO_ARRAY(18) = "" then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      FLIGHT_AIRLINE = FLIGHT_AIRLINE_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <= 18) );
         call TK_FLIGHTS_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (FLIGHT_NO_ARRAY(18) = "") then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 18;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if FLIGHT_NO_ARRAY(RECORD_NUMBER) ^= "" then
         do LOOP_INDEX = 2 to  14;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 90,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 18 then
   do;
   RECORD_NUMBER = SELECT;
   call TK_FLIGHTS_LINE;
   call SET_ROW_OFFSET (0);
   end;
if SELECT = 90 then
   do;
   call INPUT_FIELD (  1,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	TK_FLIGHTS_LINE
	Change one line in the secondary file
****************************************************************/

TK_FLIGHTS_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if FLIGHT_NO_ARRAY(RECORD_NUMBER) ^= "" then
   do;
   REWRITE = YES;
   FLIGHT_NO = FLIGHT_NO_ARRAY(RECORD_NUMBER);
   FLIGHT_END = FLIGHT_END_ARRAY(RECORD_NUMBER);
   FLIGHT_DAYS = FLIGHT_DAYS_ARRAY(RECORD_NUMBER);
   FLIGHT_SEGMENT = FLIGHT_SEGMENT_ARRAY(RECORD_NUMBER);
   call READ_KEYED (TK_FLIGHTS_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      return;
      end;
   do LOOP_INDEX =  2 to  14;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   end;
else
   do;
   FLIGHT_NO = "";
   FLIGHT_FROM = "";
   FLIGHT_TO = "";
   FLIGHT_DEPART = 0;
   FLIGHT_ARRIVE = 0;
   FLIGHT_ADD = 0;
   FLIGHT_EQUIP = "";
   FLIGHT_MEALS = "";
   FLIGHT_START = 0;
   FLIGHT_END = 0;
   FLIGHT_DAYS = "";
   FLIGHT_CLASSES = "";
   FLIGHT_STOPS = 0;
   FLIGHT_COMMENTS = "";
   FLIGHT_SEGMENT = 1;
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =   2 to   2;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
      if LOOP_INDEX =   2 then
         do;

         /* FIX_FLIGHT_NO - Standardize Airline Flight number */

         declare LOOP fixed binary;
         do LOOP = 1 to length(FLIGHT_NO);
            if substr(FLIGHT_NO,LOOP,1) = "0" then
               substr(FLIGHT_NO,LOOP,1) = " ";
            if substr(FLIGHT_NO,LOOP,1) ^= " " then
               goto LOOP_DONE;
         end;
         LOOP = 4;
         LOOP_DONE:
         FLIGHT_NO = substr(FLIGHT_NO,LOOP,5-LOOP);

         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   if FLIGHT_NO = "" then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =   3 to  14;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      FLIGHT_NO = FLIGHT_NO_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (TK_FLIGHTS_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      FLIGHT_NO = "";
      end;
   else
      do;
      if REWRITE = NO then
         call WRITE_RECORD (TK_FLIGHTS_NO,ERROR_CODE);
      else
         call UPDATE_RECORD (TK_FLIGHTS_NO,ERROR_CODE);
      end;
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      FLIGHT_NO_ARRAY(RECORD_NUMBER) = FLIGHT_NO;
      FLIGHT_END_ARRAY(RECORD_NUMBER) = FLIGHT_END;
      FLIGHT_DAYS_ARRAY(RECORD_NUMBER) = FLIGHT_DAYS;
      FLIGHT_SEGMENT_ARRAY(RECORD_NUMBER) = FLIGHT_SEGMENT;
      end;
end;
return;
end;	/* TK_FLIGHTS_LINE      */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (TK_FLIGHTS_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
