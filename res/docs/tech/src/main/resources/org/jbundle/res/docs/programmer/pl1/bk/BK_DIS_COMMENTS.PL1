/****************************************************************
	Module: BK_DIS_COMMENTS
	Top Level Logic: DIS_TABLE_DISPLAY
	Date: 13-Nov-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_DIS_COMMENTS
	Top Level - Table Display
****************************************************************/

%replace BK_DIS_COMMENTS_1 by 553;
BK_DIS_COMMENTS:
   procedure(
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD);
%replace BK_COMMENT_NO by  48;
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%include "BK_COMMENT.DD";
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";

declare		ERROR_CODE           fixed binary (15);
declare		END_DELETE_REMARK    bit (1);
   call INITIALIZE;
   call DIS_TABLE_DIS;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   BK_TOUR_MOD_CODE = "A";
   BK_TOUR_SEQ = 0;
   BK_COMM_MOD_CODE = "";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */


   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_DIS_COMMENTS_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (BK_COMMENT_NO,"BK_COMMENT",byteaddr(BK_COMMENT_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_COMMENT_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	DIS_TABLE_DIS
	Mainline logic
****************************************************************/

DIS_TABLE_DIS:
	procedure;


   /* BEFORE_LOGIC - Before logic */


   /* INIT_COMMENT_STUFF - Init logic */


      /* CHECK_BOOKING - Is this a booking-in-progress? */

      if BOOKING_NO = 0 then
         return;


      /* CHECK_ALL_INFO - Are all Agency, Pax, and Tour in? */

      if BK_AGENCY = -1 then
         do;
         call DISPLAY_MESSAGE ("Agency not entered!");
         call PRESS_RETURN;
         return;
         end;

      if BK_PAX = 0 then
         do;
         call DISPLAY_MESSAGE ("Passengers not entered!");
         call PRESS_RETURN;
         return;
         end;

      if BK_TOUR_NUM = 0 then
         do;
         call DISPLAY_MESSAGE ("Tour not entered!");
         call PRESS_RETURN;
         return;
         end;


      /* BK_SET_COMM_DET - Call the comment detail program */

      %include "BK_SET_COMM_DET.DCL";
      call BK_SET_COMM_DET(
         BK_BOOKING_RECORD,
         BK_TOUR_RECORD,
         BK_TOUR_HDR_RECORD,
         BK_COMMENT_RECORD);
   call TABLE_DISPLAY;

   /* AFTER_LOGIC - Other Logic */

   END_DELETE_REMARK = NO;
   do while (END_DELETE_REMARK ^= YES);
      call DELETE_REMARK;
   end;
return;
end;	/* DIS_TABLE_DIS        */

/****************************************************************
	TABLE_DISPLAY
	Display the table info
****************************************************************/

TABLE_DISPLAY:
	procedure;

declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		BK_TOUR_MOD_NO_SAVE  fixed binary (15);
declare		BK_OR_TOUR_NO_SAVE   fixed binary (31);
declare		BK_COMM_ALT_SEQ_SAVE fixed binary (15);
declare		BK_COMM_ANSW_SEQ_SAV fixed binary (15);
declare		BK_TOUR_C_R_SAVE     character (        1);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		RECORD_NUMBER        fixed binary (15);
declare		BK_TOUR_SEQ_ARRAY(16) fixed binary (15);
declare		BK_COMMENT_ERROR     fixed binary (15);
declare		BK_TOUR_SEQ_SAVE     fixed binary (15);
declare		ANSWER               character (1);
BK_TOUR_MOD_NO = BK_MODIFICATION;
BK_TOUR_MOD_NO_SAVE = BK_TOUR_MOD_NO;
BK_OR_TOUR_NO = BOOKING_NO;
BK_OR_TOUR_NO_SAVE = BK_OR_TOUR_NO;
BK_COMM_ALT_SEQ = 0;
BK_COMM_ALT_SEQ_SAVE = BK_COMM_ALT_SEQ;
BK_COMM_ANSW_SEQ = 0;
BK_COMM_ANSW_SEQ_SAV = BK_COMM_ANSW_SEQ;
BK_TOUR_C_R = "B";
BK_TOUR_C_R_SAVE = BK_TOUR_C_R;
BK_TOUR_SEQ = 0;
call SET_POSITION (BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (BK_TOUR_MOD_NO > BK_TOUR_MOD_NO_SAVE) !
   (BK_OR_TOUR_NO > BK_OR_TOUR_NO_SAVE) !
   (BK_COMM_ALT_SEQ > BK_COMM_ALT_SEQ_SAVE) !
   (BK_COMM_ANSW_SEQ > BK_COMM_ANSW_SEQ_SAV) !
   (BK_TOUR_C_R > BK_TOUR_C_R_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 16;
      BK_TOUR_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_COMMENT_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_COMMENT_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 16) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =  11 to  11;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         BK_TOUR_SEQ_ARRAY(RECORD_NUMBER) = BK_TOUR_SEQ;
         call READ_NEXT (BK_COMMENT_NO,KEY_AREA_1,BK_COMMENT_ERROR);
         if (BK_TOUR_MOD_NO > BK_TOUR_MOD_NO_SAVE) !
         (BK_OR_TOUR_NO > BK_OR_TOUR_NO_SAVE) !
         (BK_COMM_ALT_SEQ > BK_COMM_ALT_SEQ_SAVE) !
         (BK_COMM_ANSW_SEQ > BK_COMM_ANSW_SEQ_SAV) !
         (BK_TOUR_C_R > BK_TOUR_C_R_SAVE) then
            BK_COMMENT_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      BK_TOUR_SEQ_SAVE = BK_TOUR_SEQ_ARRAY(16);
      BK_TOUR_MOD_NO = BK_TOUR_MOD_NO_SAVE;
      BK_OR_TOUR_NO = BK_OR_TOUR_NO_SAVE;
      BK_COMM_ALT_SEQ = BK_COMM_ALT_SEQ_SAVE;
      BK_COMM_ANSW_SEQ = BK_COMM_ANSW_SEQ_SAV;
      BK_TOUR_C_R = BK_TOUR_C_R_SAVE;
      if BK_COMMENT_ERROR = END_OF_FILE then
         GET_OUT = YES;
      else
         do;
         call OUTPUT_LINE (24,10,"Stop Displaying?");
         call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
         call CLEAR_TO_BOS (24);
         if (ANSWER = "Y") then
            GET_OUT = YES;
         end;
      end;
   else
      GET_OUT = YES;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 16;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if BK_TOUR_SEQ_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX =11 to  11;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_DISPLAY        */

/****************************************************************
	DELETE_REMARK
	Delete the REMARK detail
****************************************************************/

DELETE_REMARK:
	procedure;


   /* SET_FIRST_REMARKR - Set to the first REMARK */

   BK_TOUR_MOD_NO = BK_MODIFICATION;
   BK_OR_TOUR_NO = BOOKING_NO;
   BK_COMM_ALT_SEQ = 0;
   BK_COMM_ANSW_SEQ = 0;
   BK_TOUR_C_R = "B";
   BK_TOUR_SEQ = 0;
   call SET_POSITION (BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);

   /* READ_NEXT_REMARKD - Read next */

   call READ_NEXT (BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_COMMENT_NO,ERROR_CODE);

   /* CHECK_END_REMARKR - Last REMARK? */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_TOUR_MOD_NO > BK_MODIFICATION) !
   (BK_OR_TOUR_NO > BOOKING_NO) !
   (BK_COMM_ALT_SEQ > 0) !
   (BK_COMM_ANSW_SEQ > 0) !
   (BK_TOUR_C_R > "B") then
      do;
      END_DELETE_REMARK = YES;
      return;
      end;

   /* DELETE_REMARKD - Delete */

   call DELETE_RECORD (BK_COMMENT_NO,ERROR_CODE);
return;
end;	/* DELETE_REMARK        */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (BK_COMMENT_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
