/****************************************************************
	Module: BK_TOUR_PRICE
	Top Level Logic: TABLE_DIS_MAINT
	Date: 27-Nov-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_TOUR_PRICE
	Display the header and maintain a table
****************************************************************/

%replace BK_TOUR_PRICE_1 by 303;
BK_TOUR_PRICE:
   procedure(
      BK_TOUR_HDR_RECORD,
      BK_OPT_ALT_RECORD);
%replace BK_PRICING_NO by  59;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_OPT_ALT_NO by  62;
%include "BK_PRICING.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_OPT_ALT.DD";

declare		ERROR_CODE           fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		PRICE_PAX_CAT_ARRAY(15) character (        1);
declare		PRICE_SEQ_ARRAY(15) fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
   call INITIALIZE;
   call TABLE_DM_IO;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   PRICE_MOD_CODE = "A";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_TOUR_PRICE_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (BK_PRICING_NO,"BK_PRICING",byteaddr(BK_PRICING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_PRICING_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	TABLE_DM_IO
	Table display I/O
****************************************************************/

TABLE_DM_IO:
	procedure;

   call DISPLAY_DATA_A;

   /* OTHER_LOGIC - Any other logic */

   call TABLE_MAINT;
return;
end;	/* TABLE_DM_IO          */

/****************************************************************
	DISPLAY_DATA_A
	Display the items in screen group A
****************************************************************/

DISPLAY_DATA_A:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   8;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_A       */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		PRICE_TOUR_CODE_SAVE character (        4);
declare		PRICE_ALT_OPT_SAVE   fixed binary (15);
declare		PRICE_ALT_SEQ_SAVE   fixed binary (15);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		BK_PRICING_ERROR     fixed binary (15);
declare		PRICE_PAX_CAT_SAVE   character (        1);
declare		PRICE_SEQ_SAVE       fixed binary (15);
declare		ANSWER               character (1);
PRICE_TOUR_CODE = HDR_TOUR_CODE;
PRICE_TOUR_CODE_SAVE = PRICE_TOUR_CODE;
PRICE_ALT_OPT = ALT_SEQ;
PRICE_ALT_OPT_SAVE = PRICE_ALT_OPT;
PRICE_ALT_SEQ = ALT_ANSW_SEQ;
PRICE_ALT_SEQ_SAVE = PRICE_ALT_SEQ;
PRICE_PAX_CAT = "";
PRICE_SEQ = 0;
call SET_POSITION (BK_PRICING_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_PRICING_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (PRICE_TOUR_CODE > HDR_TOUR_CODE) !
   (PRICE_ALT_OPT > ALT_SEQ) !
   (PRICE_ALT_SEQ > ALT_ANSW_SEQ) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 15;
      PRICE_PAX_CAT_ARRAY(RECORD_NUMBER) = "";
      PRICE_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_PRICING_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_PRICING_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 15) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =   9 to  16;
            if LOOP_INDEX =  14 then
               do;

               /* CHECK_COMM_NO - Skip if fully commisssionable */

               if PRICE_COMMABLE = "Y" then
                  LOOP_INDEX = LOOP_INDEX + 1;

               end;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         PRICE_PAX_CAT_ARRAY(RECORD_NUMBER) = PRICE_PAX_CAT;
         PRICE_SEQ_ARRAY(RECORD_NUMBER) = PRICE_SEQ;
         call READ_NEXT (BK_PRICING_NO,KEY_AREA_1,BK_PRICING_ERROR);
         if (PRICE_TOUR_CODE > HDR_TOUR_CODE) !
         (PRICE_ALT_OPT > ALT_SEQ) !
         (PRICE_ALT_SEQ > ALT_ANSW_SEQ) then
            BK_PRICING_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      PRICE_PAX_CAT_SAVE = PRICE_PAX_CAT_ARRAY(15);
      PRICE_SEQ_SAVE = PRICE_SEQ_ARRAY(15);
      PRICE_TOUR_CODE = PRICE_TOUR_CODE_SAVE;
      PRICE_ALT_OPT = PRICE_ALT_OPT_SAVE;
      PRICE_ALT_SEQ = PRICE_ALT_SEQ_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if BK_PRICING_ERROR ^= END_OF_FILE then
            do;
            PRICE_PAX_CAT = PRICE_PAX_CAT_SAVE;
            PRICE_SEQ = PRICE_SEQ_SAVE;
            call SET_POSITION (BK_PRICING_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_PRICING_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_PRICING_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if PRICE_PAX_CAT_ARRAY(15) = "" then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      PRICE_TOUR_CODE = PRICE_TOUR_CODE_SAVE;
      PRICE_ALT_OPT = PRICE_ALT_OPT_SAVE;
      PRICE_ALT_SEQ = PRICE_ALT_SEQ_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <= 15) );
         call BK_PRICING_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (PRICE_PAX_CAT_ARRAY(15) = "") then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 15;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if PRICE_PAX_CAT_ARRAY(RECORD_NUMBER) ^= "" then
         do LOOP_INDEX = 9 to  16;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 15,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 15 then
   do;
   RECORD_NUMBER = SELECT;
   call BK_PRICING_LINE;
   call SET_ROW_OFFSET (0);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	BK_PRICING_LINE
	Change one line in the secondary file
****************************************************************/

BK_PRICING_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if PRICE_PAX_CAT_ARRAY(RECORD_NUMBER) ^= "" then
   do;
   REWRITE = YES;
   PRICE_PAX_CAT = PRICE_PAX_CAT_ARRAY(RECORD_NUMBER);
   PRICE_SEQ = PRICE_SEQ_ARRAY(RECORD_NUMBER);
   call READ_KEYED (BK_PRICING_NO,KEY_AREA_1,ERROR_CODE);
   do LOOP_INDEX =  9 to  16;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   end;
else
   do;
   PRICE_PAX_CAT = "";
   PRICE_SEQ = 0;
   PRICE_MOD_CODE = "A";
   PRICE_DESC = "";
   PRICE_COMMABLE = "Y";
   PRICE_COMM = 0;
   PRICE_SELL = 0;
   PRICE_PAY_AT = "F";
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =   9 to   9;
      if LOOP_INDEX =   9 then
         call DISPLAY_MSG_NO ( 91);
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   if PRICE_PAX_CAT = "" then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =  10 to  16;
         if LOOP_INDEX =  13 then
            call DISPLAY_MSG_NO ( 92);
         if LOOP_INDEX =  14 then
            do;

            /* CHECK_COMM_NO - Skip if fully commisssionable */

            if PRICE_COMMABLE = "Y" then
               LOOP_INDEX = LOOP_INDEX + 1;

            end;
         if LOOP_INDEX =  15 then
            call DISPLAY_MSG_NO ( 30);
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      PRICE_PAX_CAT = PRICE_PAX_CAT_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (BK_PRICING_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      PRICE_PAX_CAT = "";
      end;
   else
      do;
      if REWRITE = NO then
         call WRITE_RECORD (BK_PRICING_NO,ERROR_CODE);
      else
         call UPDATE_RECORD (BK_PRICING_NO,ERROR_CODE);
      end;
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      PRICE_PAX_CAT_ARRAY(RECORD_NUMBER) = PRICE_PAX_CAT;
      PRICE_SEQ_ARRAY(RECORD_NUMBER) = PRICE_SEQ;
      end;
end;
return;
end;	/* BK_PRICING_LINE      */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (BK_PRICING_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
