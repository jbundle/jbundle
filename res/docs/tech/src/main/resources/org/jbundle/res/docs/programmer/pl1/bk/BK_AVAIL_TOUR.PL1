/****************************************************************
	Module: BK_AVAIL_TOUR
	Top Level Logic: TABLE_FILE_DIS
	Date: 21-Jan-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_AVAIL_TOUR
	Display table logic
****************************************************************/

%replace BK_AVAIL_TOUR_1 by 740;
BK_AVAIL_TOUR:
   procedure;
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_INV_DET_NO by  61;
%include "BK_BOOKING.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_AVAIL_TOUR.DD";
%include "BK_INV_DET.DD";

declare		END_DISPLAY_IO       bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
   call INITIALIZE;
   END_DISPLAY_IO = NO;
   do while (END_DISPLAY_IO ^= YES);
      call DISPLAY_IO;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;
   HDR_TOUR_DESC2 = "";
   HDR_START_ON = 0;
   HDR_END_ON = 0;
   HDR_DEF_RATE = "F";
   HDR_DEF_CLASS = "S ";
   HDR_DEF_CUTOFF = 0;
   HDR_UPGRADE_AGCY = "A";
   HDR_INIT_STATUS = "OK";
   INV_DET_TYPE = "H";
   INV_CODE_TYPE = "B";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_AVAIL_TOUR_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
   call OPEN_FILE (BK_TOUR_HDR_NO,"BK_TOUR_HDR",byteaddr(BK_TOUR_HDR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TOUR_HDR_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (BK_AVAIL_TOUR_RECORD) );
   call OPEN_FILE (BK_INV_DET_NO,"BK_INV_DET",byteaddr(BK_INV_DET_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_INV_DET_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	DISPLAY_IO
	Main logic for table display
****************************************************************/

DISPLAY_IO:
	procedure;


   /* RESET_INPUT_ERROR - set input erro to no */

   ERROR_INPUT_SCREEN = NO;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (BK_AVAIL_TOUR_1);
   NOT_FIRST_TIME = YES;
   call INPUT_HDR_INFO;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_DISPLAY_IO = YES;
      return;
      end;


   /* BEFORE_LOGIC - Before logic */

   call TABLE_DISPLAY;

   /* AFTER_LOGIC - Other Logic */


   /* OTHER_LOGIC - Any other logic */

return;
end;	/* DISPLAY_IO           */

/****************************************************************
	INPUT_HDR_INFO
	Input the table header information
****************************************************************/

INPUT_HDR_INFO:
	procedure;

do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* FIND_UNSCH_HDR - Read the header, Unscheduled? */


         /* RESET_BK_DEP - Reset the booking departure */

         BK_DEPARTURE = 0;


         /* GET_TOUR_HDR - Get the tour header */

         ERROR_CODE = NORMAL_RETURN;

         HDR_TOUR_CODE = BK_TOUR_CODE;
         HDR_END_ON = BK_DEPARTURE;
         if HDR_END_ON = 0 then
            HDR_END_ON = TODAYS_DATE();
         call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
         if ERROR_CODE ^= END_OF_FILE then
            call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

         if BK_TOUR_CODE ^= HDR_TOUR_CODE then
            ERROR_CODE = END_OF_FILE;
         if BK_DEPARTURE ^= 0 then if BK_DEPARTURE < HDR_START_ON then
            ERROR_CODE = END_OF_FILE;


         /* CK_HDR_FOUND - Warning if header not found */

         if ERROR_CODE ^= NORMAL_RETURN then
            do;
            call DISPLAY_MESSAGE ("<BEL>Warning -- Couldn't find Tour header"c);
            call PRESS_RETURN;
            end;


         /* CHECK_UNSCH_TR - Is this an unscheduled tour? */

         if ERROR_CODE = NORMAL_RETURN then
            do;
            if HDR_TOUR_TYPE = "U" then
               do;
               call DISPLAY_DATA_C;
               end;
            else
               do;
               call DISPLAY_MESSAGE ("This is not an Unscheduled Tour!!!<BEL>"c);
               call PRESS_RETURN;
               LOOP_INDEX = LOOP_INDEX - 1;
               end;
               end;
         else
            LOOP_INDEX = LOOP_INDEX - 1;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =   3 to   3;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_HDR_INFO       */

/****************************************************************
	DISPLAY_DATA_C
	Display the data in screen group C
****************************************************************/

DISPLAY_DATA_C:
	procedure;

do LOOP_INDEX =   2 to   2;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_C       */

/****************************************************************
	TABLE_DISPLAY
	Display the table info
****************************************************************/

TABLE_DISPLAY:
	procedure;

declare		INV_DET_TYPE_SAVE    character (        1);
declare		INV_DET_ENTRY_SAVE   character (       10);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		RECORD_NUMBER        fixed binary (15);
declare		INV_DET_DATE_ARRAY(18) fixed binary (15);
declare		INV_CODE_TYPE_ARRAY(18) character (        1);
declare		INV_ROOM_TYPE_ARRAY(18) fixed binary (15);
declare		BK_INV_DET_ERROR     fixed binary (15);
declare		INV_DET_DATE_SAVE    fixed binary (15);
declare		INV_CODE_TYPE_SAVE   character (        1);
declare		INV_ROOM_TYPE_SAVE   fixed binary (15);
declare		ANSWER               character (1);
INV_DET_TYPE = "T";
INV_DET_TYPE_SAVE = INV_DET_TYPE;
INV_DET_ENTRY = HDR_TOUR_CODE;
INV_DET_ENTRY_SAVE = INV_DET_ENTRY;
INV_DET_DATE = 0;
INV_CODE_TYPE = "";
INV_ROOM_TYPE = 0;
call SET_POSITION (BK_INV_DET_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_INV_DET_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (INV_DET_TYPE > INV_DET_TYPE_SAVE) !
   (INV_DET_ENTRY > INV_DET_ENTRY_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 18;
      INV_DET_DATE_ARRAY(RECORD_NUMBER) = 0;
      INV_CODE_TYPE_ARRAY(RECORD_NUMBER) = "";
      INV_ROOM_TYPE_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_INV_DET_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_INV_DET_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 18) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =   4 to   8;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         INV_DET_DATE_ARRAY(RECORD_NUMBER) = INV_DET_DATE;
         INV_CODE_TYPE_ARRAY(RECORD_NUMBER) = INV_CODE_TYPE;
         INV_ROOM_TYPE_ARRAY(RECORD_NUMBER) = INV_ROOM_TYPE;
         call READ_NEXT (BK_INV_DET_NO,KEY_AREA_1,BK_INV_DET_ERROR);
         if (INV_DET_TYPE > INV_DET_TYPE_SAVE) !
         (INV_DET_ENTRY > INV_DET_ENTRY_SAVE) then
            BK_INV_DET_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      INV_DET_DATE_SAVE = INV_DET_DATE_ARRAY(18);
      INV_CODE_TYPE_SAVE = INV_CODE_TYPE_ARRAY(18);
      INV_ROOM_TYPE_SAVE = INV_ROOM_TYPE_ARRAY(18);
      INV_DET_TYPE = INV_DET_TYPE_SAVE;
      INV_DET_ENTRY = INV_DET_ENTRY_SAVE;
      if BK_INV_DET_ERROR = END_OF_FILE then
         do;
         GET_OUT = YES;
         call PRESS_RETURN;
         end;
      else
         do;
         call OUTPUT_LINE (24,10,"Stop Displaying?");
         call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
         call CLEAR_TO_BOS (24);
         if (ANSWER = "Y") then
            GET_OUT = YES;
         end;
      end;
   else
      do;
      GET_OUT = YES;
      call PRESS_RETURN;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 18;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if INV_DET_DATE_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX = 4 to   8;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_DISPLAY        */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_FILE (BK_TOUR_HDR_NO);
   call CLOSE_FILE (BK_INV_DET_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
