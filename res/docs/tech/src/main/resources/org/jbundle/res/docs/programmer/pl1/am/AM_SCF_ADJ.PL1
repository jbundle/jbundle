/****************************************************************
	Module: AM_SCF_ADJ
	Top Level Logic: SCF_ADJ_LOGIC
	Date: 23-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AM_SCF_ADJ
	Top-Level Logic
****************************************************************/

%replace AM_SCF_ADJ_1 by 671;
AM_SCF_ADJ:
   procedure;
%replace AM_SCF_CONTROL_NO by  11;
%include "AM_SCF_ADJ.DD";
%include "AM_SCF_CONTROL.DD";

declare		END_SCF_ADJ_MAIN     bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_ADJ_SCF_RANGE    bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
   call INITIALIZE;
   END_SCF_ADJ_MAIN = NO;
   do while (END_SCF_ADJ_MAIN ^= YES);
      call SCF_ADJ_MAIN;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   SCF_TO = "";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AM_SCF_ADJ_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (AM_SCF_ADJ_RECORD) );
   call OPEN_FILE (AM_SCF_CONTROL_NO,"AM_SCF_CONTROL",byteaddr(AM_SCF_CONTROL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AM_SCF_CONTROL_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	SCF_ADJ_MAIN
	Mainline logic
****************************************************************/

SCF_ADJ_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_SCF_ADJ_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_SCF_ADJ_MAIN = YES;
      return;
      end;


   /* SET_FIRST - Set the record pointer to the first rec */

   SCF_TO = START_SCF;
   call SET_POSITION (AM_SCF_CONTROL_NO,KEY_AREA_1,ERROR_CODE);
   END_ADJ_SCF_RANGE = NO;
   do while (END_ADJ_SCF_RANGE ^= YES);
      call ADJ_SCF_RANGE;
   end;

   /* RETURN - Normal Return */

   do;
   END_SCF_ADJ_MAIN = YES;
   return;
   end;

return;
end;	/* SCF_ADJ_MAIN         */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   5;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  5,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  5 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	ADJ_SCF_RANGE
	Adjust the codes in the range
****************************************************************/

ADJ_SCF_RANGE:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_AM_SCF_CONTROL fixed binary (15);

   /* READNEXT - Read the next record */

   call READ_NEXT (AM_SCF_CONTROL_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AM_SCF_CONTROL_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (SCF_TO > END_SCF) then
      do;
      END_ADJ_SCF_RANGE = YES;
      return;
      end;

   /* SET_TERR_REG - Set the territory or region */

   if TERR_SCF ^= "" then
      SALESPERSON_TERR = TERR_SCF;
   if REGION_SCF ^= "" then
      SALES_REGION = REGION_SCF;
   if ZONE_SCF ^= "" then
      UPS_ZONE = ZONE_SCF;


   /* UPDATE_RECORD - Update the record */

   call UPDATE_RECORD (AM_SCF_CONTROL_NO,ERROR_CODE);

   /* READ_RECORD - Read the record */

   call READ_KEYED (AM_SCF_CONTROL_NO,KEY_AREA_1,ERROR_AM_SCF_CONTROL);
   if ERROR_AM_SCF_CONTROL > 3 then
      call PRINT_ERROR (AM_SCF_CONTROL_NO,ERROR_AM_SCF_CONTROL);
return;
end;	/* ADJ_SCF_RANGE        */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AM_SCF_CONTROL_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
