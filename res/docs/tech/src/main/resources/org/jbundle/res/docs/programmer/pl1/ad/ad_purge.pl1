/****************************************************************
	Module: AD_PURGE
	Top Level Logic: AD_PURGE_LOGIC
	Date: 24-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AD_PURGE
	Top Level
****************************************************************/

%replace AD_PURGE_1 by 664;
AD_PURGE:
   procedure;
%replace AD_ACCT_NO by  24;
%replace AD_CHECKING_NO by  26;
%replace AD_GL_DIST_NO by 107;
%include "AD_PURGE.DD";
%include "AD_ACCT.DD";
%include "AD_CHECKING.DD";
%include "AD_GL_DIST.DD";

declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_PURGE_THRU_AD    bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		END_CHECK_AD_GL      bit (1);
declare		END_DELETE_AD_GL     bit (1);
   call INITIALIZE;
   call AD_PURGE_MAIN;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AD_PURGE_TOTAL = 0;
   AD_BALANCE = 0;
   AD_LAST_CHECK = 0;
   AD_LAST_SEQ = 0;
   AD_TRX_SEQ = 0;
   AD_CHECK_TYPE = "M";
   AD_SYS_NUMBER = "";
   AD_TRX_AMT_USD = 0;
   AD_DATE_RECONCILED = 0;
   AD_DIST_POSTED = 0;
   AD_DIST_POST = "N";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AD_PURGE_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (AD_PURGE_RECORD) );
   call OPEN_FILE (AD_ACCT_NO,"AD_ACCT",byteaddr(AD_ACCT_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_ACCT_NO,ERROR_CODE);
   call OPEN_FILE (AD_CHECKING_NO,"AD_CHECKING",byteaddr(AD_CHECKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_CHECKING_NO,ERROR_CODE);
   call OPEN_FILE (AD_GL_DIST_NO,"AD_GL_DIST",byteaddr(AD_GL_DIST_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_GL_DIST_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	AD_PURGE_MAIN
	Mainline logic
****************************************************************/

AD_PURGE_MAIN:
	procedure;

declare		ANSWER               character (1);
   call ENTER_DATA_A;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;


   /* CHECK_SURE - Are you sure? */

   call OUTPUT_LINE(23,10,"Are you sure?");
   call INPUT_DATA(23,24,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
   call CLEAR_TO_BOS(23);
   call DUMP_BUFFER;
   if ANSWER ^= "Y" then
      return;


   /* SET_FIRST - Set the record pointer to the first rec */

   AD_BANK_NO = AD_PURGE_ACCT;
   AD_TRX_DATE = 0;
   AD_TRX_TYPE = "";
   AD_TRX_NUMBER = 0;
   AD_TRX_SEQ = 0;
   call SET_POSITION (AD_CHECKING_NO,KEY_AREA_1,ERROR_CODE);
   END_PURGE_THRU_AD = NO;
   do while (END_PURGE_THRU_AD ^= YES);
      call PURGE_THRU_AD;
   end;

   /* SET_START_AD - Set the balance for all the purged trx */

   AD_BANK_NO = AD_BANK_NO;
   AD_TRX_TYPE = "S";
   AD_TRX_NUMBER = 0;
   AD_TRX_SEQ = 1;
   AD_TRX_DATE = AD_PURGE_DATE;
   AD_CHECK_TYPE = "M";
   AD_SYS_NUMBER = 0;
   AD_PAYEE = "";
   AD_TRX_AMOUNT = AD_PURGE_TOTAL;
   AD_TRX_AMT_USD = 0;
   AD_TRX_COMMENT = "";
   AD_DATE_RECONCILED = TODAYS_DATE();
   AD_MANUAL = "Y";


   /* WRITE_RECORD - Write the record */

   ERROR_CODE = KEY_ALREADY_EXISTS;
   do while(ERROR_CODE = KEY_ALREADY_EXISTS);
      call WRITE_RECORD (AD_CHECKING_NO,ERROR_CODE);
      if ERROR_CODE = KEY_ALREADY_EXISTS then
         AD_TRX_SEQ = AD_TRX_SEQ + 1;
   end;
return;
end;	/* AD_PURGE_MAIN        */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AD_ACCOUNT_NO = AD_PURGE_ACCT;
      call READ_KEYED (AD_ACCT_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =   3 to   3;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  2,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  2 then
   do;
   if SELECT =  1 then
      LOOP_INDEX =  1;
   if SELECT =  2 then
      LOOP_INDEX =  3;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AD_ACCOUNT_NO = AD_PURGE_ACCT;
      call READ_KEYED (AD_ACCT_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PURGE_THRU_AD
	Purge thru add transactions
****************************************************************/

PURGE_THRU_AD:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (AD_CHECKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AD_CHECKING_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AD_BANK_NO > AD_PURGE_ACCT) !
   (AD_TRX_DATE > AD_PURGE_DATE) then
      do;
      END_PURGE_THRU_AD = YES;
      return;
      end;

   /* CHECK_PURGE - Should this transaction be purged? */

   if AD_DATE_RECONCILED = 0 then
      return;

   AD_ALL_POSTED = "Y";

   /* SET_FIRST_3 - Set first */

   AD_DIST_BANK = AD_BANK_NO;
   AD_DIST_NUMBER = AD_TRX_NUMBER;
   AD_DIST_TYPE = AD_TRX_TYPE;
   AD_DIST_TRX_SEQ = AD_TRX_SEQ;
   AD_DIST_GL_ACCT = 0;
   call SET_POSITION (AD_GL_DIST_NO,KEY_AREA_1,ERROR_CODE);
   END_CHECK_AD_GL = NO;
   do while (END_CHECK_AD_GL ^= YES);
      call CHECK_AD_GL;
   end;
   if AD_ALL_POSTED ^= "Y" then
      return;

   AD_PURGE_TOTAL=floor((AD_PURGE_TOTAL + AD_TRX_AMOUNT) * 100 + 0.5) /100;


   /* DELETE_RECORD - Delete the record */

   call DELETE_RECORD (AD_CHECKING_NO,ERROR_CODE);
   END_DELETE_AD_GL = NO;
   do while (END_DELETE_AD_GL ^= YES);
      call DELETE_AD_GL;
   end;

   /* SET_FIRST_2 - Set the file pointer to the first key */

   call SET_POSITION (AD_CHECKING_NO,KEY_AREA_1,ERROR_CODE);
return;
end;	/* PURGE_THRU_AD        */

/****************************************************************
	CHECK_AD_GL
	Check the A/D G/L detail for all posted
****************************************************************/

CHECK_AD_GL:
	procedure;


   /* READ_NEXT_3 - Read next */

   call READ_NEXT (AD_GL_DIST_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AD_GL_DIST_NO,ERROR_CODE);

   /* CHECK_END_3 - Check for end */

   if (ERROR_CODE = END_OF_FILE) !
   (AD_DIST_BANK > AD_BANK_NO) !
   (AD_DIST_NUMBER > AD_TRX_NUMBER) !
   (AD_DIST_TYPE > AD_TRX_TYPE) !
   (AD_DIST_TRX_SEQ > AD_TRX_SEQ) then
      do;
      END_CHECK_AD_GL = YES;
      return;
      end;

   /* CHECK_ALL_AD - Posted? */

   if AD_DIST_POST = "N" then
      AD_ALL_POSTED = "N";

return;
end;	/* CHECK_AD_GL          */

/****************************************************************
	DELETE_AD_GL
	Delete the A/D G/L detail
****************************************************************/

DELETE_AD_GL:
	procedure;


   /* SET_FIRST_3 - Set first */

   AD_DIST_BANK = AD_BANK_NO;
   AD_DIST_NUMBER = AD_TRX_NUMBER;
   AD_DIST_TYPE = AD_TRX_TYPE;
   AD_DIST_TRX_SEQ = AD_TRX_SEQ;
   AD_DIST_GL_ACCT = 0;
   call SET_POSITION (AD_GL_DIST_NO,KEY_AREA_1,ERROR_CODE);

   /* READ_NEXT_3 - Read next */

   call READ_NEXT (AD_GL_DIST_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AD_GL_DIST_NO,ERROR_CODE);

   /* CHECK_END_3 - Check for end */

   if (ERROR_CODE = END_OF_FILE) !
   (AD_DIST_BANK > AD_BANK_NO) !
   (AD_DIST_NUMBER > AD_TRX_NUMBER) !
   (AD_DIST_TYPE > AD_TRX_TYPE) !
   (AD_DIST_TRX_SEQ > AD_TRX_SEQ) then
      do;
      END_DELETE_AD_GL = YES;
      return;
      end;

   /* DELETE_RECORD_3 - Delete the record */

   call DELETE_RECORD (AD_GL_DIST_NO,ERROR_CODE);
return;
end;	/* DELETE_AD_GL         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AD_ACCT_NO);
   call CLOSE_FILE (AD_CHECKING_NO);
   call CLOSE_FILE (AD_GL_DIST_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
