/****************************************************************
	Module: BK_LAND_DETAIL
	Top Level Logic: TABLE_DIS_MAINT
	Date:  5-Dec-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_LAND_DETAIL
	Display the header and maintain a table
****************************************************************/

%replace BK_LAND_DETAIL_1 by 320;
BK_LAND_DETAIL:
   procedure(
      BK_TOUR_HDR_RECORD,
      BK_OPT_ALT_RECORD);
%replace BK_DET_LAND_NO by  68;
%replace BK_LAND_NO by  54;
%replace BK_TRANS_NO by  64;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_OPT_ALT_NO by  62;
%include "BK_DET_LAND.DD";
%include "BK_LAND.DD";
%include "BK_TRANS.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_OPT_ALT.DD";

declare		ERROR_CODE           fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		LDET_DAY_ARRAY( 7) fixed binary (15);
declare		LDET_SEQ_ARRAY( 7) fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
   call INITIALIZE;
   call TABLE_DM_IO;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   LDET_MOD_CODE = "A";
   LDET_INV = "N";
   BK_INV_MOD = -1;
   LDET_VARIES_CODE = "";
   LDET_VARIES_QTY = 0;
   LDET_VARIES_COST = 0;
   LDET_MANUAL = "";
   LDET_MODULE = "";
   LDET_ACK_DAYS = 0;
   LDET_SEND_TO = "Y";
   LDET_STATUS = "OK";
   LDET_SIC_PMC = "";
   LDET_PMC = 0;
   LDET_SIC = 0;
   LAND_TAX = 0;
   LAND_SVC_CHG = 0;
   LAND_COMM = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_LAND_DETAIL_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (BK_DET_LAND_NO,"BK_DET_LAND",byteaddr(BK_DET_LAND_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_DET_LAND_NO,ERROR_CODE);
   call OPEN_FILE (BK_LAND_NO,"BK_LAND",byteaddr(BK_LAND_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_LAND_NO,ERROR_CODE);
   call OPEN_FILE (BK_TRANS_NO,"BK_TRANS",byteaddr(BK_TRANS_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TRANS_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	TABLE_DM_IO
	Table display I/O
****************************************************************/

TABLE_DM_IO:
	procedure;

   call DISPLAY_DATA_A;

   /* OTHER_LOGIC - Any other logic */

   call TABLE_MAINT;
return;
end;	/* TABLE_DM_IO          */

/****************************************************************
	DISPLAY_DATA_A
	Display the items in screen group A
****************************************************************/

DISPLAY_DATA_A:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   8;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_A       */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		LDET_MOD_SAVE        fixed binary (15);
declare		LDET_TOUR_CODE_SAVE  character (        4);
declare		LDET_ALT_SEQ_SAVE    fixed binary (15);
declare		LDET_ANSW_SEQ_SAVE   fixed binary (15);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		BK_DET_LAND_ERROR    fixed binary (15);
declare		LDET_DAY_SAVE        fixed binary (15);
declare		LDET_SEQ_SAVE        fixed binary (15);
declare		ANSWER               character (1);
LDET_MOD = -1;
LDET_MOD_SAVE = LDET_MOD;
LDET_TOUR_CODE = HDR_TOUR_CODE;
LDET_TOUR_CODE_SAVE = LDET_TOUR_CODE;
LDET_ALT_SEQ = ALT_SEQ;
LDET_ALT_SEQ_SAVE = LDET_ALT_SEQ;
LDET_ANSW_SEQ = ALT_ANSW_SEQ;
LDET_ANSW_SEQ_SAVE = LDET_ANSW_SEQ;
LDET_DAY = 0;
LDET_SEQ = 0;
call SET_POSITION (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (LDET_MOD > LDET_MOD_SAVE) !
   (LDET_TOUR_CODE > LDET_TOUR_CODE_SAVE) !
   (LDET_ALT_SEQ > LDET_ALT_SEQ_SAVE) !
   (LDET_ANSW_SEQ > LDET_ANSW_SEQ_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to  7;
      LDET_DAY_ARRAY(RECORD_NUMBER) = 0;
      LDET_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_DET_LAND_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_DET_LAND_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <=  7) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 2 - 2);
         do LOOP_INDEX =   9 to  20;
            if LOOP_INDEX =  11 then
               do;

               /* SET_RETURN_CODE - Set return code to 1 */

               RETURN_CODE = 1;

               end;
            if LOOP_INDEX =  14 then
               do;

               /* CHECK_TOUR - Is this land detail? */

               if LDET_TORT = "T" then
                  LOOP_INDEX = LOOP_INDEX + 1;

               end;
            if LOOP_INDEX =  15 then
               do;

               /* CHECK_TRANS - Is this transportation detail? */

               if LDET_TORT ^= "T" then
                  LOOP_INDEX = LOOP_INDEX + 1;

               end;
            call OUTPUT_FIELD (LOOP_INDEX);
            if LOOP_INDEX =  11 then
               do;

               /* SET_LDET_FIELDS - Set up the LDET fields */


                  /* READ_LAND_TRANS - Read land or transportation record */

                  LAND_CODE = LDET_TOUR_NO;
                  call READ_KEYED (BK_LAND_NO,KEY_AREA_1,ERROR_CODE);
                  if ERROR_CODE = RECORD_NOT_FOUND then
                     do;
                     TRANS_NO = LDET_TOUR_NO;
                     call READ_KEYED (BK_TRANS_NO,KEY_AREA_1,ERROR_CODE);
                     if ERROR_CODE = RECORD_NOT_FOUND then
                        do;
                        if RETURN_CODE = 0 then	/*INPUT*/
                           do;
                           call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
                           call PRESS_RETURN;
                           call CLEAR_MESSAGE;
                           LOOP_INDEX = LOOP_INDEX - 1;
                           end;
                        else
                           do;
                           LAND_DESC_1 = "** Record not found **";
                           LAND_DESC_2 = "";
                           end;
                        end;
                     else
                        do;
                        LAND_DESC_1 = TRANS_FROM !! " to " !! TRANS_TO;
                        LAND_DESC_2 = "";
                        LAND_TYPE = "~";
                        LAND_VENDOR_NO = TRANS_VEN_NO;
                        end;
                     end;


                  /* MOVE_LDET_FLDS - Move the appropriate LDET fields */

                  LDET_EXCHANGE = 0;
                  LDET_TOUR_PP_COST = 0;
                  LDET_TOUR_COST = 0;
                  LDET_MODULE = "";
                  LDET_LINKED_TO = 0;
                  LDET_VENDOR = LAND_VENDOR_NO;
                  LDET_TORT = "L";
                  if LAND_TYPE = "I" then
                     LDET_TORT = "I";
                  if LAND_TYPE = "~" then
                     LDET_TORT = "T";
                  LDET_SIC_PMC = "";

               end;
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         LDET_DAY_ARRAY(RECORD_NUMBER) = LDET_DAY;
         LDET_SEQ_ARRAY(RECORD_NUMBER) = LDET_SEQ;
         call READ_NEXT (BK_DET_LAND_NO,KEY_AREA_1,BK_DET_LAND_ERROR);
         if (LDET_MOD > LDET_MOD_SAVE) !
         (LDET_TOUR_CODE > LDET_TOUR_CODE_SAVE) !
         (LDET_ALT_SEQ > LDET_ALT_SEQ_SAVE) !
         (LDET_ANSW_SEQ > LDET_ANSW_SEQ_SAVE) then
            BK_DET_LAND_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      LDET_DAY_SAVE = LDET_DAY_ARRAY( 7);
      LDET_SEQ_SAVE = LDET_SEQ_ARRAY( 7);
      LDET_MOD = LDET_MOD_SAVE;
      LDET_TOUR_CODE = LDET_TOUR_CODE_SAVE;
      LDET_ALT_SEQ = LDET_ALT_SEQ_SAVE;
      LDET_ANSW_SEQ = LDET_ANSW_SEQ_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if BK_DET_LAND_ERROR ^= END_OF_FILE then
            do;
            LDET_DAY = LDET_DAY_SAVE;
            LDET_SEQ = LDET_SEQ_SAVE;
            call SET_POSITION (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if LDET_DAY_ARRAY( 7) = 0 then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      LDET_MOD = LDET_MOD_SAVE;
      LDET_TOUR_CODE = LDET_TOUR_CODE_SAVE;
      LDET_ALT_SEQ = LDET_ALT_SEQ_SAVE;
      LDET_ANSW_SEQ = LDET_ANSW_SEQ_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <=  7) );
         call BK_DET_LAND_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (LDET_DAY_ARRAY( 7) = 0) then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to  7;
      call SET_ROW_OFFSET (RECORD_NUMBER * 2 - 2);
      if LDET_DAY_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX = 9 to  20;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  9,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  8 then
   do;
   RECORD_NUMBER = SELECT;
   call BK_DET_LAND_LINE;
   call SET_ROW_OFFSET (0);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	BK_DET_LAND_LINE
	Change one line in the secondary file
****************************************************************/

BK_DET_LAND_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
call SET_ROW_OFFSET (RECORD_NUMBER * 2 - 2);
REWRITE = NO;
if LDET_DAY_ARRAY(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   LDET_DAY = LDET_DAY_ARRAY(RECORD_NUMBER);
   LDET_SEQ = LDET_SEQ_ARRAY(RECORD_NUMBER);
   call READ_KEYED (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
   do LOOP_INDEX =  9 to  20;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   end;
else
   do;
   LDET_DAY = 0;
   LDET_SEQ = 1;
   LDET_MOD_CODE = "A";
   LDET_INV = "N";
   BK_INV_MOD = -1;
   LDET_EXCHANGE = 0;
   LDET_TOUR_PP_COST = 0;
   LDET_VARIES_CODE = "";
   LDET_VARIES_QTY = 0;
   LDET_VARIES_COST = 0;
   LDET_MANUAL = "";
   LDET_TOUR_COST = 0;
   LDET_MODULE = "";
   LDET_LINKED_TO = 0;
   LDET_ACK_DAYS = 0;
   LDET_SEND_TO = "Y";
   LDET_STATUS = "OK";
   LDET_VENDOR = "";
   LDET_TORT = "";
   LDET_VOUCHER = 0;
   LDET_TOUR_NO = "";
   LDET_SIC_PMC = "";
   LDET_CUTOFF = HDR_DEF_CUTOFF;
   LDET_PMC = 0;
   LDET_SIC = 0;
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =   9 to   9;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   if LDET_DAY = 0 then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =  10 to  20;
         if LOOP_INDEX =  12 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =  13 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =  14 then
            call DISPLAY_MSG_NO ( 44);
         if LOOP_INDEX =  14 then
            do;

            /* CHECK_TOUR - Is this land detail? */

            if LDET_TORT = "T" then
               LOOP_INDEX = LOOP_INDEX + 1;

            end;
         if LOOP_INDEX =  15 then
            do;

            /* CHECK_TRANS - Is this transportation detail? */

            if LDET_TORT ^= "T" then
               LOOP_INDEX = LOOP_INDEX + 1;

            end;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
         if LOOP_INDEX =  11 then
            do;

            /* SET_LDET_FIELDS - Set up the LDET fields */


               /* READ_LAND_TRANS - Read land or transportation record */

               LAND_CODE = LDET_TOUR_NO;
               call READ_KEYED (BK_LAND_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE = RECORD_NOT_FOUND then
                  do;
                  TRANS_NO = LDET_TOUR_NO;
                  call READ_KEYED (BK_TRANS_NO,KEY_AREA_1,ERROR_CODE);
                  if ERROR_CODE = RECORD_NOT_FOUND then
                     do;
                     if RETURN_CODE = 0 then	/*INPUT*/
                        do;
                        call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
                        call PRESS_RETURN;
                        call CLEAR_MESSAGE;
                        LOOP_INDEX = LOOP_INDEX - 1;
                        end;
                     else
                        do;
                        LAND_DESC_1 = "** Record not found **";
                        LAND_DESC_2 = "";
                        end;
                     end;
                  else
                     do;
                     LAND_DESC_1 = TRANS_FROM !! " to " !! TRANS_TO;
                     LAND_DESC_2 = "";
                     LAND_TYPE = "~";
                     LAND_VENDOR_NO = TRANS_VEN_NO;
                     end;
                  end;


               /* MOVE_LDET_FLDS - Move the appropriate LDET fields */

               LDET_EXCHANGE = 0;
               LDET_TOUR_PP_COST = 0;
               LDET_TOUR_COST = 0;
               LDET_MODULE = "";
               LDET_LINKED_TO = 0;
               LDET_VENDOR = LAND_VENDOR_NO;
               LDET_TORT = "L";
               if LAND_TYPE = "I" then
                  LDET_TORT = "I";
               if LAND_TYPE = "~" then
                  LDET_TORT = "T";
               LDET_SIC_PMC = "";

            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      LDET_DAY = LDET_DAY_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (BK_DET_LAND_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      LDET_DAY = 0;
      end;
   else
      do;
      if REWRITE = NO then
         call WRITE_RECORD (BK_DET_LAND_NO,ERROR_CODE);
      else
         call UPDATE_RECORD (BK_DET_LAND_NO,ERROR_CODE);
      end;
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      LDET_DAY_ARRAY(RECORD_NUMBER) = LDET_DAY;
      LDET_SEQ_ARRAY(RECORD_NUMBER) = LDET_SEQ;
      end;
end;
return;
end;	/* BK_DET_LAND_LINE     */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (BK_DET_LAND_NO);
   call CLOSE_FILE (BK_LAND_NO);
   call CLOSE_FILE (BK_TRANS_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
