/****************************************************************
	Module: GL_COMP_BUDGET
	Top Level Logic: TABLE_FILE_MAINT
	Date: 24-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	GL_COMP_BUDGET
	Top Level for table display/maintenance
****************************************************************/

%replace GL_COMP_BUDGET_1 by 606;
GL_COMP_BUDGET:
   procedure;
%replace GL_BUDGET_C_NO by 103;
%replace GL_CHART_NO by  16;
%include "GL_BUDGET_C.DD";
%include "GL_CHART.DD";

declare		END_TABLE_IO         bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		GL_BUD_DATE_ARRAY(18) fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
   call INITIALIZE;
   END_TABLE_IO = NO;
   do while (END_TABLE_IO ^= YES);
      call TABLE_IO;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   GL_BUD_CODE = "B";
   TYPICAL_BAL = "D";
   SECTION_SUB = "N";
   COUNTER_BAL_AC = 0;
   GL_INCOME_EXP = "N";
   DISCONTINUED_ON = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (GL_COMP_BUDGET_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (GL_BUDGET_C_NO,"GL_BUDGET_C",byteaddr(GL_BUDGET_C_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_BUDGET_C_NO,ERROR_CODE);
   call OPEN_FILE (GL_CHART_NO,"GL_CHART",byteaddr(GL_CHART_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_CHART_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	TABLE_IO
	Table file with header info maint.
****************************************************************/

TABLE_IO:
	procedure;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (GL_COMP_BUDGET_1);
   NOT_FIRST_TIME = YES;
   call INPUT_HDR_INFO;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_ERR - Return if error/end typed */

   if RETURN_CODE = END_TYPED then
      do;
      END_TABLE_IO = YES;
      return;
      end;

   /* OTHER_LOGIC - Any other logic */


   /* BEFORE_LOGIC - Before logic */

   call TABLE_MAINT;

   /* AFTER_LOGIC - Other Logic */

return;
end;	/* TABLE_IO             */

/****************************************************************
	INPUT_HDR_INFO
	Input the table header information
****************************************************************/

INPUT_HDR_INFO:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      GL_ACCOUNT_NO = GL_BUD_ACCT;
      call READ_KEYED (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =   3 to   3;
   if LOOP_INDEX =   3 then
      call DISPLAY_MSG_NO ( 65);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_HDR_INFO       */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		GL_BUD_CODE_SAVE     character (        1);
declare		GL_BUD_ACCT_SAVE     fixed binary (31);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		GL_BUDGET_C_ERROR    fixed binary (15);
declare		GL_BUD_DATE_SAVE     fixed binary (15);
declare		ANSWER               character (1);
GL_BUD_CODE_SAVE = GL_BUD_CODE;
GL_BUD_ACCT_SAVE = GL_BUD_ACCT;
GL_BUD_DATE = 0;
call SET_POSITION (GL_BUDGET_C_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (GL_BUDGET_C_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (GL_BUD_CODE > GL_BUD_CODE_SAVE) !
   (GL_BUD_ACCT > GL_BUD_ACCT_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 18;
      GL_BUD_DATE_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      GL_BUDGET_C_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (GL_BUDGET_C_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 18) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =   4 to   5;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         GL_BUD_DATE_ARRAY(RECORD_NUMBER) = GL_BUD_DATE;
         call READ_NEXT (GL_BUDGET_C_NO,KEY_AREA_1,GL_BUDGET_C_ERROR);
         if (GL_BUD_CODE > GL_BUD_CODE_SAVE) !
         (GL_BUD_ACCT > GL_BUD_ACCT_SAVE) then
            GL_BUDGET_C_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      GL_BUD_DATE_SAVE = GL_BUD_DATE_ARRAY(18);
      GL_BUD_CODE = GL_BUD_CODE_SAVE;
      GL_BUD_ACCT = GL_BUD_ACCT_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if GL_BUDGET_C_ERROR ^= END_OF_FILE then
            do;
            GL_BUD_DATE = GL_BUD_DATE_SAVE;
            call SET_POSITION (GL_BUDGET_C_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (GL_BUDGET_C_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (GL_BUDGET_C_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if GL_BUD_DATE_ARRAY(18) = 0 then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      GL_BUD_CODE = GL_BUD_CODE_SAVE;
      GL_BUD_ACCT = GL_BUD_ACCT_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <= 18) );
         call GL_BUDGET_C_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (GL_BUD_DATE_ARRAY(18) = 0) then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 18;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if GL_BUD_DATE_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX = 4 to   5;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 98,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 18 then
   do;
   RECORD_NUMBER = SELECT;
   call GL_BUDGET_C_LINE;
   call SET_ROW_OFFSET (0);
   end;
if SELECT >= 97 then if SELECT <= 98 then
   do;
   if SELECT = 97 then
      LOOP_INDEX =  1;
   if SELECT = 98 then
      LOOP_INDEX =  3;
   if LOOP_INDEX =   3 then
      call DISPLAY_MSG_NO ( 65);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      GL_ACCOUNT_NO = GL_BUD_ACCT;
      call READ_KEYED (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	GL_BUDGET_C_LINE
	Change one line in the secondary file
****************************************************************/

GL_BUDGET_C_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if GL_BUD_DATE_ARRAY(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   GL_BUD_DATE = GL_BUD_DATE_ARRAY(RECORD_NUMBER);
   call READ_KEYED (GL_BUDGET_C_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      return;
      end;
   do LOOP_INDEX =  4 to   5;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   end;
else
   do;
   GL_BUD_DATE = 0;
   GL_BUD_AMOUNT = 0;
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =   4 to   4;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   if GL_BUD_DATE = 0 then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =   5 to   5;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      GL_BUD_DATE = GL_BUD_DATE_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (GL_BUDGET_C_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      GL_BUD_DATE = 0;
      end;
   else
      do;
      if REWRITE = NO then
         call WRITE_RECORD (GL_BUDGET_C_NO,ERROR_CODE);
      else
         call UPDATE_RECORD (GL_BUDGET_C_NO,ERROR_CODE);
      end;
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      GL_BUD_DATE_ARRAY(RECORD_NUMBER) = GL_BUD_DATE;
      end;
end;
return;
end;	/* GL_BUDGET_C_LINE     */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (GL_BUDGET_C_NO);
   call CLOSE_FILE (GL_CHART_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
