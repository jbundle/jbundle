/****************************************************************
	Module: PR_TAX_MAINT
	Top Level Logic: TABLE_FILE_MAINT
	Date:  1-Jan-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	PR_TAX_MAINT
	Top Level for table display/maintenance
****************************************************************/

%replace PR_TAX_MAINT_1 by  11;
PR_TAX_MAINT:
   procedure;
%replace TAX_RATES_NO by   2;
%include "TAX_RATES.DD";

declare		END_TABLE_IO         bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		CUT_OFF_AMOUNT_ARRAY(15) float binary (21);
declare		END_CHANGE_ITEM      bit (1);
   call INITIALIZE;
   END_TABLE_IO = NO;
   do while (END_TABLE_IO ^= YES);
      call TABLE_IO;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */


   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (PR_TAX_MAINT_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (TAX_RATES_NO,"TAX_RATES",byteaddr(TAX_RATES_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TAX_RATES_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	TABLE_IO
	Table file with header info maint.
****************************************************************/

TABLE_IO:
	procedure;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (PR_TAX_MAINT_1);
   NOT_FIRST_TIME = YES;
   call INPUT_HDR_INFO;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_ERR - Return if error/end typed */

   if RETURN_CODE = END_TYPED then
      do;
      END_TABLE_IO = YES;
      return;
      end;

   /* OTHER_LOGIC - Any other logic */


   /* BEFORE_LOGIC - Before logic */

   call TABLE_MAINT;

   /* AFTER_LOGIC - Other Logic */

return;
end;	/* TABLE_IO             */

/****************************************************************
	INPUT_HDR_INFO
	Input the table header information
****************************************************************/

INPUT_HDR_INFO:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   2;
   if LOOP_INDEX =   1 then
      call DISPLAY_MSG_NO ( 11);
   if LOOP_INDEX =   2 then
      call DISPLAY_MSG_NO (  6);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_HDR_INFO       */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		TAX_CODE_SAVE        character (        2);
declare		MARITAL_STATUS_SAVE  character (        1);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		TAX_RATES_ERROR      fixed binary (15);
declare		CUT_OFF_AMOUNT_SAVE  float binary (21);
declare		ANSWER               character (1);
TAX_CODE_SAVE = TAX_CODE;
MARITAL_STATUS_SAVE = MARITAL_STATUS;
CUT_OFF_AMOUNT = 0;
call SET_POSITION (TAX_RATES_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (TAX_RATES_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (TAX_CODE > TAX_CODE_SAVE) !
   (MARITAL_STATUS > MARITAL_STATUS_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 15;
      CUT_OFF_AMOUNT_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      TAX_RATES_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (TAX_RATES_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 15) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =   3 to   4;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         CUT_OFF_AMOUNT_ARRAY(RECORD_NUMBER) = CUT_OFF_AMOUNT;
         call READ_NEXT (TAX_RATES_NO,KEY_AREA_1,TAX_RATES_ERROR);
         if (TAX_CODE > TAX_CODE_SAVE) !
         (MARITAL_STATUS > MARITAL_STATUS_SAVE) then
            TAX_RATES_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      CUT_OFF_AMOUNT_SAVE = CUT_OFF_AMOUNT_ARRAY(15);
      TAX_CODE = TAX_CODE_SAVE;
      MARITAL_STATUS = MARITAL_STATUS_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if TAX_RATES_ERROR ^= END_OF_FILE then
            do;
            CUT_OFF_AMOUNT = CUT_OFF_AMOUNT_SAVE;
            call SET_POSITION (TAX_RATES_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (TAX_RATES_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (TAX_RATES_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if CUT_OFF_AMOUNT_ARRAY(15) = 0 then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      TAX_CODE = TAX_CODE_SAVE;
      MARITAL_STATUS = MARITAL_STATUS_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <= 15) );
         call TAX_RATES_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (CUT_OFF_AMOUNT_ARRAY(15) = 0) then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 15;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if CUT_OFF_AMOUNT_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX = 3 to   4;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 96,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 15 then
   do;
   RECORD_NUMBER = SELECT;
   call TAX_RATES_LINE;
   call SET_ROW_OFFSET (0);
   end;
if SELECT >= 95 then if SELECT <= 96 then
   do;

      LOOP_INDEX = SELECT + -94;
   if LOOP_INDEX =   1 then
      call DISPLAY_MSG_NO ( 11);
   if LOOP_INDEX =   2 then
      call DISPLAY_MSG_NO (  6);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	TAX_RATES_LINE
	Change one line in the secondary file
****************************************************************/

TAX_RATES_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if CUT_OFF_AMOUNT_ARRAY(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   CUT_OFF_AMOUNT = CUT_OFF_AMOUNT_ARRAY(RECORD_NUMBER);
   call READ_KEYED (TAX_RATES_NO,KEY_AREA_1,ERROR_CODE);
   do LOOP_INDEX =  3 to   4;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   end;
else
   do;
   CUT_OFF_AMOUNT = 0;
   TAX_RATE = 0;
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =   3 to   3;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   if CUT_OFF_AMOUNT = 0 then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =   4 to   4;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      CUT_OFF_AMOUNT = CUT_OFF_AMOUNT_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (TAX_RATES_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      CUT_OFF_AMOUNT = 0;
      end;
   else
      do;
      if REWRITE = NO then
         call WRITE_RECORD (TAX_RATES_NO,ERROR_CODE);
      else
         call UPDATE_RECORD (TAX_RATES_NO,ERROR_CODE);
      end;
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      CUT_OFF_AMOUNT_ARRAY(RECORD_NUMBER) = CUT_OFF_AMOUNT;
      end;
end;
return;
end;	/* TAX_RATES_LINE       */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (TAX_RATES_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
