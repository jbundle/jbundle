/****************************************************************
	Module: AR_CUTOFF
	Top Level Logic: REPORT_LOGIC
	Date: 16-Aug-95
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AR_CUTOFF
	Standard report logic
****************************************************************/

%replace AR_CUTOFF_1 by 863;
%replace AR_CUTOFF_2 by 864;
AR_CUTOFF:
   procedure;
%replace AR_OPEN_NO by  43;
%replace BK_BOOKING_NO by   9;
%include "AR_CUTOFF.DD";
%include "AR_OPEN.DD";
%include "BK_BOOKING.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		FIRST_TIME           bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AR_CUTOFF_DATE = TODAYS_DATE();
   AR_CUT_DATE = TODAYS_DATE();
   AR_CUT_TIME = CURRENT_TIME();
   AR_CUT_USER = USER_NAME();
   AR_CUT_PAGE = 1;
   AR_CUT_TOTAL = 0;
   AR_CUT_COUNT = 0;
   AR_TRX_CUTOFF = TODAYS_DATE();
   AR_ACCT_DR = 0;
   AR_ACCT_DEP = 0;
   AR_POSTED = 0;
   AR_ACTION = 0;
   AR_DEPARTURE = 0;
   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AR_CUTOFF_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (AR_CUTOFF_RECORD) );
   call OPEN_FILE (AR_OPEN_NO,"AR_OPEN",byteaddr(AR_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AR_OPEN_NO,ERROR_CODE);
   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (AR_CUTOFF_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   AR_BOOKING_NO = 0;
   AR_SEQ_NO = 0;
   call SET_POSITION (AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =   6 to   7;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   4;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  4,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  4 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   4;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

AR_CUT_PAGE = AR_CUT_PAGE + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AR_OPEN_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CHECK_CUT_SELECT - A/R cutoff selection */

   if AR_DOC_TYPE ^= "P" then if AR_DOC_TYPE ^= "M" then
      do;
      if AR_INC_DC = "Y" then if (AR_DOC_TYPE = "C") ! (AR_DOC_TYPE = "D") then
         goto DONT_SKIP;
      if AR_INC_REF = "Y" then if AR_DOC_TYPE = "R" then
         goto DONT_SKIP;
      return;
      end;
   DONT_SKIP:

   /* READ_SECOND_DIS - Read Second - Display line version */

   BK_MODIFICATION = 0;
   BOOKING_NO = AR_BOOKING_NO;
   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      end;
   if AR_DEPARTURE = 0 then if ERROR_CODE = NORMAL_RETURN then
      AR_DEPARTURE = BK_DEPARTURE;
   if AR_DEPARTURE = 0 then
      return;
   if AR_TRX_DATE > AR_TRX_CUTOFF then
      return;
   if AR_DEPARTURE <= AR_CUTOFF_DATE then
      return;


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */


   /* SET_TRX_DESC - Set the transaction description for A/R */

   do case (index("IPCDRAM",AR_DOC_TYPE) + 1);
      AR_TRX_DESC = "";
      AR_TRX_DESC = "Invoice";
      AR_TRX_DESC = "Payment";
      AR_TRX_DESC = "Cr memo";
      AR_TRX_DESC = "Dr memo";
      AR_TRX_DESC = "Refund";
      AR_TRX_DESC = "Adjment";
      AR_TRX_DESC = "MCO rec";
   end;
   otherwise
      AR_TRX_DESC = "";

   do LOOP_INDEX =   5 to   5;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_TOTALS - Add to the total fields */

   AR_CUT_TOTAL = floor((AR_CUT_TOTAL + AR_AMOUNT) * 100 + 0.5) / 100;
   AR_CUT_COUNT = AR_CUT_COUNT + 1;

   /* OTHER_LOGIC - Any other logic */

return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (AR_OPEN_NO);
   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
