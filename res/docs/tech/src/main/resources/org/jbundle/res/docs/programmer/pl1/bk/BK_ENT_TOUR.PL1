/****************************************************************
	Module: BK_ENT_TOUR
	Top Level Logic: BK_TOUR_LOGIC
	Date:  4-Dec-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_ENT_TOUR
	Main tour entry screen logic
****************************************************************/

%replace BK_ENT_TOUR_1 by 236;
%replace BK_ENT_TOUR_2 by 324;
BK_ENT_TOUR:
   procedure(
      BK_ENT_HDR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_TOUR_RECORD,
      BK_BOOKING_RECORD,
      BK_LINE_RECORD,
      BK_INV_DET_RECORD,
      BK_CONTROL_RECORD,
      BK_PASSENGERS_RECORD);
%replace BK_TOUR_HDR_NO by  58;
%replace BK_TOUR_NO by  34;
%replace BK_BOOKING_NO by   9;
%replace BK_LINE_NO by  51;
%replace BK_INV_DET_NO by  61;
%replace BK_CONTROL_NO by  47;
%replace BK_PASSENGERS_NO by  49;
%include "BK_ENT_TOUR.DD";
%include "BK_ENT_HDR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_TOUR.DD";
%include "BK_BOOKING.DD";
%include "BK_LINE.DD";
%include "BK_INV_DET.DD";
%include "BK_CONTROL.DD";
%include "BK_PASSENGERS.DD";

declare		ERROR_CODE           fixed binary (15);
declare		END_MAIN_TOUR        bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);

   /* CHECK_BOOKING - Is this a booking-in-progress? */

   if BOOKING_NO = 0 then
      return;


   /* INIT_FILE_VARS - Initialize the file variables */


   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_ENT_TOUR_RECORD) );

   /* CHECK_DISPATCH - Check to see which tour entry to use */

   if BK_TOUR_NUM = 0 then
      do;

      /* CLEAR_TOUR_INFO - Clear the tour info */

      BK_TOUR_NUM = 0;
      BK_DEPARTURE = 0;
      BK_TOUR_CODE = "";
      TOUR_NO = 0;
      TOUR_CODE = "";
      HDR_TOUR_CODE = "";

      TOUR_TYPE = "";

      end;

   TOUR_SELECT = index("GUMF",TOUR_TYPE);

   if TOUR_SELECT = 0 then
      do;
      END_MAIN_TOUR = NO;
      do while (END_MAIN_TOUR ^= YES);
         call MAIN_TOUR;
      end;
      end;
   else
      do;
      call DISPATCH;
      end;

   call END_PROGRAM;
return;

/****************************************************************
	MAIN_TOUR
	Mainline code for tour entry
****************************************************************/

MAIN_TOUR:
	procedure;


   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_ENT_TOUR_1);
   call ENTER_DATA_A;

   /* RETURN_IF_END - Return if end typed */

   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_MAIN_TOUR = YES;
      return;
      end;


   /* SET_TOUR_HDR - Set the tour header up */

   declare (DAY,MONTH,YEAR) fixed binary;
   declare		LOOP		fixed binary;
   declare		FIRST_NUMBER	fixed binary;
   declare		FIRST_SPACE	fixed binary;
   declare		TEMP_DATE	character(6)varying;

   FIRST_NUMBER = 0;
   FIRST_SPACE = 10;

   call CONVERT_TO_UPPER(BK_TOUR_ENTRY);

   do LOOP = 1 to 9;
      if (substr(BK_TOUR_ENTRY,LOOP,1) >= "0") &
         (substr(BK_TOUR_ENTRY,LOOP,1) <= "9") &
         (FIRST_NUMBER = 0) then
            FIRST_NUMBER = LOOP;
      if (substr(BK_TOUR_ENTRY,LOOP,1) = " ") &
         (FIRST_SPACE = 10) then
            do;
            FIRST_SPACE = LOOP;
            LOOP = 11;
            end;
   end;

   if (FIRST_SPACE < 3) !
   (FIRST_NUMBER > 5) then
      return;

   if FIRST_NUMBER = 0 then
      do;
      HDR_TOUR_CODE = substr(BK_TOUR_ENTRY,1,FIRST_SPACE - 1);
      BK_DEPARTURE = 0;
      end;
   else
      do;
      HDR_TOUR_CODE = substr(BK_TOUR_ENTRY,1,FIRST_NUMBER - 1);
      TEMP_DATE = substr(BK_TOUR_ENTRY,FIRST_NUMBER,4);
      TEMP_DATE = TEMP_DATE !! substr(SET_DATE(TODAYS_DATE()),8,2);
      if substr(BK_TOUR_ENTRY,FIRST_NUMBER+4,1) ^= " " then
         substr(TEMP_DATE,6,1) = substr(BK_TOUR_ENTRY,FIRST_NUMBER+4,1);
      BK_DEPARTURE = GET_DATE(TEMP_DATE);
      if TODAYS_DATE() > BK_DEPARTURE then
         do;
         call DAY_TO_DMY(BK_DEPARTURE,DAY,MONTH,YEAR);
         YEAR = YEAR + 1;
/* Y2K FIX */
	if TODAYS_DATE() - 365 > BK_DEPARTURE then
		YEAR = YEAR + 9;
         call DMY_TO_DAY(BK_DEPARTURE,DAY,MONTH,YEAR);
         end;
      end;

   BK_TOUR_CODE = HDR_TOUR_CODE;


   /* GET_TOUR_HDR - Get the tour header */

   ERROR_CODE = NORMAL_RETURN;

   HDR_TOUR_CODE = BK_TOUR_CODE;
   HDR_END_ON = BK_DEPARTURE;
   if HDR_END_ON = 0 then
      HDR_END_ON = TODAYS_DATE();
   call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE ^= END_OF_FILE then
      call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

   if BK_TOUR_CODE ^= HDR_TOUR_CODE then
      ERROR_CODE = END_OF_FILE;
   if BK_DEPARTURE ^= 0 then if BK_DEPARTURE < HDR_START_ON then
      ERROR_CODE = END_OF_FILE;


   /* CK_HDR_FOUND - Warning if header not found */

   if ERROR_CODE ^= NORMAL_RETURN then
      do;
      call DISPLAY_MESSAGE ("<BEL>Warning -- Couldn't find Tour header"c);
      call PRESS_RETURN;
      end;


   /* TOUR_FOUND - Was the tour code found? */

   if ERROR_CODE = NORMAL_RETURN then
      do;

      /* DIS_TOUR_SCREEN - Dispatch to the correct tour screen */


         /* SET_SELECT - Set the select to the right dispatch */

         TOUR_SELECT = index("GUMF",HDR_TOUR_TYPE);

         call DISPATCH;

         /* RETURN - Normal Return */

         do;
         END_MAIN_TOUR = YES;
         return;
         end;

      end;

return;
end;	/* MAIN_TOUR            */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
do LOOP_INDEX =  11 to  11;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	DISPATCH
	Dispatch to the right program
****************************************************************/

DISPATCH:
	procedure;

%include "BK_ENT_SERIES.DCL";
%include "BK_ENT_UNSCH.DCL";
%include "BK_ENT_MOD.DCL";
%include "BK_ENT_FIT.DCL";
do case (TOUR_SELECT);
      /* Option   1 */
   call BK_ENT_SERIES(
      BK_ENT_HDR_RECORD,
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_LINE_RECORD,
      BK_INV_DET_RECORD,
      BK_CONTROL_RECORD,
      BK_PASSENGERS_RECORD);
      /* Option   2 */
   call BK_ENT_UNSCH(
      BK_ENT_HDR_RECORD,
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_LINE_RECORD,
      BK_CONTROL_RECORD,
      BK_INV_DET_RECORD,
      BK_PASSENGERS_RECORD);
      /* Option   3 */
   call BK_ENT_MOD(
      BK_ENT_HDR_RECORD,
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_CONTROL_RECORD,
      BK_LINE_RECORD,
      BK_PASSENGERS_RECORD);
      /* Option   4 */
   call BK_ENT_FIT(
      BK_ENT_HDR_RECORD,
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_CONTROL_RECORD,
      BK_LINE_RECORD,
      BK_PASSENGERS_RECORD);
end;
otherwise
   do;
   end;
return;
end;	/* DISPATCH             */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
