/****************************************************************
	Module: BK_FIT_OTHER
	Top Level Logic: DIS_TABLE_MAINT
	Date: 11-Dec-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_FIT_OTHER
	Table maint - don't enter anything
****************************************************************/

%replace BK_FIT_OTHER_1 by 501;
BK_FIT_OTHER:
   procedure(
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_BOOKING_RECORD,
      BK_DET_LAND_RECORD,
      BK_PASSENGERS_RECORD);
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_BOOKING_NO by   9;
%replace BK_DET_LAND_NO by  68;
%replace BK_PASSENGERS_NO by  49;
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_BOOKING.DD";
%include "BK_DET_LAND.DD";
%include "BK_PASSENGERS.DD";

declare		ERROR_CODE           fixed binary (15);
declare		END_COPY_TOUR        bit (1);
declare		END_COPY_PAX_LAND    bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		LDET_SEQ_ARRAY(16) fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		END_DELETE_OTHER     bit (1);
   call INITIALIZE;
   call DIS_TABLE_IO;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */


   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_FIT_OTHER_1);

   /* OPEN_FILES - Open all the files for this program */

return;
end;	/* INITIALIZE           */

/****************************************************************
	DIS_TABLE_IO
	Display the table
****************************************************************/

DIS_TABLE_IO:
	procedure;


   /* BEFORE_LOGIC - Before logic */


   /* INIT_LAND_STUFF - Set up for detail land maintenance */


      /* CHECK_BOOKING - Is this a booking-in-progress? */

      if BOOKING_NO = 0 then
         return;


      /* CHECK_ALL_INFO - Are all Agency, Pax, and Tour in? */

      if BK_AGENCY = -1 then
         do;
         call DISPLAY_MESSAGE ("Agency not entered!");
         call PRESS_RETURN;
         return;
         end;

      if BK_PAX = 0 then
         do;
         call DISPLAY_MESSAGE ("Passengers not entered!");
         call PRESS_RETURN;
         return;
         end;

      if BK_TOUR_NUM = 0 then
         do;
         call DISPLAY_MESSAGE ("Tour not entered!");
         call PRESS_RETURN;
         return;
         end;


      /* SETUP_LAND_IF_NEW - Set up the land detail if new */

      if BK_TOUR_MOD = -1 then
         do;

         /* BK_SET_LAND_DET - Set up the land detail */

         %include "BK_SET_LAND_DET.DCL";
         call BK_SET_LAND_DET(
            BK_BOOKING_RECORD,
            BK_TOUR_RECORD,
            BK_TOUR_HDR_RECORD,
            BK_DET_LAND_RECORD);
         end;


      /* CHECK_PAX_LAND - Is this a passenger land mod? */

      if BK_PAX_SEQ ^= 0 then
         do;
         call SET_PAX_LAND;
         end;
      else
         BK_PAX_SHARE_SEQ = 0;

   call TABLE_MAINT;

   /* AFTER_LOGIC - Other Logic */

return;
end;	/* DIS_TABLE_IO         */

/****************************************************************
	SET_PAX_LAND
	Check and set up this passenger's land
****************************************************************/

SET_PAX_LAND:
	procedure;

   call DISPLAY_DATA_C;

   /* SET_FIRST_LANDP - Set first land in this pax mod */

   LDET_MOD = BK_MODIFICATION;
   LDET_BK_TK_NO = BOOKING_NO;
   LDET_ALT_SEQ = BK_PAX_SEQ;
   LDET_ANSW_SEQ = 0;
   LDET_DAY = 0;
   LDET_SEQ = 0;
   call SET_POSITION (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);

   /* READ_NEXT_LANDD - Read the next land detail record */

   call READ_NEXT (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_DET_LAND_NO,ERROR_CODE);

   /* CHECK_MATCH_LANDD - Is there at least one land already? */

   if (ERROR_CODE = NORMAL_RETURN) &
      (LDET_MOD = BK_MODIFICATION) &
      (LDET_BK_TK_NO = BOOKING_NO) &
      (LDET_ALT_SEQ = BK_PAX_SEQ) then
         return;


   /* COPY_TOUR_DETL - Copy land detail if any changes */

   if BK_NEXT_MOD ^= BK_TOUR_MOD then
      do;

      /* SET_FIRST_LANDD - Set to the first land detail record */

      LDET_MOD = BK_MODIFICATION;
      LDET_BK_TK_NO = BOOKING_NO;
      LDET_ALT_SEQ = 0;
      LDET_ANSW_SEQ = 0;
      LDET_DAY = 0;
      LDET_SEQ = 0;
      call SET_POSITION (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
      END_COPY_TOUR = NO;
      do while (END_COPY_TOUR ^= YES);
         call COPY_TOUR;
      end;
      BK_TOUR_MOD = BK_NEXT_MOD;
      end;


   /* SET_FIRST_LANDD - Set to the first land detail record */

   LDET_MOD = BK_MODIFICATION;
   LDET_BK_TK_NO = BOOKING_NO;
   LDET_ALT_SEQ = 0;
   LDET_ANSW_SEQ = 0;
   LDET_DAY = 0;
   LDET_SEQ = 0;
   call SET_POSITION (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
   END_COPY_PAX_LAND = NO;
   do while (END_COPY_PAX_LAND ^= YES);
      call COPY_PAX_LAND;
   end;

   /* SET_LAND_MOD - Set the modification code for land */

   BK_TOUR_MOD = BK_NEXT_MOD;

return;
end;	/* SET_PAX_LAND         */

/****************************************************************
	DISPLAY_DATA_C
	Display the data in screen group C
****************************************************************/

DISPLAY_DATA_C:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =  14 to  15;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_C       */

/****************************************************************
	COPY_TOUR
	Copy the tour detail
****************************************************************/

COPY_TOUR:
	procedure;


   /* READ_NEXT_LANDD - Read the next land detail record */

   call READ_NEXT (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_DET_LAND_NO,ERROR_CODE);

   /* CHECK_END_LANDD - Last land detail record? */

   if (ERROR_CODE = END_OF_FILE) !
   (LDET_MOD > BK_MODIFICATION) !
   (LDET_BK_TK_NO > BOOKING_NO) then
      do;
      END_COPY_TOUR = YES;
      return;
      end;

   /* CHANGE_TOURD - Change mod code to 0 */

   LDET_MOD = BK_NEXT_MOD;


   /* WRITE_LANDD - Write the land detail record */

   call WRITE_RECORD (BK_DET_LAND_NO,ERROR_CODE);

   /* SET_FIRST_TOURC - Set next record */

   LDET_MOD = BK_MODIFICATION;
   LDET_BK_TK_NO = BOOKING_NO;
   LDET_SEQ = LDET_SEQ+1;
   call SET_POSITION (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
return;
end;	/* COPY_TOUR            */

/****************************************************************
	COPY_PAX_LAND
	Copy to the current passenger air
****************************************************************/

COPY_PAX_LAND:
	procedure;


   /* READ_NEXT_LANDD - Read the next land detail record */

   call READ_NEXT (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_DET_LAND_NO,ERROR_CODE);

   /* CHECK_END_LANDZ - Last land detail in general info? */

   if (ERROR_CODE = END_OF_FILE) !
   (LDET_MOD > BK_MODIFICATION) !
   (LDET_BK_TK_NO > BOOKING_NO) !
   (LDET_ALT_SEQ > 0) !
   (LDET_ANSW_SEQ > 0) then
      do;
      END_COPY_PAX_LAND = YES;
      return;
      end;

   /* CHANGE_PAX_LANDD - Change the detail for write */

   LDET_ALT_SEQ = BK_PAX_SEQ;


   /* WRITE_LANDD - Write the land detail record */

   call WRITE_RECORD (BK_DET_LAND_NO,ERROR_CODE);

   /* SET_NEXT_LANDH - Set the next hotel detail record */

   LDET_MOD = BK_MODIFICATION;
   LDET_BK_TK_NO = BOOKING_NO;
   LDET_ALT_SEQ = 0;
   LDET_SEQ = LDET_SEQ+1;
   call SET_POSITION (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
return;
end;	/* COPY_PAX_LAND        */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		LDET_MOD_SAVE        fixed binary (15);
declare		LDET_BK_TK_NO_SAVE   fixed binary (31);
declare		LDET_ALT_SEQ_SAVE    fixed binary (15);
declare		LDET_ANSW_SEQ_SAVE   fixed binary (15);
declare		LDET_DAY_SAVE        fixed binary (15);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		BK_DET_LAND_ERROR    fixed binary (15);
declare		LDET_SEQ_SAVE        fixed binary (15);
declare		ANSWER               character (1);
LDET_MOD = BK_MODIFICATION;
LDET_MOD_SAVE = LDET_MOD;
LDET_BK_TK_NO = BOOKING_NO;
LDET_BK_TK_NO_SAVE = LDET_BK_TK_NO;
LDET_ALT_SEQ = BK_PAX_SEQ;
LDET_ALT_SEQ_SAVE = LDET_ALT_SEQ;
LDET_ANSW_SEQ = 1;
LDET_ANSW_SEQ_SAVE = LDET_ANSW_SEQ;
LDET_DAY = 0;
LDET_DAY_SAVE = LDET_DAY;
LDET_SEQ = 0;
call SET_POSITION (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (LDET_MOD > LDET_MOD_SAVE) !
   (LDET_BK_TK_NO > LDET_BK_TK_NO_SAVE) !
   (LDET_ALT_SEQ > LDET_ALT_SEQ_SAVE) !
   (LDET_ANSW_SEQ > LDET_ANSW_SEQ_SAVE) !
   (LDET_DAY > LDET_DAY_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 16;
      LDET_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_DET_LAND_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_DET_LAND_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 16) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =  11 to  13;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         LDET_SEQ_ARRAY(RECORD_NUMBER) = LDET_SEQ;
         call READ_NEXT (BK_DET_LAND_NO,KEY_AREA_1,BK_DET_LAND_ERROR);
         if (LDET_MOD > LDET_MOD_SAVE) !
         (LDET_BK_TK_NO > LDET_BK_TK_NO_SAVE) !
         (LDET_ALT_SEQ > LDET_ALT_SEQ_SAVE) !
         (LDET_ANSW_SEQ > LDET_ANSW_SEQ_SAVE) !
         (LDET_DAY > LDET_DAY_SAVE) then
            BK_DET_LAND_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      LDET_SEQ_SAVE = LDET_SEQ_ARRAY(16);
      LDET_MOD = LDET_MOD_SAVE;
      LDET_BK_TK_NO = LDET_BK_TK_NO_SAVE;
      LDET_ALT_SEQ = LDET_ALT_SEQ_SAVE;
      LDET_ANSW_SEQ = LDET_ANSW_SEQ_SAVE;
      LDET_DAY = LDET_DAY_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if BK_DET_LAND_ERROR ^= END_OF_FILE then
            do;
            LDET_SEQ = LDET_SEQ_SAVE;
            call SET_POSITION (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if LDET_SEQ_ARRAY(16) = 0 then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      LDET_MOD = LDET_MOD_SAVE;
      LDET_BK_TK_NO = LDET_BK_TK_NO_SAVE;
      LDET_ALT_SEQ = LDET_ALT_SEQ_SAVE;
      LDET_ANSW_SEQ = LDET_ANSW_SEQ_SAVE;
      LDET_DAY = LDET_DAY_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <= 16) );
         call BK_DET_LAND_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (LDET_SEQ_ARRAY(16) = 0) then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 16;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if LDET_SEQ_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX =11 to  13;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 16,SELECT,RETURN_CODE);

/* CHECK_OTHER_CHG - Check to see if a change was made */

if (SELECT ^= 0 ! RETURN_CODE = DELETE_TYPED) then

/* COPY_TOUR_DETL - Copy land detail if any changes */

if BK_NEXT_MOD ^= BK_TOUR_MOD then
   do;

   /* SET_FIRST_LANDD - Set to the first land detail record */

   LDET_MOD = BK_MODIFICATION;
   LDET_BK_TK_NO = BOOKING_NO;
   LDET_ALT_SEQ = 0;
   LDET_ANSW_SEQ = 0;
   LDET_DAY = 0;
   LDET_SEQ = 0;
   call SET_POSITION (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
   END_COPY_TOUR = NO;
   do while (END_COPY_TOUR ^= YES);
      call COPY_TOUR;
   end;
   BK_TOUR_MOD = BK_NEXT_MOD;
   end;


if RETURN_CODE = DELETE_TYPED then
   do;
   END_DELETE_OTHER = NO;
   do while (END_DELETE_OTHER ^= YES);
      call DELETE_OTHER;
   end;
   end;

LDET_MOD = BK_MODIFICATION;
LDET_BK_TK_NO = BOOKING_NO;
LDET_ALT_SEQ = 0;
LDET_ANSW_SEQ = 1;
LDET_DAY = 0;

if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 16 then
   do;
   RECORD_NUMBER = SELECT;
   call BK_DET_LAND_LINE;
   call SET_ROW_OFFSET (0);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	DELETE_OTHER
	Delete the "Other" items
****************************************************************/

DELETE_OTHER:
	procedure;


   /* SET_FIRST_OTHER - Set first */

   LDET_MOD = BK_MODIFICATION;
   LDET_BK_TK_NO = BOOKING_NO;
   LDET_ALT_SEQ = 0;
   LDET_ANSW_SEQ = 1;
   LDET_DAY = 0;
   LDET_SEQ = 0;
   call SET_POSITION (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);

   /* READ_NEXT_TOURD - Read next */

   call READ_NEXT (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_DET_LAND_NO,ERROR_CODE);

   /* CHECK_END_OTHER - Last one? */

   if (ERROR_CODE = END_OF_FILE) !
   (LDET_MOD > BK_MODIFICATION) !
   (LDET_BK_TK_NO > BOOKING_NO) !
   (LDET_ALT_SEQ > 0) !
   (LDET_ANSW_SEQ > 1) then
      do;
      END_DELETE_OTHER = YES;
      return;
      end;

   /* DELETE_TOURD - Deletee */

   call DELETE_RECORD (BK_DET_LAND_NO,ERROR_CODE);
return;
end;	/* DELETE_OTHER         */

/****************************************************************
	BK_DET_LAND_LINE
	Change one line in the secondary file
****************************************************************/

BK_DET_LAND_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);

/* SET_LAND_MOD - Set the modification code for land */

BK_TOUR_MOD = BK_NEXT_MOD;

call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if LDET_SEQ_ARRAY(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   LDET_SEQ = LDET_SEQ_ARRAY(RECORD_NUMBER);
   call READ_KEYED (BK_DET_LAND_NO,KEY_AREA_1,ERROR_CODE);
   do LOOP_INDEX = 11 to  13;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   end;
else
   do;
   LDET_SEQ = 0;
   LDET_MOD_CODE = "A";
   LDET_INV = "N";
   BK_INV_MOD = -1;
   LDET_EXCHANGE = 0;
   LDET_TOUR_PP_COST = 0;
   LDET_VARIES_CODE = "";
   LDET_VARIES_QTY = 0;
   LDET_VARIES_COST = 0;
   LDET_MANUAL = "";
   LDET_TOUR_COST = 0;
   LDET_MODULE = "";
   LDET_LINKED_TO = 0;
   LDET_ACK_DAYS = 0;
   LDET_SEND_TO = "Y";
   LDET_STATUS = "OK";
   LDET_VENDOR = "";
   LDET_TORT = "";
   LDET_VOUCHER = 0;
   LDET_TOUR_NO = "";
   LDET_SIC_PMC = "";
   LDET_CUTOFF = 0;
   LDET_PMC = 0;
   LDET_SIC = 0;
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =  11 to  11;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =  12 to  13;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
         if LOOP_INDEX =  12 then
            do;

            /* CHECK_PP_COST - Check to see if PP cost entered */

            if LDET_TOUR_PP_COST ^= 0 then
               do;
               LDET_TOUR_COST = 0;
               LOOP_INDEX = LOOP_INDEX + 1;
               end;

            end;
         if LOOP_INDEX =  13 then
            do;

            /* CHECK_TT_COST - Check total cost */

            if LDET_TOUR_COST ^= 0 then
               LDET_TOUR_PP_COST = 0;

            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      LDET_SEQ = LDET_SEQ_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (BK_DET_LAND_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      LDET_SEQ = 0;
      end;
   else
      do;
      if REWRITE = NO then
         do;
         if RECORD_NUMBER = 1 then
            LDET_SEQ = 1;
         else
            LDET_SEQ = LDET_SEQ_ARRAY(RECORD_NUMBER - 1) + 1;
         ERROR_CODE = KEY_ALREADY_EXISTS;
         do while (ERROR_CODE = KEY_ALREADY_EXISTS);
            call WRITE_RECORD (BK_DET_LAND_NO,ERROR_CODE);
            if ERROR_CODE = KEY_ALREADY_EXISTS then
               LDET_SEQ = LDET_SEQ + 1;
         end;
         end;
      else
         call UPDATE_RECORD (BK_DET_LAND_NO,ERROR_CODE);
      end;
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      LDET_SEQ_ARRAY(RECORD_NUMBER) = LDET_SEQ;
      end;
end;
return;
end;	/* BK_DET_LAND_LINE     */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
