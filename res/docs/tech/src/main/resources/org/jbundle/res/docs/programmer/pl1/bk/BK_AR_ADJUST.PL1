/****************************************************************
	Module: BK_AR_ADJUST
	Top Level Logic: AR_ADJUST_LOGIC
	Date: 21-Mar-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_AR_ADJUST
	Top Level Logic
****************************************************************/

%replace BK_AR_ADJUST_1 by 768;
BK_AR_ADJUST:
   procedure(
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_LINE_RECORD,
      BK_ENT_HDR_RECORD);
%replace AR_OPEN_NO by  43;
%replace AR_CONTROL_NO by  41;
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_LINE_NO by  51;
%include "BK_AR_ADJUST.DD";
%include "AR_OPEN.DD";
%include "AR_CONTROL.DD";
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_LINE.DD";
%include "BK_ENT_HDR.DD";

declare		ERROR_CODE           fixed binary (15);
declare		END_GET_NEXT_AR      bit (1);

   /* INIT_FILE_VARS - Initialize the file variables */

   AR_ACCT_DR = 0;
   AR_ACCT_DEP = 0;
   AR_POSTED = 0;
   AR_ACTION = 0;
   AR_DEPARTURE = 0;
   AR_REC_NO = 9999;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */


   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_AR_ADJUST_RECORD) );
   call OPEN_FILE (AR_OPEN_NO,"AR_OPEN",byteaddr(AR_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AR_OPEN_NO,ERROR_CODE);
   call OPEN_FILE (AR_CONTROL_NO,"AR_CONTROL",byteaddr(AR_CONTROL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AR_CONTROL_NO,ERROR_CODE);
   call AR_ADJUST_MAIN;
   call END_PROGRAM;
return;

/****************************************************************
	AR_ADJUST_MAIN
	Mainline logic
****************************************************************/

AR_ADJUST_MAIN:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_AR_CONTROL     fixed binary (15);

   /* GET_AR_CONTROL - Get the A/R control record */


      /* SET_AR_CONTROL - Set up the key */

      AR_REC_NO = 0;
      KEY_NO = 1;

      /* READ_AR_CONTROL - Read the record */

      call READ_KEYED (AR_CONTROL_NO,KEY_NO,ERROR_AR_CONTROL);
      if ERROR_AR_CONTROL > 3 then
         call PRINT_ERROR (AR_CONTROL_NO,ERROR_AR_CONTROL);

   /* INIT_AR_VARS - Initialize the variables */

   ADJ_LAST_SEQ = 0;
   AR_REFUND_AMT = 0;
   BK_NEW_AR = "Y";
   AR_CHARGES = 0;

   BK_BALANCE = 0;


   /* SET_FIRST_AR - Set on the first A/R open record */

   AR_BOOKING_NO = BOOKING_NO;
   AR_SEQ_NO = 0;
   call SET_POSITION (AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);
   END_GET_NEXT_AR = NO;
   do while (END_GET_NEXT_AR ^= YES);
      call GET_NEXT_AR;
   end;

   /* AR_CAN_OR_ADJ - Cancel or adjust the A/R detail? */

   if BK_STATUS = "XL" then
      do;
      call AR_CANCEL;
      end;
   else
      do;
      call AR_ADJUST;
      end;

return;
end;	/* AR_ADJUST_MAIN       */

/****************************************************************
	GET_NEXT_AR
	Scan the A/R detail, get seq, etc
****************************************************************/

GET_NEXT_AR:
	procedure;


   /* READ_NEXT_AR - Read the next A/R record */

   call READ_NEXT (AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AR_OPEN_NO,ERROR_CODE);

   /* CHECK_END_AR - Last A/R booking detail? */

   if (ERROR_CODE = END_OF_FILE) !
   (AR_BOOKING_NO > BOOKING_NO) then
      do;
      END_GET_NEXT_AR = YES;
      return;
      end;

   /* CHECK_AR_VARS - Check the variables */

   ADJ_LAST_SEQ = AR_SEQ_NO;
   if (AR_DOC_TYPE = "P") ! (AR_DOC_TYPE = "M") ! (AR_DOC_TYPE = "C") then
      AR_REFUND_AMT = floor((AR_REFUND_AMT - AR_AMOUNT) * 100 + 0.5) / 100;
   if (AR_DOC_TYPE = "I") ! (AR_DOC_TYPE = "A") then
      do;
      AR_CHARGES = floor((AR_CHARGES + AR_AMOUNT) * 100 + 0.5) / 100;
      BK_NEW_AR = "N";
      end;

   BK_BALANCE = floor((BK_BALANCE + AR_AMOUNT) * 100 + 0.5) / 100;


   /* CHECK_AR_DEP - Is the Departure date correct? */

   if AR_DEPARTURE ^= BK_DEPARTURE then
      if (AR_DOC_TYPE = "I") ! (AR_DOC_TYPE = "A") ! (AR_DOC_TYPE = "P") then
         if AR_POSTED ^= 3 then
            do;
            AR_DEPARTURE = BK_DEPARTURE;
            if AR_POSTED = 2 then
               AR_ACTION = AR_DEPARTURE;
            call UPDATE_RECORD(AR_OPEN_NO,ERROR_CODE);
            call READ_KEYED(AR_OPEN_NO,KEY_AREA_1,ERROR_CODE);
            end;

return;
end;	/* GET_NEXT_AR          */

/****************************************************************
	AR_CANCEL
	Adjust the A/R to cancel
****************************************************************/

AR_CANCEL:
	procedure;


   /* CANCEL_AR - Make A/R reflect the cancellation */

   AR_SEQ_NO = ADJ_LAST_SEQ + 1;

   AR_BOOKING_NO = BOOKING_NO;
   AR_TRX_DATE = TODAYS_DATE();
   AR_DOC_TYPE = "A";
   AR_AMOUNT = BK_CANCEL_CHG;
   AR_REF = "Cancellation charge";
   AR_ACCT = HDR_AR_GL;
   if AR_ACCT = 0 then
      AR_ACCT = AR_DEF_AR;
   AR_ACCT_DR = AR_CANCEL_GL;
   AR_ACCT_DEP = HDR_INCOME_GL;
   if AR_ACCT_DEP = 0 then
      AR_ACCT_DEP = AR_INCOME_GL;
   AR_POSTED = 0;
   AR_ACTION = AR_TRX_DATE;
   AR_DEPARTURE = BK_DEPARTURE;
   AR_OPEN_MOD = BK_NEXT_MOD;
   AR_OPEN_BY = BK_MOD_BY;
   if AR_AMOUNT ^= 0 then
      do;

      /* WRITE_AR - Write the A/R detail record */

      ERROR_CODE = KEY_ALREADY_EXISTS;
      do while(ERROR_CODE = KEY_ALREADY_EXISTS);
         call WRITE_RECORD (AR_OPEN_NO,ERROR_CODE);
         if ERROR_CODE = KEY_ALREADY_EXISTS then
            AR_SEQ_NO = AR_SEQ_NO + 1;
      end;
      end;

   if BK_CANCEL_CHG <= AR_REFUND_AMT then
      AR_REFUND_AMT = floor((AR_REFUND_AMT - BK_CANCEL_CHG) * 100 + 0.5) /100;
   else
      AR_REFUND_AMT = 0;

   AR_BOOKING_NO = BOOKING_NO;
   AR_TRX_DATE = TODAYS_DATE();
   AR_DOC_TYPE = "R";
   AR_AMOUNT = AR_REFUND_AMT;
   AR_REF = "Refund Pending";
   AR_ACCT = HDR_AR_GL;
   if AR_ACCT = 0 then
      AR_ACCT = AR_DEF_AR;
   AR_ACCT_DR = 0;
   AR_ACCT_DEP = 0;
   AR_POSTED = 1;
   AR_ACTION = AR_TRX_DATE;
   AR_DEPARTURE = 0;
   AR_OPEN_MOD = BK_NEXT_MOD;
   AR_OPEN_BY = BK_MOD_BY;
   if AR_AMOUNT ^= 0 then
      do;

      /* WRITE_AR - Write the A/R detail record */

      ERROR_CODE = KEY_ALREADY_EXISTS;
      do while(ERROR_CODE = KEY_ALREADY_EXISTS);
         call WRITE_RECORD (AR_OPEN_NO,ERROR_CODE);
         if ERROR_CODE = KEY_ALREADY_EXISTS then
            AR_SEQ_NO = AR_SEQ_NO + 1;
      end;
      end;

   AR_BOOKING_NO = BOOKING_NO;
   AR_TRX_DATE = TODAYS_DATE();
   AR_DOC_TYPE = "A";
   AR_AMOUNT=-floor((BK_CANCEL_CHG+AR_REFUND_AMT+BK_BALANCE)*100+0.5)/100;
   AR_REF = "Booking cancelled";
   AR_ACCT = HDR_AR_GL;
   if AR_ACCT = 0 then
      AR_ACCT = AR_DEF_AR;
   AR_ACCT_DR = HDR_PP_GL;
   if AR_ACCT_DR = 0 then
      AR_ACCT_DR = AR_PRE_GL;
   AR_ACCT_DEP = HDR_INCOME_GL;
   if AR_ACCT_DEP = 0 then
      AR_ACCT_DEP = AR_INCOME_GL;
   AR_POSTED = 0;
   AR_ACTION = AR_TRX_DATE;
   AR_DEPARTURE = BK_DEPARTURE;
   AR_OPEN_MOD = BK_NEXT_MOD;
   AR_OPEN_BY = BK_MOD_BY;

   /* WRITE_AR - Write the A/R detail record */

   ERROR_CODE = KEY_ALREADY_EXISTS;
   do while(ERROR_CODE = KEY_ALREADY_EXISTS);
      call WRITE_RECORD (AR_OPEN_NO,ERROR_CODE);
      if ERROR_CODE = KEY_ALREADY_EXISTS then
         AR_SEQ_NO = AR_SEQ_NO + 1;
   end;

   BK_BALANCE = 0;

return;
end;	/* AR_CANCEL            */

/****************************************************************
	AR_ADJUST
	Adjust the A/R to actual
****************************************************************/

AR_ADJUST:
	procedure;


   /* SETUP_AR_OPEN - Set-up the A/R Open fields */

   AR_BOOKING_NO = BOOKING_NO;
   AR_SEQ_NO = ADJ_LAST_SEQ + 1;

   if (BK_NEW_AR = "Y") & (BK_PRINT_INV = "Y") then
      do;
      AR_TRX_DATE = BK_MOD_DATE;
      if BK_MOD_DATE = 0 then
         AR_TRX_DATE = BK_DATE;
      AR_DOC_TYPE = "I";
      AR_AMOUNT = BK_NET_PRICE;
      AR_REF = "Invoice";
      AR_ACCT = HDR_AR_GL;
      if AR_ACCT = 0 then
         AR_ACCT = AR_DEF_AR;
      AR_ACCT_DR = HDR_PP_GL;
      if AR_ACCT_DR = 0 then
         AR_ACCT_DR = AR_PRE_GL;
      AR_ACCT_DEP = HDR_INCOME_GL;
      if AR_ACCT_DEP = 0 then
         AR_ACCT_DEP = AR_INCOME_GL;
      AR_POSTED = 0;
      AR_ACTION = AR_TRX_DATE;
      AR_DEPARTURE = BK_DEPARTURE;
      AR_OPEN_MOD = BK_NEXT_MOD;
      AR_OPEN_BY = BK_MOD_BY;
      if AR_OPEN_BY = "" then
         AR_OPEN_BY = BK_RES_AGENT;
      end;
   else
      do;
      AR_TRX_DATE = BK_MOD_DATE;
      AR_DOC_TYPE = "A";
      AR_AMOUNT = floor((BK_NET_PRICE - AR_CHARGES) * 100 + 0.5) / 100;
      AR_REF = "Booking Modification";
      AR_ACCT = HDR_AR_GL;
      if AR_ACCT = 0 then
         AR_ACCT = AR_DEF_AR;
      AR_ACCT_DR = HDR_PP_GL;
      if AR_ACCT_DR = 0 then
         AR_ACCT_DR = AR_PRE_GL;
      AR_ACCT_DEP = HDR_INCOME_GL;
      if AR_ACCT_DEP = 0 then
         AR_ACCT_DEP = AR_INCOME_GL;
      AR_POSTED = 0;
      AR_ACTION = AR_TRX_DATE;
      AR_DEPARTURE = BK_DEPARTURE;
      AR_OPEN_MOD = BK_NEXT_MOD;
      AR_OPEN_BY = BK_MOD_BY;
      end;
   if AR_AMOUNT = 0 then
      return;

   BK_BALANCE = floor((BK_BALANCE + AR_AMOUNT) * 100 + 0.5) / 100;


   /* WRITE_AR - Write the A/R detail record */

   ERROR_CODE = KEY_ALREADY_EXISTS;
   do while(ERROR_CODE = KEY_ALREADY_EXISTS);
      call WRITE_RECORD (AR_OPEN_NO,ERROR_CODE);
      if ERROR_CODE = KEY_ALREADY_EXISTS then
         AR_SEQ_NO = AR_SEQ_NO + 1;
   end;
return;
end;	/* AR_ADJUST            */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AR_OPEN_NO);
   call CLOSE_FILE (AR_CONTROL_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
