/****************************************************************
	Module: AR_MCO_ENT
	Top Level Logic: MCO_ENT_LOGIC
	Date: 20-Jun-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AR_MCO_ENT
	Top_Level logic to enter MCOs
****************************************************************/

%replace AR_MCO_ENT_1 by 149;
AR_MCO_ENT:
   procedure;
%replace BK_BOOKING_NO by   9;
%replace AR_MCO_DET_NO by  50;
%replace GL_CHART_NO by  16;
%replace AM_AGCY_NO by  10;
%replace AR_CONTROL_NO by  41;
%replace BK_TOUR_HDR_NO by  58;
%include "BK_BOOKING.DD";
%include "AR_MCO_DET.DD";
%include "GL_CHART.DD";
%include "AR_MCO_ENT.DD";
%include "AM_AGCY.DD";
%include "AR_CONTROL.DD";
%include "BK_TOUR_HDR.DD";

declare		KEY_NO               fixed binary (15);
declare		ERROR_CODE           fixed binary (15);
declare		END_MCO_ENT_MAIN     bit (1);
declare		NOT_FIRST_TIME       bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		ERROR_AR_MCO_DET     fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		END_CHANGE_ITEM      bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		END_READ_THRU_MCO_BK bit (1);
declare		LINE                 fixed binary (15);
declare		ERROR_AR_CONTROL     fixed binary (15);
   call INITIALIZE;

   /* GET_AR_CONTROL - Get the A/R control record */


      /* SET_AR_CONTROL - Set up the key */

      AR_REC_NO = 0;
      KEY_NO = 1;

      /* READ_AR_CONTROL - Read the record */

      call READ_KEYED (AR_CONTROL_NO,KEY_NO,ERROR_AR_CONTROL);
      if ERROR_AR_CONTROL > 3 then
         call PRINT_ERROR (AR_CONTROL_NO,ERROR_AR_CONTROL);
   END_MCO_ENT_MAIN = NO;
   do while (END_MCO_ENT_MAIN ^= YES);
      call MCO_ENT_MAIN;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;
   AR_MCO_STATUS = 1;
   AR_MCO_CARRIER = "";
   AR_MCO_AMT_APLY = 0;
   AR_MCO_DATE_SUBM = 0;
   AR_MCO_DATE_PAID = 0;
   AR_MCO_AMT_PAID = 0;
   TYPICAL_BAL = "D";
   SECTION_SUB = "N";
   COUNTER_BAL_AC = 0;
   GL_INCOME_EXP = "N";
   DISCONTINUED_ON = 0;
   AR_REC_NO = 9999;
   HDR_TOUR_DESC2 = "";
   HDR_START_ON = 0;
   HDR_END_ON = 0;
   HDR_DEF_RATE = "F";
   HDR_DEF_CLASS = "S ";
   HDR_DEF_CUTOFF = 0;
   HDR_UPGRADE_AGCY = "A";
   HDR_INIT_STATUS = "OK";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AR_MCO_ENT_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
   call OPEN_FILE (AR_MCO_DET_NO,"AR_MCO_DET",byteaddr(AR_MCO_DET_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AR_MCO_DET_NO,ERROR_CODE);
   call OPEN_FILE (GL_CHART_NO,"GL_CHART",byteaddr(GL_CHART_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_CHART_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (AR_MCO_ENT_RECORD) );
   call OPEN_FILE (AM_AGCY_NO,"AM_AGCY",byteaddr(AM_AGCY_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AM_AGCY_NO,ERROR_CODE);
   call OPEN_FILE (AR_CONTROL_NO,"AR_CONTROL",byteaddr(AR_CONTROL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AR_CONTROL_NO,ERROR_CODE);
   call OPEN_FILE (BK_TOUR_HDR_NO,"BK_TOUR_HDR",byteaddr(BK_TOUR_HDR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TOUR_HDR_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	MCO_ENT_MAIN
	Mainline logic for MCO entry
****************************************************************/

MCO_ENT_MAIN:
	procedure;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (AR_MCO_ENT_1);
   NOT_FIRST_TIME = YES;
   call ENT_MCO_BK;

   /* RETURN_IF_END - Return if end typed */

   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_MCO_ENT_MAIN = YES;
      return;
      end;


   /* AGAIN_IF_ERROR - return if ERROR ^= 0 */

   if ERROR_CODE ^= NORMAL_RETURN then
      return;

   call DIS_BK_INFO;

   /* SETUP_KEY_2 - Setup the key */

   AR_MCO_BK_NO = BOOKING_NO;
   AR_MCO_SEQ_NO = 0;
   KEY_NO = 2;

   /* READ_RECORD_2 - Read from another file */

   call READ_KEYED (AR_MCO_DET_NO,KEY_NO,ERROR_AR_MCO_DET);
   if ERROR_AR_MCO_DET > 3 then
      call PRINT_ERROR (AR_MCO_DET_NO,ERROR_AR_MCO_DET);

   /* MCO_FOUND - Was the record found? */

   ERROR_INPUT_SCREEN = NO;
   if ERROR_AR_MCO_DET = NORMAL_RETURN then
      do;
      call AR_MCO_FOUND;
      end;
   else
      do;
      call AR_MCO_NOTFOUND;
      if ERROR_INPUT_SCREEN then return;
      end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_MCO_ENT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_MCO_ENT_MAIN = YES;
      return;
      end;


   /* DISPLAY_OR_INPUTED - Was the data displayed or inputed? */

   if ERROR_AR_MCO_DET = NORMAL_RETURN then
      do;

      /* DIS_DELETED_OR_OK - Displayed, was this record deleted? */

      if RETURN_CODE = DELETE_TYPED then
         do;

         /* DELETE_RECORD - Delete the record */

         call DELETE_RECORD (AR_MCO_DET_NO,ERROR_CODE);
         end;
      else
         do;

         /* UPDATE_RECORD - Update the record */

         call UPDATE_RECORD (AR_MCO_DET_NO,ERROR_CODE);
         end;
      end;
   else
      do;

      /* INP_DELETED_OR_OK - Inputed data, should I delete or it ok */

      if RETURN_CODE = DELETE_TYPED then
         do;

         /* NO_CODE - This section has no code */

         /* No code in this section */
         end;
      else
         do;

         /* WRITE_RECORD - Write the record */

         ERROR_CODE = KEY_ALREADY_EXISTS;
         do while(ERROR_CODE = KEY_ALREADY_EXISTS);
            call WRITE_RECORD (AR_MCO_DET_NO,ERROR_CODE);
            if ERROR_CODE = KEY_ALREADY_EXISTS then
               AR_MCO_SEQ = AR_MCO_SEQ + 1;
         end;
         end;
      end;
return;
end;	/* MCO_ENT_MAIN         */

/****************************************************************
	ENT_MCO_BK
	Enter the booking number for this MCO
****************************************************************/

ENT_MCO_BK:
	procedure;

declare		ERROR_AM_AGCY        fixed binary (15);
declare		ERROR_BK_BOOKING     fixed binary (15);
   call ENTER_DATA_A;

   /* RETURN_IF_END - Return if end typed */

   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      return;


   /* RESET_ERROR - Reset the error code to zero */

   ERROR_CODE = 0;


   /* ENT_MCO_BK_NO - Did the user enter the bk number? */

   if INPUT_LENGTH = 0 then
      do;
      call ENTER_DATA_B;

      /* END_IF_NO_INPUT - Set the error code if input length = 0 */

      if INPUT_LENGTH = 0 then
         RETURN_CODE = END_TYPED;


      /* RETURN_IF_END - Return if end typed */

      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         return;


      /* SETUP_KEY - Set up this key for a read */

      AGENCY_NUMBER = BK_AGENCY;
      KEY_NO = 1;

      /* READ_AGENCY - Read the agency FILE */

      call READ_KEYED (AM_AGCY_NO,KEY_NO,ERROR_AM_AGCY);
      if ERROR_AM_AGCY > 3 then
         call PRINT_ERROR (AM_AGCY_NO,ERROR_AM_AGCY);

      /* MCO_AGENCY_FOUND - Was the agency record found? */

      ERROR_INPUT_SCREEN = NO;
      if ERROR_AM_AGCY = NORMAL_RETURN then
         do;
         call DISPLAY_MCO_BK;
         end;
      else
         do;

         /* AGCY_NOT_FOUND - Agency not found, try again */


            /* SET_ERROR - Set the error code */

            ERROR_CODE = 1;


            /* RETURN - Normal Return */

            return;

         if ERROR_INPUT_SCREEN then return;
         end;
      end;


   /* AGAIN_IF_ERROR - return if ERROR ^= 0 */

   if ERROR_CODE ^= NORMAL_RETURN then
      return;


   /* READ_RECORD - Read the record */

   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_BK_BOOKING);
   if ERROR_BK_BOOKING > 3 then
      call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);

   /* BOOK_FOUND - Was the booking record found? */

   ERROR_INPUT_SCREEN = NO;
   if ERROR_BK_BOOKING = NORMAL_RETURN then
      do;

      /* NO_CODE - This section has no code */

      /* No code in this section */
      end;
   else
      do;

      /* BOOK_NOT_FOUND - Booking was not found */


         /* SET_ERROR - Set the error code */

         ERROR_CODE = 1;


         /* RETURN - Normal Return */

         return;

      if ERROR_INPUT_SCREEN then return;
      end;
return;
end;	/* ENT_MCO_BK           */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

BOOKING_NO = 0;
do LOOP_INDEX =   1 to   1;
   if LOOP_INDEX =   1 then
      call DISPLAY_MSG_NO ( 70);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	ENTER_DATA_B
	Enter the screen data for group B
****************************************************************/

ENTER_DATA_B:
	procedure;

BK_AGENCY = 0;
do LOOP_INDEX =   2 to   2;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_B         */

/****************************************************************
	DISPLAY_MCO_BK
	Display all open booking for this agency
****************************************************************/

DISPLAY_MCO_BK:
	procedure;


   /* FAKE_AGENCY_NAME - Set the booking agency name for display */

   BK_AGENCY_NAME = AGENCY_NAME;

   call DISPLAY_DATA_C;

   /* SET_FIRST - Set the record pointer to the first rec */

   BK_MODIFICATION = 0;
   BK_AGENCY = AGENCY_NUMBER;
   BOOKING_NO = 0;
   call SET_POSITION (BK_BOOKING_NO,KEY_AREA_2,ERROR_CODE);

   /* RESET_LINE - Init the line offset to 0 */

   LINE = 0;

   END_READ_THRU_MCO_BK = NO;
   do while (END_READ_THRU_MCO_BK ^= YES);
      call READ_THRU_MCO_BK;
   end;

   /* RESET_OFFSET - Set row offset to 0 */

   call SET_ROW_OFFSET(0);


   /* ENTER_DATA_K - Enter data K */

   do LOOP_INDEX =  30 to  30;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;

   /* SET_MCO_BOOK - Set the cooresponding booking no */

   BK_MODIFICATION = 0;
   if (AR_SELECT_MCO ^= 0) &
      (AR_SELECT_MCO > 9) & (AR_SELECT_MCO < 20) then
         BOOKING_NO = AR_MCO_ARRAY(AR_SELECT_MCO - 9);
      else
         ERROR_CODE = 1;

return;
end;	/* DISPLAY_MCO_BK       */

/****************************************************************
	DISPLAY_DATA_C
	Display the data in screen group C
****************************************************************/

DISPLAY_DATA_C:
	procedure;

do LOOP_INDEX =   3 to   3;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =  19 to  25;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_C       */

/****************************************************************
	READ_THRU_MCO_BK
	Read thru all open bookings
****************************************************************/

READ_THRU_MCO_BK:
	procedure;

declare		ANSWER               character (1);

   /* READ_NEXT - Read the next record */

   call READ_NEXT (BK_BOOKING_NO,KEY_AREA_2,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_BOOKING_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_MODIFICATION > 0) !
   (BK_AGENCY > AGENCY_NUMBER) then
      do;
      END_READ_THRU_MCO_BK = YES;
      return;
      end;

   /* CHECK_VALID_MCO_BK - Valid? */

   if BK_BALANCE = 0 then
      return;

   if BK_STATUS = "XL" then
      return;

   if LINE = 10 then
      do;
      call OUTPUT_LINE(24,12,"Display next screen?");
      call INPUT_DATA (24,34,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
      call CLEAR_TO_BOS(24);
      if ANSWER ^= "Y" then
         do;
         END_READ_THRU_MCO_BK = YES;
         return;
         end;

      LINE = 0;
      end;

   AR_MCO_ARRAY(LINE+1) = BOOKING_NO;


   /* SET_LINE_OFFSET - Set the row offset */

   call SET_ROW_OFFSET(LINE);

   call DISPLAY_DATA_H;

   /* INC_LINE - Increment the line */

   LINE = LINE + 1;

return;
end;	/* READ_THRU_MCO_BK     */

/****************************************************************
	DISPLAY_DATA_H
	Display screen group H
****************************************************************/

DISPLAY_DATA_H:
	procedure;

do LOOP_INDEX =  26 to  29;
   call KEEP_TRAILING_SPACES;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_H       */

/****************************************************************
	DIS_BK_INFO
	Display the booking information
****************************************************************/

DIS_BK_INFO:
	procedure;

   call DISPLAY_DATA_A;
   call DISPLAY_DATA_B;
   call DISPLAY_DATA_C;
return;
end;	/* DIS_BK_INFO          */

/****************************************************************
	DISPLAY_DATA_A
	Display the items in screen group A
****************************************************************/

DISPLAY_DATA_A:
	procedure;

do LOOP_INDEX =   1 to   1;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_A       */

/****************************************************************
	DISPLAY_DATA_B
	Display the screen data in group B
****************************************************************/

DISPLAY_DATA_B:
	procedure;

do LOOP_INDEX =   2 to   2;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_B       */

/****************************************************************
	AR_MCO_FOUND
	The MCO was found
****************************************************************/

AR_MCO_FOUND:
	procedure;

   call DISPLAY_DATA_D;
   call DISPLAY_DATA_E;
   call DISPLAY_DATA_I;
   call DISPLAY_DATA_F;
   call DISPLAY_DATA_G;
return;
end;	/* AR_MCO_FOUND         */

/****************************************************************
	DISPLAY_DATA_D
	Display the data in screen group D
****************************************************************/

DISPLAY_DATA_D:
	procedure;

do LOOP_INDEX =   4 to   4;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_D       */

/****************************************************************
	DISPLAY_DATA_E
	Display the data in screen group E
****************************************************************/

DISPLAY_DATA_E:
	procedure;

do LOOP_INDEX =   5 to  13;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =  16 to  16;
   if LOOP_INDEX =  16 then
      do;

      /* SET_MCO_GL_ACCT - Set up the MCO G/L A/R account */

      if BOOKING_NO = 0 then
         AR_MCO_GL_ACCT = AR_NON_TOUR;
      else
         do;

         /* GET_TOUR_HDR - Get the tour header */

         ERROR_CODE = NORMAL_RETURN;

         HDR_TOUR_CODE = BK_TOUR_CODE;
         HDR_END_ON = BK_DEPARTURE;
         if HDR_END_ON = 0 then
            HDR_END_ON = TODAYS_DATE();
         call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
         if ERROR_CODE ^= END_OF_FILE then
            call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

         if BK_TOUR_CODE ^= HDR_TOUR_CODE then
            ERROR_CODE = END_OF_FILE;
         if BK_DEPARTURE ^= 0 then if BK_DEPARTURE < HDR_START_ON then
            ERROR_CODE = END_OF_FILE;

         AR_MCO_GL_ACCT = HDR_AR_GL;
         if AR_MCO_GL_ACCT = 0 then
            AR_MCO_GL_ACCT = AR_DEF_AR;
         call OUTPUT_FIELD(LOOP_INDEX);
         LOOP_INDEX = 99;
         end;

      end;
   call OUTPUT_FIELD (LOOP_INDEX);
   if LOOP_INDEX =  16 then
      do;

      /* READ_SECOND_5 - Read second */

      GL_ACCOUNT_NO = AR_MCO_GL_ACCT;
      call READ_KEYED (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         GL_ACCOUNT_DESC = "** RECORD NOT FOUND **";
         end;
      else
         do;
         do LOOP_INDEX =  17 to  18;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_E       */

/****************************************************************
	DISPLAY_DATA_I
	Display screen group I
****************************************************************/

DISPLAY_DATA_I:
	procedure;

do LOOP_INDEX =  14 to  14;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_I       */

/****************************************************************
	DISPLAY_DATA_F
	Display the data in group F
****************************************************************/

DISPLAY_DATA_F:
	procedure;

do LOOP_INDEX =  15 to  15;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_F       */

/****************************************************************
	DISPLAY_DATA_G
	Display the data in group G
****************************************************************/

DISPLAY_DATA_G:
	procedure;

do LOOP_INDEX =  17 to  18;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_G       */

/****************************************************************
	AR_MCO_NOTFOUND
	MCO was not found
****************************************************************/

AR_MCO_NOTFOUND:
	procedure;


   /* SET_MCO_SEQ - Set the sequence number of this record */

   AR_MCO_SEQ = CURRENT_TIME();

   call ENTER_DATA_D;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;

   call ENTER_DATA_E;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;

   call ENTER_DATA_F;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;

   call ENTER_DATA_G;
return;
end;	/* AR_MCO_NOTFOUND      */

/****************************************************************
	ENTER_DATA_D
	Enter screen group D
****************************************************************/

ENTER_DATA_D:
	procedure;

AR_MCO_NO = "";
do LOOP_INDEX =   4 to   4;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_D         */

/****************************************************************
	ENTER_DATA_E
	Enter the data in screen group E
****************************************************************/

ENTER_DATA_E:
	procedure;

AR_MCO_DATE_REC = TODAYS_DATE();
AR_MCO_GROSS = 0;
AR_MCO_COMM_PER = 10;
AR_MCO_COMM_AMT = 0;
AR_MCO_TAX_PER = 0;
AR_MCO_TAX_AMT = 0;
AR_MCO_SVC_PER = 0;
AR_MCO_SVC_AMT = 0;
AR_MCO_GL_ACCT = 0;
do LOOP_INDEX =   5 to  12;
   if LOOP_INDEX =   6 then
      AR_MCO_DATE_REC = TODAYS_DATE();
   if LOOP_INDEX =   9 then
      do;
      call OUTPUT_FIELD (LOOP_INDEX);
      LOOP_INDEX = LOOP_INDEX + 1;
      end;
   if LOOP_INDEX =  11 then
      do;
      call OUTPUT_FIELD (LOOP_INDEX);
      LOOP_INDEX = LOOP_INDEX + 1;
      end;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   7 then
      do;
      call RECALC_MCO_NET;
      end;
   if LOOP_INDEX =   8 then
      do;

      /* CHECK_MCO_COMM - Was a comm % entered? */

      if AR_MCO_COMM_PER = 0 then
         call INPUT_FIELD (LOOP_INDEX+1,INPUT_LENGTH,RETURN_CODE);
      else
         do;
         AR_MCO_COMM_AMT = floor(AR_MCO_GROSS * AR_MCO_COMM_PER + 0.5) / 100;
         call OUTPUT_FIELD (LOOP_INDEX+1);
         end;
      call RECALC_MCO_NET;

      end;
   if LOOP_INDEX =  10 then
      do;

      /* CHECK_MCO_TAX - Tax percentage entered? */

      if AR_MCO_TAX_PER = 0 then
         call INPUT_FIELD (LOOP_INDEX+1,INPUT_LENGTH,RETURN_CODE);
      else
         do;
         AR_MCO_TAX_AMT = floor(AR_MCO_GROSS * AR_MCO_TAX_PER + 0.5) / 100;
         call OUTPUT_FIELD (LOOP_INDEX+1);
         end;
      call RECALC_MCO_NET;

      end;
   if LOOP_INDEX =  12 then
      do;

      /* CHECK_MCO_SVC_CHG - Recalc MCO svc charge */

      if AR_MCO_SVC_PER = 0 then
         call INPUT_FIELD (LOOP_INDEX+1,INPUT_LENGTH,RETURN_CODE);
      else
         do;
         AR_MCO_SVC_AMT = floor(AR_MCO_GROSS * AR_MCO_SVC_PER + 0.5) / 100;
         call OUTPUT_FIELD (LOOP_INDEX+1);
         end;
      call RECALC_MCO_NET;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =  13 to  13;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =  16 to  16;
   if LOOP_INDEX =  16 then
      do;

      /* SET_MCO_GL_ACCT - Set up the MCO G/L A/R account */

      if BOOKING_NO = 0 then
         AR_MCO_GL_ACCT = AR_NON_TOUR;
      else
         do;

         /* GET_TOUR_HDR - Get the tour header */

         ERROR_CODE = NORMAL_RETURN;

         HDR_TOUR_CODE = BK_TOUR_CODE;
         HDR_END_ON = BK_DEPARTURE;
         if HDR_END_ON = 0 then
            HDR_END_ON = TODAYS_DATE();
         call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
         if ERROR_CODE ^= END_OF_FILE then
            call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

         if BK_TOUR_CODE ^= HDR_TOUR_CODE then
            ERROR_CODE = END_OF_FILE;
         if BK_DEPARTURE ^= 0 then if BK_DEPARTURE < HDR_START_ON then
            ERROR_CODE = END_OF_FILE;

         AR_MCO_GL_ACCT = HDR_AR_GL;
         if AR_MCO_GL_ACCT = 0 then
            AR_MCO_GL_ACCT = AR_DEF_AR;
         call OUTPUT_FIELD(LOOP_INDEX);
         LOOP_INDEX = 99;
         end;

      end;
   call OUTPUT_FIELD (LOOP_INDEX);
   if LOOP_INDEX =  16 then
      do;

      /* READ_SECOND_5 - Read second */

      GL_ACCOUNT_NO = AR_MCO_GL_ACCT;
      call READ_KEYED (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         GL_ACCOUNT_DESC = "** RECORD NOT FOUND **";
         end;
      else
         do;
         do LOOP_INDEX =  17 to  18;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_E         */

/****************************************************************
	RECALC_MCO_NET
	Recalculate the net MCO amount
****************************************************************/

RECALC_MCO_NET:
	procedure;

declare LOOP_SAVE fixed binary;
LOOP_SAVE = LOOP_INDEX;
AR_MCO_NET = floor((AR_MCO_GROSS - AR_MCO_COMM_AMT + AR_MCO_TAX_AMT -
   AR_MCO_SVC_AMT) * 100 + 0.5) / 100;
call DISPLAY_DATA_I;
AR_MCO_AMT_APPLIED = AR_MCO_NET;
call DISPLAY_DATA_F;
LOOP_INDEX = LOOP_SAVE;

return;
end;	/* RECALC_MCO_NET       */

/****************************************************************
	ENTER_DATA_F
	Enter the data in group F
****************************************************************/

ENTER_DATA_F:
	procedure;

do LOOP_INDEX =  15 to  15;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_F         */

/****************************************************************
	ENTER_DATA_G
	Enter the data in group G
****************************************************************/

ENTER_DATA_G:
	procedure;

GL_ACCOUNT_DESC = "";
AR_MCO_REMARK = "";
do LOOP_INDEX =  17 to  17;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =  18 to  18;
   if LOOP_INDEX =  18 then
      do;

      /* SET_COMM_DEF - Set up a default comment */

      if AR_MCO_AMT_APPLIED = BK_DEPOSIT then
         AR_MCO_REMARK = "Deposit - MCO " !! AR_MCO_NO;
      else
         do;
         if AR_MCO_AMT_APPLIED = BK_BALANCE then
            AR_MCO_REMARK = "Final Pymt - MCO " !! AR_MCO_NO;
         else
            AR_MCO_REMARK = "Payment - MCO " !! AR_MCO_NO;
         end;

      end;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_G         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 99,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  9 then
   do;
   if SELECT <=  4 then
      LOOP_INDEX = SELECT +   4;
   if SELECT =  5 then
      LOOP_INDEX = 10;
   if SELECT =  6 then
      LOOP_INDEX = 12;
   if SELECT >=  7 then if SELECT <=  8 then
      LOOP_INDEX = SELECT +   8;
   if SELECT =  9 then
      LOOP_INDEX = 18;
   if LOOP_INDEX =  16 then
      do;

      /* SET_MCO_GL_ACCT - Set up the MCO G/L A/R account */

      if BOOKING_NO = 0 then
         AR_MCO_GL_ACCT = AR_NON_TOUR;
      else
         do;

         /* GET_TOUR_HDR - Get the tour header */

         ERROR_CODE = NORMAL_RETURN;

         HDR_TOUR_CODE = BK_TOUR_CODE;
         HDR_END_ON = BK_DEPARTURE;
         if HDR_END_ON = 0 then
            HDR_END_ON = TODAYS_DATE();
         call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
         if ERROR_CODE ^= END_OF_FILE then
            call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

         if BK_TOUR_CODE ^= HDR_TOUR_CODE then
            ERROR_CODE = END_OF_FILE;
         if BK_DEPARTURE ^= 0 then if BK_DEPARTURE < HDR_START_ON then
            ERROR_CODE = END_OF_FILE;

         AR_MCO_GL_ACCT = HDR_AR_GL;
         if AR_MCO_GL_ACCT = 0 then
            AR_MCO_GL_ACCT = AR_DEF_AR;
         call OUTPUT_FIELD(LOOP_INDEX);
         LOOP_INDEX = 99;
         end;

      end;
   if LOOP_INDEX =  18 then
      do;

      /* SET_COMM_DEF - Set up a default comment */

      if AR_MCO_AMT_APPLIED = BK_DEPOSIT then
         AR_MCO_REMARK = "Deposit - MCO " !! AR_MCO_NO;
      else
         do;
         if AR_MCO_AMT_APPLIED = BK_BALANCE then
            AR_MCO_REMARK = "Final Pymt - MCO " !! AR_MCO_NO;
         else
            AR_MCO_REMARK = "Payment - MCO " !! AR_MCO_NO;
         end;

      end;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   7 then
      do;
      call RECALC_MCO_NET;
      end;
   if LOOP_INDEX =   8 then
      do;

      /* CHECK_MCO_COMM - Was a comm % entered? */

      if AR_MCO_COMM_PER = 0 then
         call INPUT_FIELD (LOOP_INDEX+1,INPUT_LENGTH,RETURN_CODE);
      else
         do;
         AR_MCO_COMM_AMT = floor(AR_MCO_GROSS * AR_MCO_COMM_PER + 0.5) / 100;
         call OUTPUT_FIELD (LOOP_INDEX+1);
         end;
      call RECALC_MCO_NET;

      end;
   if LOOP_INDEX =  10 then
      do;

      /* CHECK_MCO_TAX - Tax percentage entered? */

      if AR_MCO_TAX_PER = 0 then
         call INPUT_FIELD (LOOP_INDEX+1,INPUT_LENGTH,RETURN_CODE);
      else
         do;
         AR_MCO_TAX_AMT = floor(AR_MCO_GROSS * AR_MCO_TAX_PER + 0.5) / 100;
         call OUTPUT_FIELD (LOOP_INDEX+1);
         end;
      call RECALC_MCO_NET;

      end;
   if LOOP_INDEX =  12 then
      do;

      /* CHECK_MCO_SVC_CHG - Recalc MCO svc charge */

      if AR_MCO_SVC_PER = 0 then
         call INPUT_FIELD (LOOP_INDEX+1,INPUT_LENGTH,RETURN_CODE);
      else
         do;
         AR_MCO_SVC_AMT = floor(AR_MCO_GROSS * AR_MCO_SVC_PER + 0.5) / 100;
         call OUTPUT_FIELD (LOOP_INDEX+1);
         end;
      call RECALC_MCO_NET;

      end;
   if LOOP_INDEX =  16 then
      do;

      /* READ_SECOND_5 - Read second */

      GL_ACCOUNT_NO = AR_MCO_GL_ACCT;
      call READ_KEYED (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =  17 to  18;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
   end;
if SELECT = 95 then
   do;
   call INPUT_FIELD (  1,INPUT_LENGTH,RETURN_CODE);
   call DISPLAY_MSG_NO ( 70);
   end;
if SELECT = 97 then
   do;
   call INPUT_FIELD (  2,INPUT_LENGTH,RETURN_CODE);
   end;
if SELECT = 99 then
   do;
   call INPUT_FIELD(  4,INPUT_LENGTH,RETURN_CODE);
   call INPUT_FIELD( 30,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_FILE (AR_MCO_DET_NO);
   call CLOSE_FILE (GL_CHART_NO);
   call CLOSE_FILE (AM_AGCY_NO);
   call CLOSE_FILE (AR_CONTROL_NO);
   call CLOSE_FILE (BK_TOUR_HDR_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
