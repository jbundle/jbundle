/****************************************************************
	Module: BK_COMM_MAINT
	Top Level Logic: TABLE_DIS_MAINT
	Date: 14-Nov-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_COMM_MAINT
	Display the header and maintain a table
****************************************************************/

%replace BK_COMM_MAINT_1 by 300;
BK_COMM_MAINT:
   procedure(
      BK_TOUR_HDR_RECORD,
      BK_OPT_ALT_RECORD);
%replace BK_COMMENT_NO by  48;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_OPT_ALT_NO by  62;
%include "BK_COMMENT.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_OPT_ALT.DD";

declare		ERROR_CODE           fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		BK_TOUR_SEQ_ARRAY(17) fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
   call INITIALIZE;
   call TABLE_DM_IO;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   BK_TOUR_MOD_CODE = "A";
   BK_TOUR_SEQ = 0;
   BK_COMM_MOD_CODE = "";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_COMM_MAINT_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (BK_COMMENT_NO,"BK_COMMENT",byteaddr(BK_COMMENT_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_COMMENT_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	TABLE_DM_IO
	Table display I/O
****************************************************************/

TABLE_DM_IO:
	procedure;

   call DISPLAY_DATA_A;

   /* OTHER_LOGIC - Any other logic */

   call TABLE_MAINT;
return;
end;	/* TABLE_DM_IO          */

/****************************************************************
	DISPLAY_DATA_A
	Display the items in screen group A
****************************************************************/

DISPLAY_DATA_A:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   2;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_A       */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		BK_TOUR_MOD_NO_SAVE  fixed binary (15);
declare		BK_COMM_TOUR_CODE_SA character (        4);
declare		BK_COMM_ALT_SEQ_SAVE fixed binary (15);
declare		BK_COMM_ANSW_SEQ_SAV fixed binary (15);
declare		BK_TOUR_C_R_SAVE     character (        1);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		BK_COMMENT_ERROR     fixed binary (15);
declare		BK_TOUR_SEQ_SAVE     fixed binary (15);
declare		ANSWER               character (1);
BK_TOUR_MOD_NO = -1;
BK_TOUR_MOD_NO_SAVE = BK_TOUR_MOD_NO;
BK_COMM_TOUR_CODE = HDR_TOUR_CODE;
BK_COMM_TOUR_CODE_SA = BK_COMM_TOUR_CODE;
BK_COMM_ALT_SEQ = 0;
BK_COMM_ALT_SEQ_SAVE = BK_COMM_ALT_SEQ;
BK_COMM_ANSW_SEQ = 0;
BK_COMM_ANSW_SEQ_SAV = BK_COMM_ANSW_SEQ;
BK_TOUR_C_R = "X";
BK_TOUR_C_R_SAVE = BK_TOUR_C_R;
BK_TOUR_SEQ = 0;
call SET_POSITION (BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (BK_TOUR_MOD_NO > BK_TOUR_MOD_NO_SAVE) !
   (BK_COMM_TOUR_CODE > BK_COMM_TOUR_CODE_SA) !
   (BK_COMM_ALT_SEQ > BK_COMM_ALT_SEQ_SAVE) !
   (BK_COMM_ANSW_SEQ > BK_COMM_ANSW_SEQ_SAV) !
   (BK_TOUR_C_R > BK_TOUR_C_R_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 17;
      BK_TOUR_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_COMMENT_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_COMMENT_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 17) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =   3 to   3;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         BK_TOUR_SEQ_ARRAY(RECORD_NUMBER) = BK_TOUR_SEQ;
         call READ_NEXT (BK_COMMENT_NO,KEY_AREA_1,BK_COMMENT_ERROR);
         if (BK_TOUR_MOD_NO > BK_TOUR_MOD_NO_SAVE) !
         (BK_COMM_TOUR_CODE > BK_COMM_TOUR_CODE_SA) !
         (BK_COMM_ALT_SEQ > BK_COMM_ALT_SEQ_SAVE) !
         (BK_COMM_ANSW_SEQ > BK_COMM_ANSW_SEQ_SAV) !
         (BK_TOUR_C_R > BK_TOUR_C_R_SAVE) then
            BK_COMMENT_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      BK_TOUR_SEQ_SAVE = BK_TOUR_SEQ_ARRAY(17);
      BK_TOUR_MOD_NO = BK_TOUR_MOD_NO_SAVE;
      BK_COMM_TOUR_CODE = BK_COMM_TOUR_CODE_SA;
      BK_COMM_ALT_SEQ = BK_COMM_ALT_SEQ_SAVE;
      BK_COMM_ANSW_SEQ = BK_COMM_ANSW_SEQ_SAV;
      BK_TOUR_C_R = BK_TOUR_C_R_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if BK_COMMENT_ERROR ^= END_OF_FILE then
            do;
            BK_TOUR_SEQ = BK_TOUR_SEQ_SAVE;
            call SET_POSITION (BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if BK_TOUR_SEQ_ARRAY(17) = 0 then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      BK_TOUR_MOD_NO = BK_TOUR_MOD_NO_SAVE;
      BK_COMM_TOUR_CODE = BK_COMM_TOUR_CODE_SA;
      BK_COMM_ALT_SEQ = BK_COMM_ALT_SEQ_SAVE;
      BK_COMM_ANSW_SEQ = BK_COMM_ANSW_SEQ_SAV;
      BK_TOUR_C_R = BK_TOUR_C_R_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <= 17) );
         call BK_COMMENT_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (BK_TOUR_SEQ_ARRAY(17) = 0) then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 17;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if BK_TOUR_SEQ_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX = 3 to   3;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 17,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 17 then
   do;
   RECORD_NUMBER = SELECT;
   call BK_COMMENT_LINE;
   call SET_ROW_OFFSET (0);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	BK_COMMENT_LINE
	Change one line in the secondary file
****************************************************************/

BK_COMMENT_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if BK_TOUR_SEQ_ARRAY(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   BK_TOUR_SEQ = BK_TOUR_SEQ_ARRAY(RECORD_NUMBER);
   call READ_KEYED (BK_COMMENT_NO,KEY_AREA_1,ERROR_CODE);
   do LOOP_INDEX =  3 to   3;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   end;
else
   do;
   BK_TOUR_MOD_CODE = "A";
   BK_TOUR_TEXT = "";
   BK_COMM_MOD_CODE = "";
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =   3 to   3;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      BK_TOUR_SEQ = BK_TOUR_SEQ_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (BK_COMMENT_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      BK_TOUR_SEQ = 0;
      end;
   else
      do;
      if REWRITE = NO then
         do;
         if RECORD_NUMBER = 1 then
            BK_TOUR_SEQ = 1;
         else
            BK_TOUR_SEQ = BK_TOUR_SEQ_ARRAY(RECORD_NUMBER - 1) + 1;
         ERROR_CODE = KEY_ALREADY_EXISTS;
         do while (ERROR_CODE = KEY_ALREADY_EXISTS);
            call WRITE_RECORD (BK_COMMENT_NO,ERROR_CODE);
            if ERROR_CODE = KEY_ALREADY_EXISTS then
               BK_TOUR_SEQ = BK_TOUR_SEQ + 1;
         end;
         end;
      else
         call UPDATE_RECORD (BK_COMMENT_NO,ERROR_CODE);
      end;
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      BK_TOUR_SEQ_ARRAY(RECORD_NUMBER) = BK_TOUR_SEQ;
      end;
end;
return;
end;	/* BK_COMMENT_LINE      */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (BK_COMMENT_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
