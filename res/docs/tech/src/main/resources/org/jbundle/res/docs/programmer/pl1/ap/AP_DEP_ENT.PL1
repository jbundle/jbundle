/****************************************************************
	Module: AP_DEP_ENT
	Top Level Logic: AP_DEP_LOGIC
	Date:  4-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AP_DEP_ENT
	Departure Estimate Logic
****************************************************************/

%replace AP_DEP_ENT_1 by  97;
AP_DEP_ENT:
   procedure;
%replace AP_OPEN_NO by  32;
%replace BK_TOUR_NO by  34;
%replace AP_VENDOR_NO by  30;
%replace AD_CURR_NO by  25;
%replace AP_CONTROL_NO by  29;
%replace BK_TOUR_HDR_NO by  58;
%include "AP_OPEN.DD";
%include "BK_TOUR.DD";
%include "AP_VENDOR.DD";
%include "AD_CURR.DD";
%include "AP_DEP_ENT.DD";
%include "AP_CONTROL.DD";
%include "BK_TOUR_HDR.DD";

declare		KEY_NO               fixed binary (15);
declare		ERROR_CODE           fixed binary (15);
declare		END_AP_DEP_MAIN      bit (1);
declare		NOT_FIRST_TIME       bit (1);
declare		END_GET_FIN_EST      bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		LINE                 fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		END_READ_OLD_AP      bit (1);
declare		END_ENTER_TOUR_DEF   bit (1);
declare		END_ENTER_NEW_AP     bit (1);
declare		ERROR_AP_OPEN        fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		ERROR_BK_TOUR        fixed binary (15);
declare		END_DISPLAY_THRU     bit (1);
declare		END_ENTER_AP_TOUR    bit (1);
declare		END_ENTER_AP_VENDOR  bit (1);
declare		ERROR_AP_CONTROL     fixed binary (15);
   call INITIALIZE;

   /* GET_AP_CONTROL - Read the A/P control file */


      /* SET_AP_CONTROL - Set the key to read A/P control file */

      AP_REC_NO = 0;
      KEY_NO = 1;

      /* READ_AP_CONTROL - Read the A/P control file */

      call READ_KEYED (AP_CONTROL_NO,KEY_NO,ERROR_AP_CONTROL);
      if ERROR_AP_CONTROL > 3 then
         call PRINT_ERROR (AP_CONTROL_NO,ERROR_AP_CONTROL);
   END_AP_DEP_MAIN = NO;
   do while (END_AP_DEP_MAIN ^= YES);
      call AP_DEP_MAIN;
   end;

   /* FIX_NO_DEP - Delete and fix next if no dep. est. */

   if AP_NEW_EST = "Y" then
      do;

      /* DELETE_RECORD - Delete the record */

      call DELETE_RECORD (AP_OPEN_NO,ERROR_CODE);
      AP_NEXT_ENTRY = AP_NEXT_ENTRY - 1;
      end;
   else
      do;
      if RETURN_CODE = DELETE_TYPED then
         do;
         if AP_GL_STATUS ^= DEP_TYPE then
            do;
            call DISPLAY_MESSAGE ("Can't delete, already posted to G/L");
            call PRESS_RETURN;
            end;
         else
            do;

            /* DELETE_RECORD - Delete the record */

            call DELETE_RECORD (AP_OPEN_NO,ERROR_CODE);
            end;
         end;
      end;


   /* SET_NEW_NEXT - Set to the current next entry */

   AP_ENTRY_NO = AP_NEXT_ENTRY;


   /* BACK_OUT_AP - Set the AP entry number back */

   AP_REC_NO = 0;

   call READ_KEYED (AP_CONTROL_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = NORMAL_RETURN then
      do;
      if AP_ENTRY_NO >= AP_NEXT_ENTRY then
         AP_NEXT_ENTRY = AP_ENTRY_NO;
      call UPDATE_RECORD (AP_CONTROL_NO,ERROR_CODE);
      end;

   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AP_OPEN_TOUR_GL = 0;
   AP_SERVICES = "";
   AP_START_SVC = 0;
   AP_END_SVC = 0;
   AP_V_BASED_SEQ = 0;
   TOUR_QUADS = 0;
   AP_LAST_ACTIVITY = 0;
   AP_CUR_BAL = 0;
   AP_MTD_PUR = 0;
   AP_YTD_PUR = 0;
   AP_LAST_PUR = 0;
   AP_SELECT_AMT = 0;
   AP_SELECT_STATUS = "N";
   AP_COMM_CODE = "F";
   AP_VEN_TAX_ID = "";
   CURR_CODE = "";
   LAST_EX_DATE = TODAYS_DATE();
   COSTING_EXCH = 0;
   CURR_INT_DESC = "Dollar";
   AP_DEFAULT_TOUR = 0;
   AP_REC_NO = 9999;
   AP_DEF_AC = 1;
   HDR_TOUR_DESC2 = "";
   HDR_START_ON = 0;
   HDR_END_ON = 0;
   HDR_DEF_RATE = "F";
   HDR_DEF_CLASS = "S ";
   HDR_DEF_CUTOFF = 0;
   HDR_UPGRADE_AGCY = "A";
   HDR_INIT_STATUS = "OK";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   LINE = 0;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AP_DEP_ENT_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (AP_OPEN_NO,"AP_OPEN",byteaddr(AP_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_OPEN_NO,ERROR_CODE);
   call OPEN_FILE (BK_TOUR_NO,"BK_TOUR",byteaddr(BK_TOUR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TOUR_NO,ERROR_CODE);
   call OPEN_FILE (AP_VENDOR_NO,"AP_VENDOR",byteaddr(AP_VENDOR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_VENDOR_NO,ERROR_CODE);
   call OPEN_FILE (AD_CURR_NO,"AD_CURR",byteaddr(AD_CURR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_CURR_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (AP_DEP_ENT_RECORD) );
   call OPEN_FILE (AP_CONTROL_NO,"AP_CONTROL",byteaddr(AP_CONTROL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_CONTROL_NO,ERROR_CODE);
   call OPEN_FILE (BK_TOUR_HDR_NO,"BK_TOUR_HDR",byteaddr(BK_TOUR_HDR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TOUR_HDR_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	AP_DEP_MAIN
	Mainline logic
****************************************************************/

AP_DEP_MAIN:
	procedure;


   /* CHECK_DEF_TOUR - Is a default tour selected? */

   if AP_DEFAULT_TOUR = 0 then
      do;

      /* REDISPLAY_SCREEN - Re-display the screen */

      if NOT_FIRST_TIME then
         call DISPLAY_SCREEN (AP_DEP_ENT_1);
      NOT_FIRST_TIME = YES;
      end;
   else
      do;
      call CLEAR_NON_TOUR;
      end;


   /* RESET_INPUT_ERROR - Set input error to NO */

   ERROR_INPUT_SCREEN = NO;

   END_GET_FIN_EST = NO;
   do while (END_GET_FIN_EST ^= YES);
      call GET_FIN_EST;
   end;

   /* RETURN_IF_END - Return if end typed */

   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_AP_DEP_MAIN = YES;
      return;
      end;


   /* AGAIN_IF_AP_LOCK - do again if A/P locked */

   if ERROR_AP_OPEN = RECORD_LOCKED then
      return;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* CHECK_DEL_AP - Check to see if this should be deleted */

   if (RETURN_CODE ^= DELETE_TYPED) & (ERROR_INPUT_SCREEN = NO) then
      do;
      if AP_GL_STATUS <= MAN_FINL then
         do;

         /* INIT_AP_DATA - Init data for any invoice */

         if AP_OPEN_TOUR_GL = 0 then
            AP_OPEN_TOUR_GL = HDR_LAND_GL;
         if AP_OPEN_TOUR_GL = 0 then
            AP_OPEN_TOUR_GL = AP_DEF_TOUR_GL;
         if AP_EST_GL = 0 then
            AP_EST_GL = HDR_UNINV_GL;
         if AP_EST_GL = 0 then
            AP_EST_GL = AP_DEF_EST;
         if AP_OVER_UNDER_GL = 0 then
            AP_OVER_UNDER_GL = HDR_COST_OU_GL;
         if AP_OVER_UNDER_GL = 0 then
            AP_OVER_UNDER_GL = AP_DEF_OU;
         if AP_OPEN_AP_ACCT = 0 then
            AP_OPEN_AP_ACCT = HDR_AP_GL;
         if AP_OPEN_AP_ACCT = 0 then
            AP_OPEN_AP_ACCT = AP_DEF_AP;
         if AP_GAIN_LOSS_GL = 0 then
            AP_GAIN_LOSS_GL = HDR_CURR_OU_GL;
         if AP_GAIN_LOSS_GL = 0 then
            AP_GAIN_LOSS_GL = AP_DEF_GL;


         /* INIT_AP_TOUR_DATA - Init the tour data */

         AP_OPEN_TOUR_CODE = TOUR_CODE;
         AP_OPEN_DEP = TOUR_DEP_DATE;

         AP_GL_ACTION_DATE = AP_OPEN_DEP;
         AP_GL_STATUS = DEP_TYPE;
         end;
      if AP_ENTRY_TYPE = FIN_EST then
         AP_ENTRY_TYPE = DEP_EST;

      /* UPDATE_RECORD - Update the record */

      call UPDATE_RECORD (AP_OPEN_NO,ERROR_CODE);
      end;
   else
      do;

      /* FIX_NO_DEP - Delete and fix next if no dep. est. */

      if AP_NEW_EST = "Y" then
         do;

         /* DELETE_RECORD - Delete the record */

         call DELETE_RECORD (AP_OPEN_NO,ERROR_CODE);
         AP_NEXT_ENTRY = AP_NEXT_ENTRY - 1;
         end;
      else
         do;
         if RETURN_CODE = DELETE_TYPED then
            do;
            if AP_GL_STATUS ^= DEP_TYPE then
               do;
               call DISPLAY_MESSAGE ("Can't delete, already posted to G/L");
               call PRESS_RETURN;
               end;
            else
               do;

               /* DELETE_RECORD - Delete the record */

               call DELETE_RECORD (AP_OPEN_NO,ERROR_CODE);
               end;
            end;
         end;

      end;


   /* DISPLAY_THIS_AP - Add this entry to bottom of screen */

   if (RETURN_CODE ^= DELETE_TYPED) & (AP_NEW_EST = "Y") & (AP_DEFAULT_TOUR ^= 0) then
      do;

      /* RET_LINE_END - Don't display if lines are full */

      if LINE >= 10 then
         return;


      /* SET_LINE_OFFSET - Set the row offset */

      call SET_ROW_OFFSET(LINE);

      call DISPLAY_DATA_B;

      /* INC_LINE - Increment the line */

      LINE = LINE + 1;


      /* RESET_OFFSET - Set row offset to 0 */

      call SET_ROW_OFFSET(0);

      end;
   else
      if AP_DEFAULT_TOUR = 0 then
         do;

         /* RESET_LINE - Init the line offset to 0 */

         LINE = 0;

         end;

return;
end;	/* AP_DEP_MAIN          */

/****************************************************************
	CLEAR_NON_TOUR
	Clear the non-tour fields
****************************************************************/

CLEAR_NON_TOUR:
	procedure;


   /* CLEAR_DATA_E - Clear fields */

   do LOOP_INDEX =   9 to   9;
      call CLEAR_FIELD(LOOP_INDEX);
   end;

   /* CLEAR_DATA_F - Clear the F data */

   do LOOP_INDEX =  10 to  10;
      call CLEAR_FIELD(LOOP_INDEX);
   end;

   /* CLEAR_DATA_G - Clear data */

   do LOOP_INDEX =  11 to  13;
      call CLEAR_FIELD(LOOP_INDEX);
   end;

   /* CLEAR_DATA_H - Clear */

   do LOOP_INDEX =  18 to  18;
      call CLEAR_FIELD(LOOP_INDEX);
   end;

   /* CLEAR_DATA_J - Clear */

   do LOOP_INDEX =  19 to  19;
      call CLEAR_FIELD(LOOP_INDEX);
   end;

   /* CLEAR_DATA_K - Clear data */

   do LOOP_INDEX =  16 to  17;
      call CLEAR_FIELD(LOOP_INDEX);
   end;

   /* CLEAR_DATA_I - Clear screen data */

   do LOOP_INDEX =  14 to  15;
      call CLEAR_FIELD(LOOP_INDEX);
   end;
return;
end;	/* CLEAR_NON_TOUR       */

/****************************************************************
	GET_FIN_EST
	Get a finalization estimate
****************************************************************/

GET_FIN_EST:
	procedure;

   call ENTER_DATA_D;

   /* RETURN_IF_END - Return if end typed */

   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_GET_FIN_EST = YES;
      return;
      end;


   /* RESET_AP_ENTER - Reset flag */

   AP_ENTER_AGAIN = "N";
   AP_NEW_EST = "N";


   /* RESET_INPUT_ERROR - Set input error to NO */

   ERROR_INPUT_SCREEN = NO;


   /* CHECK_ENTRY_NO - What was entered for the A/P entry no? */

   if AP_ENTRY_NO ^= 0 then
      do;
      END_READ_OLD_AP = NO;
      do while (END_READ_OLD_AP ^= YES);
         call READ_OLD_AP;
      end;
      end;
   else
      do;
      if INPUT_LENGTH = 0 then
         do;
         END_ENTER_TOUR_DEF = NO;
         do while (END_ENTER_TOUR_DEF ^= YES);
            call ENTER_TOUR_DEF;
         end;
         end;
      else
         do;
         END_ENTER_NEW_AP = NO;
         do while (END_ENTER_NEW_AP ^= YES);
            call ENTER_NEW_AP;
         end;
         end;
      end;


   /* RETURN_IF_AP_LOCK - Return if A/P record is locked */

   if ERROR_AP_OPEN = RECORD_LOCKED then
      do;
      END_GET_FIN_EST = YES;
      return;
      end;


   /* CHECK_AP_ENTER - Enter number again? */

   if AP_ENTER_AGAIN = "Y" then
      return;


   /* RETURN_IF_END - Return if end typed */

   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_GET_FIN_EST = YES;
      return;
      end;


   /* RETURN - Normal Return */

   do;
   END_GET_FIN_EST = YES;
   return;
   end;

return;
end;	/* GET_FIN_EST          */

/****************************************************************
	ENTER_DATA_D
	Enter screen group D
****************************************************************/

ENTER_DATA_D:
	procedure;

do LOOP_INDEX =   1 to   1;
   if LOOP_INDEX =   1 then
      call DISPLAY_MSG_NO ( 53);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_D         */

/****************************************************************
	READ_OLD_AP
	Entered an A/P number, display
****************************************************************/

READ_OLD_AP:
	procedure;


   /* READ_RECORD - Read the record */

   call READ_KEYED (AP_OPEN_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_AP_OPEN);
   if ERROR_AP_OPEN = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      end;
   if ERROR_AP_OPEN > 3 then
      call PRINT_ERROR (AP_OPEN_NO,ERROR_AP_OPEN);

   /* RETURN_IF_AP_LOCK - Return if A/P record is locked */

   if ERROR_AP_OPEN = RECORD_LOCKED then
      do;
      END_READ_OLD_AP = YES;
      return;
      end;


   /* AP_OPEN_FOUND - Was the fin. ent found? */

   ERROR_INPUT_SCREEN = NO;
   if ERROR_AP_OPEN = NORMAL_RETURN then
      do;
      call CHANGE_OLD_AP;
      end;
   else
      do;

      /* OPEN_NOT_FOUND - Open item not found, input, return */


         /* SET_ENTER_AGAIN - Set the flag to re-enter A/P number */

         AP_ENTER_AGAIN = "Y";


         /* MES_NOT_FOUND - Message - record not found!!! */

         call DISPLAY_MESSAGE ("Record not found!!!<Bel>"c);
         call PRESS_RETURN;


         /* RETURN - Normal Return */

         do;
         END_READ_OLD_AP = YES;
         return;
         end;

      if ERROR_INPUT_SCREEN then return;
      end;

   /* RETURN - Normal Return */

   do;
   END_READ_OLD_AP = YES;
   return;
   end;

return;
end;	/* READ_OLD_AP          */

/****************************************************************
	CHANGE_OLD_AP
	Change an old A/P entry
****************************************************************/

CHANGE_OLD_AP:
	procedure;


   /* CHECK_AP_DEF - Is the tour number one of these? */

   if AP_DEFAULT_TOUR ^= 0 then if AP_DEFAULT_TOUR ^= AP_OPEN_TOUR then
      do;

      /* RESET_DEF_AP - Reset the default tour number */

      if AP_DEFAULT_TOUR ^= 0 then
         do;

         /* REDISPLAY_SCREEN - Re-display the screen */

         if NOT_FIRST_TIME then
            call DISPLAY_SCREEN (AP_DEP_ENT_1);
         NOT_FIRST_TIME = YES;
         call DISPLAY_DATA_D;
         end;
      AP_DEFAULT_TOUR = 0;
      LINE = 0;

      end;


   /* READ_SECOND_2 - Read secondary info */

   TOUR_NO = AP_OPEN_TOUR;
   call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      TOUR_DESC = "** RECORD NOT FOUND **";
      end;
   call DISPLAY_DATA_A;
   call DISPLAY_DATA_C;

   /* READ_TR_TOUR_HDR - Read the tour header - Given tour rec. */


      /* SET_FIRST_THDR - Set first tour hdr using tour record */

      HDR_TOUR_CODE = TOUR_CODE;
      HDR_END_ON = TOUR_DEP_DATE;
      call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

      /* READNEXT_THDR - Read the next one */

      call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE > 3 then
      	call PRINT_ERROR (BK_TOUR_HDR_NO,ERROR_CODE);

      /* CHECK_THDR_OK - Is the header ok? */

      if (TOUR_CODE ^= HDR_TOUR_CODE) !
         (TOUR_DEP_DATE < HDR_START_ON) !
         (TOUR_DEP_DATE > HDR_END_ON) then
            ERROR_CODE = END_OF_FILE;


   /* CHECK_NO_HDR - Was there a tour header? */

   if ERROR_CODE = END_OF_FILE then
      do;
      HDR_LAND_GL = 0;
      HDR_UNINV_GL = 0;
      HDR_COST_OU_GL = 0;
      HDR_AP_GL = 0;
      HDR_CURR_OU_GL = 0;
      end;


   /* INIT_AP_DATA - Init data for any invoice */

   if AP_OPEN_TOUR_GL = 0 then
      AP_OPEN_TOUR_GL = HDR_LAND_GL;
   if AP_OPEN_TOUR_GL = 0 then
      AP_OPEN_TOUR_GL = AP_DEF_TOUR_GL;
   if AP_EST_GL = 0 then
      AP_EST_GL = HDR_UNINV_GL;
   if AP_EST_GL = 0 then
      AP_EST_GL = AP_DEF_EST;
   if AP_OVER_UNDER_GL = 0 then
      AP_OVER_UNDER_GL = HDR_COST_OU_GL;
   if AP_OVER_UNDER_GL = 0 then
      AP_OVER_UNDER_GL = AP_DEF_OU;
   if AP_OPEN_AP_ACCT = 0 then
      AP_OPEN_AP_ACCT = HDR_AP_GL;
   if AP_OPEN_AP_ACCT = 0 then
      AP_OPEN_AP_ACCT = AP_DEF_AP;
   if AP_GAIN_LOSS_GL = 0 then
      AP_GAIN_LOSS_GL = HDR_CURR_OU_GL;
   if AP_GAIN_LOSS_GL = 0 then
      AP_GAIN_LOSS_GL = AP_DEF_GL;


   /* READ_SECOND_3 - Read second */

   AP_VEN_NO = AP_OPEN_VENDOR;
   call READ_KEYED (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      AP_VEN_NAME = "** RECORD NOT FOUND **";
      end;

   /* READ_SECOND_4 - read secondary file */

   CURR_CODE = AP_OPEN_CURR;
   call READ_KEYED (AD_CURR_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      CURR_DESC = "** RECORD NOT FOUND **";
      end;
   else
      do;
      do LOOP_INDEX =  18 to  18;
         call OUTPUT_FIELD (LOOP_INDEX);
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      end;
   call DISPLAY_DATA_E;
   call DISPLAY_DATA_F;
   call DISPLAY_DATA_G;
   call DISPLAY_DATA_H;

   /* SET_DEP_DEF - Set the defaults for this departure est */

   AP_DEP_EXCH = LAST_EXCHANGE;
   if AP_DEP_EST = 0 then
      AP_DEP_EST = AP_FINL_EST;

   call ENTER_DATA_I;

   /* RETURN - Normal Return */

   return;

return;
end;	/* CHANGE_OLD_AP        */

/****************************************************************
	DISPLAY_DATA_D
	Display the data in screen group D
****************************************************************/

DISPLAY_DATA_D:
	procedure;

do LOOP_INDEX =   1 to   1;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_D       */

/****************************************************************
	DISPLAY_DATA_A
	Display the items in screen group A
****************************************************************/

DISPLAY_DATA_A:
	procedure;

do LOOP_INDEX =   2 to   2;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_A       */

/****************************************************************
	DISPLAY_DATA_C
	Display the data in screen group C
****************************************************************/

DISPLAY_DATA_C:
	procedure;

do LOOP_INDEX =   3 to   8;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_C       */

/****************************************************************
	DISPLAY_DATA_E
	Display the data in screen group E
****************************************************************/

DISPLAY_DATA_E:
	procedure;

do LOOP_INDEX =   9 to   9;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_E       */

/****************************************************************
	DISPLAY_DATA_F
	Display the data in group F
****************************************************************/

DISPLAY_DATA_F:
	procedure;

do LOOP_INDEX =  10 to  10;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_F       */

/****************************************************************
	DISPLAY_DATA_G
	Display the data in group G
****************************************************************/

DISPLAY_DATA_G:
	procedure;

do LOOP_INDEX =  11 to  13;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_G       */

/****************************************************************
	DISPLAY_DATA_H
	Display screen group H
****************************************************************/

DISPLAY_DATA_H:
	procedure;

do LOOP_INDEX =  18 to  18;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_H       */

/****************************************************************
	ENTER_DATA_I
	Enter screen group I
****************************************************************/

ENTER_DATA_I:
	procedure;

do LOOP_INDEX =  14 to  14;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =  15 to  15;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =  15 then
      do;

      /* CALC_DEP_USD - Calculate the USD departure estimate */

      AP_DEP_EST_USD = AP_DEP_EST * AP_DEP_EXCH;
      call DISPLAY_DATA_K;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_I         */

/****************************************************************
	DISPLAY_DATA_K
	Display screen group K
****************************************************************/

DISPLAY_DATA_K:
	procedure;

do LOOP_INDEX =  16 to  17;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_K       */

/****************************************************************
	ENTER_TOUR_DEF
	Enter a tour number to use for vouchers
****************************************************************/

ENTER_TOUR_DEF:
	procedure;


   /* RESET_INPUT_ERROR - Set input error to NO */

   ERROR_INPUT_SCREEN = NO;


   /* RESET_DEF_AP - Reset the default tour number */

   if AP_DEFAULT_TOUR ^= 0 then
      do;

      /* REDISPLAY_SCREEN - Re-display the screen */

      if NOT_FIRST_TIME then
         call DISPLAY_SCREEN (AP_DEP_ENT_1);
      NOT_FIRST_TIME = YES;
      call DISPLAY_DATA_D;
      end;
   AP_DEFAULT_TOUR = 0;
   LINE = 0;


   /* CLEAR_DATA_D - Clear fields */

   do LOOP_INDEX =   1 to   1;
      call CLEAR_FIELD(LOOP_INDEX);
   end;
   call ENTER_DATA_A;

   /* RETURN_IF_END - Return if end typed */

   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_ENTER_TOUR_DEF = YES;
      return;
      end;


   /* SETUP_KEY_3 - Set up the key */

   TOUR_NO = AP_OPEN_TOUR;
   KEY_NO = 1;

   /* READ_RECORD_3 - Read the record */

   call READ_KEYED (BK_TOUR_NO,KEY_NO,ERROR_BK_TOUR);
   if ERROR_BK_TOUR > 3 then
      call PRINT_ERROR (BK_TOUR_NO,ERROR_BK_TOUR);

   /* AP_TOUR_FOUND - Was the tour found? */

   ERROR_INPUT_SCREEN = NO;
   if ERROR_BK_TOUR = NORMAL_RETURN then
      do;
      call FOUND_AP_TOUR;
      end;
   else
      do;

      /* RECORD_NOT_FOUND - Record not found */

      call DISPLAY_MESSAGE("Record not found!!!<BEL>"c);
      call PRESS_RETURN;
      ERROR_INPUT_SCREEN = YES;

      if ERROR_INPUT_SCREEN then return;
      end;

   /* READ_TR_TOUR_HDR - Read the tour header - Given tour rec. */


      /* SET_FIRST_THDR - Set first tour hdr using tour record */

      HDR_TOUR_CODE = TOUR_CODE;
      HDR_END_ON = TOUR_DEP_DATE;
      call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

      /* READNEXT_THDR - Read the next one */

      call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE > 3 then
      	call PRINT_ERROR (BK_TOUR_HDR_NO,ERROR_CODE);

      /* CHECK_THDR_OK - Is the header ok? */

      if (TOUR_CODE ^= HDR_TOUR_CODE) !
         (TOUR_DEP_DATE < HDR_START_ON) !
         (TOUR_DEP_DATE > HDR_END_ON) then
            ERROR_CODE = END_OF_FILE;


   /* CHECK_NO_HDR - Was there a tour header? */

   if ERROR_CODE = END_OF_FILE then
      do;
      HDR_LAND_GL = 0;
      HDR_UNINV_GL = 0;
      HDR_COST_OU_GL = 0;
      HDR_AP_GL = 0;
      HDR_CURR_OU_GL = 0;
      end;


   /* RETURN - Normal Return */

   do;
   END_ENTER_TOUR_DEF = YES;
   return;
   end;

return;
end;	/* ENTER_TOUR_DEF       */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

do LOOP_INDEX =   2 to   2;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	FOUND_AP_TOUR
	Found tour, display detail records
****************************************************************/

FOUND_AP_TOUR:
	procedure;


   /* SET_DEF_TOUR - Set the default tour to this tour */

   AP_DEFAULT_TOUR = TOUR_NO;

   call DISPLAY_DATA_C;

   /* SET_FIRST - Set the record pointer to the first rec */

   AP_OPEN_TOUR = TOUR_NO;
   AP_START_SVC = 0;
   AP_ENTRY_NO = 0;
   call SET_POSITION (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
   END_DISPLAY_THRU = NO;
   do while (END_DISPLAY_THRU ^= YES);
      call DISPLAY_THRU;
   end;

   /* SET_ENTER_AGAIN - Set the flag to re-enter A/P number */

   AP_ENTER_AGAIN = "Y";

return;
end;	/* FOUND_AP_TOUR        */

/****************************************************************
	DISPLAY_THRU
	Display all the detail records
****************************************************************/

DISPLAY_THRU:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (AP_OPEN_NO,KEY_AREA_3,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AP_OPEN_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AP_OPEN_TOUR > TOUR_NO) then
      do;
      END_DISPLAY_THRU = YES;
      return;
      end;

   /* SET_LINE_OFFSET - Set the row offset */

   call SET_ROW_OFFSET(LINE);

   call DISPLAY_DATA_B;

   /* RESET_OFFSET - Set row offset to 0 */

   call SET_ROW_OFFSET(0);


   /* INC_LINE - Increment the line */

   LINE = LINE + 1;


   /* CHECK_LINE_END - Is line at 10 yet? */

   declare ANSWER character(1);
   if LINE >= 10 then
      do;
      call DISPLAY_MESSAGE("Continue displaying?");
      call INPUT_DATA (23,23,1,"Y",byteaddr(ANSWER),RETURN_CODE,INPUT_LENGTH);
      if ANSWER = "N" then
         do;
         END_DISPLAY_THRU = YES;
         return;
         end;
      do LINE = 0 to 9;
         call SET_ROW_OFFSET(LINE);
         call CLEAR_DATA_B;
      end;
      LINE = 0;
      call SET_ROW_OFFSET(0);
      end;

return;
end;	/* DISPLAY_THRU         */

/****************************************************************
	CLEAR_DATA_B
	Clear the data in group B
****************************************************************/

CLEAR_DATA_B:
	procedure;

do LOOP_INDEX =  20 to  25;
   call CLEAR_FIELD(LOOP_INDEX);
end;
return;
end;	/* CLEAR_DATA_B         */

/****************************************************************
	ENTER_NEW_AP
	Zero typed, enter new dep. estimate
****************************************************************/

ENTER_NEW_AP:
	procedure;


   /* SET_NEW_EST - This is a new departure estimate */

   AP_NEW_EST = "Y";


   /* SET_FIELDS - Set the values for these fields */

   AP_ENTRY_NO = 0;
   AP_ENTRY_TYPE = 0;
   AP_OPEN_VENDOR = "";
   AP_OPEN_CURR = "";
   AP_OPEN_TOUR_CODE = "";
   AP_OPEN_TOUR_GL = 0;
   AP_OPEN_DEP = 0;
   AP_FINL_EST = 0;
   AP_FINL_DATE = 0;
   AP_DEP_EXCH = 0;
   AP_DEP_EST_USD = 0;
   AP_DEP_EST_GL = 0;
   AP_EST_GL = 0;
   AP_VEN_INV_NO = "";
   AP_INV_ENTERED = 0;
   AP_VEN_INV_DATE = 0;
   AP_VEN_INV_GL = 0;
   AP_VEN_INV_AMT = 0;
   AP_VEN_INV_USD = 0;
   AP_INV_BAL = 0;
   AP_INV_BAL_USD = 0;
   AP_OPEN_AP_ACCT = 0;
   AP_OVER_UNDER_GL = 0;
   AP_OPEN_SELECT = "N";
   AP_AMT_SELECTED = 0;
   AP_GAIN_LOSS_GL = 0;
   AP_PAID_USD = 0;
   AP_PYMT_DATE = 0;
   AP_V_BASED_BK = 0;
   AP_V_BASED_MOD = 0;
   AP_V_BASED_PAX = 0;
   AP_V_BASED_SEQ = 0;
   BK_V_DATE = 0;
   AP_ACK_DATE = 0;
   AP_ACKED_ON = 0;
   AP_ACK_BY = "";
   AP_GL_STATUS = 0;
   AP_GL_ACTION_DATE = 0;
   AP_ENTRY_TYPE_DESC = "";
   AP_V_DESC = "";
   AP_OPEN_TYPE = "";
   AP_OPEN_CURRENT = "N";

   /* INIT_AP_FIELDS - Init the special A/P open fields */

   AP_ENTRY_NO = AP_NEXT_ENTRY;
   AP_ENTRY_TYPE = FIN_EST;
   AP_OPEN_TOUR = TOUR_NO;
   AP_OPEN_TOUR_CODE = TOUR_CODE;
   AP_OPEN_DEP = TOUR_DEP_DATE;
   AP_START_SVC = TOUR_DEP_DATE;
   AP_END_SVC = TOUR_DEP_DATE;
   AP_FINL_DATE = TODAYS_DATE();

   AP_GL_STATUS = MAN_FINL;
   AP_GL_ACTION_DATE = TODAYS_DATE();


   /* GET_AP_ENTRY - Get the next A/P number and assign */


      /* WRITE_AP - Write the A/P entry number */

      ERROR_CODE = KEY_ALREADY_EXISTS;
      do while(ERROR_CODE = KEY_ALREADY_EXISTS);
         call WRITE_RECORD (AP_OPEN_NO+?LOCK_RECORD,ERROR_CODE);
         if ERROR_CODE = KEY_ALREADY_EXISTS then
            AP_ENTRY_NO = AP_ENTRY_NO + 1;
      end;

      /* SET_NEXT_ENTRY - Set up for exit */

      AP_NEXT_ENTRY = AP_ENTRY_NO + 1;

   call DISPLAY_DATA_D;

   /* RESET_INPUT_ERROR - Set input error to NO */

   ERROR_INPUT_SCREEN = NO;


   /* ENTER_NEW_TOUR - Enter/Read the tour for a new dep. est. */

   if AP_DEFAULT_TOUR = 0 then
      do;
      END_ENTER_AP_TOUR = NO;
      do while (END_ENTER_AP_TOUR ^= YES);
         call ENTER_AP_TOUR;
      end;
      end;
   else
      do;

      /* NO_CODE - This section has no code */

      /* No code in this section */
      end;


   /* INIT_AP_DATA - Init data for any invoice */

   if AP_OPEN_TOUR_GL = 0 then
      AP_OPEN_TOUR_GL = HDR_LAND_GL;
   if AP_OPEN_TOUR_GL = 0 then
      AP_OPEN_TOUR_GL = AP_DEF_TOUR_GL;
   if AP_EST_GL = 0 then
      AP_EST_GL = HDR_UNINV_GL;
   if AP_EST_GL = 0 then
      AP_EST_GL = AP_DEF_EST;
   if AP_OVER_UNDER_GL = 0 then
      AP_OVER_UNDER_GL = HDR_COST_OU_GL;
   if AP_OVER_UNDER_GL = 0 then
      AP_OVER_UNDER_GL = AP_DEF_OU;
   if AP_OPEN_AP_ACCT = 0 then
      AP_OPEN_AP_ACCT = HDR_AP_GL;
   if AP_OPEN_AP_ACCT = 0 then
      AP_OPEN_AP_ACCT = AP_DEF_AP;
   if AP_GAIN_LOSS_GL = 0 then
      AP_GAIN_LOSS_GL = HDR_CURR_OU_GL;
   if AP_GAIN_LOSS_GL = 0 then
      AP_GAIN_LOSS_GL = AP_DEF_GL;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_ENTER_NEW_AP = YES;
      return;
      end;

   END_ENTER_AP_VENDOR = NO;
   do while (END_ENTER_AP_VENDOR ^= YES);
      call ENTER_AP_VENDOR;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_ENTER_NEW_AP = YES;
      return;
      end;


   /* SET_AP_DEP_EST - This is a departure estimate, set it up */

   AP_DEP_EST = 0;
   AP_DEP_EXCH = LAST_EXCHANGE;

   AP_START_SVC = TOUR_DEP_DATE;
   AP_END_SVC = TOUR_DEP_DATE;

   call ENTER_DATA_G;
   call ENTER_DATA_I;

   /* RETURN - Normal Return */

   do;
   END_ENTER_NEW_AP = YES;
   return;
   end;

return;
end;	/* ENTER_NEW_AP         */

/****************************************************************
	ENTER_AP_TOUR
	Enter the tour information
****************************************************************/

ENTER_AP_TOUR:
	procedure;

   call ENTER_DATA_A;

   /* RETURN_IF_END - Return if end typed */

   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_ENTER_AP_TOUR = YES;
      return;
      end;


   /* SETUP_KEY_3 - Set up the key */

   TOUR_NO = AP_OPEN_TOUR;
   KEY_NO = 1;

   /* READ_RECORD_3 - Read the record */

   call READ_KEYED (BK_TOUR_NO,KEY_NO,ERROR_BK_TOUR);
   if ERROR_BK_TOUR > 3 then
      call PRINT_ERROR (BK_TOUR_NO,ERROR_BK_TOUR);

   /* FIND_AP_TOUR - Do I find the tour record? */

   ERROR_INPUT_SCREEN = NO;
   if ERROR_BK_TOUR = NORMAL_RETURN then
      do;
      call DISPLAY_DATA_C;
      end;
   else
      do;

      /* REC_NOT_FOUND - Display rec not found and do again */


         /* RECORD_NOT_FOUND - Record not found */

         call DISPLAY_MESSAGE("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         ERROR_INPUT_SCREEN = YES;


         /* DO_AGAIN - Return to do it again */

         return;

      if ERROR_INPUT_SCREEN then return;
      end;

   /* READ_TR_TOUR_HDR - Read the tour header - Given tour rec. */


      /* SET_FIRST_THDR - Set first tour hdr using tour record */

      HDR_TOUR_CODE = TOUR_CODE;
      HDR_END_ON = TOUR_DEP_DATE;
      call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

      /* READNEXT_THDR - Read the next one */

      call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE > 3 then
      	call PRINT_ERROR (BK_TOUR_HDR_NO,ERROR_CODE);

      /* CHECK_THDR_OK - Is the header ok? */

      if (TOUR_CODE ^= HDR_TOUR_CODE) !
         (TOUR_DEP_DATE < HDR_START_ON) !
         (TOUR_DEP_DATE > HDR_END_ON) then
            ERROR_CODE = END_OF_FILE;


   /* CHECK_NO_HDR - Was there a tour header? */

   if ERROR_CODE = END_OF_FILE then
      do;
      HDR_LAND_GL = 0;
      HDR_UNINV_GL = 0;
      HDR_COST_OU_GL = 0;
      HDR_AP_GL = 0;
      HDR_CURR_OU_GL = 0;
      end;


   /* RETURN - Normal Return */

   do;
   END_ENTER_AP_TOUR = YES;
   return;
   end;

return;
end;	/* ENTER_AP_TOUR        */

/****************************************************************
	ENTER_AP_VENDOR
	Enter the vendor number
****************************************************************/

ENTER_AP_VENDOR:
	procedure;

   call ENTER_DATA_E;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_ENTER_AP_VENDOR = YES;
      return;
      end;


   /* READ_SECOND - Read info and display secondary fileinfo */

   AP_VEN_NO = AP_OPEN_VENDOR;
   call READ_KEYED (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
      call PRESS_RETURN;
      call CLEAR_MESSAGE;
      RETURN_CODE = DO_AGAIN;
      LOOP_INDEX = LOOP_INDEX - 1;
      end;
   else
      do;
      do LOOP_INDEX =  10 to  10;
         call OUTPUT_FIELD (LOOP_INDEX);
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      end;

   /* AGAIN_IF_ERROR - return if ERROR ^= 0 */

   if ERROR_CODE ^= NORMAL_RETURN then
      return;


   /* SET_AP_CURR - Set A/P currency */

   AP_OPEN_CURR = AP_VEN_CURR;


   /* READ_SECOND_4 - read secondary file */

   CURR_CODE = AP_OPEN_CURR;
   call READ_KEYED (AD_CURR_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      CURR_DESC = "** RECORD NOT FOUND **";
      end;
   else
      do;
      do LOOP_INDEX =  18 to  18;
         call OUTPUT_FIELD (LOOP_INDEX);
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      end;
   call DISPLAY_DATA_H;

   /* RETURN - Normal Return */

   do;
   END_ENTER_AP_VENDOR = YES;
   return;
   end;

return;
end;	/* ENTER_AP_VENDOR      */

/****************************************************************
	ENTER_DATA_E
	Enter the data in screen group E
****************************************************************/

ENTER_DATA_E:
	procedure;

AP_OPEN_VENDOR = "";
do LOOP_INDEX =   9 to   9;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_E         */

/****************************************************************
	ENTER_DATA_G
	Enter the data in group G
****************************************************************/

ENTER_DATA_G:
	procedure;

do LOOP_INDEX =  11 to  13;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_G         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 91,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  1 then
   do;
   if SELECT =  1 then
      LOOP_INDEX = 11;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   end;
if SELECT =  2 then
   do;
   do LOOP_INDEX =  12 to  13;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   end;
if SELECT =  3 then
   do;
   call INPUT_FIELD ( 15,INPUT_LENGTH,RETURN_CODE);
      do;

      /* CALC_DEP_USD - Calculate the USD departure estimate */

      AP_DEP_EST_USD = AP_DEP_EST * AP_DEP_EXCH;
      call DISPLAY_DATA_K;

      end;
   end;
if SELECT = 89 then
   do;
   do LOOP_INDEX =   1 to   2;
      if LOOP_INDEX =   1 then
         call DISPLAY_MSG_NO ( 53);
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   end;
if SELECT = 91 then
   do;
   call INPUT_FIELD (  9,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	DISPLAY_DATA_B
	Display the screen data in group B
****************************************************************/

DISPLAY_DATA_B:
	procedure;

do LOOP_INDEX =  20 to  25;
   if LOOP_INDEX =  21 then
      do;

      /* SET_AP_TYPE - Set up the type description */

      do case (AP_ENTRY_TYPE);
         AP_ENTRY_TYPE_DESC = "Brk Pmt";
         AP_ENTRY_TYPE_DESC = "Dr Memo";
         AP_ENTRY_TYPE_DESC = "PrePymt";
         AP_ENTRY_TYPE_DESC = "Cr Memo";
         AP_ENTRY_TYPE_DESC = "Cr Inv";
         AP_ENTRY_TYPE_DESC = "Invoice";
         AP_ENTRY_TYPE_DESC = "Dr Memo";
         AP_ENTRY_TYPE_DESC = "PrePymt";
         AP_ENTRY_TYPE_DESC = "Brk Dft";
         AP_ENTRY_TYPE_DESC = "PP Req ";
         AP_ENTRY_TYPE_DESC = "Cr Memo";
         AP_ENTRY_TYPE_DESC = "Cr Inv";
         AP_ENTRY_TYPE_DESC = "Invoice";
         AP_ENTRY_TYPE_DESC = "Dep Est";
         AP_ENTRY_TYPE_DESC = "Fin Est";
      end;
      otherwise
         AP_ENTRY_TYPE_DESC = "";

      end;
   if LOOP_INDEX =  25 then
      do;

      /* SET_DEP_FIN_EST - Set departure/fin estimate */

      AP_DEP_FIN_EST = AP_DEP_EST;
      if AP_ENTRY_TYPE = FIN_EST then
         AP_DEP_FIN_EST = AP_FINL_EST;

      end;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_B       */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AP_OPEN_NO);
   call CLOSE_FILE (BK_TOUR_NO);
   call CLOSE_FILE (AP_VENDOR_NO);
   call CLOSE_FILE (AD_CURR_NO);
   call CLOSE_FILE (AP_CONTROL_NO);
   call CLOSE_FILE (BK_TOUR_HDR_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
