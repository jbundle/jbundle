/****************************************************************
	Module: AR_CASH_CONF
	Top Level Logic: REPORT_LOGIC
	Date: 28-Jan-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AR_CASH_CONF
	Standard report logic
****************************************************************/

%replace AR_CASH_CONF_1 by 516;
%replace AR_CASH_CONF_2 by 515;
AR_CASH_CONF:
   procedure(
      AR_CASH_BATCH_RECORD,
      AR_CASH_REC_RECORD);
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace BK_PASSENGERS_NO by  49;
%replace AR_CASH_BATCH_NO by  96;
%replace AR_CASH_REC_NO by  42;
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "AR_CASH_CONF.DD";
%include "BK_PASSENGERS.DD";
%include "AR_CASH_BATCH.DD";
%include "AR_CASH_REC.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		FIRST_TIME           bit (1);
declare		END_SET_AR_PAX       bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;
   TOUR_QUADS = 0;
   AR_PAX_NAME = "";
   AR_PAX_SEQ = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AR_CASH_CONF_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
   call OPEN_FILE (BK_TOUR_NO,"BK_TOUR",byteaddr(BK_TOUR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TOUR_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (AR_CASH_CONF_RECORD) );
   call OPEN_FILE (BK_PASSENGERS_NO,"BK_PASSENGERS",byteaddr(BK_PASSENGERS_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_PASSENGERS_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (AR_CASH_CONF_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   AR_CASH_USER = BATCH_USER;
   AR_CASH_BK_SEQ = 0;
   call SET_POSITION (AR_CASH_REC_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =  24 to   1;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   1;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  0,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =  24 to   1;
   call PRINT_REPORT_LINE;
end;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (AR_CASH_REC_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AR_CASH_REC_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AR_CASH_USER > BATCH_USER) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* SKIP_NO_AR_BK - Skip if no booking number (manual bk) */

   if AR_CASH_BK_NO = 0 then
      return;


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */


   /* READ_SECOND - Read info and display secondary fileinfo */

   BK_MODIFICATION = 0;
   BOOKING_NO = AR_CASH_BK_NO;
   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      end;
   else
      do;
      end;

   /* READ_SECOND_2 - Read secondary info */

   TOUR_NO = BK_TOUR_NUM;
   call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_NOT_FOUND then
      do;
      TOUR_DESC = "** RECORD NOT FOUND **";
      end;

   /* GET_AR_PAX - Get the A/R passenger name (first 4) */

   do AR_PAX_SEQ = 1 to 4;
      AR_PAX_NAME(AR_PAX_SEQ) = "";
   end;

   AR_PAX_SEQ = 1;
   if BOOKING_NO ^= 0 then
      do;

      /* SET_FIRST_PAX - Set up for seq read */

      BK_PAX_MOD = BK_MODIFICATION;
      BK_PAX_BK_NO = BOOKING_NO;
      BK_PAX_SEQ = 0;
      call SET_POSITION (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
      END_SET_AR_PAX = NO;
      do while (END_SET_AR_PAX ^= YES);
         call SET_AR_PAX;
      end;
      end;


   /* CALC_NEW_AR_BAL - Calc the new A/R balance for pymt conf */

   BK_BALANCE = BK_BALANCE - AR_AMT_APPLIED;

   do LOOP_INDEX =   1 to  14;
      call PRINT_REPORT_LINE;
   end;

   /* CHECK_AR_FINAL - Which last line should be printed? */

   if BK_BALANCE > 0 then
      do;

      /* PRINT_LINE_D1 -  */

      do LOOP_INDEX =  15 to  15;
         call PRINT_REPORT_LINE;
      end;
      end;
   else
      do;

      /* PRINT_LINE_D2 - Print lines */

      do LOOP_INDEX =  16 to  16;
         call PRINT_REPORT_LINE;
      end;
      end;

   LINE = 100;


   /* ADD_TOTALS - Add to the total fields */


   /* OTHER_LOGIC - Any other logic */

return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	SET_AR_PAX
	Set up all the pax names
****************************************************************/

SET_AR_PAX:
	procedure;


   /* READ_NEXT_PAX - Read the next passenger */

   call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_PASSENGERS_NO,ERROR_CODE);

   /* CHECK_END_PAX - Check for the end of the passengers */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_PAX_MOD > BK_MODIFICATION) !
   (BK_PAX_BK_NO > BOOKING_NO) then
      do;
      END_SET_AR_PAX = YES;
      return;
      end;

   /* SET_AR_PAX_NAME - Set the passenger name */

   if AR_PAX_SEQ > 4 then
      do;
      END_SET_AR_PAX = YES;
      return;
      end;

   AR_PAX_NAME(AR_PAX_SEQ) = BK_PAX_NAME;

   AR_PAX_SEQ = AR_PAX_SEQ + 1;

return;
end;	/* SET_AR_PAX           */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_FILE (BK_TOUR_NO);
   call CLOSE_FILE (BK_PASSENGERS_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
