/****************************************************************
	Module: BK_FIT_TRANS
	Top Level Logic: BK_TRANS_LOGIC
	Date:  5-Jan-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_FIT_TRANS
	Top Level for Transportation entry
****************************************************************/

%replace BK_FIT_TRANS_1 by 257;
BK_FIT_TRANS:
   procedure(
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      AD_CURR_RECORD,
      BK_TRANS_RECORD,
      BK_TRANS_PRICE_RECORD,
      BK_DET_LAND_RECORD,
      BK_LAND_RECORD,
      BK_LAND_DET_RECORD);
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%replace AD_CURR_NO by  25;
%replace BK_TRANS_NO by  64;
%replace BK_TRANS_PRICE_NO by  69;
%replace BK_DET_LAND_NO by  68;
%replace BK_LAND_NO by  54;
%replace BK_LAND_DET_NO by  91;
%include "BK_FIT_TRANS.DD";
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";
%include "AD_CURR.DD";
%include "BK_TRANS.DD";
%include "BK_TRANS_PRICE.DD";
%include "BK_DET_LAND.DD";
%include "BK_LAND.DD";
%include "BK_LAND_DET.DD";

declare		ERROR_CODE           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		END_ENT_TRANS_PRICES bit (1);
declare		END_CHANGE_FIT_TRANS bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		END_ENTER_LAND_CURR  bit (1);
   call INITIALIZE;
   call TRANS_DETAIL_MAIN;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   TRANS_MARKUP = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_FIT_TRANS_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_FIT_TRANS_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	TRANS_DETAIL_MAIN
	Transportation detail - mainline logic
****************************************************************/

TRANS_DETAIL_MAIN:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_TRANS       fixed binary (15);

   /* CHECK_TRANS_CODE - Trans code passed in? */

   if TDTT_TRANS_NO = "" then
      do;
      call ENTER_DATA_A;
      end;
   else
      do;
      call DISPLAY_DATA_A;
      end;


   /* RETURN_IF_END - Return if end typed */

   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      return;


   /* GET_TRANS_REC - Read/Enter the transportation record */

   if TRANS_NO ^= TDTT_TRANS_NO then
      do;
      if LDET_MANUAL ^= "" then
         do;
         TRANS_FROM = substr(LDET_MANUAL,1,3);
         TRANS_TO = substr(LDET_MANUAL,4,3);
         end;
      else
         do;

         /* GET_TRANS_RECD - Read in the transportation description */


            /* RESET_ERROR - Reset the error code to zero */

            ERROR_CODE = 0;


            /* SETUP_TRANS_CODE - Set the transportation code */

            TRANS_NO = TDTT_TRANS_NO;


            /* READ_TRANS - Read a transportation record */

            call READ_KEYED (BK_TRANS_NO,KEY_AREA_1,ERROR_BK_TRANS);
            if ERROR_BK_TRANS > 3 then
               call PRINT_ERROR (BK_TRANS_NO,ERROR_BK_TRANS);

            /* RESET_ERROR - Reset the error code to zero */

            ERROR_CODE = 0;


            /* FIT_TRANS_FOUND - Transportation record found? */

            ERROR_INPUT_SCREEN = NO;
            if ERROR_BK_TRANS = NORMAL_RETURN then
               do;

               /* NO_CODE - This section has no code */

               /* No code in this section */
               end;
            else
               do;
               call TRANS_NOT_FOUND;
               if ERROR_INPUT_SCREEN then return;
               end;

            /* RETURN_IF_ERROR - Return if ERROR_CODE <> 0 */

            if ERROR_CODE ^= NORMAL_RETURN then
               return;

         end;
      end;

   call DISPLAY_DATA_B;
   call DISPLAY_DATA_I;
   call DISPLAY_DATA_C;

   /* CHECK_TRANS_DATE - Has the transportation date been entered */

   if LDET_DATE = 0 then
      do;
      LDET_DATE = BK_DEPARTURE;
      call ENTER_DATA_M;
      end;
   else
      do;

      /* DISPLAY_DATA_M - Display group M */

      do LOOP_INDEX =  14 to  14;
         call OUTPUT_FIELD (LOOP_INDEX);
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      end;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;

   call BK_COST_LAND;

   /* CHECK_TRANS_IN - Check to see that the trans. is in */

   if LDTT_CLASS = 0 then
      do;
      END_ENT_TRANS_PRICES = NO;
      do while (END_ENT_TRANS_PRICES ^= YES);
         call ENT_TRANS_PRICES;
      end;
      end;
   else
      do;
      call DIS_TRANS_PRICES;
      end;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;

   call DISPLAY_DATA_Q;
   call DISPLAY_DATA_R;

   /* DISPLAY_DATA_S - Display */

   do LOOP_INDEX =  46 to  46;
      call OUTPUT_FIELD (LOOP_INDEX);
   end;
   LOOP_INDEX = LOOP_INDEX - 1;

   /* DISPLAY_DATA_T - DISPLAY */

   do LOOP_INDEX =  47 to  47;
      call OUTPUT_FIELD (LOOP_INDEX);
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   END_CHANGE_FIT_TRANS = NO;
   do while (END_CHANGE_FIT_TRANS ^= YES);
      call CHANGE_FIT_TRANS;
   end;
return;
end;	/* TRANS_DETAIL_MAIN    */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

do LOOP_INDEX =  11 to  11;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	DISPLAY_DATA_A
	Display the items in screen group A
****************************************************************/

DISPLAY_DATA_A:
	procedure;

do LOOP_INDEX =  11 to  11;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_A       */

/****************************************************************
	TRANS_NOT_FOUND
	Transportation not found, enter manual?
****************************************************************/

TRANS_NOT_FOUND:
	procedure;

declare		ANSWER               character (1);

   /* INIT_TRANS_REC - Clear trans rec for display */

   TRANS_FROM = "";
   TRANS_TO = "";
   TRANS_REV_CODE = "";
   TRANS_VEN_NO = "";
   TRANS_FREQ = "";
   TRANS_HRS = 0;
   TRANS_DISTANCE = "";
   TRANS_COMMENT( 1) = "";
   TRANS_COMMENT( 2) = "";
   TRANS_COMMENT( 3) = "";
   TRANS_BREAKFAST = 0;
   TRANS_LUNCH = 0;
   TRANS_DINNER = 0;


   /* MANUAL_TRANS - Manual entryu */

   call DISPLAY_MESSAGE ("Transportation not found, Enter manual prices?");
   call INPUT_DATA (23,48,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
   if ANSWER ^= "Y" then
      do;
      ERROR_CODE = 1;
      return;
      end;

   call ENTER_DATA_B;
   END_ENTER_LAND_CURR = NO;
   do while (END_ENTER_LAND_CURR ^= YES);
      call ENTER_LAND_CURR;
   end;

   /* MANUAL_CLASS_1 - Set fot manual record */

   LDET_MANUAL = TRANS_FROM !! TRANS_TO;
   LDET_EXCHANGE = COSTING_EXCH;
   LDTT_CLASS = 0;


   /* RESET_ERROR - Reset the error code to zero */

   ERROR_CODE = 0;

return;
end;	/* TRANS_NOT_FOUND      */

/****************************************************************
	ENTER_DATA_B
	Enter the screen data for group B
****************************************************************/

ENTER_DATA_B:
	procedure;

TRANS_FROM = "";
TRANS_TO = "";
do LOOP_INDEX =  12 to  13;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_B         */

/****************************************************************
	ENTER_LAND_CURR
	Enter the land currency rates
****************************************************************/

ENTER_LAND_CURR:
	procedure;

   call ENTER_DATA_C;

   /* RETURN_IF_NO_ERROR - Return if ERROR_CODE = 0 */

   if ERROR_CODE = NORMAL_RETURN then
      do;
      END_ENTER_LAND_CURR = YES;
      return;
      end;

return;
end;	/* ENTER_LAND_CURR      */

/****************************************************************
	ENTER_DATA_C
	Enter the screen data in group C
****************************************************************/

ENTER_DATA_C:
	procedure;

TRANS_VEN_NO = "";
TRANS_CURR = "";
do LOOP_INDEX =  15 to  15;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =  16 to  16;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =  16 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      CURR_CODE = TRANS_CURR;
      call READ_KEYED (AD_CURR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         CURR_DESC = "** RECORD NOT FOUND **";
         end;
      else
         do;
         do LOOP_INDEX =  17 to  18;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_C         */

/****************************************************************
	DISPLAY_DATA_B
	Display the screen data in group B
****************************************************************/

DISPLAY_DATA_B:
	procedure;

do LOOP_INDEX =  12 to  13;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_B       */

/****************************************************************
	DISPLAY_DATA_I
	Display screen group I
****************************************************************/

DISPLAY_DATA_I:
	procedure;

do LOOP_INDEX =  30 to  39;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_I       */

/****************************************************************
	DISPLAY_DATA_C
	Display the data in screen group C
****************************************************************/

DISPLAY_DATA_C:
	procedure;

do LOOP_INDEX =  15 to  16;
   call OUTPUT_FIELD (LOOP_INDEX);
   if LOOP_INDEX =  16 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      CURR_CODE = TRANS_CURR;
      call READ_KEYED (AD_CURR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         CURR_DESC = "** RECORD NOT FOUND **";
         end;
      else
         do;
         do LOOP_INDEX =  17 to  18;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_C       */

/****************************************************************
	ENTER_DATA_M
	Enter screen group M
****************************************************************/

ENTER_DATA_M:
	procedure;

do LOOP_INDEX =  14 to  14;
   if LOOP_INDEX =  14 then
      do;

      /* SET_DATE_DEF - Set a default date */

      if LDET_DATE = 0 then
         LDET_DATE = TODAYS_DATE() + 31;

      end;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_M         */

/****************************************************************
	BK_COST_LAND
	Call the module to cost this land mod
****************************************************************/

BK_COST_LAND:
	procedure;

%include "BK_COST_LAND.DCL";
call BK_COST_LAND(
   BK_BOOKING_RECORD,
   BK_TOUR_RECORD,
   BK_TOUR_HDR_RECORD,
   BK_DET_LAND_RECORD,
   BK_LAND_RECORD,
   AD_CURR_RECORD,
   BK_LAND_DET_RECORD,
   BK_TRANS_RECORD,
   BK_TRANS_PRICE_RECORD);
return;
end;	/* BK_COST_LAND         */

/****************************************************************
	ENT_TRANS_PRICES
	Enter the prices
****************************************************************/

ENT_TRANS_PRICES:
	procedure;


   /* RESET_INPUT_ERROR - set input erro to no */

   ERROR_INPUT_SCREEN = NO;


   /* RESET_ERROR - Reset the error code to zero */

   ERROR_CODE = 0;

   call READ_TRANS_PRICE;

   /* SELECT_CLASS - Select the class */

   if (LDET_VARIES_COST(1) = 0) &
      (LDET_VARIES_COST(2) = 0) &
      (LDET_VARIES_COST(3) = 0) &
      (LDET_VARIES_COST(4) = 0) then
         do;

         /* ENTER_DATA_K - Enter data K */

         TRANS_CL_NO = 1;
         TRANS_CLASS = "Manual";
         TRANS_PRICE = 0;
         do LOOP_INDEX =  22 to  23;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         do LOOP_INDEX =  24 to  24;
            call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
            if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
               do;
               ERROR_INPUT_SCREEN = YES;
               return;
               end;
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         LDET_VARIES_CODE(1) = "XX";
         LDET_VARIES_COST(1) = TRANS_PRICE;
         LDTT_CLASS = 1;
         end;
      else
         do;
         call ENTER_DATA_D;
         end;

   call BK_COST_LAND;

   /* DISPLAY_DATA_O - Display data O */

   do LOOP_INDEX =  25 to  25;
      call OUTPUT_FIELD (LOOP_INDEX);
   end;
   LOOP_INDEX = LOOP_INDEX - 1;

   /* RETURN - Normal Return */

   do;
   END_ENT_TRANS_PRICES = YES;
   return;
   end;

return;
end;	/* ENT_TRANS_PRICES     */

/****************************************************************
	READ_TRANS_PRICE
	Read and display the trans. prices
****************************************************************/

READ_TRANS_PRICE:
	procedure;

TRANS_PR_NO = TRANS_NO;
TRANS_END = LDET_DATE;
TRANS_CL_NO = 1;
TRANS_TO_PAX = TOUR_PAX;
call SET_POSITION (BK_TRANS_PRICE_NO,KEY_AREA_1,ERROR_CODE);

ERROR_CODE = NORMAL_RETURN;
do while (ERROR_CODE = NORMAL_RETURN);
   call READ_NEXT (BK_TRANS_PRICE_NO,KEY_AREA_1,ERROR_CODE);
   if TRANS_PR_NO ^= TRANS_NO then
      ERROR_CODE = END_OF_FILE;
   if (ERROR_CODE = NORMAL_RETURN) &
      (TRANS_START <= LDET_DATE) &
      (TRANS_END >= LDET_DATE) &
      (TRANS_FROM_PAX <= TOUR_PAX) &
      (TRANS_TO_PAX >= TOUR_PAX) then
         do;
         TRANS_CL_PRICE(TRANS_CL_NO) = TRANS_PRICE;
         call SET_ROW_OFFSET(TRANS_CL_NO - 1);
         call DISPLAY_DATA_K;
         end;
end;

call SET_ROW_OFFSET(0);

return;
end;	/* READ_TRANS_PRICE     */

/****************************************************************
	DISPLAY_DATA_K
	Display screen group K
****************************************************************/

DISPLAY_DATA_K:
	procedure;

do LOOP_INDEX =  22 to  24;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_K       */

/****************************************************************
	ENTER_DATA_D
	Enter screen group D
****************************************************************/

ENTER_DATA_D:
	procedure;

LDTT_CLASS = 1;
do LOOP_INDEX =  20 to  20;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_D         */

/****************************************************************
	DIS_TRANS_PRICES
	Display the trans. prices
****************************************************************/

DIS_TRANS_PRICES:
	procedure;

   call READ_TRANS_PRICE;
   call DISPLAY_DATA_D;

   /* DISPLAY_DATA_O - Display data O */

   do LOOP_INDEX =  25 to  25;
      call OUTPUT_FIELD (LOOP_INDEX);
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DIS_TRANS_PRICES     */

/****************************************************************
	DISPLAY_DATA_D
	Display the data in screen group D
****************************************************************/

DISPLAY_DATA_D:
	procedure;

do LOOP_INDEX =  20 to  20;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_D       */

/****************************************************************
	DISPLAY_DATA_Q
	Display data
****************************************************************/

DISPLAY_DATA_Q:
	procedure;

do LOOP_INDEX =  44 to  44;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_Q       */

/****************************************************************
	DISPLAY_DATA_R
	Display data in group R
****************************************************************/

DISPLAY_DATA_R:
	procedure;

do LOOP_INDEX =  45 to  45;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_R       */

/****************************************************************
	CHANGE_FIT_TRANS
	Change at item
****************************************************************/

CHANGE_FIT_TRANS:
	procedure;

declare		SELECT		fixed binary;
call ANY_CHANGE(1,7,SELECT,RETURN_CODE);
if SELECT = 0 then
   do;
   END_CHANGE_FIT_TRANS = YES;
   return;
   end;
do case (SELECT);
      do;
      call CHANGE_T_DATE;
      end;
      do;
      call CHANGE_T_CLASS;
      end;
      do;
      call CHANGE_T_MARKUP;
      end;
      do;
      call ENTER_DATA_Q;
      end;
      do;
      call ENTER_DATA_R;
      end;
      do;
      call ENTER_DATA_S;
      end;
      do;

      /* ENTER_DATA_T - Enter data */

      do LOOP_INDEX =  47 to  47;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      end;
end;
otherwise
   do;
   end;

return;
end;	/* CHANGE_FIT_TRANS     */

/****************************************************************
	CHANGE_T_DATE
	Change date
****************************************************************/

CHANGE_T_DATE:
	procedure;

   call ENTER_DATA_M;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;


   /* CLEAR_CLASS - Zero the class */

   LDTT_CLASS = 0;

   END_ENT_TRANS_PRICES = NO;
   do while (END_ENT_TRANS_PRICES ^= YES);
      call ENT_TRANS_PRICES;
   end;
return;
end;	/* CHANGE_T_DATE        */

/****************************************************************
	CHANGE_T_CLASS
	Change class
****************************************************************/

CHANGE_T_CLASS:
	procedure;


   /* CLEAR_CLASS - Zero the class */

   LDTT_CLASS = 0;

   END_ENT_TRANS_PRICES = NO;
   do while (END_ENT_TRANS_PRICES ^= YES);
      call ENT_TRANS_PRICES;
   end;
return;
end;	/* CHANGE_T_CLASS       */

/****************************************************************
	CHANGE_T_MARKUP
	Change markup
****************************************************************/

CHANGE_T_MARKUP:
	procedure;

   call ENTER_DATA_E;

   /* DISPLAY_DATA_O - Display data O */

   do LOOP_INDEX =  25 to  25;
      call OUTPUT_FIELD (LOOP_INDEX);
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* CHANGE_T_MARKUP      */

/****************************************************************
	ENTER_DATA_E
	Enter the data in screen group E
****************************************************************/

ENTER_DATA_E:
	procedure;

do LOOP_INDEX =  19 to  19;
   if LOOP_INDEX =  19 then
      do;

      /* REV_T_MARKUP - Reverse the markup */

      LDET_VARIES_COST(1) = LDET_VARIES_COST(1) / (1 + TRANS_MARKUP/100);
      LDET_VARIES_COST(2) = LDET_VARIES_COST(2) / (1 + TRANS_MARKUP/100);
      LDET_VARIES_COST(3) = LDET_VARIES_COST(3) / (1 + TRANS_MARKUP/100);
      LDET_VARIES_COST(4) = LDET_VARIES_COST(4) / (1 + TRANS_MARKUP/100);
      LDET_SIC = LDET_SIC / (1 + TRANS_MARKUP/100);
      LDET_PMC = LDET_PMC / (1 + TRANS_MARKUP/100);
      LDET_TOUR_PP_COST = LDET_TOUR_PP_COST / (1+TRANS_MARKUP/100);
      LDET_TOUR_COST = LDET_TOUR_COST / (1+TRANS_MARKUP/100);

      end;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =  19 then
      do;

      /* CALC_T_MARKUP - Calculate the markup */

      LDET_VARIES_COST(1) = LDET_VARIES_COST(1) * (1 + TRANS_MARKUP/100);
      LDET_VARIES_COST(2) = LDET_VARIES_COST(2) * (1 + TRANS_MARKUP/100);
      LDET_VARIES_COST(3) = LDET_VARIES_COST(3) * (1 + TRANS_MARKUP/100);
      LDET_VARIES_COST(4) = LDET_VARIES_COST(4) * (1 + TRANS_MARKUP/100);
      LDET_SIC = LDET_SIC * (1 + TRANS_MARKUP/100);
      LDET_PMC = LDET_PMC * (1 + TRANS_MARKUP/100);
      LDET_TOUR_PP_COST = LDET_TOUR_PP_COST * (1+TRANS_MARKUP/100);
      LDET_TOUR_COST = LDET_TOUR_COST * (1+TRANS_MARKUP/100);

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_E         */

/****************************************************************
	ENTER_DATA_Q
	Enter data
****************************************************************/

ENTER_DATA_Q:
	procedure;

do LOOP_INDEX =  44 to  44;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_Q         */

/****************************************************************
	ENTER_DATA_R
	Enter data
****************************************************************/

ENTER_DATA_R:
	procedure;

do LOOP_INDEX =  45 to  45;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_R         */

/****************************************************************
	ENTER_DATA_S
	Enter
****************************************************************/

ENTER_DATA_S:
	procedure;

do LOOP_INDEX =  46 to  46;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_S         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
