/****************************************************************
	Module: BK_INFO_AGENCY
	Top Level Logic: DIS_INFO_LOGIC
	Date: 14-Nov-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_INFO_AGENCY
	Display file information (top level)
****************************************************************/

%replace BK_INFO_AGENCY_1 by 521;
BK_INFO_AGENCY:
   procedure;
%replace AM_AGCY_NO by  10;
%include "AM_AGCY.DD";

declare		ERROR_CODE           fixed binary (15);
declare		FIRST_ITEM           fixed binary (15);
declare		KEY_NO               fixed binary (15);
declare		END_SEQ_ACCESS_2     bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
   call INITIALIZE;
   call DIS_IO;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */


   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_INFO_AGENCY_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (AM_AGCY_NO,"AM_AGCY",byteaddr(AM_AGCY_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AM_AGCY_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	DIS_IO
	Enter key and display info
****************************************************************/

DIS_IO:
	procedure;

declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		ERROR_AM_AGCY        fixed binary (15);

   /* INPUT_KEY - Input the key-data from the screen */

   KEY_NO = 1;
   INPUT_LENGTH = 1;
   call INPUT_FIELD (  1,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      return;
   FIRST_ITEM = 2;
   if INPUT_LENGTH = 0 then
      do;
      KEY_NO = 3;
      INPUT_LENGTH = 1;
      AGENCY_NAME = "";
      call INPUT_FIELD (  2,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         return;
      AGENCY_ZIP_CODE = "";
      call INPUT_FIELD (  6,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         return;
      FIRST_ITEM = 1;
      if INPUT_LENGTH = 0 then
         return;
      END_SEQ_ACCESS_2 = NO;
      call SEQ_ACCESS_2;
      if END_SEQ_ACCESS_2 then
         return;
      end;

   /* READ_DATA - Read the record from the file */

   call READ_KEYED (AM_AGCY_NO,KEY_NO,ERROR_AM_AGCY);
   if ERROR_AM_AGCY > 3 then
      call PRINT_ERROR (AM_AGCY_NO,ERROR_AM_AGCY);

   /* DIS_FOUND - Display data if found */

   ERROR_INPUT_SCREEN = NO;
   if ERROR_AM_AGCY = NORMAL_RETURN then
      do;
      call DISPLAY_DATA;
      end;
   else
      do;

      /* NO_CODE - This section has no code */

      /* No code in this section */
      if ERROR_INPUT_SCREEN then return;
      end;
return;
end;	/* DIS_IO               */

/****************************************************************
	SEQ_ACCESS_2
	Sequential access for secondary key
****************************************************************/

SEQ_ACCESS_2:
	procedure;

declare		ANSWER               character (1);
declare		RECORD_MATCH         bit (1);
declare	TEMP_AGENCY_NAME	character ( 30) varying;
declare	TEMP_AGENCY_ZIP_CODE	character ( 10) varying;
AGENCY_SHORT_NAME = AGENCY_NAME;
TEMP_AGENCY_NAME = CUT_SPACES(AGENCY_NAME);
TEMP_AGENCY_ZIP_CODE = CUT_SPACES(AGENCY_ZIP_CODE);
call SET_POSITION (AM_AGCY_NO,KEY_NO,ERROR_CODE);
do while (YES);
   call READ_NEXT (AM_AGCY_NO+?KEY_ONLY,KEY_NO,ERROR_CODE);
   if substr(AGENCY_ZIP_CODE,1,length(TEMP_AGENCY_ZIP_CODE)) >
      TEMP_AGENCY_ZIP_CODE then
         ERROR_CODE = END_OF_FILE;
   if ERROR_CODE = END_OF_FILE then
      do;
      call DISPLAY_MESSAGE ("<BEL>End of records!"c);
      call PRESS_RETURN;
      END_SEQ_ACCESS_2 = YES;
      return;
      end;
      RECORD_MATCH = NO;
   if substr(AGENCY_SHORT_NAME,1,min( 6,length(TEMP_AGENCY_NAME))) =
      substr(TEMP_AGENCY_NAME,1,min( 6,length(TEMP_AGENCY_NAME))) then
   if substr(AGENCY_ZIP_CODE,1,length(TEMP_AGENCY_ZIP_CODE)) =
      TEMP_AGENCY_ZIP_CODE then
         RECORD_MATCH = YES;
   if RECORD_MATCH then
      do;
      call READ_KEYED (AM_AGCY_NO,KEY_NO,ERROR_CODE);
      if length (TEMP_AGENCY_NAME) >  6 then
         if substr (AGENCY_NAME,1,length(TEMP_AGENCY_NAME)) ^= TEMP_AGENCY_NAME then
            RECORD_MATCH = NO;
      end;
   if RECORD_MATCH then
      do;
      call READ_KEYED (AM_AGCY_NO,KEY_NO,ERROR_CODE);
      end;
   if RECORD_MATCH then
      do;
      FIRST_ITEM = 1;
      call DISPLAY_DATA;
      call OUTPUT_LINE (23,20,"Correct record?");
      call INPUT_DATA (23,36,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
      call CLEAR_MESSAGE;
      call DUMP_BUFFER;
      if ANSWER = "Y" then
         do;
         FIRST_ITEM = LAST_ITEM_NUMBER() + 1;
         return;
         end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         END_SEQ_ACCESS_2 = YES;
         return;
         end;
      end;
end; /* do loop */
return;
end;	/* SEQ_ACCESS_2         */

/****************************************************************
	DISPLAY_DATA
	Display the data for this screen
****************************************************************/

DISPLAY_DATA:
	procedure;

declare		LOOP_INDEX           fixed binary (15);
do LOOP_INDEX = FIRST_ITEM to  21;
   call KEEP_TRAILING_SPACES;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AM_AGCY_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
