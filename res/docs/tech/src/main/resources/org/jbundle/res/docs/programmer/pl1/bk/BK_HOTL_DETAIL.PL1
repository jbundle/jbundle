/****************************************************************
	Module: BK_HOTL_DETAIL
	Top Level Logic: TABLE_DIS_MAINT
	Date: 28-Nov-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_HOTL_DETAIL
	Display the header and maintain a table
****************************************************************/

%replace BK_HOTL_DETAIL_1 by 729;
BK_HOTL_DETAIL:
   procedure(
      BK_TOUR_HDR_RECORD,
      BK_OPT_ALT_RECORD);
%replace BK_DET_HOTEL_NO by  67;
%replace BK_HOTEL_NO by   8;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_OPT_ALT_NO by  62;
%include "BK_DET_HOTEL.DD";
%include "BK_HOTEL.DD";
%include "BK_HOTL_DETAIL.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_OPT_ALT.DD";

declare		ERROR_CODE           fixed binary (15);
declare		FIRST_ITEM           fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		HDET_DAY_ARRAY( 7) fixed binary (15);
declare		HDET_SEQ_ARRAY( 7) fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
   call INITIALIZE;
   call TABLE_DM_IO;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   HDET_MOD_CODE = "A";
   HDET_INV = "N";
   HDET_INV_MOD = -1;
   HDET_INV_RATE = "";
   HDET_MANUAL = "";
   HDET_SEND_TO = "Y";
   HDET_ACK_DAYS = 0;
   HDET_MEAL_PRICE = 0;
   HDET_MEAL_PLAN = "";
   HDET_QUAD = 0;
   HDET_MODULE = "";
   HDET_STATUS = "RQ";
   HOTL_MEAL_QTY = 0;
   HOTL_MEAL_DAYS = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_HOTL_DETAIL_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (BK_DET_HOTEL_NO,"BK_DET_HOTEL",byteaddr(BK_DET_HOTEL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_DET_HOTEL_NO,ERROR_CODE);
   call OPEN_FILE (BK_HOTEL_NO,"BK_HOTEL",byteaddr(BK_HOTEL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_HOTEL_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (BK_HOTL_DETAIL_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	TABLE_DM_IO
	Table display I/O
****************************************************************/

TABLE_DM_IO:
	procedure;

   call DISPLAY_DATA_A;

   /* OTHER_LOGIC - Any other logic */

   call TABLE_MAINT;
return;
end;	/* TABLE_DM_IO          */

/****************************************************************
	DISPLAY_DATA_A
	Display the items in screen group A
****************************************************************/

DISPLAY_DATA_A:
	procedure;

do LOOP_INDEX =   1 to   8;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_A       */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		HDET_MOD_SAVE        fixed binary (15);
declare		HDET_TOUR_HDR_SAVE   character (        4);
declare		HDET_ALT_SEQ_SAVE    fixed binary (15);
declare		HDET_ANSW_SEQ_SAVE   fixed binary (15);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		BK_DET_HOTEL_ERROR   fixed binary (15);
declare		HDET_DAY_SAVE        fixed binary (15);
declare		HDET_SEQ_SAVE        fixed binary (15);
declare		ANSWER               character (1);
HDET_MOD = -1;
HDET_MOD_SAVE = HDET_MOD;
HDET_TOUR_HDR = HDR_TOUR_CODE;
HDET_TOUR_HDR_SAVE = HDET_TOUR_HDR;
HDET_ALT_SEQ = ALT_SEQ;
HDET_ALT_SEQ_SAVE = HDET_ALT_SEQ;
HDET_ANSW_SEQ = ALT_ANSW_SEQ;
HDET_ANSW_SEQ_SAVE = HDET_ANSW_SEQ;
HDET_DAY = 0;
HDET_SEQ = 0;
call SET_POSITION (BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (HDET_MOD > HDET_MOD_SAVE) !
   (HDET_TOUR_HDR > HDET_TOUR_HDR_SAVE) !
   (HDET_ALT_SEQ > HDET_ALT_SEQ_SAVE) !
   (HDET_ANSW_SEQ > HDET_ANSW_SEQ_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to  7;
      HDET_DAY_ARRAY(RECORD_NUMBER) = 0;
      HDET_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_DET_HOTEL_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_DET_HOTEL_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <=  7) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 2 - 2);
         do LOOP_INDEX =   9 to  25;
            call OUTPUT_FIELD (LOOP_INDEX);
            if LOOP_INDEX =  11 then
               do;

               /* READ_SECOND_DIS - Read Second - Display line version */

               HOTEL_CODE = HDET_HOTEL;
               call READ_KEYED (BK_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE = RECORD_NOT_FOUND then
                  do;
                  HOTEL_NAME = "** RECORD NOT FOUND **";
                  end;
               end;
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         HDET_DAY_ARRAY(RECORD_NUMBER) = HDET_DAY;
         HDET_SEQ_ARRAY(RECORD_NUMBER) = HDET_SEQ;
         call READ_NEXT (BK_DET_HOTEL_NO,KEY_AREA_1,BK_DET_HOTEL_ERROR);
         if (HDET_MOD > HDET_MOD_SAVE) !
         (HDET_TOUR_HDR > HDET_TOUR_HDR_SAVE) !
         (HDET_ALT_SEQ > HDET_ALT_SEQ_SAVE) !
         (HDET_ANSW_SEQ > HDET_ANSW_SEQ_SAVE) then
            BK_DET_HOTEL_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      HDET_DAY_SAVE = HDET_DAY_ARRAY( 7);
      HDET_SEQ_SAVE = HDET_SEQ_ARRAY( 7);
      HDET_MOD = HDET_MOD_SAVE;
      HDET_TOUR_HDR = HDET_TOUR_HDR_SAVE;
      HDET_ALT_SEQ = HDET_ALT_SEQ_SAVE;
      HDET_ANSW_SEQ = HDET_ANSW_SEQ_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if BK_DET_HOTEL_ERROR ^= END_OF_FILE then
            do;
            HDET_DAY = HDET_DAY_SAVE;
            HDET_SEQ = HDET_SEQ_SAVE;
            call SET_POSITION (BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if HDET_DAY_ARRAY( 7) = 0 then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      HDET_MOD = HDET_MOD_SAVE;
      HDET_TOUR_HDR = HDET_TOUR_HDR_SAVE;
      HDET_ALT_SEQ = HDET_ALT_SEQ_SAVE;
      HDET_ANSW_SEQ = HDET_ANSW_SEQ_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <=  7) );
         call BK_DET_HOTEL_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (HDET_DAY_ARRAY( 7) = 0) then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to  7;
      call SET_ROW_OFFSET (RECORD_NUMBER * 2 - 2);
      if HDET_DAY_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX = 9 to  25;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  8,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  8 then
   do;
   RECORD_NUMBER = SELECT;
   call BK_DET_HOTEL_LINE;
   call SET_ROW_OFFSET (0);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	BK_DET_HOTEL_LINE
	Change one line in the secondary file
****************************************************************/

BK_DET_HOTEL_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
declare		INDEX                fixed binary (15);
call SET_ROW_OFFSET (RECORD_NUMBER * 2 - 2);
REWRITE = NO;
if HDET_DAY_ARRAY(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   HDET_DAY = HDET_DAY_ARRAY(RECORD_NUMBER);
   HDET_SEQ = HDET_SEQ_ARRAY(RECORD_NUMBER);
   call READ_KEYED (BK_DET_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
   do LOOP_INDEX =  9 to  25;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   end;
else
   do;
   HDET_DAY = 0;
   HDET_SEQ = 1;
   HDET_MOD_CODE = "A";
   HDET_INV = "N";
   HDET_INV_MOD = -1;
   HDET_INV_RATE = "";
   HDET_HOTEL = "";
   HDET_NIGHTS = 1;
   HDET_RATE_TYPE = HDR_DEF_RATE;
   HDET_CLASS = HDR_DEF_CLASS;
   HDET_MANUAL = "";
   HDET_SEND_TO = "Y";
   HDET_ACK_DAYS = 0;
   HDET_VOUCHER = 0;
   HDET_MEAL = "";
   HDET_MEAL_QTY = 0;
   HDET_MEAL_DAYS = 0;
   HDET_MEAL_PRICE = 0;
   HDET_MEAL_PLAN = "";
   HDET_SINGLE = 0;
   HDET_DOUBLE = 0;
   HDET_TRIPLE = 0;
   HDET_QUAD = 0;
   HDET_EXCHANGE = 0;
   HDET_ROOM_COST = 0;
   HDET_MEAL_COST = 0;
   HDET_MODULE = "";
   HDET_LINKED_TOUR = 0;
   HDET_STATUS = "RQ";
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =   9 to   9;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   if HDET_DAY = 0 then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =  10 to  25;
         if LOOP_INDEX =  12 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =  13 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =  15 then
            call DISPLAY_MSG_NO ( 46);
         if LOOP_INDEX =  16 then
            call DISPLAY_MSG_NO ( 42);
         if LOOP_INDEX =  22 then
            call DISPLAY_MSG_NO ( 35);
         if LOOP_INDEX =  23 then
            call DISPLAY_MSG_NO ( 35);
         if LOOP_INDEX =  24 then
            call DISPLAY_MSG_NO ( 35);
         if LOOP_INDEX =  25 then
            call DISPLAY_MSG_NO ( 35);
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
         if LOOP_INDEX =  11 then
            do;

            /* READ_SECOND_DIS - Read Second - Display line version */

            if RETURN_CODE ^= END_TYPED then
               do;
               HOTEL_CODE = HDET_HOTEL;
               call READ_KEYED (BK_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE = RECORD_NOT_FOUND then
                  do;
                  call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
                  call PRESS_RETURN;
                  call CLEAR_MESSAGE;
                  RETURN_CODE = DO_AGAIN;
                  LOOP_INDEX = LOOP_INDEX - 1;
                  end;
               end;
            end;
         if LOOP_INDEX =  22 then
            do;

            /* CHECK_MEAL_ENT - Enter the meals in header hotel entry */

            if INPUT_LENGTH ^= 0 then
               do;
               INDEX = LOOP_INDEX - 21;
               if HDET_MEAL_QTY(INDEX) = 0 then
                  HDET_MEAL_QTY(INDEX) = HDET_NIGHTS;
               HOTL_MEAL_QTY = HDET_MEAL_QTY(INDEX);
               HOTL_MEAL_DAYS = HDET_MEAL_DAYS(INDEX);
               call ENTER_DATA_D;
               HDET_MEAL_QTY(INDEX) = HOTL_MEAL_QTY;
               HDET_MEAL_DAYS(INDEX) = HOTL_MEAL_DAYS;
               LOOP_INDEX = INDEX + 21;
               end;
            else
               LOOP_INDEX = 99;

            end;
         if LOOP_INDEX =  23 then
            do;

            /* CHECK_MEAL_ENT - Enter the meals in header hotel entry */

            if INPUT_LENGTH ^= 0 then
               do;
               INDEX = LOOP_INDEX - 21;
               if HDET_MEAL_QTY(INDEX) = 0 then
                  HDET_MEAL_QTY(INDEX) = HDET_NIGHTS;
               HOTL_MEAL_QTY = HDET_MEAL_QTY(INDEX);
               HOTL_MEAL_DAYS = HDET_MEAL_DAYS(INDEX);
               call ENTER_DATA_D;
               HDET_MEAL_QTY(INDEX) = HOTL_MEAL_QTY;
               HDET_MEAL_DAYS(INDEX) = HOTL_MEAL_DAYS;
               LOOP_INDEX = INDEX + 21;
               end;
            else
               LOOP_INDEX = 99;

            end;
         if LOOP_INDEX =  24 then
            do;

            /* CHECK_MEAL_ENT - Enter the meals in header hotel entry */

            if INPUT_LENGTH ^= 0 then
               do;
               INDEX = LOOP_INDEX - 21;
               if HDET_MEAL_QTY(INDEX) = 0 then
                  HDET_MEAL_QTY(INDEX) = HDET_NIGHTS;
               HOTL_MEAL_QTY = HDET_MEAL_QTY(INDEX);
               HOTL_MEAL_DAYS = HDET_MEAL_DAYS(INDEX);
               call ENTER_DATA_D;
               HDET_MEAL_QTY(INDEX) = HOTL_MEAL_QTY;
               HDET_MEAL_DAYS(INDEX) = HOTL_MEAL_DAYS;
               LOOP_INDEX = INDEX + 21;
               end;
            else
               LOOP_INDEX = 99;

            end;
         if LOOP_INDEX =  25 then
            do;

            /* CHECK_MEAL_ENT - Enter the meals in header hotel entry */

            if INPUT_LENGTH ^= 0 then
               do;
               INDEX = LOOP_INDEX - 21;
               if HDET_MEAL_QTY(INDEX) = 0 then
                  HDET_MEAL_QTY(INDEX) = HDET_NIGHTS;
               HOTL_MEAL_QTY = HDET_MEAL_QTY(INDEX);
               HOTL_MEAL_DAYS = HDET_MEAL_DAYS(INDEX);
               call ENTER_DATA_D;
               HDET_MEAL_QTY(INDEX) = HOTL_MEAL_QTY;
               HDET_MEAL_DAYS(INDEX) = HOTL_MEAL_DAYS;
               LOOP_INDEX = INDEX + 21;
               end;
            else
               LOOP_INDEX = 99;

            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      HDET_DAY = HDET_DAY_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (BK_DET_HOTEL_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      HDET_DAY = 0;
      end;
   else
      do;
      if REWRITE = NO then
         call WRITE_RECORD (BK_DET_HOTEL_NO,ERROR_CODE);
      else
         call UPDATE_RECORD (BK_DET_HOTEL_NO,ERROR_CODE);
      end;
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      HDET_DAY_ARRAY(RECORD_NUMBER) = HDET_DAY;
      HDET_SEQ_ARRAY(RECORD_NUMBER) = HDET_SEQ;
      end;
end;
return;
end;	/* BK_DET_HOTEL_LINE    */

/****************************************************************
	ENTER_DATA_D
	Enter screen group D
****************************************************************/

ENTER_DATA_D:
	procedure;

do LOOP_INDEX =  26 to  27;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_D         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (BK_DET_HOTEL_NO);
   call CLOSE_FILE (BK_HOTEL_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
