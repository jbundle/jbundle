/****************************************************************
	Module: BK_DIS_TOURA
	Top Level Logic: ENTER_AND_DIS
	Date: 14-Nov-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_DIS_TOURA
	Enter Header and Display Table
****************************************************************/

%replace BK_DIS_TOURA_1 by 796;
BK_DIS_TOURA:
   procedure(
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_BOOKING_RECORD);
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_BOOKING_NO by   9;
%include "BK_DIS_TOURA.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_BOOKING.DD";

declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
   call INITIALIZE;
   call ENT_DIS_MAIN;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */


   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_DIS_TOURA_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_DIS_TOURA_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	ENT_DIS_MAIN
	Enter and Display - Main Logic
****************************************************************/

ENT_DIS_MAIN:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_TOUR        fixed binary (15);

   /* RESET_INPUT_ERROR - set input erro to no */

   ERROR_INPUT_SCREEN = NO;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (BK_DIS_TOURA_1);
   NOT_FIRST_TIME = YES;
   call ENTER_DATA_A;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;


   /* BEFORE_LOGIC - Before logic */

   call TABLE_DISPLAY;

   /* AFTER_LOGIC - Other Logic */


   /* RESTORE_BK_TOUR - Restore the tour and tour header info */

   if BOOKING_NO ^= 0 then
      do;
      if BK_TOUR_CODE ^= "" then if BK_DEPARTURE ^= 0 then
         if (BK_TOUR_CODE ^= HDR_TOUR_CODE) !
            (BK_DEPARTURE < HDR_START_ON) ! (BK_DEPARTURE > HDR_END_ON) then
               do;

               /* GET_TOUR_HDR - Get the tour header */

               ERROR_CODE = NORMAL_RETURN;

               HDR_TOUR_CODE = BK_TOUR_CODE;
               HDR_END_ON = BK_DEPARTURE;
               if HDR_END_ON = 0 then
                  HDR_END_ON = TODAYS_DATE();
               call SET_POSITION (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE ^= END_OF_FILE then
                  call READ_NEXT (BK_TOUR_HDR_NO,KEY_AREA_1,ERROR_CODE);

               if BK_TOUR_CODE ^= HDR_TOUR_CODE then
                  ERROR_CODE = END_OF_FILE;
               if BK_DEPARTURE ^= 0 then if BK_DEPARTURE < HDR_START_ON then
                  ERROR_CODE = END_OF_FILE;

               end;
      if BK_TOUR_NUM ^= 0 then
         if BK_TOUR_NUM ^= TOUR_NO then
            do;
            TOUR_NO = BK_TOUR_NUM;

            /* READ_TOUR_REC - Read the tour file record */

            call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_BK_TOUR);
            if ERROR_BK_TOUR > 3 then
               call PRINT_ERROR (BK_TOUR_NO,ERROR_BK_TOUR);
            end;
      end;

return;
end;	/* ENT_DIS_MAIN         */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
BK_START_ACTION = TODAYS_DATE();
do LOOP_INDEX =  11 to  11;
   if LOOP_INDEX =  11 then
      BK_START_ACTION = TODAYS_DATE();
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	TABLE_DISPLAY
	Display the table info
****************************************************************/

TABLE_DISPLAY:
	procedure;

declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		RECORD_NUMBER        fixed binary (15);
declare		ACTION_DATE_ARRAY(15) fixed binary (15);
declare		ACTION_TYPE_ARRAY(15) fixed binary (15);
declare		TOUR_NO_ARRAY(15) fixed binary (31);
declare		BK_TOUR_ERROR        fixed binary (15);
declare		ACTION_DATE_SAVE     fixed binary (15);
declare		ACTION_TYPE_SAVE     fixed binary (15);
declare		TOUR_NO_SAVE         fixed binary (31);
declare		ANSWER               character (1);
ACTION_DATE = BK_START_ACTION;
ACTION_TYPE = 0;
TOUR_NO = 0;
call SET_POSITION (BK_TOUR_NO,KEY_AREA_4,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_TOUR_NO,KEY_AREA_4,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 15;
      ACTION_DATE_ARRAY(RECORD_NUMBER) = 0;
      ACTION_TYPE_ARRAY(RECORD_NUMBER) = 0;
      TOUR_NO_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_TOUR_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_TOUR_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 15) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =  12 to  19;
            if LOOP_INDEX =  13 then
               do;

               /* SET_TYPE_DESC - Set the action type desc */

               do case (ACTION_TYPE);
                  ACTION_TYPE_DESC = "Booking";
                  ACTION_TYPE_DESC = "Deposit rec";
                  ACTION_TYPE_DESC = "Serv. conf";
                  ACTION_TYPE_DESC = "Final pymt";
                  ACTION_TYPE_DESC = "Finalize";
                  ACTION_TYPE_DESC = "Final docs";
                  ACTION_TYPE_DESC = "Ticketing";
                  ACTION_TYPE_DESC = "Special 1";
                  ACTION_TYPE_DESC = "Special 2";
                  ACTION_TYPE_DESC = "Departure";
                  ACTION_TYPE_DESC = "Cancel";
               end;
               otherwise
                  do;
                  ACTION_TYPE_DESC = "";
                  end;

               end;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         ACTION_DATE_ARRAY(RECORD_NUMBER) = ACTION_DATE;
         ACTION_TYPE_ARRAY(RECORD_NUMBER) = ACTION_TYPE;
         TOUR_NO_ARRAY(RECORD_NUMBER) = TOUR_NO;
         call READ_NEXT (BK_TOUR_NO,KEY_AREA_4,BK_TOUR_ERROR);
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      ACTION_DATE_SAVE = ACTION_DATE_ARRAY(15);
      ACTION_TYPE_SAVE = ACTION_TYPE_ARRAY(15);
      TOUR_NO_SAVE = TOUR_NO_ARRAY(15);
      if BK_TOUR_ERROR = END_OF_FILE then
         GET_OUT = YES;
      else
         do;
         call OUTPUT_LINE (24,10,"Stop Displaying?");
         call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
         call CLEAR_TO_BOS (24);
         if (ANSWER = "Y") then
            GET_OUT = YES;
         end;
      end;
   else
      GET_OUT = YES;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 15;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if ACTION_DATE_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX =12 to  19;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_DISPLAY        */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
