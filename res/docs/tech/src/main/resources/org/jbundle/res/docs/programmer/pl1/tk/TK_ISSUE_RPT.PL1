/****************************************************************
	Module: TK_ISSUE_RPT
	Top Level Logic: REPORT_LOGIC
	Date: 20-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	TK_ISSUE_RPT
	Standard report logic
****************************************************************/

%replace TK_ISSUE_RPT_1 by 702;
%replace TK_ISSUE_RPT_2 by 703;
TK_ISSUE_RPT:
   procedure;
%replace TK_HEADER_NO by  56;
%include "TK_ISSUE_RPT.DD";
%include "TK_HEADER.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		FIRST_TIME           bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   TK_I_DET_TIC = "Y";
   TK_I_DATE = TODAYS_DATE();
   TK_I_TIME = CURRENT_TIME();
   TK_I_USER = USER_NAME();
   TK_I_PAGE = 1;
   TK_I_MONTH_PAX = 0;
   TK_I_TOTAL_PAX = 0;
   TK_I_MONTH_DESC = "";
   TK_I_MONTH_GROSS = 0;
   TK_I_TOTAL_GROSS = 0;
   TK_I_MONTH_TAX = 0;
   TK_I_TOTAL_TAX = 0;
   TK_I_MONTH_COMM = 0;
   TK_I_MONTH_NET = 0;
   TK_I_TOTAL_NET = 0;
   TK_I_TOTAL_COMM = 0;
   TK_I_MONTH_SAVE = 0;
   TK_MOD_CODE = "A";
   TK_TAX_P = 0;
   TK_ISSUE_UD_DATE = 0;
   TK_ARC_UD_DATE = 0;
   TK_DEP_UD_DATE = 0;
   TK_OR_UD_DATE = 0;
   TK_BK_DEP_DATE = 0;
   TK_UD_STATUS = 0;
   TK_CREDIT = "N";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (TK_ISSUE_RPT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (TK_ISSUE_RPT_RECORD) );
   call OPEN_FILE (TK_HEADER_NO,"TK_HEADER",byteaddr(TK_HEADER_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_HEADER_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (TK_ISSUE_RPT_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   TK_MODIFICATION = 0;
   TK_ISSUE_DATE = TK_I_START_ENT;
   TK_BK_TK_NO = 0;
   TK_ALT_SEQ = 0;
   TK_ANSW_SEQ = 0;
   call SET_POSITION (TK_HEADER_NO,KEY_AREA_4,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */


   /* GET_ISSUE_MONTH - Get month */

   TK_I_MONTH_DESC = substr(
      "         January  February March    April    May      June     July     August   SeptemberOctober  November December "
      ,TK_I_MONTH_SAVE*9+1,9);

   do LOOP_INDEX =   7 to  10;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
TK_I_END_DEP = TK_I_START_DEP;
TK_I_END_ENT = TK_I_START_ENT;
do LOOP_INDEX =   1 to  16;
   if LOOP_INDEX =   2 then
      TK_I_END_DEP = TK_I_START_DEP;
   if LOOP_INDEX =   4 then
      TK_I_END_ENT = TK_I_START_ENT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         TK_I_START_DEP = 0;
         TK_I_END_DEP = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   3 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         TK_I_START_ENT = 0;
         TK_I_END_ENT = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   7 then
      do;

      /* CHECK_I_AIRL - Last carrier entered? */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 99;

      end;
   if LOOP_INDEX =   8 then
      do;

      /* CHECK_I_AIRL - Last carrier entered? */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 99;

      end;
   if LOOP_INDEX =   9 then
      do;

      /* CHECK_I_AIRL - Last carrier entered? */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 99;

      end;
   if LOOP_INDEX =  10 then
      do;

      /* CHECK_I_AIRL - Last carrier entered? */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 99;

      end;
   if LOOP_INDEX =  11 then
      do;

      /* CHECK_I_AIRL - Last carrier entered? */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 99;

      end;
   if LOOP_INDEX =  12 then
      do;

      /* CHECK_I_AIRL - Last carrier entered? */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 99;

      end;
   if LOOP_INDEX =  13 then
      do;

      /* CHECK_I_AIRL - Last carrier entered? */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 99;

      end;
   if LOOP_INDEX =  14 then
      do;

      /* CHECK_I_AIRL - Last carrier entered? */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 99;

      end;
   if LOOP_INDEX =  15 then
      do;

      /* CHECK_I_AIRL - Last carrier entered? */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 99;

      end;
   if LOOP_INDEX =  16 then
      do;

      /* CHECK_I_AIRL - Last carrier entered? */

      if INPUT_LENGTH = 0 then
         LOOP_INDEX = 99;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  7,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  6 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         TK_I_START_DEP = 0;
         TK_I_END_DEP = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   3 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         TK_I_START_ENT = 0;
         TK_I_END_ENT = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   end;
if SELECT =  7 then
   do;
   do LOOP_INDEX =   7 to  16;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
      if LOOP_INDEX =   7 then
         do;

         /* CHECK_I_AIRL - Last carrier entered? */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 99;

         end;
      if LOOP_INDEX =   8 then
         do;

         /* CHECK_I_AIRL - Last carrier entered? */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 99;

         end;
      if LOOP_INDEX =   9 then
         do;

         /* CHECK_I_AIRL - Last carrier entered? */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 99;

         end;
      if LOOP_INDEX =  10 then
         do;

         /* CHECK_I_AIRL - Last carrier entered? */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 99;

         end;
      if LOOP_INDEX =  11 then
         do;

         /* CHECK_I_AIRL - Last carrier entered? */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 99;

         end;
      if LOOP_INDEX =  12 then
         do;

         /* CHECK_I_AIRL - Last carrier entered? */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 99;

         end;
      if LOOP_INDEX =  13 then
         do;

         /* CHECK_I_AIRL - Last carrier entered? */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 99;

         end;
      if LOOP_INDEX =  14 then
         do;

         /* CHECK_I_AIRL - Last carrier entered? */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 99;

         end;
      if LOOP_INDEX =  15 then
         do;

         /* CHECK_I_AIRL - Last carrier entered? */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 99;

         end;
      if LOOP_INDEX =  16 then
         do;

         /* CHECK_I_AIRL - Last carrier entered? */

         if INPUT_LENGTH = 0 then
            LOOP_INDEX = 99;

         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   5;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

TK_I_PAGE = TK_I_PAGE + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (TK_HEADER_NO,KEY_AREA_4,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (TK_HEADER_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (TK_MODIFICATION > 0) !
   (TK_ISSUE_DATE > TK_I_END_ENT) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CHECK_ISSUE_SELECT - Include this ticket? */


   /* SKIP_NO_TK - Skip if this is not an actual ticket */

   if (TK_NUMBER = "") ! (TK_ISSUE_DATE = 0) ! (TK_ALT_SEQ = 0) then
      return;


   declare (DAY,MONTH,YEAR) fixed binary;
   declare TK_MATCH_TEMP character(20);
   declare I fixed binary;

   if TK_DEP_DATE < TK_I_START_DEP then
      return;

   if TK_DEP_DATE > TK_I_END_DEP then
      return;

   if TK_I_VOIDED_TIC = "N" then if TK_VOID = "Y" then
      return;

   if TK_I_MATCH_AIRL(1) ^= "" then
      do;
      do I = 1 to 10;
         if TK_I_MATCH_AIRL(I) = "" then
            return;
         if TK_I_MATCH_AIRL(I) = TK_AIRL_CODE then
            goto MATCH_1_OK;
      end;
      return;
      MATCH_1_OK:
      end;

   call DAY_TO_DMY(TK_ISSUE_DATE,DAY,MONTH,YEAR);
   if TK_I_MONTH_SAVE ^= MONTH then
      do;
      if TK_I_MONTH_SAVE ^= 0 then
         do;

         /* PRINT_LINE_G2 - Print */


         /* GET_ISSUE_MONTH - Get month */

         TK_I_MONTH_DESC = substr(
            "         January  February March    April    May      June     July     August   SeptemberOctober  November December "
            ,TK_I_MONTH_SAVE*9+1,9);

         do LOOP_INDEX =   7 to   8;
            call PRINT_REPORT_LINE;
         end;
         end;
      TK_I_MONTH_GROSS = 0;
      TK_I_MONTH_TAX = 0;
      TK_I_MONTH_COMM = 0;
      TK_I_MONTH_NET = 0;
      TK_I_MONTH_PAX = 0;

      TK_I_MONTH_SAVE = MONTH;
      end;


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */

   do LOOP_INDEX =  24 to   1;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_TOTALS - Add to the total fields */


   /* OTHER_LOGIC - Any other logic */


   /* PRINT_ISSUE_DET - Print the detail? */

   if TK_I_DET_TIC = "Y" then
      do;

      /* PRINT_LINE_D1 -  */


      /* SET_ALL_TAXES - Add all the taxes */

      TK_TAX_ALL = TK_TAX_1 + TK_TAX_2;

      do LOOP_INDEX =   6 to   6;
         call PRINT_REPORT_LINE;
      end;
      end;


   /* ADD_ISSUE_TOTALS - Add to the totals */

   TK_I_MONTH_GROSS =floor((TK_I_MONTH_GROSS + TK_TOTAL) * 100 + 0.5) / 100;
   TK_I_MONTH_TAX = floor((TK_I_MONTH_TAX + TK_TAX_ALL) * 100 + 0.5) / 100;
   TK_I_MONTH_COMM = floor((TK_I_MONTH_COMM + TK_COMM_AMT) * 100 + 0.5) / 100;
   TK_I_MONTH_NET = floor((TK_I_MONTH_NET + TK_NET_FARE) * 100 + 0.5) / 100;
   TK_I_TOTAL_GROSS =floor((TK_I_TOTAL_GROSS + TK_TOTAL) * 100 + 0.5) / 100;
   TK_I_TOTAL_TAX = floor((TK_I_TOTAL_TAX + TK_TAX_ALL) * 100 + 0.5) / 100;
   TK_I_TOTAL_COMM = floor((TK_I_TOTAL_COMM + TK_COMM_AMT) * 100 + 0.5) / 100;
   TK_I_TOTAL_NET = floor((TK_I_TOTAL_NET + TK_NET_FARE) * 100 + 0.5) / 100;

   TK_I_MONTH_PAX = TK_I_MONTH_PAX + 1;
   TK_I_TOTAL_PAX = TK_I_TOTAL_PAX + 1;


return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (TK_HEADER_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
