/****************************************************************
	Module: GL_JOUR_PRT
	Top Level Logic: REPORT_LOGIC
	Date: 25-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	GL_JOUR_PRT
	Standard report logic
****************************************************************/

%replace GL_JOUR_PRT_1 by  54;
%replace GL_JOUR_PRT_2 by  55;
%replace GL_JOUR_PRT_3 by 609;
GL_JOUR_PRT:
   procedure(
      GL_DET_BATCH_RECORD);
%replace GL_DET_TRX_NO by  18;
%replace GL_CHART_NO by  16;
%replace GL_DET_BATCH_NO by  19;
%include "GL_JOUR_PRT.DD";
%include "GL_DET_TRX.DD";
%include "GL_CHART.DD";
%include "GL_DET_BATCH.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		FIRST_TIME           bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   GL_JOUR_DATE = TODAYS_DATE();
   GL_JOUR_TIME = CURRENT_TIME();
   GL_JOUR_PAGE = 1;
   GL_JOUR_TRX_COUNT = 0;
   GL_JOUR_DEBIT_TOTAL = 0;
   GL_JOUR_CREDIT_TOTAL = 0;
   GL_DET_BATCH_USER = GL_DBATCH_USER;
   GL_DET_TRX_NUM = 1;
   GL_DET_TRX_AMT = 0;
   GL_DET_SOURCE = GL_DBATCH_DEF_SOURCE;
   GL_DET_REF = GL_DBATCH_DEF_COM;
   GL_DET_ACREV = "N";
   TYPICAL_BAL = "D";
   SECTION_SUB = "N";
   COUNTER_BAL_AC = 0;
   GL_INCOME_EXP = "N";
   DISCONTINUED_ON = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (GL_JOUR_PRT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (GL_JOUR_PRT_RECORD) );
   call OPEN_FILE (GL_DET_TRX_NO,"GL_DET_TRX",byteaddr(GL_DET_TRX_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_DET_TRX_NO,ERROR_CODE);
   call OPEN_FILE (GL_CHART_NO,"GL_CHART",byteaddr(GL_CHART_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_CHART_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (GL_JOUR_PRT_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   GL_DET_BATCH_USER = GL_DBATCH_USER;
   GL_DET_TRX_NUM = START_TRX_NO;
   GL_DET_SEQ_NO = 0;
   call SET_POSITION (GL_DET_TRX_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =   9 to  10;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
END_TRX_NO = START_TRX_NO;
do LOOP_INDEX =   1 to   2;
   if LOOP_INDEX =   2 then
      END_TRX_NO = START_TRX_NO;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         START_TRX_NO = 0;
         END_TRX_NO = 9999;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  2,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  2 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         START_TRX_NO = 0;
         END_TRX_NO = 9999;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   5;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

GL_JOUR_PAGE = GL_JOUR_PAGE + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;

declare		OLD_GL_DET_TRX_NUM   fixed binary (15);

   /* READNEXT - Read the next record */

   call READ_NEXT (GL_DET_TRX_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (GL_DET_TRX_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (GL_DET_BATCH_USER > GL_DBATCH_USER) !
   (GL_DET_TRX_NUM > END_TRX_NO) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      OLD_GL_DET_TRX_NUM = -1;
      end;
   if GL_DET_TRX_NUM ^= OLD_GL_DET_TRX_NUM then
      do;
      if ^FIRST_TIME then
         do;
         do LOOP_INDEX =  24 to   1;
            call PRINT_REPORT_LINE;
         end;
         end;
      end;
   if GL_DET_TRX_NUM ^= OLD_GL_DET_TRX_NUM then
      do;

      /* CHECK_RECURRING - Skip date if in recurring mode */

      if (GL_DBATCH_USER = " * FIXED * ") ! (GL_DBATCH_USER = " * VARIABLE * ") then
         do;
         LOOP_INDEX = 99;
         GL_DET_TRX_DATE = 0;
         end;


      /* READ_SECOND_DIS - Read Second - Display line version */

      GL_ACCOUNT_NO = GL_AC_NUMBER;
      call READ_KEYED (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         GL_ACCOUNT_DESC = "** RECORD NOT FOUND **";
         end;

      /* SET_JOUR_DR_CR - Set the Debit/Credit for print-out */

      GL_JOUR_DEBIT_AMT = 0;
      GL_JOUR_CREDIT_AMT = 0;
      if GL_DET_TRX_AMT >= 0 then
         GL_JOUR_DEBIT_AMT = GL_DET_TRX_AMT;
      else
         GL_JOUR_CREDIT_AMT = -GL_DET_TRX_AMT;

      do LOOP_INDEX =   6 to   7;
         call PRINT_REPORT_LINE;
      end;

      /* ADD_TOTALS_2 - Add to the totals */

      GL_JOUR_TRX_COUNT = GL_JOUR_TRX_COUNT + 1;
      OLD_GL_DET_TRX_NUM = GL_DET_TRX_NUM;
      end;
   else
      do;

      /* READ_SECOND_DIS - Read Second - Display line version */

      GL_ACCOUNT_NO = GL_AC_NUMBER;
      call READ_KEYED (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         GL_ACCOUNT_DESC = "** RECORD NOT FOUND **";
         end;

      /* SET_JOUR_DR_CR - Set the Debit/Credit for print-out */

      GL_JOUR_DEBIT_AMT = 0;
      GL_JOUR_CREDIT_AMT = 0;
      if GL_DET_TRX_AMT >= 0 then
         GL_JOUR_DEBIT_AMT = GL_DET_TRX_AMT;
      else
         GL_JOUR_CREDIT_AMT = -GL_DET_TRX_AMT;

      do LOOP_INDEX =   8 to   8;
         call PRINT_REPORT_LINE;
      end;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */

   do LOOP_INDEX =  24 to   1;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_TOTALS - Add to the total fields */

   GL_JOUR_DEBIT_TOTAL = floor((GL_JOUR_DEBIT_TOTAL + GL_JOUR_DEBIT_AMT) * 100 + 0.5) / 100;
   GL_JOUR_CREDIT_TOTAL = floor((GL_JOUR_CREDIT_TOTAL + GL_JOUR_CREDIT_AMT) * 100 + 0.5) / 100;

   /* OTHER_LOGIC - Any other logic */

return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (GL_DET_TRX_NO);
   call CLOSE_FILE (GL_CHART_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
