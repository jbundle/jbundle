/****************************************************************
	Module: BK_DIS_VENDOR
	Top Level Logic: ENTER_AND_DIS
	Date: 14-Nov-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_DIS_VENDOR
	Enter Header and Display Table
****************************************************************/

%replace BK_DIS_VENDOR_1 by 490;
BK_DIS_VENDOR:
   procedure(
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD);
%replace AP_VENDOR_NO by  30;
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%include "BK_DIS_VENDOR.DD";
%include "AP_VENDOR.DD";
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";

declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
   call INITIALIZE;
   call ENT_DIS_MAIN;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   DIS_START_VENDOR = "";
   AP_LAST_ACTIVITY = 0;
   AP_CUR_BAL = 0;
   AP_MTD_PUR = 0;
   AP_YTD_PUR = 0;
   AP_LAST_PUR = 0;
   AP_SELECT_AMT = 0;
   AP_SELECT_STATUS = "N";
   AP_COMM_CODE = "F";
   AP_VEN_TAX_ID = "";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_DIS_VENDOR_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_DIS_VENDOR_RECORD) );
   call OPEN_FILE (AP_VENDOR_NO,"AP_VENDOR",byteaddr(AP_VENDOR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_VENDOR_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	ENT_DIS_MAIN
	Enter and Display - Main Logic
****************************************************************/

ENT_DIS_MAIN:
	procedure;


   /* RESET_INPUT_ERROR - set input erro to no */

   ERROR_INPUT_SCREEN = NO;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (BK_DIS_VENDOR_1);
   NOT_FIRST_TIME = YES;
   call ENTER_DATA_A;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      return;


   /* BEFORE_LOGIC - Before logic */

   call TABLE_DISPLAY;

   /* AFTER_LOGIC - Other Logic */

return;
end;	/* ENT_DIS_MAIN         */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =  11 to  11;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	TABLE_DISPLAY
	Display the table info
****************************************************************/

TABLE_DISPLAY:
	procedure;

declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		RECORD_NUMBER        fixed binary (15);
declare		AP_VEN_NO_ARRAY(15) character (        6);
declare		AP_VENDOR_ERROR      fixed binary (15);
declare		AP_VEN_NO_SAVE       character (        6);
declare		ANSWER               character (1);
AP_VEN_NO = DIS_START_VENDOR;
call SET_POSITION (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 15;
      AP_VEN_NO_ARRAY(RECORD_NUMBER) = "";
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      AP_VENDOR_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (AP_VENDOR_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 15) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =  12 to  16;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         AP_VEN_NO_ARRAY(RECORD_NUMBER) = AP_VEN_NO;
         call READ_NEXT (AP_VENDOR_NO,KEY_AREA_1,AP_VENDOR_ERROR);
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      AP_VEN_NO_SAVE = AP_VEN_NO_ARRAY(15);
      if AP_VENDOR_ERROR = END_OF_FILE then
         GET_OUT = YES;
      else
         do;
         call OUTPUT_LINE (24,10,"Stop Displaying?");
         call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
         call CLEAR_TO_BOS (24);
         if (ANSWER = "Y") then
            GET_OUT = YES;
         end;
      end;
   else
      GET_OUT = YES;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 15;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if AP_VEN_NO_ARRAY(RECORD_NUMBER) ^= "" then
         do LOOP_INDEX =12 to  16;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_DISPLAY        */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AP_VENDOR_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
