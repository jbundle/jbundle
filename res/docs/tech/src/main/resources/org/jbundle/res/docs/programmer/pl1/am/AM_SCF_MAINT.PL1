/****************************************************************
	Module: AM_SCF_MAINT
	Top Level Logic: STANDARD_FILE_MAINT
	Date: 23-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AM_SCF_MAINT
	Screen file maintenance (standard)
****************************************************************/

%replace AM_SCF_MAINT_1 by   4;
AM_SCF_MAINT:
   procedure;
%replace AM_SCF_CONTROL_NO by  11;
%include "AM_SCF_CONTROL.DD";

declare		END_SCREEN_IO        bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		KEY_NO               fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		END_SCF_READ         bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		END_CHANGE_ITEM      bit (1);
declare		SCF_INPUT            character (        3);
declare		LOOP_INDEX           fixed binary (15);
   call INITIALIZE;
   END_SCREEN_IO = NO;
   do while (END_SCREEN_IO ^= YES);
      call SCREEN_IO;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   SCF_TO = "";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AM_SCF_MAINT_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (AM_SCF_CONTROL_NO,"AM_SCF_CONTROL",byteaddr(AM_SCF_CONTROL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AM_SCF_CONTROL_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	SCREEN_IO
	Screen I/O (Input display write)
****************************************************************/

SCREEN_IO:
	procedure;

declare		ERROR_AM_SCF_CONTROL fixed binary (15);

   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (AM_SCF_MAINT_1);
   NOT_FIRST_TIME = YES;

   /* INPUT_KEY - Input the key-data from the screen */

   KEY_NO = 1;
   INPUT_LENGTH = 1;
   call INPUT_FIELD (  1,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_SCREEN_IO = YES;
      return;
      end;
   FIRST_ITEM = 2;
   if INPUT_LENGTH = 0 then
      do;
      END_SCREEN_IO = YES;
      return;
      end;
   END_SCF_READ = NO;
   call SCF_READ;
   if END_SCF_READ then
      return;

   /* READ_AND_LOCK - Read the record and lock it */

   call READ_KEYED (AM_SCF_CONTROL_NO+?LOCK_RECORD,KEY_NO,ERROR_AM_SCF_CONTROL);
   if ERROR_AM_SCF_CONTROL = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      end;
   if ERROR_AM_SCF_CONTROL > 3 then
      call PRINT_ERROR (AM_SCF_CONTROL_NO,ERROR_AM_SCF_CONTROL);

   /* RECORD_FOUND - Was the record found? */

   ERROR_INPUT_SCREEN = NO;
   if ERROR_AM_SCF_CONTROL = NORMAL_RETURN then
      do;
      call DISPLAY_DATA;
      end;
   else
      do;

      /* ENTER_SCREEN - Enter screen for the first time */


         /* CLEAR_FIELDS - Clear non-screen file fields */

         call INPUT_SCREEN;
      if ERROR_INPUT_SCREEN then return;
      end;
   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* DISPLAY_OR_INPUTED - Was the data displayed or inputed? */

   if ERROR_AM_SCF_CONTROL = NORMAL_RETURN then
      do;

      /* DIS_DELETED_OR_OK - Displayed, was this record deleted? */

      if RETURN_CODE = DELETE_TYPED then
         do;

         /* DELETE_RECORD - Delete the record */

         call DELETE_RECORD (AM_SCF_CONTROL_NO,ERROR_CODE);
         end;
      else
         do;

         /* UPDATE_RECORD - Update the record */

         call UPDATE_RECORD (AM_SCF_CONTROL_NO,ERROR_CODE);
         end;
      end;
   else
      do;

      /* INP_DELETED_OR_OK - Inputed data, should I delete or it ok */

      if RETURN_CODE = DELETE_TYPED then
         do;

         /* NO_CODE - This section has no code */

         /* No code in this section */
         end;
      else
         do;

         /* WRITE_RECORD - Write the record */

         call WRITE_RECORD (AM_SCF_CONTROL_NO,ERROR_CODE);
         end;
      end;
return;
end;	/* SCREEN_IO            */

/****************************************************************
	SCF_READ
	Special read logic for SCF_CONTROL file
****************************************************************/

SCF_READ:
	procedure;

declare		OK_READ_FLAG         fixed binary (15);
SCF_INPUT = SCF_FROM;
SCF_TO = SCF_FROM;

call SET_POSITION (AM_SCF_CONTROL_NO,KEY_NO,ERROR_CODE);
if ERROR_CODE ^= END_OF_FILE then
   call READ_NEXT (AM_SCF_CONTROL_NO,KEY_NO,ERROR_CODE);
if ERROR_CODE = END_OF_FILE then
   do;	/* No larger SCF found, enter any valid SCF-to */
   SCF_FROM = "<255><255><255>"c;
   SCF_TO = SCF_FROM;
   return;
   end;

if SCF_FROM <= SCF_INPUT then
   do;		/* Falls within parameters, read/lock and display */
   if SCF_FROM ^= SCF_INPUT then
      FIRST_ITEM = 1;
   return;
   end;

SCF_TO = SCF_INPUT;	/* Make sure read will get error */

return;
end;	/* SCF_READ             */

/****************************************************************
	DISPLAY_DATA
	Display the data for this screen
****************************************************************/

DISPLAY_DATA:
	procedure;

do LOOP_INDEX = FIRST_ITEM to   6;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA         */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

SALESPERSON_TERR = 0;
SALES_REGION = "";
UPS_ZONE = "";
SCF_DESCRIPTION = "";
do LOOP_INDEX = FIRST_ITEM to   6;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   2 then
      do;

      /* CHECK_SCF - Check the SCF-to for validity */

         if SCF_TO < SCF_INPUT then
            do;
            call DISPLAY_MESSAGE ("<Bel>SCF-to can't be less than SCF-from"c);
            call PRESS_RETURN;
            LOOP_INDEX = LOOP_INDEX - 1;	/* Input this again */
            end;

         if SCF_TO >= SCF_FROM then
            do;
            call DISPLAY_MESSAGE ("<Bel>Can't have overlapping SCFs"c);
            call PRESS_RETURN;
            LOOP_INDEX = LOOP_INDEX - 1;	/* Input this again */
            end;

      if LOOP_INDEX = 2 then
         SCF_FROM = SCF_INPUT;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  6,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  6 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   2 then
      do;

      /* CHECK_SCF - Check the SCF-to for validity */

         if SCF_TO < SCF_INPUT then
            do;
            call DISPLAY_MESSAGE ("<Bel>SCF-to can't be less than SCF-from"c);
            call PRESS_RETURN;
            LOOP_INDEX = LOOP_INDEX - 1;	/* Input this again */
            end;

         if SCF_TO >= SCF_FROM then
            do;
            call DISPLAY_MESSAGE ("<Bel>Can't have overlapping SCFs"c);
            call PRESS_RETURN;
            LOOP_INDEX = LOOP_INDEX - 1;	/* Input this again */
            end;

      if LOOP_INDEX = 2 then
         SCF_FROM = SCF_INPUT;

      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AM_SCF_CONTROL_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
