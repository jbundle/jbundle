/****************************************************************
	Module: AR_DEPOSIT_DIST
	Top Level Logic: TABLE_FILE_DIS
	Date: 21-Mar-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AR_DEPOSIT_DIST
	Display table logic
****************************************************************/

%replace AR_DEPOSIT_DIST_1 by 862;
AR_DEPOSIT_DIST:
   procedure;
%replace AD_CHECKING_NO by  26;
%replace AD_ACCT_NO by  24;
%replace AR_PYMT_HIST_NO by  44;
%replace BK_BOOKING_NO by   9;
%include "AD_CHECKING.DD";
%include "AD_ACCT.DD";
%include "AR_PYMT_HIST.DD";
%include "BK_BOOKING.DD";

declare		END_DISPLAY_IO       bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
   call INITIALIZE;
   END_DISPLAY_IO = NO;
   do while (END_DISPLAY_IO ^= YES);
      call DISPLAY_IO;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AD_TRX_SEQ = 0;
   AD_CHECK_TYPE = "M";
   AD_SYS_NUMBER = "";
   AD_TRX_AMT_USD = 0;
   AD_DATE_RECONCILED = 0;
   AD_BALANCE = 0;
   AD_LAST_CHECK = 0;
   AD_LAST_SEQ = 0;
   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AR_DEPOSIT_DIST_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (AD_CHECKING_NO,"AD_CHECKING",byteaddr(AD_CHECKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_CHECKING_NO,ERROR_CODE);
   call OPEN_FILE (AD_ACCT_NO,"AD_ACCT",byteaddr(AD_ACCT_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_ACCT_NO,ERROR_CODE);
   call OPEN_FILE (AR_PYMT_HIST_NO,"AR_PYMT_HIST",byteaddr(AR_PYMT_HIST_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AR_PYMT_HIST_NO,ERROR_CODE);
   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	DISPLAY_IO
	Main logic for table display
****************************************************************/

DISPLAY_IO:
	procedure;


   /* RESET_INPUT_ERROR - Set input error to NO */

   ERROR_INPUT_SCREEN = NO;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (AR_DEPOSIT_DIST_1);
   NOT_FIRST_TIME = YES;
   call INPUT_HDR_INFO;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_DISPLAY_IO = YES;
      return;
      end;


   /* BEFORE_LOGIC - Before logic */

   call TABLE_DISPLAY;

   /* AFTER_LOGIC - Other Logic */


   /* OTHER_LOGIC - Any other logic */

return;
end;	/* DISPLAY_IO           */

/****************************************************************
	INPUT_HDR_INFO
	Input the table header information
****************************************************************/

INPUT_HDR_INFO:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AD_ACCOUNT_NO = AD_BANK_NO;
      call READ_KEYED (AD_ACCT_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =   3 to   3;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   3 then
      do;

      /* READ_SECOND_2 - Read secondary info */

      AD_BANK_NO = AD_BANK_NO;
      AD_TRX_DATE = AD_TRX_DATE;
      AD_TRX_TYPE = "D";
      AD_TRX_NUMBER = AD_TRX_DATE;
      AD_TRX_SEQ = 1;
      call READ_KEYED (AD_CHECKING_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   4 to   4;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_HDR_INFO       */

/****************************************************************
	TABLE_DISPLAY
	Display the table info
****************************************************************/

TABLE_DISPLAY:
	procedure;

declare		AR_HIST_TYPE_SAVE    character (        1);
declare		AR_HIST_BANK_SAVE    fixed binary (15);
declare		AR_HIST_CHECK_SAVE   fixed binary (31);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		RECORD_NUMBER        fixed binary (15);
declare		AR_HIST_BOOKING_ARRA(16) fixed binary (31);
declare		AR_HIST_SEQ_ARRAY(16) fixed binary (15);
declare		AR_PYMT_HIST_ERROR   fixed binary (15);
declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_BOOKING     fixed binary (15);
declare		AR_HIST_BOOKING_SAVE fixed binary (31);
declare		AR_HIST_SEQ_SAVE     fixed binary (15);
declare		ANSWER               character (1);
AR_HIST_TYPE = "P";
AR_HIST_TYPE_SAVE = AR_HIST_TYPE;
AR_HIST_BANK = AD_BANK_NO;
AR_HIST_BANK_SAVE = AR_HIST_BANK;
AR_HIST_CHECK = AD_TRX_NUMBER;
AR_HIST_CHECK_SAVE = AR_HIST_CHECK;
AR_HIST_BOOKING = 0;
AR_HIST_SEQ = 0;
call SET_POSITION (AR_PYMT_HIST_NO,KEY_AREA_2,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (AR_PYMT_HIST_NO,KEY_AREA_2,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (AR_HIST_TYPE > AR_HIST_TYPE_SAVE) !
   (AR_HIST_BANK > AR_HIST_BANK_SAVE) !
   (AR_HIST_CHECK > AR_HIST_CHECK_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 16;
      AR_HIST_BOOKING_ARRA(RECORD_NUMBER) = 0;
      AR_HIST_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      AR_PYMT_HIST_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (AR_PYMT_HIST_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 16) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =   5 to  11;
            call OUTPUT_FIELD (LOOP_INDEX);
            if LOOP_INDEX =   6 then
               do;

               /* GET_HIST_BK - Read this booking */

               if AR_HIST_BOOKING ^= 0 then
                  do;

                  /* SETUP_KEY - Set up this key for a read */

                  BK_MODIFICATION = 0;
                  BOOKING_NO = AR_HIST_BOOKING;
                  KEY_NO = 1;

                  /* READ_RECORD - Read the record */

                  call READ_KEYED (BK_BOOKING_NO,KEY_NO,ERROR_BK_BOOKING);
                  if ERROR_BK_BOOKING > 3 then
                     call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
                  if ERROR_BK_BOOKING ^= NORMAL_RETURN then
                     LOOP_INDEX = 99;
                  end;
               else
                  LOOP_INDEX = 99;

               end;
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         AR_HIST_BOOKING_ARRA(RECORD_NUMBER) = AR_HIST_BOOKING;
         AR_HIST_SEQ_ARRAY(RECORD_NUMBER) = AR_HIST_SEQ;
         call READ_NEXT (AR_PYMT_HIST_NO,KEY_AREA_2,AR_PYMT_HIST_ERROR);
         if (AR_HIST_TYPE > AR_HIST_TYPE_SAVE) !
         (AR_HIST_BANK > AR_HIST_BANK_SAVE) !
         (AR_HIST_CHECK > AR_HIST_CHECK_SAVE) then
            AR_PYMT_HIST_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      AR_HIST_BOOKING_SAVE = AR_HIST_BOOKING_ARRA(16);
      AR_HIST_SEQ_SAVE = AR_HIST_SEQ_ARRAY(16);
      AR_HIST_TYPE = AR_HIST_TYPE_SAVE;
      AR_HIST_BANK = AR_HIST_BANK_SAVE;
      AR_HIST_CHECK = AR_HIST_CHECK_SAVE;
      if AR_PYMT_HIST_ERROR = END_OF_FILE then
         do;
         GET_OUT = YES;
         call PRESS_RETURN;
         end;
      else
         do;
         call OUTPUT_LINE (24,10,"Stop Displaying?");
         call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
         call CLEAR_TO_BOS (24);
         if (ANSWER = "Y") then
            GET_OUT = YES;
         end;
      end;
   else
      do;
      GET_OUT = YES;
      call PRESS_RETURN;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 16;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if AR_HIST_BOOKING_ARRA(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX = 5 to  11;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_DISPLAY        */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AD_CHECKING_NO);
   call CLOSE_FILE (AD_ACCT_NO);
   call CLOSE_FILE (AR_PYMT_HIST_NO);
   call CLOSE_FILE (BK_BOOKING_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
