/****************************************************************
	Module: AD_CHECK_RECON
	Top Level Logic: CHECK_RECON_LOGIC
	Date: 24-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AD_CHECK_RECON
	Top-Level Logic for check reconciliation
****************************************************************/

%replace AD_CHECK_RECON_1 by 656;
%replace AD_CHECK_RECON_2 by 657;
AD_CHECK_RECON:
   procedure;
%replace AD_ACCT_NO by  24;
%replace AD_CHECKING_NO by  26;
%include "AD_CHECK_RECON.DD";
%include "AD_ACCT.DD";
%include "AD_CHECKING.DD";

declare		END_CHECK_RECON_MAIN bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_RECON_CHECKS     bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
   call INITIALIZE;
   END_CHECK_RECON_MAIN = NO;
   do while (END_CHECK_RECON_MAIN ^= YES);
      call CHECK_RECON_MAIN;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AD_RECON_START = 0;
   AD_RECON_DEF = TODAYS_DATE();
   AD_RECON_INCL = "N";
   AD_RECON_ITEM = "Y";
   AD_BALANCE = 0;
   AD_LAST_CHECK = 0;
   AD_LAST_SEQ = 0;
   AD_TRX_SEQ = 0;
   AD_CHECK_TYPE = "M";
   AD_SYS_NUMBER = "";
   AD_TRX_AMT_USD = 0;
   AD_DATE_RECONCILED = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AD_CHECK_RECON_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (AD_CHECK_RECON_RECORD) );
   call OPEN_FILE (AD_ACCT_NO,"AD_ACCT",byteaddr(AD_ACCT_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_ACCT_NO,ERROR_CODE);
   call OPEN_FILE (AD_CHECKING_NO,"AD_CHECKING",byteaddr(AD_CHECKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_CHECKING_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	CHECK_RECON_MAIN
	Mainline logic for check reconciliation
****************************************************************/

CHECK_RECON_MAIN:
	procedure;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (AD_CHECK_RECON_1);
   NOT_FIRST_TIME = YES;

   /* RESET_INP_ERR - Reset the input error flag */

   ERROR_INPUT_SCREEN = NO;

   call ENTER_DATA_A;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_CHECK_RECON_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_CHECK_RECON_MAIN = YES;
      return;
      end;


   /* SET_FIRST - Set the record pointer to the first rec */

   AD_BANK_NO = AD_RECON_BANK;
   AD_TRX_TYPE = AD_TYPE_START;
   AD_TRX_NUMBER = AD_RECON_START;
   AD_TRX_SEQ = 0;
   call SET_POSITION (AD_CHECKING_NO,KEY_AREA_2,ERROR_CODE);
   END_RECON_CHECKS = NO;
   do while (END_RECON_CHECKS ^= YES);
      call RECON_CHECKS;
   end;
return;
end;	/* CHECK_RECON_MAIN     */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AD_ACCOUNT_NO = AD_RECON_BANK;
      call READ_KEYED (AD_ACCT_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =   3 to   6;
   if LOOP_INDEX =   3 then
      call DISPLAY_MSG_NO ( 75);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   3 then
      do;

      /* CHECK_RECON_TYPES - Set up the type range */

      if RETURN_CODE = ALL_TYPED then
         do;
         AD_TYPE_START = " ";
         AD_TYPE_END = "z";
         end;
      else
         do;
         AD_TYPE_START = AD_RECON;
         AD_TYPE_END = AD_RECON;
         end;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 95,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  5 then
   do;
   if SELECT =  1 then
      LOOP_INDEX =  1;
   if SELECT >=  2 then
      LOOP_INDEX = SELECT +   1;
   if LOOP_INDEX =   3 then
      call DISPLAY_MSG_NO ( 75);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AD_ACCOUNT_NO = AD_RECON_BANK;
      call READ_KEYED (AD_ACCT_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
   if LOOP_INDEX =   3 then
      do;

      /* CHECK_RECON_TYPES - Set up the type range */

      if RETURN_CODE = ALL_TYPED then
         do;
         AD_TYPE_START = " ";
         AD_TYPE_END = "z";
         end;
      else
         do;
         AD_TYPE_START = AD_RECON;
         AD_TYPE_END = AD_RECON;
         end;

      end;
   end;
if SELECT = 95 then
   do;
   call INPUT_FIELD ( 18,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	RECON_CHECKS
	Go thru the checks and reconcile
****************************************************************/

RECON_CHECKS:
	procedure;

declare		ANSWER               character (1);
declare		KEY_NO               fixed binary (15);
declare		ERROR_AD_CHECKING    fixed binary (15);

   /* READNEXT - Read the next record */

   call READ_NEXT (AD_CHECKING_NO,KEY_AREA_2,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AD_CHECKING_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AD_BANK_NO > AD_RECON_BANK) !
   (AD_TRX_TYPE > AD_TYPE_END) then
      do;
      END_RECON_CHECKS = YES;
      return;
      end;

   /* CHECK_CHECK_STATUS - Has this check been reconciled already? */

   if AD_RECON_INCL = "N" then if AD_DATE_RECONCILED ^= 0 then
      return;

   call DISPLAY_DATA_D;
   call ENTER_DATA_E;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_RECON_CHECKS = YES;
      return;
      end;


   /* CHECK_RECON - Is the check to be reconciled? */

   if AD_RECON_ITEM = "N" then
      do;
      if AD_DATE_RECONCILED = 0 then
         return;
      else
         do;
         call OUTPUT_LINE(23,10,"Are you sure you want to mark this as not reconciled?");
         call INPUT_DATA(23,64,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
         call CLEAR_TO_BOS(23);
         call DUMP_BUFFER;
         if ANSWER ^= "Y" then
            return;
         AD_DATE_RECONCILED = 0;
         end;
      end;
   else
      do;
      if AD_DATE_RECONCILED ^= 0 then
         return;
      else
         AD_DATE_RECONCILED = AD_RECON_DEF;
      end;


/* UPDATE_RECORD - Update the record */

call UPDATE_RECORD (AD_CHECKING_NO,ERROR_CODE);

/* READ_RECORD - Read the record */

call READ_KEYED (AD_CHECKING_NO,KEY_AREA_2,ERROR_AD_CHECKING);
if ERROR_AD_CHECKING > 3 then
   call PRINT_ERROR (AD_CHECKING_NO,ERROR_AD_CHECKING);
return;
end;	/* RECON_CHECKS         */

/****************************************************************
	DISPLAY_DATA_D
	Display the data in screen group D
****************************************************************/

DISPLAY_DATA_D:
	procedure;

do LOOP_INDEX =   7 to  17;
   if LOOP_INDEX =   8 then
      do;

      /* SET_AD_DESC - Set the transaction description */

      do case (index("CDSXBI+-",AD_TRX_TYPE) + 1);
         AD_TRX_DESC = "";
         AD_TRX_DESC = "Check";
         AD_TRX_DESC = "Deposit";
         AD_TRX_DESC = "Start";
         AD_TRX_DESC = "Xfer";
         AD_TRX_DESC = "Charge";
         AD_TRX_DESC = "Interst";
         AD_TRX_DESC = "Debit";
         AD_TRX_DESC = "Credit";
      end;
      otherwise
         AD_TRX_DESC = "";

      end;
   if LOOP_INDEX =  12 then
      do;

      /* SET_SYS_DESC - Set system description */

      do case (index("ARPM",AD_CHECK_TYPE) + 1);
         AD_SYS_DESC = "";
         AD_SYS_DESC = "A/P";
         AD_SYS_DESC = "A/R";
         AD_SYS_DESC = "P/R";
         AD_SYS_DESC = "Man";
      end;

      end;
   call KEEP_TRAILING_SPACES;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_D       */

/****************************************************************
	ENTER_DATA_E
	Enter the data in screen group E
****************************************************************/

ENTER_DATA_E:
	procedure;

do LOOP_INDEX =  18 to  18;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_E         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AD_ACCT_NO);
   call CLOSE_FILE (AD_CHECKING_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
