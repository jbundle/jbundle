/****************************************************************
	Module: BK_PAX_OUT
	Top Level Logic: PAX_OUT_LOGIC
	Date: 17-Jun-91
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_PAX_OUT
	Top Level Logic for Passenger Output
****************************************************************/

%replace BK_PAX_OUT_1 by 503;
BK_PAX_OUT:
   procedure;
%replace PA_PAX_NO by  95;
%include "BK_PAX_OUT.DD";
%include "PA_PAX.DD";

declare		END_CHANGE_ITEM      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		END_GO_THRU_FILE     bit (1);

   /* DECLARE_WP - Declare the file for the merge file */

   declare BK_TEXT file;

   call INITIALIZE;
   call INPUT_SCREEN;
   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;
   call WRITE_PAX;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   PAX_ENTERED = TODAYS_DATE();

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_PAX_OUT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_PAX_OUT_RECORD) );
   call OPEN_FILE (PA_PAX_NO,"PA_PAX",byteaddr(PA_PAX_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (PA_PAX_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to  13;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  5,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  2 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   end;
if SELECT =  3 then
   do;
   do LOOP_INDEX =   3 to   7;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   end;
if SELECT =  4 then
   do;
   do LOOP_INDEX =   8 to  12;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   end;
if SELECT =  5 then
   do;
   call INPUT_FIELD ( 13,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	WRITE_PAX
	Write out the passengers
****************************************************************/

WRITE_PAX:
	procedure;


   /* OPEN_WP - Open the Merge file for output */

   ERROR_CODE = 0;
   open file (BK_TEXT) stream output title("ITIN:" !! CUT_SPACES(PAX_WP_FILE))
      linesize(255) environment(filetype(150) lineend);


   /* SET_FIRST - Set the record pointer to the first rec */

   PAX_ZIP = START_PAX;
   PAX_NO = 0;
   call SET_POSITION (PA_PAX_NO,KEY_AREA_2,ERROR_CODE);
   END_GO_THRU_FILE = NO;
   do while (END_GO_THRU_FILE ^= YES);
      call GO_THRU_FILE;
   end;

   /* CLOSE_WP - Close merge file */

   close file (BK_TEXT);

return;
end;	/* WRITE_PAX            */

/****************************************************************
	GO_THRU_FILE
	Read each record
****************************************************************/

GO_THRU_FILE:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (PA_PAX_NO,KEY_AREA_2,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (PA_PAX_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (PAX_ZIP > END_PAX) then
      do;
      END_GO_THRU_FILE = YES;
      return;
      end;

   /* CHECK_VALID_PAX - Valid record? */

   if PAX_TYPE1 ^= "  " then
      do;
      if PAX_TYPE ^= "  " then
         do;
         if (PAX_TYPE1 = PAX_TYPE) !
         (PAX_TYPE2 = PAX_TYPE) !
         (PAX_TYPE3 = PAX_TYPE) !
         (PAX_TYPE4 = PAX_TYPE) !
         (PAX_TYPE5 = PAX_TYPE) then
            do;
            /* nothing */
            end;
         else
            return;
         end;
      else
         return;
      end;

   if TVL_INT1 ^= "  " then
      do;
      if PAX_INTEREST(1) ^= TVL_INT1 then
         return;
      end;


   /* WRITE_PAX_WP - Write the passenger wp record */

   declare BK_STRING character (80) varying;
   if PAX_ADDR_1 = "" then
      do;
      BK_STRING = CUT_SPACES(PAX_ADDR_1) !! "<22>"c;
      write file (BK_TEXT) from (BK_STRING);
      BK_STRING = CUT_SPACES(PAX_NAME) !! "<22>"c;
      write file (BK_TEXT) from (BK_STRING);
      end;
   else
      do;
      BK_STRING = CUT_SPACES(PAX_NAME) !! "<22>"c;
      write file (BK_TEXT) from (BK_STRING);
      BK_STRING = CUT_SPACES(PAX_ADDR_1) !! "<22>"c;
      write file (BK_TEXT) from (BK_STRING);
      end;
   BK_STRING = CUT_SPACES(PAX_ADDR_2) !! "<22>"c;
   write file (BK_TEXT) from (BK_STRING);
   BK_STRING = CUT_SPACES(PAX_ADDR_3) !! "<22>"c;
   write file (BK_TEXT) from (BK_STRING);
   BK_STRING = CUT_SPACES(PAX_ZIP) !! "<22>"c;
   write file (BK_TEXT) from (BK_STRING);
   if PAX_SALUTATION = "" then
      PAX_SALUTATION = PAX_NAME;
   BK_STRING = CUT_SPACES(PAX_SALUTATION) !! "<22>"c;
   write file (BK_TEXT) from (BK_STRING);
   PAX_SALUTATION = PAX_NO;
   PAX_SALUTATION = SUBSTR(PAX_SALUTATION,9,6);
   BK_STRING = CUT_SPACES(PAX_SALUTATION) !! "<22>"c;
   write file (BK_TEXT) from (BK_STRING);
   BK_STRING = "<5>"c;
   write file (BK_TEXT) from (BK_STRING);

return;
end;	/* GO_THRU_FILE         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (PA_PAX_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
