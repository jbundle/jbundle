/****************************************************************
	Module: BK_REVIEW_RPT
	Top Level Logic: REPORT_LOGIC
	Date: 16-Jul-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_REVIEW_RPT
	Standard report logic
****************************************************************/

%replace BK_REVIEW_RPT_1 by 881;
%replace BK_REVIEW_RPT_2 by 882;
BK_REVIEW_RPT:
   procedure;
%replace BK_BOOKING_NO by   9;
%include "BK_REVIEW_RPT.DD";
%include "BK_BOOKING.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		FIRST_TIME           bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   BK_REV_DATE = TODAYS_DATE();
   BK_REV_TIME = CURRENT_TIME();
   BK_REV_USER = USER_NAME();
   BK_REV_PAGE = 1;
   BK_REV_COUNT = 0;
   BK_REV_NEW = 0;
   BK_REV_XL = 0;
   BK_REV_CHANGES = 0;
   BK_REV_ELAP_TOT = 0;
   BK_REV_PAX_TOT = 0;
   BK_REV_GR_TOT = 0;
   BK_REV_NET_TOT = 0;
   BK_REV_ELAP_DAY = 0;
   BK_REV_DAY_COUNT = 0;
   BK_REV_NEW_DAY = 0;
   BK_REV_XL_DAY = 0;
   BK_REV_MOD_DAY = 0;
   BK_REV_PAX_DAY = 0;
   BK_REV_GROSS_DAY = 0;
   BK_REV_NET_DAY = 0;
   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_REVIEW_RPT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_REVIEW_RPT_RECORD) );
   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (BK_REVIEW_RPT_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   BK_MOD_DATE = BK_REV_START;
   BOOKING_NO = 0;
   BK_MODIFICATION = 0;
   call SET_POSITION (BK_BOOKING_NO,KEY_AREA_5,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =   8 to  14;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
BK_REV_START = TODAYS_DATE();
BK_REV_END = BK_REV_START;
do LOOP_INDEX =   1 to   2;
   if LOOP_INDEX =   1 then
      BK_REV_START = TODAYS_DATE();
   if LOOP_INDEX =   2 then
      BK_REV_END = BK_REV_START;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  2,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  2 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   6;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

BK_REV_PAGE = BK_REV_PAGE + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;

declare		OLD_BK_MOD_DATE      fixed binary (15);

   /* READNEXT - Read the next record */

   call READ_NEXT (BK_BOOKING_NO,KEY_AREA_5,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_BOOKING_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_MOD_DATE > BK_REV_END) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      OLD_BK_MOD_DATE = -1;
      end;
   if BK_MOD_DATE ^= OLD_BK_MOD_DATE then
      do;
      if ^FIRST_TIME then
         do;
         do LOOP_INDEX =   8 to  11;
            call PRINT_REPORT_LINE;
         end;
         BK_REV_ELAP_DAY = 0;
         BK_REV_DAY_COUNT = 0;
         BK_REV_NEW_DAY = 0;
         BK_REV_XL_DAY = 0;
         BK_REV_MOD_DAY = 0;
         BK_REV_PAX_DAY = 0;
         BK_REV_GROSS_DAY = 0;
         BK_REV_NET_DAY = 0;
         end;
      end;
   if BK_MOD_DATE ^= OLD_BK_MOD_DATE then
      do;
      do LOOP_INDEX =  24 to   1;
         call PRINT_REPORT_LINE;
      end;
      OLD_BK_MOD_DATE = BK_MOD_DATE;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */


   /* ADJUST_AND_ADD - Adjust for changes and add NEW/XL/CHG */

   BK_REVIEW_NEW = " ";
   if BK_STATUS = "XL" then
      do;
      BK_PAX = 0;
      BK_TOUR_PRICE = 0;
      BK_NET_PRICE = 0;
      BK_REV_XL = BK_REV_XL + 1;
      BK_REV_XL_DAY = BK_REV_XL_DAY + 1;
      end;
   else
      do;
      if BK_MODIFICATION = 0 then if BK_NEXT_MOD = 0 then
         BK_MODIFICATION = 1;
      if BK_MODIFICATION = 1 then
         do;
         BK_REVIEW_NEW = "*";
         BK_REV_NEW = BK_REV_NEW + 1;
         BK_REV_NEW_DAY = BK_REV_NEW_DAY + 1;
         end;
      else
         do;
         BK_PAX = 0;
         BK_TOUR_PRICE = 0;
         BK_NET_PRICE = 0;
         BK_REV_CHANGES = BK_REV_CHANGES + 1;
         BK_REV_MOD_DAY = BK_REV_MOD_DAY + 1;
         end;
      end;


   /* SET_REV_ELAP - Calculate the elapsed minutes */

   BK_REV_ELAP = float(BK_TIME_ELAPSED,21)/30;


   /* SET_REV_MODS - Set up the mod flags */

   BK_RES_HOTEL = " ";
   BK_RES_LAND = " ";
   BK_RES_REMARK = " ";
   BK_RES_AIR = " ";
   BK_RES_LINE = " ";
   BK_RES_PAX = " ";

   if BK_NEXT_MOD = BK_HOTEL_MOD then
      BK_RES_HOTEL = "H";
   if BK_NEXT_MOD = BK_TOUR_MOD then
      BK_RES_LAND = "L";
   if BK_NEXT_MOD = BK_REMARK_MOD then
      BK_RES_REMARK = "R";
   if BK_NEXT_MOD = BK_AIR_MOD then
      BK_RES_AIR = "A";
   if BK_NEXT_MOD = BK_LINE_CHGD then
      BK_RES_LINE = "$";
   if BK_NEXT_MOD = BK_PAX_CHGD then
      BK_RES_PAX = "P";

   do LOOP_INDEX =   7 to   7;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_TOTALS - Add to the total fields */

   BK_REV_ELAP_DAY = floor((BK_REV_ELAP_DAY + BK_REV_ELAP) * 100 + 0.5) / 100;
   BK_REV_DAY_COUNT = BK_REV_DAY_COUNT + 1;
   BK_REV_PAX_DAY = BK_REV_PAX_DAY + BK_PAX;
   BK_REV_GROSS_DAY = floor((BK_REV_GROSS_DAY + BK_TOUR_PRICE) * 100 + 0.5) / 100;
   BK_REV_NET_DAY = floor((BK_REV_NET_DAY + BK_NET_PRICE) * 100 + 0.5) / 100;
   BK_REV_COUNT = BK_REV_COUNT + 1;
   BK_REV_ELAP_TOT = floor((BK_REV_ELAP_TOT + BK_REV_ELAP) * 100 + 0.5) / 100;
   BK_REV_PAX_TOT = BK_REV_PAX_TOT + BK_PAX;
   BK_REV_GR_TOT = floor((BK_REV_GR_TOT + BK_TOUR_PRICE) * 100 + 0.5) / 100;
   BK_REV_NET_TOT = floor((BK_REV_NET_TOT + BK_NET_PRICE) * 100 + 0.5) / 100;

   /* OTHER_LOGIC - Any other logic */

return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
