/****************************************************************
	Module: BK_ENT_PAX
	Top Level Logic: DIS_TABLE_MAINT
	Date:  4-Feb-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_ENT_PAX
	Table maint - don't enter anything
****************************************************************/

%replace BK_ENT_PAX_1 by 235;
BK_ENT_PAX:
   procedure(
      BK_ENT_HDR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_TOUR_RECORD,
      BK_BOOKING_RECORD,
      BK_PASSENGERS_RECORD);
%replace BK_TOUR_HDR_NO by  58;
%replace BK_TOUR_NO by  34;
%replace BK_BOOKING_NO by   9;
%replace BK_PASSENGERS_NO by  49;
%include "BK_ENT_PAX.DD";
%include "BK_ENT_HDR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_TOUR.DD";
%include "BK_BOOKING.DD";
%include "BK_PASSENGERS.DD";

declare		ERROR_CODE           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		BK_PAX_SEQ_ARRAY( 9) fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		END_DELETE_PAX_DET   bit (1);
declare		END_GO_THRU_PAX      bit (1);
   call INITIALIZE;
   call DIS_TABLE_IO;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   ROOM_COUNT = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_ENT_PAX_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_ENT_PAX_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	DIS_TABLE_IO
	Display the table
****************************************************************/

DIS_TABLE_IO:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_TOUR        fixed binary (15);

   /* BEFORE_LOGIC - Before logic */


   /* BEFORE_ENT_PAX - Before passenger entry */


      /* CHECK_BOOKING - Is this a booking-in-progress? */

      if BOOKING_NO = 0 then
         return;


      /* SAVE_PAX_COUNT - Save the pax count before entry */

      SAVE_PAX = BK_PAX;
      SAVE_FOC = BK_FOC;
      SAVE_SINGLE = BK_SINGLE;
      SAVE_DOUBLE = BK_DOUBLE;
      SAVE_TRIPLE = BK_TRIPLE;
      SAVE_QUAD = BK_QUAD;

      PAX_CHANGE = "N";

   call TABLE_MAINT;

   /* AFTER_LOGIC - Other Logic */


   /* AFTER_ENT_PAX - After entering pax, set tour reset seq. */

   if PAX_CHANGE = "N" then
      if SAVE_PAX ^= 0 then
      if SAVE_PAX ^= BK_PAX then
         do;
         BK_PAX = SAVE_PAX;
         BK_FOC = SAVE_FOC;
         BK_SINGLE = SAVE_SINGLE;
         BK_DOUBLE = SAVE_DOUBLE;
         BK_TRIPLE = SAVE_TRIPLE;
         BK_QUAD = SAVE_QUAD;
         call DISPLAY_DATA_C;
         end;

   if (BK_TOUR_NUM ^= 0) &
      ((SAVE_PAX ^= BK_PAX) !
      (SAVE_FOC ^= BK_FOC) !
      (SAVE_SINGLE ^= BK_SINGLE) !
      (SAVE_DOUBLE ^= BK_DOUBLE) !
      (SAVE_TRIPLE ^= BK_TRIPLE) !
      (SAVE_QUAD ^= BK_QUAD)) then
         do;

         /* READ_TOUR_LOCK - Read the tour record and lock it */

         ERROR_BK_TOUR = RECORD_LOCKED;
         do while (ERROR_BK_TOUR = RECORD_LOCKED);

            /* READ_TOUR_LK - Read and lock the tour */

            call READ_KEYED (BK_TOUR_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_BK_TOUR);
            if ERROR_BK_TOUR > 3 then
               call PRINT_ERROR (BK_TOUR_NO,ERROR_BK_TOUR);
         end;

         TOUR_PAX = TOUR_PAX + BK_PAX - SAVE_PAX;
         TOUR_FOCS = TOUR_FOCS + BK_FOC - SAVE_FOC;
         TOUR_SINGLES = TOUR_SINGLES + BK_SINGLE - SAVE_SINGLE;
         TOUR_DOUBLES = TOUR_DOUBLES + BK_DOUBLE - SAVE_DOUBLE;
         TOUR_TRIPLES = TOUR_TRIPLES + BK_TRIPLE - SAVE_TRIPLE;
         TOUR_QUADS = TOUR_QUADS + BK_QUAD - SAVE_QUAD;

         /* UPDATE_TOUR_REC - Update the tour record */

         call UPDATE_RECORD (BK_TOUR_NO,ERROR_CODE);
         end;

   /* RESET_PAX_SEQ - Reset the passenger sequence */

   BK_PAX_SEQ = 0;
   BK_PAX_SHARE_SEQ = 0;


return;
end;	/* DIS_TABLE_IO         */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		BK_PAX_MOD_SAVE      fixed binary (15);
declare		BK_PAX_BK_NO_SAVE    fixed binary (31);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		BK_PASSENGERS_ERROR  fixed binary (15);
declare		BK_PAX_SEQ_SAVE      fixed binary (15);
declare		ANSWER               character (1);
BK_PAX = 0;
BK_SINGLE = 0;
BK_DOUBLE = 0;
BK_TRIPLE = 0;
BK_QUAD = 0;
BK_PAX = 0;
BK_PAX_MOD = 0;
BK_PAX_MOD_SAVE = BK_PAX_MOD;
BK_PAX_BK_NO = BOOKING_NO;
BK_PAX_BK_NO_SAVE = BK_PAX_BK_NO;
BK_PAX_SEQ = 0;
call SET_POSITION (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (BK_PAX_MOD > BK_PAX_MOD_SAVE) !
   (BK_PAX_BK_NO > BK_PAX_BK_NO_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to  9;
      BK_PAX_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_PASSENGERS_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_PASSENGERS_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <=  9) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =  11 to  14;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;

         /* ADD_PAX - Add to the Pax count */

         BK_PAX = BK_PAX + 1;
         do case (BK_PAX_ROOM_CODE);
         	BK_SINGLE = BK_SINGLE + 1;
         	BK_DOUBLE = BK_DOUBLE + 1;
         	BK_TRIPLE = BK_TRIPLE + 1;
         	BK_QUAD = BK_QUAD + 1;
         end;
         otherwise
         do;
         end;

         BK_PAX_SEQ_ARRAY(RECORD_NUMBER) = BK_PAX_SEQ;
         call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_1,BK_PASSENGERS_ERROR);
         if (BK_PAX_MOD > BK_PAX_MOD_SAVE) !
         (BK_PAX_BK_NO > BK_PAX_BK_NO_SAVE) then
            BK_PASSENGERS_ERROR = END_OF_FILE;
         if BK_PASSENGERS_ERROR = END_OF_FILE then
            do;
            call SET_ROW_OFFSET (0);
            do LOOP_INDEX =   2 to   2;
               call OUTPUT_FIELD (LOOP_INDEX);
            end;
            LOOP_INDEX = LOOP_INDEX - 1;
            do LOOP_INDEX =  17 to  21;
               call OUTPUT_FIELD (LOOP_INDEX);
            end;
            LOOP_INDEX = LOOP_INDEX - 1;
            end;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      BK_PAX_SEQ_SAVE = BK_PAX_SEQ_ARRAY( 9);
      BK_PAX_MOD = BK_PAX_MOD_SAVE;
      BK_PAX_BK_NO = BK_PAX_BK_NO_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if RETURN_CODE = END_TYPED then
         if BK_PAX_SEQ_ARRAY( 9) ^= 0 then
            do;
            BK_PASSENGERS_ERROR = NORMAL_RETURN;
            do while (BK_PASSENGERS_ERROR ^= END_OF_FILE);

               /* ADD_PAX - Add to the Pax count */

               BK_PAX = BK_PAX + 1;
               do case (BK_PAX_ROOM_CODE);
               	BK_SINGLE = BK_SINGLE + 1;
               	BK_DOUBLE = BK_DOUBLE + 1;
               	BK_TRIPLE = BK_TRIPLE + 1;
               	BK_QUAD = BK_QUAD + 1;
               end;
               otherwise
               do;
               end;

               call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_1,BK_PASSENGERS_ERROR);
               if (BK_PAX_MOD > BK_PAX_MOD_SAVE) !
               (BK_PAX_BK_NO > BK_PAX_BK_NO_SAVE) then
                  BK_PASSENGERS_ERROR = END_OF_FILE;
            end;
            end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if BK_PASSENGERS_ERROR ^= END_OF_FILE then
            do;
            BK_PAX_SEQ = BK_PAX_SEQ_SAVE;
            call SET_POSITION (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if BK_PAX_SEQ_ARRAY( 9) = 0 then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      BK_PAX_MOD = BK_PAX_MOD_SAVE;
      BK_PAX_BK_NO = BK_PAX_BK_NO_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <=  9) );
         call BK_PASSENGERS_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (BK_PAX_SEQ_ARRAY( 9) = 0) then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to  9;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if BK_PAX_SEQ_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX =11 to  14;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  9,SELECT,RETURN_CODE);

/* CHECK_PAX_CHG - Change or delete? */

if (SELECT ^= 0 ! RETURN_CODE = DELETE_TYPED) then
   do;
   PAX_CHANGE = "Y";
   if BK_PAX_CHGD ^= BK_NEXT_MOD then
      do;
      if BK_NEXT_MOD ^= 0 then
         call COPY_PAX_INFO;
      BK_PAX_CHGD = BK_NEXT_MOD;
      end;
   end;

if RETURN_CODE = DELETE_TYPED then
   do;
   END_DELETE_PAX_DET = NO;
   do while (END_DELETE_PAX_DET ^= YES);
      call DELETE_PAX_DET;
   end;
   BK_PAX = 0;
   BK_SINGLE = 0;
   BK_DOUBLE = 0;
   BK_TRIPLE = 0;
   BK_QUAD = 0;
   BK_PAX_CHGD = -1;
   call DISPLAY_DATA_C;
   end;

ROOM_COUNT = 1;

BK_PAX_MOD = BK_MODIFICATION;
BK_PAX_BK_NO = BOOKING_NO;

if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  9 then
   do;
   RECORD_NUMBER = SELECT;
   call BK_PASSENGERS_LINE;
   call SET_ROW_OFFSET (0);

   /* RESET_ROOM_COUNT - Set the room count to zero */

   ROOM_COUNT = 0;

   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	COPY_PAX_INFO
	Copy the passenger information
****************************************************************/

COPY_PAX_INFO:
	procedure;


   /* SET_FIRST_PAX - Set up for seq read */

   BK_PAX_MOD = 0;
   BK_PAX_BK_NO = BOOKING_NO;
   BK_PAX_SEQ = 0;
   call SET_POSITION (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
   END_GO_THRU_PAX = NO;
   do while (END_GO_THRU_PAX ^= YES);
      call GO_THRU_PAX;
   end;
return;
end;	/* COPY_PAX_INFO        */

/****************************************************************
	GO_THRU_PAX
	Read thru all the pax and write mod
****************************************************************/

GO_THRU_PAX:
	procedure;


   /* READ_NEXT_PAX - Read the next passenger */

   call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_PASSENGERS_NO,ERROR_CODE);

   /* CHECK_END_PAX - Check for the end of the passengers */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_PAX_MOD > 0) !
   (BK_PAX_BK_NO > BOOKING_NO) then
      do;
      END_GO_THRU_PAX = YES;
      return;
      end;

   /* SET_MOD_PAX - Set the passenger mod number */

   BK_PAX_MOD = BK_NEXT_MOD;


   /* WRITE_RECORD - Write the record */

   call WRITE_RECORD (BK_PASSENGERS_NO,ERROR_CODE);

   /* SET_PAX_POS - Set the position for the next read */

   BK_PAX_MOD = 0;
   BK_PAX_BK_NO = BOOKING_NO;
   BK_PAX_SEQ = BK_PAX_SEQ+1;
   call SET_POSITION (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
return;
end;	/* GO_THRU_PAX          */

/****************************************************************
	DELETE_PAX_DET
	Delete the pax detail
****************************************************************/

DELETE_PAX_DET:
	procedure;


   /* SET_FIRST_PAX - Set up for seq read */

   BK_PAX_MOD = 0;
   BK_PAX_BK_NO = BOOKING_NO;
   BK_PAX_SEQ = 0;
   call SET_POSITION (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);

   /* READ_NEXT_PAX - Read the next passenger */

   call READ_NEXT (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_PASSENGERS_NO,ERROR_CODE);

   /* CHECK_END_PAX - Check for the end of the passengers */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_PAX_MOD > 0) !
   (BK_PAX_BK_NO > BOOKING_NO) then
      do;
      END_DELETE_PAX_DET = YES;
      return;
      end;

   /* DELETE_RECORD - Delete the record */

   call DELETE_RECORD (BK_PASSENGERS_NO,ERROR_CODE);
return;
end;	/* DELETE_PAX_DET       */

/****************************************************************
	BK_PASSENGERS_LINE
	Change one line in the secondary file
****************************************************************/

BK_PASSENGERS_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
declare		LAST_FOUND           bit (1);
declare		NAME_INDEX           fixed binary (15);

/* SET_PAX_MOD - Flag passenger detail as modified */

BK_PAX_CHGD = BK_NEXT_MOD;

call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if BK_PAX_SEQ_ARRAY(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   BK_PAX_SEQ = BK_PAX_SEQ_ARRAY(RECORD_NUMBER);
   call READ_KEYED (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
   do LOOP_INDEX = 11 to  14;
      call CLEAR_FIELD (LOOP_INDEX);
   end;

   /* SUB_PAX - Subtract from the Pax */

   BK_PAX = BK_PAX - 1;
   do case (BK_PAX_ROOM_CODE);
   	BK_SINGLE = BK_SINGLE - 1;
   	BK_DOUBLE = BK_DOUBLE - 1;
   	BK_TRIPLE = BK_TRIPLE - 1;
   	BK_QUAD = BK_QUAD - 1;
   end;
   otherwise
   do;
   end;

   end;
else
   do;
   BK_PAX_SEQ = 0;
   BK_PAX_ROOM_CODE = 0;
   BK_PAX_NAME = "";
   BK_PAX_LAST_NAME = "";
   BK_PAX_SMOKER = "";
   BK_PAX_COMMENT = "";
   BK_PAX_SHARE_BK = 0;
   BK_PAX_SHARE_SEQ = 0;
   BK_PAX_NO = 0;
   BK_PAX_ROOM_DESC = "";
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =  11 to  11;
      if LOOP_INDEX =  11 then
         call DISPLAY_MSG_NO ( 39);
      if LOOP_INDEX =  11 then
         do;

         /* CHECK_TYPE_DEF - Check for the passenger type default */

         if (REWRITE = NO) & (ROOM_COUNT > 1) then
            do;
            LOOP_INDEX = 50;
            INPUT_LENGTH = 1;
            BK_PAX_ROOM_CODE = 0;
            ROOM_COUNT = ROOM_COUNT - 1;
            call CLEAR_MESSAGE;
            end;

         end;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
      if LOOP_INDEX =  11 then
         do;

         /* SET_ROOM_COUNT - Set the room count for the next time tru */

         ROOM_COUNT = BK_PAX_ROOM_CODE;

         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =  12 to  14;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
         if LOOP_INDEX =  12 then
            do;

            /* SETUP_LAST_NAME - Set up the passenger last name */

            LAST_FOUND = NO;
            do NAME_INDEX = length(BK_PAX_NAME) to 1 by -1;
            	if substr(BK_PAX_NAME,NAME_INDEX,1) ^= " " then
            		LAST_FOUND = YES;
            	else
            		if LAST_FOUND = YES then
            			goto LOOP_FOUND_OVER;
            end;
            if LAST_FOUND = NO then
               do;
               LOOP_INDEX = 100;
               DEL_RECORD = YES;
               end;
            LOOP_FOUND_OVER:
            BK_PAX_LAST_NAME = substr(BK_PAX_NAME,NAME_INDEX+1,
               min(length(BK_PAX_LAST_NAME),length(BK_PAX_NAME) - NAME_INDEX) );
            call CONVERT_TO_UPPER(BK_PAX_LAST_NAME);

            end;
         if LOOP_INDEX =  13 then
            do;

            /* SET_PAX_CHANGED - Passenger detail changed */

            PAX_CHANGE = "Y";

            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      BK_PAX_SEQ = BK_PAX_SEQ_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (BK_PASSENGERS_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      BK_PAX_SEQ = 0;
      end;
   else
      do;
      if REWRITE = NO then
         do;
         if RECORD_NUMBER = 1 then
            BK_PAX_SEQ = 1;
         else
            BK_PAX_SEQ = BK_PAX_SEQ_ARRAY(RECORD_NUMBER - 1) + 1;
         ERROR_CODE = KEY_ALREADY_EXISTS;
         do while (ERROR_CODE = KEY_ALREADY_EXISTS);
            call WRITE_RECORD (BK_PASSENGERS_NO,ERROR_CODE);
            if ERROR_CODE = KEY_ALREADY_EXISTS then
               BK_PAX_SEQ = BK_PAX_SEQ + 1;
         end;
         end;
      else
         call UPDATE_RECORD (BK_PASSENGERS_NO,ERROR_CODE);

      /* ADD_PAX - Add to the Pax count */

      BK_PAX = BK_PAX + 1;
      do case (BK_PAX_ROOM_CODE);
      	BK_SINGLE = BK_SINGLE + 1;
      	BK_DOUBLE = BK_DOUBLE + 1;
      	BK_TRIPLE = BK_TRIPLE + 1;
      	BK_QUAD = BK_QUAD + 1;
      end;
      otherwise
      do;
      end;

      end;
   call SET_ROW_OFFSET(0);
   do LOOP_INDEX =   2 to   2;

      /* SET_PAX_MOD - Flag passenger detail as modified */

      BK_PAX_CHGD = BK_NEXT_MOD;

      call OUTPUT_FIELD (LOOP_INDEX);
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   do LOOP_INDEX =  17 to  21;

      /* SET_PAX_MOD - Flag passenger detail as modified */

      BK_PAX_CHGD = BK_NEXT_MOD;

      call OUTPUT_FIELD (LOOP_INDEX);
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   call SET_ROW_OFFSET (RECORD_NUMBER - 1);
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      BK_PAX_SEQ_ARRAY(RECORD_NUMBER) = BK_PAX_SEQ;
      end;
end;
return;
end;	/* BK_PASSENGERS_LINE   */

/****************************************************************
	DISPLAY_DATA_C
	Display the data in screen group C
****************************************************************/

DISPLAY_DATA_C:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   2 to   2;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
do LOOP_INDEX =  17 to  21;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_C       */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
