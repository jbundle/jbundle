/****************************************************************
	Module: BK_LAND_PRICE
	Top Level Logic: TABLE_FILE_MAINT
	Date: 14-Nov-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_LAND_PRICE
	Top Level for table display/maintenance
****************************************************************/

%replace BK_LAND_PRICE_1 by 177;
%replace BK_LAND_PRICE_2 by 457;
BK_LAND_PRICE:
   procedure;
%replace BK_LAND_NO by  54;
%replace AP_VENDOR_NO by  30;
%replace AD_CURR_NO by  25;
%replace BK_LAND_DET_NO by  91;
%include "BK_LAND.DD";
%include "AP_VENDOR.DD";
%include "AD_CURR.DD";
%include "BK_LAND_DET.DD";

declare		END_TABLE_IO         bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		LAND_END_ARRAY(14) fixed binary (15);
declare		LAND_TO_ARRAY(14) fixed binary (15);
declare		LAND_SEQ_ARRAY(14) fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
   call INITIALIZE;
   END_TABLE_IO = NO;
   do while (END_TABLE_IO ^= YES);
      call TABLE_IO;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   LAND_TAX = 0;
   LAND_SVC_CHG = 0;
   LAND_COMM = 0;
   AP_LAST_ACTIVITY = 0;
   AP_CUR_BAL = 0;
   AP_MTD_PUR = 0;
   AP_YTD_PUR = 0;
   AP_LAST_PUR = 0;
   AP_SELECT_AMT = 0;
   AP_SELECT_STATUS = "N";
   AP_COMM_CODE = "F";
   AP_VEN_TAX_ID = "";
   CURR_CODE = "";
   LAST_EX_DATE = TODAYS_DATE();
   COSTING_EXCH = 0;
   CURR_INT_DESC = "Dollar";
   LAND_MARKUP_LINE = 0;
   LAND_VARIES_ON = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_LAND_PRICE_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (BK_LAND_NO,"BK_LAND",byteaddr(BK_LAND_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_LAND_NO,ERROR_CODE);
   call OPEN_FILE (AP_VENDOR_NO,"AP_VENDOR",byteaddr(AP_VENDOR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AP_VENDOR_NO,ERROR_CODE);
   call OPEN_FILE (AD_CURR_NO,"AD_CURR",byteaddr(AD_CURR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_CURR_NO,ERROR_CODE);
   call OPEN_FILE (BK_LAND_DET_NO,"BK_LAND_DET",byteaddr(BK_LAND_DET_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_LAND_DET_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	TABLE_IO
	Table file with header info maint.
****************************************************************/

TABLE_IO:
	procedure;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (BK_LAND_PRICE_1);
   NOT_FIRST_TIME = YES;
   call INPUT_HDR_INFO;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_ERR - Return if error/end typed */

   if RETURN_CODE = END_TYPED then
      do;
      END_TABLE_IO = YES;
      return;
      end;

   /* OTHER_LOGIC - Any other logic */


   /* BEFORE_LOGIC - Before logic */

   call TABLE_MAINT;

   /* AFTER_LOGIC - Other Logic */

return;
end;	/* TABLE_IO             */

/****************************************************************
	INPUT_HDR_INFO
	Input the table header information
****************************************************************/

INPUT_HDR_INFO:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      call READ_KEYED (BK_LAND_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to  13;
            call OUTPUT_FIELD (LOOP_INDEX);
            if LOOP_INDEX =  13 then
               do;

               /* READ_SECOND_DIS - Read Second - Display line version */

               AP_VEN_NO = LAND_VENDOR_NO;
               call READ_KEYED (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE = RECORD_NOT_FOUND then
                  do;
                  AP_VEN_NAME = "** RECORD NOT FOUND **";
                  end;
               else
                  do;
                  do LOOP_INDEX =  14 to  14;
                     call OUTPUT_FIELD (LOOP_INDEX);
                  end;
                  LOOP_INDEX = LOOP_INDEX - 1;
                  end;
               end;
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         do LOOP_INDEX =  15 to  15;
            call OUTPUT_FIELD (LOOP_INDEX);
            if LOOP_INDEX =  15 then
               do;

               /* READ_SECOND_DIS_2 - Read second - display mode */

               CURR_CODE = LAND_CURR;
               call READ_KEYED (AD_CURR_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE = RECORD_NOT_FOUND then
                  do;
                  CURR_DESC = "** RECORD NOT FOUND **";
                  end;
               else
                  do;
                  do LOOP_INDEX =  16 to  16;
                     call OUTPUT_FIELD (LOOP_INDEX);
                  end;
                  LOOP_INDEX = LOOP_INDEX - 1;
                  end;
               end;
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_HDR_INFO       */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		LAND_PR_NO_SAVE      character (       10);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		BK_LAND_DET_ERROR    fixed binary (15);
declare		LAND_END_SAVE        fixed binary (15);
declare		LAND_TO_SAVE         fixed binary (15);
declare		LAND_SEQ_SAVE        fixed binary (15);
declare		ANSWER               character (1);
LAND_PR_NO = LAND_CODE;
LAND_PR_NO_SAVE = LAND_PR_NO;
LAND_END = 0;
LAND_TO = 0;
LAND_SEQ = 0;
call SET_POSITION (BK_LAND_DET_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_LAND_DET_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (LAND_PR_NO > LAND_PR_NO_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 14;
      LAND_END_ARRAY(RECORD_NUMBER) = 0;
      LAND_TO_ARRAY(RECORD_NUMBER) = 0;
      LAND_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_LAND_DET_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_LAND_DET_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 14) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =  17 to  24;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         LAND_END_ARRAY(RECORD_NUMBER) = LAND_END;
         LAND_TO_ARRAY(RECORD_NUMBER) = LAND_TO;
         LAND_SEQ_ARRAY(RECORD_NUMBER) = LAND_SEQ;
         call READ_NEXT (BK_LAND_DET_NO,KEY_AREA_1,BK_LAND_DET_ERROR);
         if (LAND_PR_NO > LAND_PR_NO_SAVE) then
            BK_LAND_DET_ERROR = END_OF_FILE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      LAND_END_SAVE = LAND_END_ARRAY(14);
      LAND_TO_SAVE = LAND_TO_ARRAY(14);
      LAND_SEQ_SAVE = LAND_SEQ_ARRAY(14);
      LAND_PR_NO = LAND_PR_NO_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if BK_LAND_DET_ERROR ^= END_OF_FILE then
            do;
            LAND_END = LAND_END_SAVE;
            LAND_TO = LAND_TO_SAVE;
            LAND_SEQ = LAND_SEQ_SAVE;
            call SET_POSITION (BK_LAND_DET_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_LAND_DET_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_LAND_DET_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if LAND_END_ARRAY(14) = 0 then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      LAND_PR_NO = LAND_PR_NO_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <= 14) );
         call BK_LAND_DET_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (LAND_END_ARRAY(14) = 0) then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 14;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if LAND_END_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX =17 to  24;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 40,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 14 then
   do;
   RECORD_NUMBER = SELECT;
   call BK_LAND_DET_LINE;
   call SET_ROW_OFFSET (0);
   end;
if SELECT = 40 then
   do;
   call INPUT_FIELD (  1,INPUT_LENGTH,RETURN_CODE);
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      call READ_KEYED (BK_LAND_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to  13;
            call OUTPUT_FIELD (LOOP_INDEX);
            if LOOP_INDEX =  13 then
               do;

               /* READ_SECOND_DIS - Read Second - Display line version */

               AP_VEN_NO = LAND_VENDOR_NO;
               call READ_KEYED (AP_VENDOR_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE = RECORD_NOT_FOUND then
                  do;
                  AP_VEN_NAME = "** RECORD NOT FOUND **";
                  end;
               else
                  do;
                  do LOOP_INDEX =  14 to  14;
                     call OUTPUT_FIELD (LOOP_INDEX);
                  end;
                  LOOP_INDEX = LOOP_INDEX - 1;
                  end;
               end;
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         do LOOP_INDEX =  15 to  15;
            call OUTPUT_FIELD (LOOP_INDEX);
            if LOOP_INDEX =  15 then
               do;

               /* READ_SECOND_DIS_2 - Read second - display mode */

               CURR_CODE = LAND_CURR;
               call READ_KEYED (AD_CURR_NO,KEY_AREA_1,ERROR_CODE);
               if ERROR_CODE = RECORD_NOT_FOUND then
                  do;
                  CURR_DESC = "** RECORD NOT FOUND **";
                  end;
               else
                  do;
                  do LOOP_INDEX =  16 to  16;
                     call OUTPUT_FIELD (LOOP_INDEX);
                  end;
                  LOOP_INDEX = LOOP_INDEX - 1;
                  end;
               end;
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	BK_LAND_DET_LINE
	Change one line in the secondary file
****************************************************************/

BK_LAND_DET_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if LAND_END_ARRAY(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   LAND_END = LAND_END_ARRAY(RECORD_NUMBER);
   LAND_TO = LAND_TO_ARRAY(RECORD_NUMBER);
   LAND_SEQ = LAND_SEQ_ARRAY(RECORD_NUMBER);
   call READ_KEYED (BK_LAND_DET_NO,KEY_AREA_1,ERROR_CODE);
   do LOOP_INDEX = 17 to  24;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   end;
else
   do;
   LAND_SEQ = 0;
   LAND_START = 0;
   LAND_END = 0;
   LAND_FROM = 0;
   LAND_TO = 0;
   LAND_MARKUP_LINE = 0;
   LAND_PRICE = 0;
   LAND_VARIES_ON = 0;
   LAND_VAR_DESC = "";
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =  17 to  17;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =  18 to  24;
         if LOOP_INDEX =  23 then
            call DISPLAY_MSG_NO ( 78);
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
         if LOOP_INDEX =  23 then
            do;

            /* CHECK_VARY_CODE - Check the "Varies" code */

            do case(index("01234FDS",LAND_VARIES_ON));
               LAND_VAR_DESC = "Passengers";
               LAND_VAR_DESC = "Singles";
               LAND_VAR_DESC = "Twins";
               LAND_VAR_DESC = "Triples";
               LAND_VAR_DESC = "Quads";
               LAND_VAR_DESC = "Fixed Cost";
               LAND_VAR_DESC = "Days";
               LAND_VAR_DESC = "SIC";
            end;
            otherwise
               LAND_VAR_DESC = "";

            LOOP_INDEX = LOOP_INDEX + 1;
            if LAND_VAR_DESC = "" then
               call INPUT_FIELD(LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
            else
               call OUTPUT_FIELD(LOOP_INDEX);
            LOOP_INDEX = 99;

         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   INPUT_LENGTH = 1;
   end;
ERROR_CODE = 0;
if DEL_RECORD = YES then
   do;
   LAND_END = LAND_END_ARRAY(RECORD_NUMBER);
   if REWRITE = YES then
      call DELETE_RECORD (BK_LAND_DET_NO,ERROR_CODE);
   call CLEAR_FIELD(LOOP_INDEX);
   LAND_END = 0;
   end;
else
   do;
   if REWRITE = NO then
      do;
      if RECORD_NUMBER = 1 then
         LAND_SEQ = 1;
      else
         LAND_SEQ = LAND_SEQ_ARRAY(RECORD_NUMBER - 1) + 1;
      ERROR_CODE = KEY_ALREADY_EXISTS;
      do while (ERROR_CODE = KEY_ALREADY_EXISTS);
         call WRITE_RECORD (BK_LAND_DET_NO,ERROR_CODE);
         if ERROR_CODE = KEY_ALREADY_EXISTS then
            LAND_SEQ = LAND_SEQ + 1;
      end;
      end;
   else
      call UPDATE_RECORD (BK_LAND_DET_NO,ERROR_CODE);
   end;
if ERROR_CODE ^= KEY_ALREADY_EXISTS then
   do;
   LAND_END_ARRAY(RECORD_NUMBER) = LAND_END;
   LAND_TO_ARRAY(RECORD_NUMBER) = LAND_TO;
   LAND_SEQ_ARRAY(RECORD_NUMBER) = LAND_SEQ;
   end;
end;
return;
end;	/* BK_LAND_DET_LINE     */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (BK_LAND_NO);
   call CLOSE_FILE (AP_VENDOR_NO);
   call CLOSE_FILE (AD_CURR_NO);
   call CLOSE_FILE (BK_LAND_DET_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
