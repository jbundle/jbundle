/****************************************************************
	Module: AP_DIS_TOUR
	Top Level Logic: DIS_TOUR_AP
	Date: 29-Jan-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AP_DIS_TOUR
	Top Level to display booking tour info
****************************************************************/

%replace AP_DIS_TOUR_1 by 565;
AP_DIS_TOUR:
   procedure;
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";

declare		END_DIS_TOUR_IO      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
   call INITIALIZE;
   END_DIS_TOUR_IO = NO;
   do while (END_DIS_TOUR_IO ^= YES);
      call DIS_TOUR_IO;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;
   TOUR_QUADS = 0;
   HDR_TOUR_DESC2 = "";
   HDR_START_ON = 0;
   HDR_END_ON = 0;
   HDR_DEF_RATE = "F";
   HDR_DEF_CLASS = "S ";
   HDR_DEF_CUTOFF = 0;
   HDR_UPGRADE_AGCY = "A";
   HDR_INIT_STATUS = "OK";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AP_DIS_TOUR_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
   call OPEN_FILE (BK_TOUR_NO,"BK_TOUR",byteaddr(BK_TOUR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TOUR_NO,ERROR_CODE);
   call OPEN_FILE (BK_TOUR_HDR_NO,"BK_TOUR_HDR",byteaddr(BK_TOUR_HDR_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_TOUR_HDR_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	DIS_TOUR_IO
	Mainline logic
****************************************************************/

DIS_TOUR_IO:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_BOOKING     fixed binary (15);

   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (AP_DIS_TOUR_1);
   NOT_FIRST_TIME = YES;

   /* ZERO_BK_MOD - Zero the mod number */

   BK_MODIFICATION = 0;

   call ENTER_DATA_C;

   /* RETURN_IF_END - Return if end typed */

   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_DIS_TOUR_IO = YES;
      return;
      end;


   /* READ_RECORD - Read the record */

   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_BK_BOOKING);
   if ERROR_BK_BOOKING > 3 then
      call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);

   /* DIS_RECORD_FOUND - Record Found? */

   ERROR_INPUT_SCREEN = NO;
   if ERROR_BK_BOOKING = NORMAL_RETURN then
      do;
      call DISPLAY_DATA;
      end;
   else
      do;

      /* NOT_FOUND_AGAIN - Not found, try again!! */

      call DISPLAY_MESSAGE ("Record not found!!!<Bel>"c);
      call PRESS_RETURN;
      return;

      if ERROR_INPUT_SCREEN then return;
      end;

   /* HIT_RETURN - Tell the user to Hit Return */

   call PRESS_RETURN;

return;
end;	/* DIS_TOUR_IO          */

/****************************************************************
	ENTER_DATA_C
	Enter the screen data in group C
****************************************************************/

ENTER_DATA_C:
	procedure;

declare		INPUT_LENGTH         fixed binary (15);
do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_C         */

/****************************************************************
	DISPLAY_DATA
	Display the data for this screen
****************************************************************/

DISPLAY_DATA:
	procedure;

do LOOP_INDEX =   2 to   5;
   call OUTPUT_FIELD (LOOP_INDEX);
   if LOOP_INDEX =   5 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      TOUR_NO = BK_TOUR_NUM;
      call READ_KEYED (BK_TOUR_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         TOUR_DESC = "** RECORD NOT FOUND **";
         end;
      else
         do;
         do LOOP_INDEX =   6 to  40;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_FILE (BK_TOUR_NO);
   call CLOSE_FILE (BK_TOUR_HDR_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
