/****************************************************************
	Module: BK_AVAIL_ARPT
	Top Level Logic: REPORT_LOGIC
	Date: 22-Jan-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_AVAIL_ARPT
	Standard report logic
****************************************************************/

%replace BK_AVAIL_ARPT_1 by 807;
%replace BK_AVAIL_ARPT_2 by 808;
BK_AVAIL_ARPT:
   procedure;
%replace BK_INV_DET_NO by  61;
%replace TK_DETAIL_NO by  57;
%replace BK_BOOKING_NO by   9;
%replace BK_PASSENGERS_NO by  49;
%include "BK_AVAIL_ARPT.DD";
%include "BK_INV_DET.DD";
%include "TK_DETAIL.DD";
%include "BK_BOOKING.DD";
%include "BK_PASSENGERS.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		FIRST_TIME           bit (1);
declare		END_READ_THROUGH_2   bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   DET_END_CAR = "";
   AAVAIL_DATE = TODAYS_DATE();
   AAVAIL_TIME = CURRENT_TIME();
   AAVAIL_USER = USER_NAME();
   AAVAIL_PAGE = 1;
   AIR_CHECK = "~";
   INV_DET_TYPE = "H";
   INV_CODE_TYPE = "B";
   TK_SEQ = 1;
   TK_TIME = NO_TIME;
   TK_DET_MOD_CODE = "A";
   TK_INV = "N";
   TK_INV_MOD = -1;
   TK_ARR_TIME = NO_TIME;
   TK_ARR_DAY = 0;
   TK_DETAIL_MODULE = "";
   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_AVAIL_ARPT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_AVAIL_ARPT_RECORD) );
   call OPEN_FILE (BK_INV_DET_NO,"BK_INV_DET",byteaddr(BK_INV_DET_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_INV_DET_NO,ERROR_CODE);
   call OPEN_FILE (TK_DETAIL_NO,"TK_DETAIL",byteaddr(TK_DETAIL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_DETAIL_NO,ERROR_CODE);
   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
   call OPEN_FILE (BK_PASSENGERS_NO,"BK_PASSENGERS",byteaddr(BK_PASSENGERS_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_PASSENGERS_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (BK_AVAIL_ARPT_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   INV_DET_TYPE = "A";
   INV_DET_ENTRY = DET_START_CAR!!DET_START_FLT;
   INV_DET_DATE = DET_START_ADATE;
   INV_CODE_TYPE = "";
   INV_ROOM_TYPE = 0;
   call SET_POSITION (BK_INV_DET_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =  24 to   1;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
DET_END_FLT = DET_START_FLT;
DET_START_ADATE = TODAYS_DATE();
DET_END_ADATE = DET_START_ADATE+365;
do LOOP_INDEX =   1 to   7;
   if LOOP_INDEX =   4 then
      DET_END_FLT = DET_START_FLT;
   if LOOP_INDEX =   5 then
      DET_START_ADATE = TODAYS_DATE();
   if LOOP_INDEX =   6 then
      DET_END_ADATE = DET_START_ADATE+365;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         DET_START_CAR = "";
         DET_END_CAR = "~";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   3 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         DET_START_FLT = "";
         DET_END_FLT = "~";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  7,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  7 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         DET_START_CAR = "";
         DET_END_CAR = "~";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   3 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         DET_START_FLT = "";
         DET_END_FLT = "~";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =  24 to   1;
   call PRINT_REPORT_LINE;
end;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (BK_INV_DET_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_INV_DET_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (INV_DET_TYPE > "A") !
   (INV_DET_ENTRY > DET_END_CAR!!DET_END_FLT) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CHECK_AIR_BREAK - Check for an air break */

   if INV_DET_DATE < DET_START_ADATE then
      do;
      INV_DET_DATE = DET_START_ADATE;
      call SET_POSITION (BK_INV_DET_NO,KEY_AREA_1,ERROR_CODE);
      return;
      end;

   if INV_DET_DATE > DET_END_ADATE then
      do;
      INV_DET_DATE = 32766;
      call SET_POSITION (BK_INV_DET_NO,KEY_AREA_1,ERROR_CODE);
      return;
      end;

   if AIR_CHECK ^= INV_DET_ENTRY then
      do;
      if AAVAIL_PAGE = 1 then
         do;
         call PRINT_LINE_P1;
         end;
      else
         do;
         LINE = 100;
         AAVAIL_PAGE = 1;
         end;
      end;
   AIR_CHECK = INV_DET_ENTRY;


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */

   do LOOP_INDEX =   7 to   7;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_TOTALS - Add to the total fields */


   /* OTHER_LOGIC - Any other logic */


   /* PRT_AAVAIL_DET - Print the booking detail? */

   if DET_AIR_DET = "Y" then
      do;

      /* PRT_REPORT_2 - Print a detail file's information */


         /* SET_FIRST_2 - Set the file pointer to the first key */

         TK_DET_MOD = 0;
         TK_CARRIER = substr(INV_DET_ENTRY,1,2);
         TK_FLIGHT = substr(INV_DET_ENTRY,3,4);
         TK_DATE = INV_DET_DATE;
         TK_DET_BK_TK = 0;
         TK_DET_ALT_SEQ = 0;
         TK_DET_ANSW_SEQ = 0;
         TK_SEQ = 0;
         call SET_POSITION (TK_DETAIL_NO,KEY_AREA_2,ERROR_CODE);
         END_READ_THROUGH_2 = NO;
         do while (END_READ_THROUGH_2 ^= YES);
            call READ_THROUGH_2;
         end;
      end;

return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	PRINT_LINE_P1
	PRINT
****************************************************************/

PRINT_LINE_P1:
	procedure;

do LOOP_INDEX =   1 to   6;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

AAVAIL_PAGE = AAVAIL_PAGE + 1;
return;
end;	/* PRINT_LINE_P1        */

/****************************************************************
	READ_THROUGH_2
	Read through and print the detail record
****************************************************************/

READ_THROUGH_2:
	procedure;


   /* READNEXT_2 - Read the next record */

   call READ_NEXT (TK_DETAIL_NO,KEY_AREA_2,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (TK_DETAIL_NO,ERROR_CODE);

   /* CHECK_END_2 - Check for end of records */

   if (ERROR_CODE = END_OF_FILE) !
   (TK_DET_MOD > 0) !
   (TK_CARRIER > substr(INV_DET_ENTRY,1,2)) !
   (TK_FLIGHT > substr(INV_DET_ENTRY,3,4)) !
   (TK_DATE > INV_DET_DATE) then
      do;
      END_READ_THROUGH_2 = YES;
      return;
      end;

   /* CHECK_SELECT_2 - Check for the selection criteria */


   /* CHECK_IAIR - Is this air here? */

   if TK_INV ^= "Y" then
      return;

   BK_MODIFICATION = 0;
   BOOKING_NO = TK_DET_BK_TK;
   call READ_KEYED (BK_BOOKING_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE ^= NORMAL_RETURN then
      do;
      BK_AGENCY_NAME = "** Booking not found **";
      BK_PAX = 0;
      BK_STATUS = "";
      end;

   if BK_STATUS = "XL" then
      return;

   if TK_DET_ALT_SEQ ^= 0 then
      do;
      BK_PAX = 1;
      BK_PAX_MOD = 0;
      BK_PAX_SEQ = TK_DET_ALT_SEQ;
      call READ_KEYED (BK_PASSENGERS_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE ^= NORMAL_RETURN then
         do;
         BK_AGENCY_NAME = "** Booking not found **";
         end;
      else
         BK_AGENCY_NAME = BK_PAX_NAME;
      end;


   /* PRT_DETAIL_2 - Print the detail lines */

   do LOOP_INDEX =   8 to   8;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_TO_TOTALS_2 - Add to the totals */


   /* OTHER_LOGIC_2 - Other logic */

return;
end;	/* READ_THROUGH_2       */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRINT_LINE_P1;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (BK_INV_DET_NO);
   call CLOSE_FILE (TK_DETAIL_NO);
   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_FILE (BK_PASSENGERS_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
