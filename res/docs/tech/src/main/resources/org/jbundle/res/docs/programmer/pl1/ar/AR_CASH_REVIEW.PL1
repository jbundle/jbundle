/****************************************************************
	Module: AR_CASH_REVIEW
	Top Level Logic: REPORT_LOGIC
	Date: 21-Mar-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AR_CASH_REVIEW
	Standard report logic
****************************************************************/

%replace AR_CASH_REVIEW_1 by 169;
%replace AR_CASH_REVIEW_2 by 170;
AR_CASH_REVIEW:
   procedure;
%replace AR_OPEN_NO by  43;
%replace BK_BOOKING_NO by   9;
%include "AR_CASH_REVIEW.DD";
%include "AR_OPEN.DD";
%include "BK_BOOKING.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		FIRST_TIME           bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AR_CR_DATE = TODAYS_DATE();
   AR_CR_TIME = CURRENT_TIME();
   AR_CR_PAGE = 1;
   AR_SUM_DATE = 0;
   AR_SUM_GRAND = 0;
   AR_SUM_POST = "";
   AR_SUM_TOTALS = 0;
   AR_REV_USER = USER_NAME();
   AR_SUM_DATE_TYPE = "T";
   AR_GRAND_TOTAL = 0;
   AR_ACCT_DR = 0;
   AR_ACCT_DEP = 0;
   AR_POSTED = 0;
   AR_ACTION = 0;
   AR_DEPARTURE = 0;
   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AR_CASH_REVIEW_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (AR_CASH_REVIEW_RECORD) );
   call OPEN_FILE (AR_OPEN_NO,"AR_OPEN",byteaddr(AR_OPEN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AR_OPEN_NO,ERROR_CODE);
   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (AR_CASH_REVIEW_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   AR_POSTED = AR_START_POST;
   AR_ACTION = AR_SUM_START;
   AR_BOOKING_NO = 0;
   AR_SEQ_NO = 0;
   call SET_POSITION (AR_OPEN_NO,KEY_AREA_2,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =  24 to   1;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* PRT_TRX_GRAND - Print the final totals */


      /* PRT_TRX_TOTALS - Print transaction totals */

      if AR_SUM_DATE_TYPE = "T" then
         do;
         declare LOOP fixed binary;

         do LOOP = 1 to 8;

            do case (LOOP);
               AR_SUM_TYPE = "";
               AR_SUM_TYPE = "Invoice";
               AR_SUM_TYPE = "Payment";
               AR_SUM_TYPE = "Cr memo";
               AR_SUM_TYPE = "Dr memo";
               AR_SUM_TYPE = "Refund";
               AR_SUM_TYPE = "Adjment";
               AR_SUM_TYPE = "MCO rec";
            end;

            if AR_SUM_TOTALS(LOOP) ^= 0 then
               do;
               AR_SUM_TOTAL = AR_SUM_TOTALS(LOOP);

               /* PRINT_LINE_G1 - Print lines */

               do LOOP_INDEX =  10 to  10;
                  call PRINT_REPORT_LINE;
               end;
               end;

         end;
         end;


      /* PRINT_LINE_G2 - Print */

      do LOOP_INDEX =  11 to  12;
         call PRINT_REPORT_LINE;
      end;

      /* PRINT_TRX_GRAND - Print the grand transaction totals */

      do LOOP = 1 to 8;

         do case (LOOP);
            AR_SUM_TYPE = "";
            AR_SUM_TYPE = "Invoice";
            AR_SUM_TYPE = "Payment";
            AR_SUM_TYPE = "Cr memo";
            AR_SUM_TYPE = "Dr memo";
            AR_SUM_TYPE = "Refund";
            AR_SUM_TYPE = "Adjment";
            AR_SUM_TYPE = "MCO rec";
         end;

         if AR_GRAND_TOTAL(LOOP) ^= 0 then
            do;
            AR_SUM_TOTAL = AR_GRAND_TOTAL(LOOP);

            /* PRINT_LINE_G1 - Print lines */

            do LOOP_INDEX =  10 to  10;
               call PRINT_REPORT_LINE;
            end;
            end;

      end;


   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
AR_SUM_START = 0;
AR_SUM_END = AR_SUM_START+30;
do LOOP_INDEX =   1 to   7;
   if LOOP_INDEX =   1 then
      call DISPLAY_MSG_NO ( 98);
   if LOOP_INDEX =   3 then
      AR_SUM_END = AR_SUM_START+30;
   if LOOP_INDEX =   4 then
      do;

      /* CHECK_DEP_ORDER - Skip question if in departure date order */

      if AR_SUM_DATE_TYPE = "D" then
         do;
         AR_DETAIL = "Y";
         call OUTPUT_FIELD(LOOP_INDEX);
         LOOP_INDEX = LOOP_INDEX + 1;
         AR_SUM_CASH = "N";
         call OUTPUT_FIELD(LOOP_INDEX);
         LOOP_INDEX = LOOP_INDEX + 1;
         end;

      end;
   if LOOP_INDEX =   6 then
      call DISPLAY_MSG_NO ( 73);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   6 then
      do;

      /* SET_POST_RANGE - Set up the range to run */

      if RETURN_CODE = ALL_TYPED then
         AR_SUM_POST = " ";

      AR_START_POST = 0;
      AR_END_POST = 3;
      if AR_SUM_POST = "P" then
      do;
      AR_START_POST = 2;
      AR_END_POST = 3;
      end;

   end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  7,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  7 then
   do;

      LOOP_INDEX = SELECT;
   if LOOP_INDEX =   1 then
      call DISPLAY_MSG_NO ( 98);
   if LOOP_INDEX =   4 then
      do;

      /* CHECK_DEP_ORDER - Skip question if in departure date order */

      if AR_SUM_DATE_TYPE = "D" then
         do;
         AR_DETAIL = "Y";
         call OUTPUT_FIELD(LOOP_INDEX);
         LOOP_INDEX = LOOP_INDEX + 1;
         AR_SUM_CASH = "N";
         call OUTPUT_FIELD(LOOP_INDEX);
         LOOP_INDEX = LOOP_INDEX + 1;
         end;

      end;
   if LOOP_INDEX =   4 then
      call DISPLAY_MSG_NO (  3);
   if LOOP_INDEX =   6 then
      call DISPLAY_MSG_NO ( 73);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   6 then
      do;

      /* SET_POST_RANGE - Set up the range to run */

      if RETURN_CODE = ALL_TYPED then
         AR_SUM_POST = " ";

      AR_START_POST = 0;
      AR_END_POST = 3;
      if AR_SUM_POST = "P" then
      do;
      AR_START_POST = 2;
      AR_END_POST = 3;
      end;

   end;
end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   7;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

AR_CR_PAGE = AR_CR_PAGE + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_BOOKING     fixed binary (15);

   /* READNEXT - Read the next record */

   call READ_NEXT (AR_OPEN_NO,KEY_AREA_2,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AR_OPEN_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AR_POSTED > AR_END_POST) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CHECK_TRX_DATE - Check this A/R transaction date */

   if AR_SUM_POST ^= " " then
      do;
      AR_TRX_POSTED = "N";
      if AR_SUM_DATE_TYPE = "T" then if AR_POSTED = 2 then
         AR_TRX_POSTED = "Y";
      if AR_POSTED = 3 then
         AR_TRX_POSTED = "Y";
      if AR_SUM_POST = "P" then if AR_TRX_POSTED = "N" then
         return;
      if AR_SUM_POST = "N" then if AR_TRX_POSTED = "Y" then
         return;
      end;

   if AR_SUM_DATE_TYPE = "D" then
      do;
      if (AR_DOC_TYPE ^= "I") & (AR_DOC_TYPE ^= "A") then
         return;
      AR_TRX_DATE = AR_DEPARTURE;
      AR_ACCT_DR = AR_ACCT_DEP;
      end;

   if AR_TRX_DATE > AR_SUM_END then
      return;

   if AR_TRX_DATE < AR_SUM_START then
      return;


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */

   do LOOP_INDEX =  24 to   1;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_TOTALS - Add to the total fields */


   /* OTHER_LOGIC - Any other logic */


   /* TRX_DETAIL - Print the trx detail and add to totals */

   if (AR_SUM_CASH = "N") !
      ((AR_SUM_CASH = "Y") & (AR_DOC_TYPE = "P")) then
         do;
         if AR_TRX_DATE ^= AR_SUM_DATE then
            do;
            if AR_SUM_DATE ^= 0 then
               do;

               /* PRT_TRX_TOTALS - Print transaction totals */

               if AR_SUM_DATE_TYPE = "T" then
                  do;
                  declare LOOP fixed binary;

                  do LOOP = 1 to 8;

                     do case (LOOP);
                        AR_SUM_TYPE = "";
                        AR_SUM_TYPE = "Invoice";
                        AR_SUM_TYPE = "Payment";
                        AR_SUM_TYPE = "Cr memo";
                        AR_SUM_TYPE = "Dr memo";
                        AR_SUM_TYPE = "Refund";
                        AR_SUM_TYPE = "Adjment";
                        AR_SUM_TYPE = "MCO rec";
                     end;

                     if AR_SUM_TOTALS(LOOP) ^= 0 then
                        do;
                        AR_SUM_TOTAL = AR_SUM_TOTALS(LOOP);

                        /* PRINT_LINE_G1 - Print lines */

                        do LOOP_INDEX =  10 to  10;
                           call PRINT_REPORT_LINE;
                        end;
                        end;

                  end;
                  end;

               end;
            if AR_SUM_CASH = "N" then
               do;

               /* PRINT_LINE_G3 - Print lines */

               do LOOP_INDEX =  13 to  13;
                  call PRINT_REPORT_LINE;
               end;
               end;
            do LOOP_INDEX = 1 to 8;
               AR_SUM_TOTALS(LOOP_INDEX) = 0;
            end;
            AR_SUM_DATE = AR_TRX_DATE;
            end;

         LOOP_INDEX = index("IPCDRAM",AR_DOC_TYPE) + 1;
         AR_SUM_TOTALS(LOOP_INDEX) = AR_SUM_TOTALS(LOOP_INDEX) + AR_AMOUNT;
         AR_GRAND_TOTAL(LOOP_INDEX) = AR_GRAND_TOTAL(LOOP_INDEX) + AR_AMOUNT;
         AR_SUM_GRAND = AR_SUM_GRAND + AR_AMOUNT;

         if AR_DETAIL = "Y" then
            do;

            /* PRINT_LINE_D1 -  */


            /* SET_TRX_DESC - Set the transaction description for A/R */

            do case (index("IPCDRAM",AR_DOC_TYPE) + 1);
               AR_TRX_DESC = "";
               AR_TRX_DESC = "Invoice";
               AR_TRX_DESC = "Payment";
               AR_TRX_DESC = "Cr memo";
               AR_TRX_DESC = "Dr memo";
               AR_TRX_DESC = "Refund";
               AR_TRX_DESC = "Adjment";
               AR_TRX_DESC = "MCO rec";
            end;
            otherwise
               AR_TRX_DESC = "";


            /* CHECK_POSTED - Is this trx posted? */

            AR_TRX_POSTED = "N";
            if AR_SUM_DATE_TYPE = "T" then if AR_POSTED = 2 then
               AR_TRX_POSTED = "Y";
            if AR_POSTED = 3 then
               AR_TRX_POSTED = "Y";

            do LOOP_INDEX =   8 to   8;
               call PRINT_REPORT_LINE;
            end;

            /* CHECK_BK_DET - Print the booking detail also? */

            if AR_SUM_BK_DET = "Y" then
               do;

               /* SETUP_KEY - Set up this key for a read */

               BK_MODIFICATION = 0;
               BOOKING_NO = AR_BOOKING_NO;
               KEY_NO = 1;

               /* READ_RECORD - Read the record */

               call READ_KEYED (BK_BOOKING_NO,KEY_NO,ERROR_BK_BOOKING);
               if ERROR_BK_BOOKING > 3 then
                  call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
               if ERROR_BK_BOOKING = NORMAL_RETURN then
                  do;

                  /* PRINT_LINE_D2 - Print lines */

                  do LOOP_INDEX =   9 to   9;
                     call PRINT_REPORT_LINE;
                  end;
                  end;
               end;

            end;
         end;

return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (AR_OPEN_NO);
   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
