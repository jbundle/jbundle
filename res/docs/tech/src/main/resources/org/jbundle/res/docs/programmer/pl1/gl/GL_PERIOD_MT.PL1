/****************************************************************
	Module: GL_PERIOD_MT
	Top Level Logic: TABLE_MAINT_DIS
	Date: 24-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	GL_PERIOD_MT
	Table File Display - No header
****************************************************************/

%replace GL_PERIOD_MT_1 by 603;
GL_PERIOD_MT:
   procedure;
%replace GL_PERIOD_NO by  98;
%include "GL_PERIOD.DD";

declare		ERROR_CODE           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		GL_END_PERIOD_ARRAY(19) fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
   call INITIALIZE;
   call TABLE_MAINT;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */


   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (GL_PERIOD_MT_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (GL_PERIOD_NO,"GL_PERIOD",byteaddr(GL_PERIOD_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_PERIOD_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		GL_PERIOD_ERROR      fixed binary (15);
declare		GL_END_PERIOD_SAVE   fixed binary (15);
declare		ANSWER               character (1);
GL_END_PERIOD = 0;
call SET_POSITION (GL_PERIOD_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (GL_PERIOD_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 19;
      GL_END_PERIOD_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      GL_PERIOD_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (GL_PERIOD_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 19) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =   1 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         GL_END_PERIOD_ARRAY(RECORD_NUMBER) = GL_END_PERIOD;
         call READ_NEXT (GL_PERIOD_NO,KEY_AREA_1,GL_PERIOD_ERROR);
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      GL_END_PERIOD_SAVE = GL_END_PERIOD_ARRAY(19);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if GL_PERIOD_ERROR ^= END_OF_FILE then
            do;
            GL_END_PERIOD = GL_END_PERIOD_SAVE;
            call SET_POSITION (GL_PERIOD_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (GL_PERIOD_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (GL_PERIOD_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if GL_END_PERIOD_ARRAY(19) = 0 then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <= 19) );
         call GL_PERIOD_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (GL_END_PERIOD_ARRAY(19) = 0) then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 19;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if GL_END_PERIOD_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX = 1 to   2;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 19,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 19 then
   do;
   RECORD_NUMBER = SELECT;
   call GL_PERIOD_LINE;
   call SET_ROW_OFFSET (0);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	GL_PERIOD_LINE
	Change one line in the secondary file
****************************************************************/

GL_PERIOD_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if GL_END_PERIOD_ARRAY(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   GL_END_PERIOD = GL_END_PERIOD_ARRAY(RECORD_NUMBER);
   call READ_KEYED (GL_PERIOD_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      return;
      end;
   do LOOP_INDEX =  1 to   2;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   end;
else
   do;
   GL_START_PERIOD = 0;
   GL_END_PERIOD = 0;
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =   1 to   1;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   if GL_START_PERIOD = 0 then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =   2 to   2;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      GL_END_PERIOD = GL_END_PERIOD_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (GL_PERIOD_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      GL_END_PERIOD = 0;
      end;
   else
      do;
      if REWRITE = NO then
         call WRITE_RECORD (GL_PERIOD_NO,ERROR_CODE);
      else
         call UPDATE_RECORD (GL_PERIOD_NO,ERROR_CODE);
      end;
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      GL_END_PERIOD_ARRAY(RECORD_NUMBER) = GL_END_PERIOD;
      end;
end;
return;
end;	/* GL_PERIOD_LINE       */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (GL_PERIOD_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
