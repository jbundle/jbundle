/****************************************************************
	Module: BK_ENT_LINE
	Top Level Logic: DIS_TABLE_MAINT
	Date: 24-Jan-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_ENT_LINE
	Table maint - don't enter anything
****************************************************************/

%replace BK_ENT_LINE_1 by 331;
BK_ENT_LINE:
   procedure(
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_LINE_RECORD);
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_LINE_NO by  51;
%include "BK_ENT_LINE.DD";
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_LINE.DD";

declare		ERROR_CODE           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		BK_LINE_SEQ_ARRAY(15) fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		END_GO_THRU_LINE     bit (1);
declare		END_DELETE_LINES     bit (1);
   call INITIALIZE;
   call DIS_TABLE_IO;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */


   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_ENT_LINE_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_ENT_LINE_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	DIS_TABLE_IO
	Display the table
****************************************************************/

DIS_TABLE_IO:
	procedure;


   /* BEFORE_LOGIC - Before logic */


   /* BEFORE_LINE - Logic to do before running */


      /* CHECK_BOOKING - Is this a booking-in-progress? */

      if BOOKING_NO = 0 then
         return;


      /* CHECK_ALL_INFO - Are all Agency, Pax, and Tour in? */

      if BK_AGENCY = -1 then
         do;
         call DISPLAY_MESSAGE ("Agency not entered!");
         call PRESS_RETURN;
         return;
         end;

      if BK_PAX = 0 then
         do;
         call DISPLAY_MESSAGE ("Passengers not entered!");
         call PRESS_RETURN;
         return;
         end;

      if BK_TOUR_NUM = 0 then
         do;
         call DISPLAY_MESSAGE ("Tour not entered!");
         call PRESS_RETURN;
         return;
         end;


      /* SETUP_LINE_IF_NEW - Set up the line items if not set up */

      if BK_LINE_CHGD = -1 then
         do;

         /* BK_SET_LINE - Call the program to set the line items */

         %include "BK_SET_LINE.DCL";
         call BK_SET_LINE(
            BK_LINE_RECORD,
            BK_BOOKING_RECORD,
            BK_TOUR_HDR_RECORD,
            BK_TOUR_RECORD);
         end;


      /* SAVE_BEFORE - Save net to adjust after changes */

      SAVE_BALANCE = BK_NET_PRICE;

   call TABLE_MAINT;

   /* AFTER_LOGIC - Other Logic */


   /* AFTER_LINE - Set new Balance */

   BK_BALANCE = floor((BK_BALANCE + BK_NET_PRICE - SAVE_BALANCE) * 100 + 0.5) / 100;

return;
end;	/* DIS_TABLE_IO         */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		BK_LINE_MOD_SAVE     fixed binary (15);
declare		BK_LINE_BK_NO_SAVE   fixed binary (31);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		BK_LINE_ERROR        fixed binary (15);
declare		BK_LINE_SEQ_SAVE     fixed binary (15);
declare		ANSWER               character (1);
BK_TOUR_PRICE = 0;
BK_NET_PRICE = 0;
BK_LINE_MOD = 0;
BK_LINE_MOD_SAVE = BK_LINE_MOD;
BK_LINE_BK_NO = BOOKING_NO;
BK_LINE_BK_NO_SAVE = BK_LINE_BK_NO;
BK_LINE_SEQ = 0;
call SET_POSITION (BK_LINE_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (BK_LINE_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (BK_LINE_MOD > BK_LINE_MOD_SAVE) !
   (BK_LINE_BK_NO > BK_LINE_BK_NO_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 15;
      BK_LINE_SEQ_ARRAY(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      BK_LINE_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (BK_LINE_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 15) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =  11 to  16;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         BK_TOUR_PRICE = floor((BK_TOUR_PRICE + BK_LINE_EXTEN) * 100 + 0.5) / 100;
         BK_NET_PRICE = floor((BK_NET_PRICE + BK_LINE_NET) * 100 + 0.5) / 100;
         BK_LINE_SEQ_ARRAY(RECORD_NUMBER) = BK_LINE_SEQ;
         call READ_NEXT (BK_LINE_NO,KEY_AREA_1,BK_LINE_ERROR);
         if (BK_LINE_MOD > BK_LINE_MOD_SAVE) !
         (BK_LINE_BK_NO > BK_LINE_BK_NO_SAVE) then
            BK_LINE_ERROR = END_OF_FILE;
         if BK_LINE_ERROR = END_OF_FILE then
            do;
            call SET_ROW_OFFSET (0);
            do LOOP_INDEX =  17 to  18;
               call OUTPUT_FIELD (LOOP_INDEX);
            end;
            LOOP_INDEX = LOOP_INDEX - 1;
            end;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      BK_LINE_SEQ_SAVE = BK_LINE_SEQ_ARRAY(15);
      BK_LINE_MOD = BK_LINE_MOD_SAVE;
      BK_LINE_BK_NO = BK_LINE_BK_NO_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if RETURN_CODE = END_TYPED then
         if BK_LINE_SEQ_ARRAY(15) ^= 0 then
            do;
            BK_LINE_ERROR = NORMAL_RETURN;
            do while (BK_LINE_ERROR ^= END_OF_FILE);
               BK_TOUR_PRICE = floor((BK_TOUR_PRICE + BK_LINE_EXTEN) * 100 + 0.5) / 100;
               BK_NET_PRICE = floor((BK_NET_PRICE + BK_LINE_NET) * 100 + 0.5) / 100;
               call READ_NEXT (BK_LINE_NO,KEY_AREA_1,BK_LINE_ERROR);
               if (BK_LINE_MOD > BK_LINE_MOD_SAVE) !
               (BK_LINE_BK_NO > BK_LINE_BK_NO_SAVE) then
                  BK_LINE_ERROR = END_OF_FILE;
            end;
            end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if BK_LINE_ERROR ^= END_OF_FILE then
            do;
            BK_LINE_SEQ = BK_LINE_SEQ_SAVE;
            call SET_POSITION (BK_LINE_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_LINE_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (BK_LINE_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if BK_LINE_SEQ_ARRAY(15) = 0 then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      BK_LINE_MOD = BK_LINE_MOD_SAVE;
      BK_LINE_BK_NO = BK_LINE_BK_NO_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <= 15) );
         call BK_LINE_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (BK_LINE_SEQ_ARRAY(15) = 0) then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 15;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if BK_LINE_SEQ_ARRAY(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX =11 to  16;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 15,SELECT,RETURN_CODE);

/* CHECK_LINE_CHG - Check to see if any changes */

if (SELECT ^= 0 ! RETURN_CODE = DELETE_TYPED) then
if BK_LINE_CHGD ^= BK_NEXT_MOD then
   do;

   /* SET_FIRST_LINE - Set for first read */

   BK_LINE_MOD = 0;
   BK_LINE_BK_NO = BOOKING_NO;
   BK_LINE_SEQ = 0;
   call SET_POSITION (BK_LINE_NO,KEY_AREA_1,ERROR_CODE);
   END_GO_THRU_LINE = NO;
   do while (END_GO_THRU_LINE ^= YES);
      call GO_THRU_LINE;
   end;
   BK_LINE_CHGD = BK_NEXT_MOD;
   end;

if RETURN_CODE = DELETE_TYPED then
   do;
   END_DELETE_LINES = NO;
   do while (END_DELETE_LINES ^= YES);
      call DELETE_LINES;
   end;
   BK_TOUR_PRICE = 0;
   BK_NET_PRICE = 0;
   BK_LINE_CHGD = -1;
   end;

BK_LINE_MOD = BK_MODIFICATION;
BK_LINE_BK_NO = BOOKING_NO;

if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 15 then
   do;
   RECORD_NUMBER = SELECT;
   call BK_LINE_LINE;
   call SET_ROW_OFFSET (0);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	GO_THRU_LINE
	Read thru the pax info and copy to mod
****************************************************************/

GO_THRU_LINE:
	procedure;


   /* READ_NEXT_LINE - Read the next line record */

   call READ_NEXT (BK_LINE_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_LINE_NO,ERROR_CODE);

   /* CHECK_END_LINE - Last record? */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_LINE_MOD > 0) !
   (BK_LINE_BK_NO > BOOKING_NO) then
      do;
      END_GO_THRU_LINE = YES;
      return;
      end;

   /* SET_MOD_LINE - Set the line to the correct mod number */

   BK_LINE_MOD = BK_NEXT_MOD;


   /* WRITE_LINE - Write the line detail record */

   call WRITE_RECORD (BK_LINE_NO,ERROR_CODE);

   /* SET_LINE_POS - Set the position for the next read */

   BK_LINE_MOD = 0;
   BK_LINE_BK_NO = BOOKING_NO;
   BK_LINE_SEQ = BK_LINE_SEQ+1;
   call SET_POSITION (BK_LINE_NO,KEY_AREA_1,ERROR_CODE);
return;
end;	/* GO_THRU_LINE         */

/****************************************************************
	DELETE_LINES
	Delete the line item detail
****************************************************************/

DELETE_LINES:
	procedure;


   /* SET_FIRST_LINE - Set for first read */

   BK_LINE_MOD = 0;
   BK_LINE_BK_NO = BOOKING_NO;
   BK_LINE_SEQ = 0;
   call SET_POSITION (BK_LINE_NO,KEY_AREA_1,ERROR_CODE);

   /* READ_NEXT_LINE - Read the next line record */

   call READ_NEXT (BK_LINE_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_LINE_NO,ERROR_CODE);

   /* CHECK_END_LINE - Last record? */

   if (ERROR_CODE = END_OF_FILE) !
   (BK_LINE_MOD > 0) !
   (BK_LINE_BK_NO > BOOKING_NO) then
      do;
      END_DELETE_LINES = YES;
      return;
      end;

   /* DELETE_LINE_ITEM - Delete this line item */

   call DELETE_RECORD (BK_LINE_NO,ERROR_CODE);
return;
end;	/* DELETE_LINES         */

/****************************************************************
	BK_LINE_LINE
	Change one line in the secondary file
****************************************************************/

BK_LINE_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);

/* SET_LINE_MOD - Set line detail modified flag */

BK_LINE_CHGD = BK_NEXT_MOD;

call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if BK_LINE_SEQ_ARRAY(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   BK_LINE_SEQ = BK_LINE_SEQ_ARRAY(RECORD_NUMBER);
   call READ_KEYED (BK_LINE_NO,KEY_AREA_1,ERROR_CODE);
   do LOOP_INDEX = 11 to  16;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   BK_TOUR_PRICE = floor((BK_TOUR_PRICE - BK_LINE_EXTEN) * 100 + 0.5) / 100;
   BK_NET_PRICE = floor((BK_NET_PRICE - BK_LINE_NET) * 100 + 0.5) / 100;
   end;
else
   do;
   BK_LINE_SEQ = 0;
   BK_LINE_DESC = "";
   BK_LINE_PRICE = 0;
   BK_LINE_QTY = 0;
   BK_LINE_EXTEN = 0;
   BK_LINE_COMM = 0;
   BK_LINE_NET = 0;
   BK_LINE_MAN = "N";
   BK_LINE_PAY_AT = "";
   BK_LINE_FULL_COMM = "N";
   BK_LINE_TOUR_CODE = "";
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =  11 to  11;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =  12 to  16;
         if LOOP_INDEX =  13 then
            BK_LINE_QTY = BK_PAX;
         if LOOP_INDEX =  14 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =  15 then
            BK_LINE_COMM = BK_STD_COMM;
         if LOOP_INDEX =  16 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = 99;
            end;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
         if LOOP_INDEX =  13 then
            do;

            /* CALC_EXTEN - Calculate the extension */

            BK_LINE_EXTEN = BK_LINE_PRICE * BK_LINE_QTY;

            end;
         if LOOP_INDEX =  15 then
            do;

            /* CALC_NET_AND_ADD - Calculate the net */

            BK_LINE_NET = floor(BK_LINE_EXTEN * (100 - BK_LINE_COMM) + 0.5) / 100;
            LOOP_INDEX = LOOP_INDEX + 1;
            call OUTPUT_FIELD (LOOP_INDEX);

            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      BK_LINE_SEQ = BK_LINE_SEQ_ARRAY(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (BK_LINE_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      BK_LINE_SEQ = 0;
      end;
   else
      do;
      if REWRITE = NO then
         do;
         if RECORD_NUMBER = 1 then
            BK_LINE_SEQ = 1;
         else
            BK_LINE_SEQ = BK_LINE_SEQ_ARRAY(RECORD_NUMBER - 1) + 1;
         ERROR_CODE = KEY_ALREADY_EXISTS;
         do while (ERROR_CODE = KEY_ALREADY_EXISTS);
            call WRITE_RECORD (BK_LINE_NO,ERROR_CODE);
            if ERROR_CODE = KEY_ALREADY_EXISTS then
               BK_LINE_SEQ = BK_LINE_SEQ + 1;
         end;
         end;
      else
         call UPDATE_RECORD (BK_LINE_NO,ERROR_CODE);
      BK_TOUR_PRICE = floor((BK_TOUR_PRICE + BK_LINE_EXTEN) * 100 + 0.5) / 100;
      BK_NET_PRICE = floor((BK_NET_PRICE + BK_LINE_NET) * 100 + 0.5) / 100;
      end;
   call SET_ROW_OFFSET(0);
   do LOOP_INDEX =  17 to  18;

      /* SET_LINE_MOD - Set line detail modified flag */

      BK_LINE_CHGD = BK_NEXT_MOD;

      call OUTPUT_FIELD (LOOP_INDEX);
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   call SET_ROW_OFFSET (RECORD_NUMBER - 1);
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      BK_LINE_SEQ_ARRAY(RECORD_NUMBER) = BK_LINE_SEQ;
      end;
end;
return;
end;	/* BK_LINE_LINE         */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
