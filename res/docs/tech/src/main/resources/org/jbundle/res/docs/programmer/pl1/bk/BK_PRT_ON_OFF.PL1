/****************************************************************
	Module: BK_PRT_ON_OFF
	Top Level Logic: PRT_ON_OFF_LOGIC
	Date: 27-Dec-92
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_PRT_ON_OFF
	Top Level for print-invoice flag
****************************************************************/

%replace BK_PRT_ON_OFF_1 by 363;
BK_PRT_ON_OFF:
   procedure(
      BK_BOOKING_RECORD,
      BK_TOUR_RECORD,
      BK_TOUR_HDR_RECORD,
      BK_PASSENGERS_RECORD,
      BK_LINE_RECORD);
%replace BK_BOOKING_NO by   9;
%replace BK_TOUR_NO by  34;
%replace BK_TOUR_HDR_NO by  58;
%replace BK_PASSENGERS_NO by  49;
%replace BK_LINE_NO by  51;
%include "BK_PRT_ON_OFF.DD";
%include "BK_BOOKING.DD";
%include "BK_TOUR.DD";
%include "BK_TOUR_HDR.DD";
%include "BK_PASSENGERS.DD";
%include "BK_LINE.DD";

declare		ERROR_CODE           fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
   call INITIALIZE;
   call PRT_MAIN_LOGIC;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   PRINT_BOOKING = "N";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_PRT_ON_OFF_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_PRT_ON_OFF_RECORD) );
return;
end;	/* INITIALIZE           */

/****************************************************************
	PRT_MAIN_LOGIC
	Set print switches main logic
****************************************************************/

PRT_MAIN_LOGIC:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_TOUR        fixed binary (15);

   /* CHECK_BOOKING - Is this a booking-in-progress? */

   if BOOKING_NO = 0 then
      return;


   /* CHECK_ALL_INFO - Are all Agency, Pax, and Tour in? */

   if BK_AGENCY = -1 then
      do;
      call DISPLAY_MESSAGE ("Agency not entered!");
      call PRESS_RETURN;
      return;
      end;

   if BK_PAX = 0 then
      do;
      call DISPLAY_MESSAGE ("Passengers not entered!");
      call PRESS_RETURN;
      return;
      end;

   if BK_TOUR_NUM = 0 then
      do;
      call DISPLAY_MESSAGE ("Tour not entered!");
      call PRESS_RETURN;
      return;
      end;

   call DISPLAY_DATA_C;
   call DISPLAY_DATA_A;
   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;
   call DISPLAY_DATA_B;

   /* RET_IF_GROUP - Return if this is a group tour */

   if TOUR_TYPE = "G" then
      return;


   /* READ_TOUR_LOCK - Read the tour record and lock it */

   ERROR_BK_TOUR = RECORD_LOCKED;
   do while (ERROR_BK_TOUR = RECORD_LOCKED);

      /* READ_TOUR_LK - Read and lock the tour */

      call READ_KEYED (BK_TOUR_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_BK_TOUR);
      if ERROR_BK_TOUR > 3 then
         call PRINT_ERROR (BK_TOUR_NO,ERROR_BK_TOUR);
   end;


   /* SET_XL_OFF - Turn xl status off */

   if BK_STATUS ^= "XL" then if TOUR_STATUS = "XL" then
      do;
      ACTION_TYPE = BOOK_UD;
      ACTION_DATE = TODAYS_DATE();
      end;


   /* SET_TOUR_STATUS - Set the tour status if type "U" */

   TOUR_STATUS = BK_STATUS;


   /* UPDATE_BK_TOUR - Update the Tour record */

   call UPDATE_RECORD (BK_TOUR_NO,ERROR_CODE);
return;
end;	/* PRT_MAIN_LOGIC       */

/****************************************************************
	DISPLAY_DATA_C
	Display the data in screen group C
****************************************************************/

DISPLAY_DATA_C:
	procedure;

do LOOP_INDEX =  16 to  16;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_C       */

/****************************************************************
	DISPLAY_DATA_A
	Display the items in screen group A
****************************************************************/

DISPLAY_DATA_A:
	procedure;

do LOOP_INDEX =  11 to  15;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_A       */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  3,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  3 then
   do;

      LOOP_INDEX = SELECT +  11;
   if LOOP_INDEX =  12 then
      do;

      /* CHECK_YES_BK - Check to see if printing already */

      if BK_PRINT_INV = "Y" then
         LOOP_INDEX = 100;

      end;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =  12 then
      do;

      /* UD_TOUR_STATUS - Update the tour or booking status? */

      if BK_PRINT_INV = "Y" then
         do;
         BK_STATUS = "OK";
         call DISPLAY_DATA_A;
         end;

      if TOUR_TYPE ^= "G" then
         do;
         TOUR_STATUS = BK_STATUS;
         call DISPLAY_DATA_C;
         end;

      end;
   if LOOP_INDEX =  13 then
      do;

      /* UD_TOUR_STATUS - Update the tour or booking status? */

      if BK_PRINT_INV = "Y" then
         do;
         BK_STATUS = "OK";
         call DISPLAY_DATA_A;
         end;

      if TOUR_TYPE ^= "G" then
         do;
         TOUR_STATUS = BK_STATUS;
         call DISPLAY_DATA_C;
         end;

      end;
   if LOOP_INDEX =  14 then
      do;

      /* CHECK_YES_PRT - Print now? */

      if PRINT_BOOKING = "Y" then
         do;

         /* BK_OINVOICE - Call the module to print an invoice */

         %include "BK_OINVOICE.DCL";
         call BK_OINVOICE(
            BK_BOOKING_RECORD,
            BK_TOUR_RECORD,
            BK_TOUR_HDR_RECORD,
            BK_PASSENGERS_RECORD,
            BK_LINE_RECORD);
         end;

      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	DISPLAY_DATA_B
	Display the screen data in group B
****************************************************************/

DISPLAY_DATA_B:
	procedure;

do LOOP_INDEX =   3 to   3;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA_B       */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
