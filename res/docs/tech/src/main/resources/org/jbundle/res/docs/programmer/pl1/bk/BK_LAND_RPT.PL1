/****************************************************************
	Module: BK_LAND_RPT
	Top Level Logic: REPORT_LOGIC
	Date: 29-Nov-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_LAND_RPT
	Standard report logic
****************************************************************/

%replace BK_LAND_RPT_1 by 425;
%replace BK_LAND_RPT_2 by 424;
%replace BK_LAND_RPT_3 by 518;
BK_LAND_RPT:
   procedure;
%replace BK_LAND_NO by  54;
%replace BK_LAND_DET_NO by  91;
%replace BK_LAND_ITIN_NO by  80;
%include "BK_LAND_RPT.DD";
%include "BK_LAND.DD";
%include "BK_LAND_DET.DD";
%include "BK_LAND_ITIN.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		FIRST_TIME           bit (1);
declare		END_READ_TOUR_PRICES bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   WP_LINE = "";
   LAND_DATE = TODAYS_DATE();
   LAND_TIME = CURRENT_TIME();
   LAND_USER = USER_NAME();
   LAND_PAGE_NO = 1;
   LAND_COUNT = 0;
   LAND_TAX = 0;
   LAND_SVC_CHG = 0;
   LAND_COMM = 0;
   LAND_MARKUP_LINE = 0;
   LAND_VARIES_ON = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_LAND_RPT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_LAND_RPT_RECORD) );
   call OPEN_FILE (BK_LAND_NO,"BK_LAND",byteaddr(BK_LAND_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_LAND_NO,ERROR_CODE);
   call OPEN_FILE (BK_LAND_DET_NO,"BK_LAND_DET",byteaddr(BK_LAND_DET_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_LAND_DET_NO,ERROR_CODE);
   call OPEN_FILE (BK_LAND_ITIN_NO,"BK_LAND_ITIN",byteaddr(BK_LAND_ITIN_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_LAND_ITIN_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (BK_LAND_RPT_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   LAND_CODE = TOUR_FILE_START;
   call SET_POSITION (BK_LAND_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =  11 to  11;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
TOUR_FILE_END = TOUR_FILE_START;
LAND_END_DATE = LAND_START_DATE;
do LOOP_INDEX =   1 to   7;
   if LOOP_INDEX =   2 then
      TOUR_FILE_END = TOUR_FILE_START;
   if LOOP_INDEX =   6 then
      LAND_END_DATE = LAND_START_DATE;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         TOUR_FILE_START = "";
         TOUR_FILE_END = "~";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   4 then
      do;

      /* PRINT_LAND_PRICE - Print the land prices? */

      if LAND_PRICING ^= "Y" then
         LOOP_INDEX = LOOP_INDEX + 2;

      end;
   if LOOP_INDEX =   5 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         LAND_START_DATE = 0;
         LAND_END_DATE = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  7,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  7 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         TOUR_FILE_START = "";
         TOUR_FILE_END = "~";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   4 then
      do;

      /* PRINT_LAND_PRICE - Print the land prices? */

      if LAND_PRICING ^= "Y" then
         LOOP_INDEX = LOOP_INDEX + 2;

      end;
   if LOOP_INDEX =   5 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         LAND_START_DATE = 0;
         LAND_END_DATE = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   3;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

LAND_PAGE_NO = LAND_PAGE_NO + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (BK_LAND_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_LAND_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (LAND_CODE > TOUR_FILE_END) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */

   do LOOP_INDEX =   5 to   5;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_TOTALS - Add to the total fields */

   LAND_COUNT = LAND_COUNT + 1;

   /* OTHER_LOGIC - Any other logic */


   /* PRINT_LAND_DETAIL - Print land detal? */

   if TOUR_FILE_DETAIL = "Y" then
      do;

      /* PRINT_LINE_D2 -  */

      do LOOP_INDEX =   6 to  10;
         call PRINT_REPORT_LINE;
      end;
      end;


   /* OPEN_ITIN - Open the itinerary paragraph */

   END_ITIN = "N";

   if LAND_ITIN = "Y" then
      do;
      call OPEN_SFILE(100,"ITIN:" !! CUT_SPACES(LAND_CODE),byteaddr(WP_LINE),ERROR_CODE);
      if ERROR_CODE ^= NORMAL_RETURN then
         do;
         END_ITIN = "Y";
         WP_LINE = "";
         end;
      end;
   else
      WP_LINE = "";


   if LAND_PRICING = "Y" then
      do;
      call PRINT_TOUR_PRICING;
      end;


   /* CLOSE_ITIN - Finish off the rest of itin and close it */

   if LAND_ITIN = "Y" then
      do;
      if END_ITIN = "N" then
         do while (END_ITIN = "N");

            /* PRINT_LINE_D4 - PRINT */


            /* SETUP_ITIN - Set up the next itin line */

            WP_LINE = "";

            if LAND_ITIN = "Y" then
               do;
               if END_ITIN = "N" then
                  do;
                  call READ_SEQN(100,KEY_AREA_1,ERROR_CODE);
                  declare LOOP fixed binary;
                  do LOOP = 1 to 80;
                     if substr(WP_LINE,LOOP,1) < " " then
                        substr(WP_LINE,LOOP,1) = " ";
                  end;

                  if ERROR_CODE ^= NORMAL_RETURN then
                     END_ITIN = "Y";
                  end;
               end;

            do LOOP_INDEX =  14 to  14;
               call PRINT_REPORT_LINE;
            end;
         end;
      call CLOSE_SFILE(100);
      end;


return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	PRINT_TOUR_PRICING
	Print the tour pricing detail
****************************************************************/

PRINT_TOUR_PRICING:
	procedure;


   /* SET_FIRST_2 - Set the file pointer to the first key */

   LAND_PR_NO = LAND_CODE;
   LAND_END = LAND_START_DATE;
   LAND_TO = 0;
   LAND_SEQ = 0;
   call SET_POSITION (BK_LAND_DET_NO,KEY_AREA_1,ERROR_CODE);

   /* READNEXT_2 - Read the next record */

   call READ_NEXT (BK_LAND_DET_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_LAND_DET_NO,ERROR_CODE);

   /* CHECK_END_2 - Check for end of records */

   if (ERROR_CODE = END_OF_FILE) !
   (LAND_PR_NO > LAND_CODE) then
      return;

   /* PRINT_LINE_P2 - PRINT */

   do LOOP_INDEX =  12 to  12;
      call PRINT_REPORT_LINE;
   end;

   /* SET_FIRST_2 - Set the file pointer to the first key */

   LAND_PR_NO = LAND_CODE;
   LAND_END = LAND_START_DATE;
   LAND_TO = 0;
   LAND_SEQ = 0;
   call SET_POSITION (BK_LAND_DET_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_TOUR_PRICES = NO;
   do while (END_READ_TOUR_PRICES ^= YES);
      call READ_TOUR_PRICES;
   end;
return;
end;	/* PRINT_TOUR_PRICING   */

/****************************************************************
	READ_TOUR_PRICES
	Read thru the tour prices
****************************************************************/

READ_TOUR_PRICES:
	procedure;


   /* READNEXT_2 - Read the next record */

   call READ_NEXT (BK_LAND_DET_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_LAND_DET_NO,ERROR_CODE);

   /* CHECK_END_2 - Check for end of records */

   if (ERROR_CODE = END_OF_FILE) !
   (LAND_PR_NO > LAND_CODE) then
      do;
      END_READ_TOUR_PRICES = YES;
      return;
      end;

   /* CHECK_DATE_LAND - Land date right? */

   if (LAND_START_DATE >= LAND_END) !
      ((LAND_END_DATE ^= -1) & (LAND_END_DATE <= LAND_START)) then
         return;


   /* PRINT_LINE_D3 -  */


   /* SETUP_ITIN - Set up the next itin line */

   WP_LINE = "";

   if LAND_ITIN = "Y" then
      do;
      if END_ITIN = "N" then
         do;
         call READ_SEQN(100,KEY_AREA_1,ERROR_CODE);
         declare LOOP fixed binary;
         do LOOP = 1 to 80;
            if substr(WP_LINE,LOOP,1) < " " then
               substr(WP_LINE,LOOP,1) = " ";
         end;

         if ERROR_CODE ^= NORMAL_RETURN then
            END_ITIN = "Y";
         end;
      end;

   do LOOP_INDEX =  13 to  13;
      call PRINT_REPORT_LINE;
   end;
return;
end;	/* READ_TOUR_PRICES     */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (BK_LAND_NO);
   call CLOSE_FILE (BK_LAND_DET_NO);
   call CLOSE_FILE (BK_LAND_ITIN_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
