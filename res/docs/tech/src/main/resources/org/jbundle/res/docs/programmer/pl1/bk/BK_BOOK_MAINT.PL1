/****************************************************************
	Module: BK_BOOK_MAINT
	Top Level Logic: STANDARD_FILE_MAINT
	Date: 14-Nov-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_BOOK_MAINT
	Screen file maintenance (standard)
****************************************************************/

%replace BK_BOOK_MAINT_1 by 399;
BK_BOOK_MAINT:
   procedure;
%replace BK_BOOKING_NO by   9;
%include "BK_BOOKING.DD";

declare		END_SCREEN_IO        bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		END_CHANGE_ITEM      bit (1);
declare		LOOP_INDEX           fixed binary (15);
   call INITIALIZE;
   END_SCREEN_IO = NO;
   do while (END_SCREEN_IO ^= YES);
      call SCREEN_IO;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_BOOK_MAINT_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	SCREEN_IO
	Screen I/O (Input display write)
****************************************************************/

SCREEN_IO:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_BOOKING     fixed binary (15);

   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (BK_BOOK_MAINT_1);
   NOT_FIRST_TIME = YES;

   /* INPUT_KEY - Input the key-data from the screen */

   KEY_NO = 1;
   INPUT_LENGTH = 1;
   call INPUT_FIELD (  1,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_SCREEN_IO = YES;
      return;
      end;
   call INPUT_FIELD (  2,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      END_SCREEN_IO = YES;
      return;
      end;
   FIRST_ITEM = 3;

   /* READ_AND_LOCK - Read the record and lock it */

   call READ_KEYED (BK_BOOKING_NO+?LOCK_RECORD,KEY_NO,ERROR_BK_BOOKING);
   if ERROR_BK_BOOKING = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      end;
   if ERROR_BK_BOOKING > 3 then
      call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);

   /* RECORD_FOUND - Was the record found? */

   ERROR_INPUT_SCREEN = NO;
   if ERROR_BK_BOOKING = NORMAL_RETURN then
      do;
      call DISPLAY_DATA;
      end;
   else
      do;

      /* ENTER_SCREEN - Enter screen for the first time */


         /* CLEAR_FIELDS - Clear non-screen file fields */

         BK_FAX = "";
         BK_QUAD = 0;
         BK_FINAL_DUE = 0;
         BK_BALANCE = 0;
         BK_HOTEL_MOD = 0;
         BK_TOUR_MOD = 0;
         BK_LINE_CHGD = 0;
         BK_PAX_CHGD = 0;
         BK_AIR_MOD = 0;
         BK_INV_PRINTING = "";
         BK_ALT_OPT_SQ = 0;
         BK_AO_ANSW_SQ = 0;
         call INPUT_SCREEN;
      if ERROR_INPUT_SCREEN then return;
      end;
   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* DISPLAY_OR_INPUTED - Was the data displayed or inputed? */

   if ERROR_BK_BOOKING = NORMAL_RETURN then
      do;

      /* DIS_DELETED_OR_OK - Displayed, was this record deleted? */

      if RETURN_CODE = DELETE_TYPED then
         do;

         /* DELETE_RECORD - Delete the record */

         call DELETE_RECORD (BK_BOOKING_NO,ERROR_CODE);
         end;
      else
         do;

         /* UPDATE_RECORD - Update the record */

         call UPDATE_RECORD (BK_BOOKING_NO,ERROR_CODE);
         end;
      end;
   else
      do;

      /* INP_DELETED_OR_OK - Inputed data, should I delete or it ok */

      if RETURN_CODE = DELETE_TYPED then
         do;

         /* NO_CODE - This section has no code */

         /* No code in this section */
         end;
      else
         do;

         /* WRITE_RECORD - Write the record */

         call WRITE_RECORD (BK_BOOKING_NO,ERROR_CODE);
         end;
      end;
return;
end;	/* SCREEN_IO            */

/****************************************************************
	DISPLAY_DATA
	Display the data for this screen
****************************************************************/

DISPLAY_DATA:
	procedure;

do LOOP_INDEX = FIRST_ITEM to  35;
   call OUTPUT_FIELD (LOOP_INDEX);
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* DISPLAY_DATA         */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

BK_DATE = TODAYS_DATE();
BK_TIME = CURRENT_TIME();
BK_RES_AGENT = USER_NAME();
BK_MOD_BY = USER_NAME();
BK_STATUS = "OK";
BK_AGENCY = 0;
BK_AGENCY_NAME = "";
BK_AGENCY_ADD_1 = "";
BK_AGENCY_ADD_2 = "";
BK_AGENCY_ADD_3 = "";
BK_AGENCY_ZIP = "";
BK_AGENCY_PHONE = "";
BK_CONTACT = "";
BK_PAX = 0;
BK_SINGLE = 0;
BK_DOUBLE = 0;
BK_TRIPLE = 0;
BK_GATEWAY = "";
BK_TOUR_NUM = 0;
BK_TOUR_CODE = "";
BK_DEPARTURE = 0;
BK_MARKUP = 0;
BK_TOUR_PRICE = 0;
BK_STD_COMM = 10.00;
BK_NET_PRICE = 0;
BK_DEPOSIT = 0;
BK_DEPOSIT_DUE = 0;
BK_INCOME_GL = 0;
do LOOP_INDEX = FIRST_ITEM to  35;
   if LOOP_INDEX =   3 then
      BK_DATE = TODAYS_DATE();
   if LOOP_INDEX =   4 then
      BK_TIME = CURRENT_TIME();
   if LOOP_INDEX =   6 then
      BK_RES_AGENT = USER_NAME();
   if LOOP_INDEX =   8 then
      BK_MOD_BY = USER_NAME();
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 36,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <= 30 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   end;
if SELECT >= 32 then if SELECT <= 36 then
   do;

      LOOP_INDEX = SELECT +  -1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (BK_BOOKING_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
