/****************************************************************
	Module: BK_HOTEL_RPT
	Top Level Logic: REPORT_LOGIC
	Date: 29-Nov-89
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	BK_HOTEL_RPT
	Standard report logic
****************************************************************/

%replace BK_HOTEL_RPT_1 by 423;
%replace BK_HOTEL_RPT_2 by 422;
%replace BK_HOTEL_RPT_3 by 517;
BK_HOTEL_RPT:
   procedure;
%replace BK_HOTEL_NO by   8;
%replace BK_HOTEL_DET_NO by  52;
%include "BK_HOTEL_RPT.DD";
%include "BK_HOTEL.DD";
%include "BK_HOTEL_DET.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		RETURN_CODE          fixed binary (15);
declare		FIRST_TIME           bit (1);
declare		END_READ_THRU_PRICES bit (1);
declare		END_READ_THRU_MEAL   bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   HOTEL_DATE = TODAYS_DATE();
   HOTEL_TIME = CURRENT_TIME();
   HOTEL_USER = USER_NAME();
   HOTEL_PAGE = 1;
   HOTEL_COUNT = 0;
   HOTEL_USE_RATE_TYPE = "";
   HOTEL_USE_CLASS = "";

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (BK_HOTEL_RPT_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (BK_HOTEL_RPT_RECORD) );
   call OPEN_FILE (BK_HOTEL_NO,"BK_HOTEL",byteaddr(BK_HOTEL_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_HOTEL_NO,ERROR_CODE);
   call OPEN_FILE (BK_HOTEL_DET_NO,"BK_HOTEL_DET",byteaddr(BK_HOTEL_DET_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_HOTEL_DET_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (BK_HOTEL_RPT_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   HOTEL_CODE = HOTEL_CODE_START;
   call SET_POSITION (BK_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =  14 to  14;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
HOTEL_CODE_END = HOTEL_CODE_START;
HOTEL_PRICES = "N";
HOTEL_END_DATE = HOTEL_START_PRICE;
do LOOP_INDEX =   1 to   6;
   if LOOP_INDEX =   2 then
      HOTEL_CODE_END = HOTEL_CODE_START;
   if LOOP_INDEX =   6 then
      HOTEL_END_DATE = HOTEL_START_PRICE;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         HOTEL_CODE_START = "";
         HOTEL_CODE_END = "~";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   4 then
      do;

      /* PRINT_HOTEL_PRICE - Print hotel prices? */

      if HOTEL_PRICES ^= "Y" then
         LOOP_INDEX = LOOP_INDEX + 2;

      end;
   if LOOP_INDEX =   5 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         HOTEL_START_PRICE = 0;
         HOTEL_END_DATE = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  6,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  6 then
   do;

      LOOP_INDEX = SELECT;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         HOTEL_CODE_START = "";
         HOTEL_CODE_END = "~";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   if LOOP_INDEX =   4 then
      do;

      /* PRINT_HOTEL_PRICE - Print hotel prices? */

      if HOTEL_PRICES ^= "Y" then
         LOOP_INDEX = LOOP_INDEX + 2;

      end;
   if LOOP_INDEX =   5 then
      do;

      /* CHECK_ALL - Check to see if all typed (report scrn) */

      if RETURN_CODE = ALL_TYPED then
         do;
         HOTEL_START_PRICE = 0;
         HOTEL_END_DATE = 32767;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;
      end;
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

call SETUP_PRINT_FORMAT (BK_HOTEL_RPT_2);
do LOOP_INDEX =   1 to   3;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

HOTEL_PAGE = HOTEL_PAGE + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;


   /* READNEXT - Read the next record */

   call READ_NEXT (BK_HOTEL_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_HOTEL_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (HOTEL_CODE > HOTEL_CODE_END) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */

   call SETUP_PRINT_FORMAT (BK_HOTEL_RPT_2);
   do LOOP_INDEX =   4 to   4;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_TOTALS - Add to the total fields */

   HOTEL_COUNT = HOTEL_COUNT + 1;

   /* OTHER_LOGIC - Any other logic */


   /* PRINT_HOTEL_DETAIL - Print the hotel detail if selected */

   if HOTEL_CODE_DETAIL = "Y" then
      do;

      /* PRINT_LINE_D2 -  */

      do LOOP_INDEX =   5 to  13;
         call PRINT_REPORT_LINE;
      end;
      end;

   if HOTEL_PRICES = "Y" then
      do;

      /* PRINT_HOTEL_PRICES - Print the hotel price detail */

         call PRT_HOTEL_PRICES;
         call PRT_HOTEL_MEALS;
      end;

return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	PRT_HOTEL_PRICES
	Print the hotel Price detail
****************************************************************/

PRT_HOTEL_PRICES:
	procedure;


   /* SET_FIRST_2 - Set the file pointer to the first key */

   HOTEL_CODE_DET = HOTEL_CODE;
   HOTEL_RATE_TYPE = "1";
   HOTEL_CLASS = "";
   HOTEL_END = 0;
   call SET_POSITION (BK_HOTEL_DET_NO,KEY_AREA_1,ERROR_CODE);

   /* READNEXT_2 - Read the next record */

   call READ_NEXT (BK_HOTEL_DET_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_HOTEL_DET_NO,ERROR_CODE);

   /* CHECK_END_2 - Check for end of records */

   if (ERROR_CODE = END_OF_FILE) !
   (HOTEL_CODE_DET > HOTEL_CODE) then
      return;

   /* PRINT_LINE_P2 - PRINT */

   call SETUP_PRINT_FORMAT (BK_HOTEL_RPT_3);
   do LOOP_INDEX =   1 to   1;
      call PRINT_REPORT_LINE;
   end;

   /* SET_FIRST_2 - Set the file pointer to the first key */

   HOTEL_CODE_DET = HOTEL_CODE;
   HOTEL_RATE_TYPE = "1";
   HOTEL_CLASS = "";
   HOTEL_END = 0;
   call SET_POSITION (BK_HOTEL_DET_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_PRICES = NO;
   do while (END_READ_THRU_PRICES ^= YES);
      call READ_THRU_PRICES;
   end;
return;
end;	/* PRT_HOTEL_PRICES     */

/****************************************************************
	READ_THRU_PRICES
	Read thru the hotel price detail
****************************************************************/

READ_THRU_PRICES:
	procedure;


   /* READNEXT_2 - Read the next record */

   call READ_NEXT (BK_HOTEL_DET_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_HOTEL_DET_NO,ERROR_CODE);

   /* CHECK_END_2 - Check for end of records */

   if (ERROR_CODE = END_OF_FILE) !
   (HOTEL_CODE_DET > HOTEL_CODE) then
      do;
      END_READ_THRU_PRICES = YES;
      return;
      end;

   /* CHECK_PRICE_DATE - Check the hotel price's date */

   if (HOTEL_START_PRICE >= HOTEL_END) !
      ((HOTEL_END_DATE ^= -1) & (HOTEL_END_DATE <= HOTEL_START)) then
         return;


   /* PRINT_LINE_D3 -  */

   call SETUP_PRINT_FORMAT (BK_HOTEL_RPT_3);
   do LOOP_INDEX =   2 to   2;
      call PRINT_REPORT_LINE;
   end;
return;
end;	/* READ_THRU_PRICES     */

/****************************************************************
	PRT_HOTEL_MEALS
	Print out the hotel meals
****************************************************************/

PRT_HOTEL_MEALS:
	procedure;


   /* SET_FIRST_3 - Set first */

   HOTEL_CODE_DET = HOTEL_CODE;
   HOTEL_RATE_TYPE = "";
   HOTEL_CLASS = "";
   HOTEL_END = 0;
   call SET_POSITION (BK_HOTEL_DET_NO,KEY_AREA_1,ERROR_CODE);

   /* READNEXT_2 - Read the next record */

   call READ_NEXT (BK_HOTEL_DET_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_HOTEL_DET_NO,ERROR_CODE);

   /* CHECK_END_3 - Check for end */

   if (ERROR_CODE = END_OF_FILE) !
   (HOTEL_CODE_DET > HOTEL_CODE) !
   (HOTEL_RATE_TYPE > " ") then
      return;

   /* PRINT_LINE_P3 - PRINT */

   call SETUP_PRINT_FORMAT (BK_HOTEL_RPT_3);
   do LOOP_INDEX =   3 to   3;
      call PRINT_REPORT_LINE;
   end;

   /* SET_FIRST_3 - Set first */

   HOTEL_CODE_DET = HOTEL_CODE;
   HOTEL_RATE_TYPE = "";
   HOTEL_CLASS = "";
   HOTEL_END = 0;
   call SET_POSITION (BK_HOTEL_DET_NO,KEY_AREA_1,ERROR_CODE);
   END_READ_THRU_MEAL = NO;
   do while (END_READ_THRU_MEAL ^= YES);
      call READ_THRU_MEAL;
   end;
return;
end;	/* PRT_HOTEL_MEALS      */

/****************************************************************
	READ_THRU_MEAL
	Read thru all the meals
****************************************************************/

READ_THRU_MEAL:
	procedure;


   /* READNEXT_2 - Read the next record */

   call READ_NEXT (BK_HOTEL_DET_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (BK_HOTEL_DET_NO,ERROR_CODE);

   /* CHECK_END_3 - Check for end */

   if (ERROR_CODE = END_OF_FILE) !
   (HOTEL_CODE_DET > HOTEL_CODE) !
   (HOTEL_RATE_TYPE > " ") then
      do;
      END_READ_THRU_MEAL = YES;
      return;
      end;

   /* CHECK_PRICE_DATE - Check the hotel price's date */

   if (HOTEL_START_PRICE >= HOTEL_END) !
      ((HOTEL_END_DATE ^= -1) & (HOTEL_END_DATE <= HOTEL_START)) then
         return;


   /* PRINT_LINE_D4 - PRINT */

   call SETUP_PRINT_FORMAT (BK_HOTEL_RPT_3);
   do LOOP_INDEX =   4 to   4;
      call PRINT_REPORT_LINE;
   end;
return;
end;	/* READ_THRU_MEAL       */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (BK_HOTEL_NO);
   call CLOSE_FILE (BK_HOTEL_DET_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
