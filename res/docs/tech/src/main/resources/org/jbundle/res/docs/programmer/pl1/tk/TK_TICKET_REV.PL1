/****************************************************************
	Module: TK_TICKET_REV
	Top Level Logic: REPORT_LOGIC
	Date: 19-Apr-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	TK_TICKET_REV
	Standard report logic
****************************************************************/

%replace TK_TICKET_REV_1 by 866;
%replace TK_TICKET_REV_2 by 867;
TK_TICKET_REV:
   procedure;
%replace TK_HEADER_NO by  56;
%replace BK_BOOKING_NO by   9;
%include "TK_TICKET_REV.DD";
%include "TK_HEADER.DD";
%include "BK_BOOKING.DD";

declare		END_REPORT_MAIN      bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHANGE_ITEM      bit (1);
declare		END_READ_THRU_FILE   bit (1);
declare		LOOP_INDEX           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		FIRST_TIME           bit (1);
declare		LINE                 fixed binary (15);
   call INITIALIZE;
   END_REPORT_MAIN = NO;
   do while (END_REPORT_MAIN ^= YES);
      call REPORT_MAIN;
   end;
   call END_RPT_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   TK_PRT_TRX = "";
   TK_SUM_DATE = TODAYS_DATE();
   TK_TRX_TIME = CURRENT_TIME();
   TK_TRX_USER = USER_NAME();
   TK_TRX_PAGE = 1;
   TK_DR_TOTAL = 0;
   TK_CR_TOTAL = 0;
   TK_VR_TOTAL = 0;
   TK_MOD_CODE = "A";
   TK_TAX_P = 0;
   TK_ISSUE_UD_DATE = 0;
   TK_ARC_UD_DATE = 0;
   TK_DEP_UD_DATE = 0;
   TK_OR_UD_DATE = 0;
   TK_BK_DEP_DATE = 0;
   TK_UD_STATUS = 0;
   TK_CREDIT = "N";
   BK_MODIFICATION = 0;
   BOOKING_NO = 0;
   BK_FOC = 0;
   BK_DEPARTED = "N";
   BK_ORDER_CURR = "N";
   BK_PRINT_INV = "Y";
   BK_REMARK_MOD = 0;
   BK_HOTEL_UINV = "N";
   BK_LAND_UINV = "N";
   BK_AIR_UINV = "N";
   BK_AMOUNT_PAID = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   ERROR_INPUT_SCREEN = NO;
   FIRST_TIME = YES;
   LINE = 0;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (TK_TICKET_REV_1);

   /* OPEN_FILES - Open all the files for this program */

   call SET_SCREEN_VARS (byteaddr (TK_TICKET_REV_RECORD) );
   call OPEN_FILE (TK_HEADER_NO,"TK_HEADER",byteaddr(TK_HEADER_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (TK_HEADER_NO,ERROR_CODE);
   call OPEN_FILE (BK_BOOKING_NO,"BK_BOOKING",byteaddr(BK_BOOKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (BK_BOOKING_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	REPORT_MAIN
	Mainline Logic
****************************************************************/

REPORT_MAIN:
	procedure;

   call INPUT_SCREEN;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;

   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_REPORT_MAIN = YES;
      return;
      end;


   /* OPEN_LPT - Open the printer */

   call OPEN_PRINTER("REPORT");
   call SETUP_PRINT_FORMAT (TK_TICKET_REV_2);
   call PRINTING_OCCURRING;
   call DUMP_BUFFER;

   /* BEFORE_LOGIC - Before logic */

   call PRT_PAGE_HEADING;

   /* SET_FIRST - Set the record pointer to the first rec */

   TK_MODIFICATION = 0;
   TK_DEP_DATE = 0;
   TK_BK_TK_NO = 0;
   TK_ALT_SEQ = 0;
   TK_ANSW_SEQ = 0;
   call SET_POSITION (TK_HEADER_NO,KEY_AREA_3,ERROR_CODE);
   END_READ_THRU_FILE = NO;
   do while (END_READ_THRU_FILE ^= YES);
      call READ_THRU_FILE;
   end;

   /* PRT_GRAND_TOTAL - Print the grand total */

   do LOOP_INDEX =  13 to  14;
      call PRINT_REPORT_LINE;
   end;

   /* AFTER_LOGIC - Other Logic */


   /* RETURN - Normal Return */

   do;
   END_REPORT_MAIN = YES;
   return;
   end;

return;
end;	/* REPORT_MAIN          */

/****************************************************************
	INPUT_SCREEN
	Input the data for this screen
****************************************************************/

INPUT_SCREEN:
	procedure;

declare		FIRST_ITEM           fixed binary (15);
do LOOP_INDEX =   1 to   5;
   if LOOP_INDEX =   1 then
      call DISPLAY_MSG_NO (103);
   if LOOP_INDEX =   4 then
      call DISPLAY_MSG_NO (101);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* INPUT_SCREEN         */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1,  5,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  5 then
   do;

      LOOP_INDEX = SELECT;
   if LOOP_INDEX =   1 then
      call DISPLAY_MSG_NO (103);
   if LOOP_INDEX =   4 then
      call DISPLAY_MSG_NO (101);
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	PRT_PAGE_HEADING
	Print the page heading
****************************************************************/

PRT_PAGE_HEADING:
	procedure;

do LOOP_INDEX =   1 to   5;
   call PRINT_REPORT_LINE;
end;

/* BUMP_PAGE_NO - Increase this variable by one */

TK_TRX_PAGE = TK_TRX_PAGE + 1;
return;
end;	/* PRT_PAGE_HEADING     */

/****************************************************************
	READ_THRU_FILE
	Read sequentially through file
****************************************************************/

READ_THRU_FILE:
	procedure;

declare		KEY_NO               fixed binary (15);
declare		ERROR_BK_BOOKING     fixed binary (15);

   /* READNEXT - Read the next record */

   call READ_NEXT (TK_HEADER_NO,KEY_AREA_3,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (TK_HEADER_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (TK_MODIFICATION > 0) then
      do;
      END_READ_THRU_FILE = YES;
      return;
      end;

   /* CHECK_SELECT - Check selection criteria */


   /* CHECK_TK_REV - Include this ticket? */

   if TK_NUMBER = "" then
      return;

   if TK_ISSUE_DATE = 0 then
      return;

   if TK_ALT_SEQ = 0 then
      return;

   if TK_ISSUE_UD_DATE = 0 then
      do;
      if TK_VOID = "Y" then
         TK_NET_FARE = 0;
      TK_NET_POSTED = TK_NET_FARE;
      end;

   if TK_DEP_UD_DATE = 0 then
      do;
      if TK_VOID = "Y" then
         TK_NET = 0;
      TK_COST_POSTED = TK_NET;
      end;

   if TK_OR_UD_DATE = 0 then
      do;
      if TK_VOID = "Y" then
         TK_OR_COLL = 0;
      TK_OR_POSTED = TK_OR_COLL;
      end;

   if TK_TRX_TYPE = "I" then
      do;
      if TK_ISSUE_DATE < TK_START_DATE then
         return;

      if TK_ISSUE_DATE > TK_END_DATE then
         return;

      if TK_PRT_TRX = "Y" then if TK_ISSUE_UD_DATE = 0 then
         return;

      if TK_PRT_TRX = "N" then if TK_ISSUE_UD_DATE ^= 0 then
         return;


      /* PRINT_LINE_D1 -  */


      /* SET_BK_TK - Set the ticket booking information */

      if TK_BK_DET = "Y" then
         do;

         /* SETUP_KEY - Set up this key for a read */

         BK_MODIFICATION = TK_MODIFICATION;
         BOOKING_NO = TK_BK_TK_NO;
         KEY_NO = 1;

         /* READ_RECORD - Read the record */

         call READ_KEYED (BK_BOOKING_NO,KEY_NO,ERROR_BK_BOOKING);
         if ERROR_BK_BOOKING > 3 then
            call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
         end;
      else
         do;
         BK_TOUR_CODE = "";
         BK_DEPARTURE = 0;
         end;

      do LOOP_INDEX =   7 to   7;
         call PRINT_REPORT_LINE;
      end;
      TK_DR_TOTAL = floor((TK_DR_TOTAL + TK_NET_POSTED) * 100 + 0.5) / 100;
      TK_CR_TOTAL = floor((TK_CR_TOTAL + TK_NET_POSTED) * 100 + 0.5) / 100;
      end;

   if TK_TRX_TYPE = "D" then
      do;
      if TK_BK_DEP_DATE < TK_START_DATE then
         return;

      if TK_BK_DEP_DATE > TK_END_DATE then
         return;

      if TK_PRT_TRX = "Y" then if TK_DEP_UD_DATE = 0 then
         return;

      if TK_PRT_TRX = "N" then if TK_DEP_UD_DATE ^= 0 then
         return;


      /* PRINT_LINE_D2 - Print lines */


      /* CALC_TK_OR - Calculate the ticket override */

      TK_POSTED_OR= floor((TK_NET_POSTED - TK_COST_POSTED) * 100 + 0.5) / 100;


      /* SET_BK_TK - Set the ticket booking information */

      if TK_BK_DET = "Y" then
         do;

         /* SETUP_KEY - Set up this key for a read */

         BK_MODIFICATION = TK_MODIFICATION;
         BOOKING_NO = TK_BK_TK_NO;
         KEY_NO = 1;

         /* READ_RECORD - Read the record */

         call READ_KEYED (BK_BOOKING_NO,KEY_NO,ERROR_BK_BOOKING);
         if ERROR_BK_BOOKING > 3 then
            call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
         end;
      else
         do;
         BK_TOUR_CODE = "";
         BK_DEPARTURE = 0;
         end;

      do LOOP_INDEX =   8 to   8;
         call PRINT_REPORT_LINE;
      end;
      TK_DR_TOTAL = floor((TK_DR_TOTAL + TK_COST_POSTED) * 100 + 0.5) / 100;
      TK_CR_TOTAL = floor((TK_CR_TOTAL + TK_NET_POSTED) * 100 + 0.5) / 100;
      TK_VR_TOTAL = floor((TK_VR_TOTAL + TK_POSTED_OR) * 100 + 0.5) / 100;
      end;

   if TK_TRX_TYPE = "O" then
      do;
      if TK_OR_COLL_DATE < TK_START_DATE then
         return;

      if TK_OR_COLL_DATE > TK_END_DATE then
         return;

      if TK_PRT_TRX = "Y" then if TK_OR_UD_DATE = 0 then
         return;

      if TK_PRT_TRX = "N" then if TK_OR_UD_DATE ^= 0 then
         return;


      /* PRINT_LINE_D3 - Print lines */


      /* CALC_TK_OR - Calculate the ticket override */

      TK_POSTED_OR= floor((TK_NET_POSTED - TK_COST_POSTED) * 100 + 0.5) / 100;


      /* CALC_TK_OV - Calc the override variance */

      TK_POSTED_VAR= floor((TK_POSTED_OR - TK_OR_POSTED) * 100 + 0.5) / 100;


      /* SET_BK_TK - Set the ticket booking information */

      if TK_BK_DET = "Y" then
         do;

         /* SETUP_KEY - Set up this key for a read */

         BK_MODIFICATION = TK_MODIFICATION;
         BOOKING_NO = TK_BK_TK_NO;
         KEY_NO = 1;

         /* READ_RECORD - Read the record */

         call READ_KEYED (BK_BOOKING_NO,KEY_NO,ERROR_BK_BOOKING);
         if ERROR_BK_BOOKING > 3 then
            call PRINT_ERROR (BK_BOOKING_NO,ERROR_BK_BOOKING);
         end;
      else
         do;
         BK_TOUR_CODE = "";
         BK_DEPARTURE = 0;
         end;

      do LOOP_INDEX =   9 to   9;
         call PRINT_REPORT_LINE;
      end;
      TK_DR_TOTAL = floor((TK_DR_TOTAL + TK_OR_POSTED) * 100 + 0.5) / 100;
      TK_CR_TOTAL = floor((TK_CR_TOTAL + TK_POSTED_OR) * 100 + 0.5) / 100;
      TK_VR_TOTAL = floor((TK_VR_TOTAL + TK_POSTED_VAR) * 100 + 0.5) / 100;
      end;


   /* CTRL_BREAK - Control break logic */

   if FIRST_TIME then
      do;
      end;
   FIRST_TIME = NO;

   /* PRT_DETAIL - Print the detail lines */

   do LOOP_INDEX =  24 to   1;
      call PRINT_REPORT_LINE;
   end;

   /* ADD_TOTALS - Add to the total fields */


   /* OTHER_LOGIC - Any other logic */

return;
end;	/* READ_THRU_FILE       */

/****************************************************************
	PRINT_REPORT_LINE
	Print out this report line
****************************************************************/

PRINT_REPORT_LINE:
	procedure;

declare		SAVE_FORMAT          fixed binary (15);
declare		SAVE_INDEX           fixed binary (15);
LINE = LINE + 1;
if LINE > 60 then
   do;
   call PRINT_LINE ("<FF>"c);
   LINE = 1;
   SAVE_INDEX = LOOP_INDEX;
   call GET_PRINT_FORMAT(SAVE_FORMAT);
   call PRT_PAGE_HEADING;
   call GET_PRINT_FORMAT(LOOP_INDEX);
   if LOOP_INDEX ^= SAVE_FORMAT then
      call SETUP_PRINT_FORMAT (SAVE_FORMAT);
   LOOP_INDEX = SAVE_INDEX;
   end;
call PRINT_LINE_OUT (LOOP_INDEX);
return;
end;	/* PRINT_REPORT_LINE    */

/****************************************************************
	END_RPT_PROGRAM
	End of the program
****************************************************************/

END_RPT_PROGRAM:
	procedure;


   /* CLOSE_RPT_FILES - Close the files for this report program */

   call CLOSE_FILE (TK_HEADER_NO);
   call CLOSE_FILE (BK_BOOKING_NO);
   call CLOSE_PRINTER;
return;
end;	/* END_RPT_PROGRAM      */
end;	/* END_RPT_PROGRAM      */
/*********************************End of Program*********************/
