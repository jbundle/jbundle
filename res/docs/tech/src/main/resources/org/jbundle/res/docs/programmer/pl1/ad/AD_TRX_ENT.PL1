/****************************************************************
	Module: AD_TRX_ENT
	Top Level Logic: ENTER_HDR_AND_DET
	Date:  9-Nov-90
	Program Revision: 0.00
	S/G Revision: 0.00
****************************************************************/

%include "FIO.IN";

/****************************************************************
	AD_TRX_ENT
	Top Level to enter header file and det'l
****************************************************************/

%replace AD_TRX_ENT_1 by 655;
AD_TRX_ENT:
   procedure;
%replace AD_CHECKING_NO by  26;
%replace AD_ACCT_NO by  24;
%replace AD_GL_DIST_NO by 107;
%replace GL_CHART_NO by  16;
%include "AD_CHECKING.DD";
%include "AD_ACCT.DD";
%include "AD_TRX_ENT.DD";
%include "AD_GL_DIST.DD";
%include "GL_CHART.DD";

declare		END_HDR_AND_DET_MAIN bit (1);
declare		ERROR_CODE           fixed binary (15);
declare		NOT_FIRST_TIME       bit (1);
declare		ERROR_INPUT_SCREEN   bit (1);
declare		RETURN_CODE          fixed binary (15);
declare		END_CHECK_AD_OK      bit (1);
declare		END_DETAIL_DELETE    bit (1);
declare		END_FIX_GL_DETAIL    bit (1);
declare		FIRST_ITEM           fixed binary (15);
declare		INPUT_LENGTH         fixed binary (15);
declare		LOOP_INDEX           fixed binary (15);
declare		RECORD_NUMBER        fixed binary (15);
declare		AD_DIST_GL_ACCT_ARRA(10) fixed binary (31);
declare		END_CHANGE_ITEM      bit (1);
declare		ANSWER               character (1);
   call INITIALIZE;
   END_HDR_AND_DET_MAIN = NO;
   do while (END_HDR_AND_DET_MAIN ^= YES);
      call HDR_AND_DET_MAIN;
   end;
   call END_PROGRAM;
return;

/****************************************************************
	INITIALIZE
	Initialize the program
****************************************************************/

INITIALIZE:
	procedure;


   /* INIT_FILE_VARS - Initialize the file variables */

   AD_TRX_SEQ = 0;
   AD_CHECK_TYPE = "M";
   AD_SYS_NUMBER = "";
   AD_TRX_AMT_USD = 0;
   AD_DATE_RECONCILED = 0;
   AD_BALANCE = 0;
   AD_LAST_CHECK = 0;
   AD_LAST_SEQ = 0;
   AD_DIST_POSTED = 0;
   AD_DIST_POST = "N";
   TYPICAL_BAL = "D";
   SECTION_SUB = "N";
   COUNTER_BAL_AC = 0;
   GL_INCOME_EXP = "N";
   DISCONTINUED_ON = 0;

   /* INIT_PROG_VARS - INITIALIZE THE PROGRAM VARIABLES */

   NOT_FIRST_TIME = "0"b;
   ERROR_INPUT_SCREEN = NO;

   /* DISPLAY_SCREEN - Display the screen */

   call OPEN_SCREEN;
   call DISPLAY_SCREEN (AD_TRX_ENT_1);

   /* OPEN_FILES - Open all the files for this program */

   call OPEN_FILE (AD_CHECKING_NO,"AD_CHECKING",byteaddr(AD_CHECKING_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_CHECKING_NO,ERROR_CODE);
   call OPEN_FILE (AD_ACCT_NO,"AD_ACCT",byteaddr(AD_ACCT_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_ACCT_NO,ERROR_CODE);
   call SET_SCREEN_VARS (byteaddr (AD_TRX_ENT_RECORD) );
   call OPEN_FILE (AD_GL_DIST_NO,"AD_GL_DIST",byteaddr(AD_GL_DIST_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (AD_GL_DIST_NO,ERROR_CODE);
   call OPEN_FILE (GL_CHART_NO,"GL_CHART",byteaddr(GL_CHART_RECORD),ERROR_CODE);
   if ERROR_CODE ^= 0 then call OPEN_ERROR (GL_CHART_NO,ERROR_CODE);
return;
end;	/* INITIALIZE           */

/****************************************************************
	HDR_AND_DET_MAIN
	Mainline logic
****************************************************************/

HDR_AND_DET_MAIN:
	procedure;


   /* RESET_INP_ERR - Reset the input error flag */

   ERROR_INPUT_SCREEN = NO;


   /* REDISPLAY_SCREEN - Re-display the screen */

   if NOT_FIRST_TIME then
      call DISPLAY_SCREEN (AD_TRX_ENT_1);
   NOT_FIRST_TIME = YES;

   /* SET_FIELDS - Set the values for these fields */

   AD_BANK_NO = 0;
   AD_TRX_TYPE = "";
   AD_TRX_NUMBER = 0;
   AD_TRX_SEQ = 0;
   AD_TRX_DATE = 0;
   AD_CHECK_TYPE = "M";
   AD_SYS_NUMBER = "";
   AD_PAYEE = "";
   AD_TRX_AMOUNT = 0;
   AD_TRX_AMT_USD = 0;
   AD_TRX_COMMENT = "";
   AD_DATE_RECONCILED = 0;
   AD_MANUAL = "N";
   AD_TRX_DESC = "";
   AD_SYS_DESC = "";

   /* SET_MAN_FIELDS - Set the fields so this is a manual ent */

   AD_CHECK_TYPE = "M";
   AD_MANUAL = "Y";

   AD_TRX_SEQ = 1;

   call ENTER_DATA_A;

   /* CHECK_AGAIN - Should I return to do this again? */

   if RETURN_CODE = DO_AGAIN then
      return;


   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_HDR_AND_DET_MAIN = YES;
      return;
      end;

   call ENTER_DATA_D;

   /* RETURN_IF_INP_ERR - Return if input error */

   if ERROR_INPUT_SCREEN then
      do;
      END_HDR_AND_DET_MAIN = YES;
      return;
      end;


   /* SET_TEMP_SEQ - Set up a temporary seq number */

   AD_TRX_SEQ = -1;

   call TABLE_MAINT;
   END_CHECK_AD_OK = NO;
   do while (END_CHECK_AD_OK ^= YES);
      call CHECK_AD_OK;
   end;

   /* CHECK_GL_DETAIL - Delete the G/L detail? */

   if RETURN_CODE = DELETE_TYPED then
      do;
      END_DETAIL_DELETE = NO;
      do while (END_DETAIL_DELETE ^= YES);
         call DETAIL_DELETE;
      end;
      end;


   /* AGAIN_IF_DEL - return (Do again) if delete */

   if RETURN_CODE = DELETE_TYPED then
      return;


   /* FIX_TRX_SEQ - Reset the transaction sequence */

   AD_TRX_SEQ = 1;


   /* WRITE_RECORD - Write the record */

   ERROR_CODE = KEY_ALREADY_EXISTS;
   do while(ERROR_CODE = KEY_ALREADY_EXISTS);
      call WRITE_RECORD (AD_CHECKING_NO,ERROR_CODE);
      if ERROR_CODE = KEY_ALREADY_EXISTS then
         AD_TRX_SEQ = AD_TRX_SEQ + 1;
   end;
   END_FIX_GL_DETAIL = NO;
   do while (END_FIX_GL_DETAIL ^= YES);
      call FIX_GL_DETAIL;
   end;

   /* SETUP_CASH_TRX - Set up the transaction for cash */

   AD_DIST_BANK = AD_BANK_NO;
   AD_DIST_NUMBER = AD_TRX_NUMBER;
   AD_DIST_TYPE = "1";
   AD_DIST_TRX_SEQ = AD_TRX_SEQ;
   AD_DIST_GL_ACCT = AD_GL_ACCT_NO;
   AD_DIST_AMOUNT = AD_TRX_AMOUNT;
   AD_DIST_DATE = AD_TRX_DATE;
   AD_DIST_POSTED = 0;
   AD_DIST_POST = "N";


   /* WRITE_CASH_DET - Write the detail cash transaction */

   ERROR_CODE = KEY_ALREADY_EXISTS;
   do while (ERROR_CODE = KEY_ALREADY_EXISTS);

      /* WRITE_RECORD_2 - Write the record */

      call WRITE_RECORD (AD_GL_DIST_NO,ERROR_CODE);
      if ERROR_CODE = KEY_ALREADY_EXISTS then
         AD_DIST_TYPE = ascii(rank(AD_DIST_TYPE) + 1);
   end;

return;
end;	/* HDR_AND_DET_MAIN     */

/****************************************************************
	ENTER_DATA_A
	Enter screen data - Screen Group A
****************************************************************/

ENTER_DATA_A:
	procedure;

do LOOP_INDEX =   1 to   1;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AD_ACCOUNT_NO = AD_BANK_NO;
      call READ_KEYED (AD_ACCT_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_A         */

/****************************************************************
	ENTER_DATA_D
	Enter screen group D
****************************************************************/

ENTER_DATA_D:
	procedure;

AD_TRX_DATE = TODAYS_DATE();
do LOOP_INDEX =   3 to   8;
   if LOOP_INDEX =   3 then
      call DISPLAY_MSG_NO ( 75);
   if LOOP_INDEX =   4 then
      do;

      /* SKIP_IF_DEPOSIT - Don't enter if deposit */

      if index("DSXBI+-",AD_TRX_TYPE) ^= 0 then
         do;
         AD_TRX_NUMBER = 0;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;

      end;
   if LOOP_INDEX =   5 then
      AD_TRX_DATE = TODAYS_DATE();
   if LOOP_INDEX =   6 then
      do;

      /* SKIP_DEPOSIT - Skip if this is a deposit */

      if index("DSXBI+-",AD_TRX_TYPE) ^= 0 then
         do;
         AD_PAYEE = "";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;

      end;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
      do;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   if LOOP_INDEX =   3 then
      do;

      /* CHECK_AD_TYPE - Make sure the right type is entered */

      if index("CDSXBI+-",AD_TRX_TYPE) = 0 then
         LOOP_INDEX = LOOP_INDEX - 1;

      end;
   if LOOP_INDEX =   7 then
      do;

      /* CHECK_TRX_SIGN - Deposits are positive, checks minus */

      if index("DI+",AD_TRX_TYPE) ^= 0 then
         do;
         if AD_TRX_AMOUNT < 0 then
            do;
            AD_TRX_AMOUNT = -AD_TRX_AMOUNT;
            call OUTPUT_FIELD(LOOP_INDEX);
            end;
         end;
      if index("CB-",AD_TRX_TYPE) ^= 0 then
         do;
         if AD_TRX_AMOUNT > 0 then
            do;
            AD_TRX_AMOUNT = -AD_TRX_AMOUNT;
            call OUTPUT_FIELD(LOOP_INDEX);
            end;
         end;

      end;
end;
LOOP_INDEX = LOOP_INDEX - 1;
return;
end;	/* ENTER_DATA_D         */

/****************************************************************
	TABLE_MAINT
	Table display/maintenance
****************************************************************/

TABLE_MAINT:
	procedure;

declare		AD_DIST_BANK_SAVE    fixed binary (15);
declare		AD_DIST_NUMBER_SAVE  fixed binary (31);
declare		AD_DIST_TYPE_SAVE    character (        1);
declare		AD_DIST_TRX_SEQ_SAVE fixed binary (15);
declare		DISPLAY_RECORDS      bit (1);
declare		GET_OUT              bit (1);
declare		AD_GL_DIST_ERROR     fixed binary (15);
declare		AD_DIST_GL_ACCT_SAVE fixed binary (31);
AD_GL_BALANCE = 0;
AD_DIST_BANK = AD_BANK_NO;
AD_DIST_BANK_SAVE = AD_DIST_BANK;
AD_DIST_NUMBER = AD_TRX_NUMBER;
AD_DIST_NUMBER_SAVE = AD_DIST_NUMBER;
AD_DIST_TYPE = AD_TRX_TYPE;
AD_DIST_TYPE_SAVE = AD_DIST_TYPE;
AD_DIST_TRX_SEQ = AD_TRX_SEQ;
AD_DIST_TRX_SEQ_SAVE = AD_DIST_TRX_SEQ;
AD_DIST_GL_ACCT = 0;
call SET_POSITION (AD_GL_DIST_NO,KEY_AREA_1,ERROR_CODE);
DISPLAY_RECORDS = YES;
call READ_NEXT (AD_GL_DIST_NO,KEY_AREA_1,ERROR_CODE);
if (ERROR_CODE = END_OF_FILE) !
   (AD_DIST_BANK > AD_DIST_BANK_SAVE) !
   (AD_DIST_NUMBER > AD_DIST_NUMBER_SAVE) !
   (AD_DIST_TYPE > AD_DIST_TYPE_SAVE) !
   (AD_DIST_TRX_SEQ > AD_DIST_TRX_SEQ_SAVE) then
      DISPLAY_RECORDS = NO;
GET_OUT = NO;
do while (GET_OUT = NO);
   do RECORD_NUMBER = 1 to 10;
      AD_DIST_GL_ACCT_ARRA(RECORD_NUMBER) = 0;
   end;	/* do loop */
   if DISPLAY_RECORDS = YES then
      do;
      AD_GL_DIST_ERROR = NORMAL_RETURN;
      RECORD_NUMBER = 1;
      do while ( (AD_GL_DIST_ERROR ^= END_OF_FILE) & (RECORD_NUMBER <= 10) );
         call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
         do LOOP_INDEX =  10 to  12;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         AD_GL_BALANCE = floor((AD_GL_BALANCE + AD_DIST_AMOUNT) * 100 + 0.5) / 100;
         AD_DIST_GL_ACCT_ARRA(RECORD_NUMBER) = AD_DIST_GL_ACCT;
         call READ_NEXT (AD_GL_DIST_NO,KEY_AREA_1,AD_GL_DIST_ERROR);
         if (AD_DIST_BANK > AD_DIST_BANK_SAVE) !
         (AD_DIST_NUMBER > AD_DIST_NUMBER_SAVE) !
         (AD_DIST_TYPE > AD_DIST_TYPE_SAVE) !
         (AD_DIST_TRX_SEQ > AD_DIST_TRX_SEQ_SAVE) then
            AD_GL_DIST_ERROR = END_OF_FILE;
         if AD_GL_DIST_ERROR = END_OF_FILE then
            do;
            call SET_ROW_OFFSET (0);
            do LOOP_INDEX =   9 to   9;
               call OUTPUT_FIELD (LOOP_INDEX);
            end;
            LOOP_INDEX = LOOP_INDEX - 1;
            end;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      AD_DIST_GL_ACCT_SAVE = AD_DIST_GL_ACCT_ARRA(10);
      AD_DIST_BANK = AD_DIST_BANK_SAVE;
      AD_DIST_NUMBER = AD_DIST_NUMBER_SAVE;
      AD_DIST_TYPE = AD_DIST_TYPE_SAVE;
      AD_DIST_TRX_SEQ = AD_DIST_TRX_SEQ_SAVE;
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if RETURN_CODE = END_TYPED then
         if AD_DIST_GL_ACCT_ARRA(10) ^= 0 then
            do;
            AD_GL_DIST_ERROR = NORMAL_RETURN;
            do while (AD_GL_DIST_ERROR ^= END_OF_FILE);
               AD_GL_BALANCE = floor((AD_GL_BALANCE + AD_DIST_AMOUNT) * 100 + 0.5) / 100;
               call READ_NEXT (AD_GL_DIST_NO,KEY_AREA_1,AD_GL_DIST_ERROR);
               if (AD_DIST_BANK > AD_DIST_BANK_SAVE) !
               (AD_DIST_NUMBER > AD_DIST_NUMBER_SAVE) !
               (AD_DIST_TYPE > AD_DIST_TYPE_SAVE) !
               (AD_DIST_TRX_SEQ > AD_DIST_TRX_SEQ_SAVE) then
                  AD_GL_DIST_ERROR = END_OF_FILE;
            end;
            end;
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = DELETE_TYPED) then
         GET_OUT = YES;
      else
         if AD_GL_DIST_ERROR ^= END_OF_FILE then
            do;
            AD_DIST_GL_ACCT = AD_DIST_GL_ACCT_SAVE;
            call SET_POSITION (AD_GL_DIST_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (AD_GL_DIST_NO,KEY_AREA_1,ERROR_CODE);
            call READ_NEXT (AD_GL_DIST_NO,KEY_AREA_1,ERROR_CODE);
            end;
         else
            if AD_DIST_GL_ACCT_ARRA(10) = 0 then
               GET_OUT = YES;
            else
               do;
               call OUTPUT_LINE (24,10,"Enter more data?");
               call INPUT_DATA (24,27,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
               if ANSWER = "N" then
                  GET_OUT = YES;
               else
                  DISPLAY_RECORDS = NO;
               end;
      end;
   else	/*DISPLAY_RECORDS = NO*/
      do;
      AD_DIST_BANK = AD_DIST_BANK_SAVE;
      AD_DIST_NUMBER = AD_DIST_NUMBER_SAVE;
      AD_DIST_TYPE = AD_DIST_TYPE_SAVE;
      AD_DIST_TRX_SEQ = AD_DIST_TRX_SEQ_SAVE;
      INPUT_LENGTH = 1;
      RECORD_NUMBER = 1;
      do while ( (INPUT_LENGTH ^= 0) & (RECORD_NUMBER <= 10) );
         call AD_GL_DIST_LINE;
         RECORD_NUMBER = RECORD_NUMBER + 1;
      end;
      call SET_ROW_OFFSET (0);
      END_CHANGE_ITEM = NO;
      do while (END_CHANGE_ITEM ^= YES);
         call CHANGE_ITEM;
      end;
      if (RETURN_CODE = END_TYPED) !
      (RETURN_CODE = DELETE_TYPED) ! (AD_DIST_GL_ACCT_ARRA(10) = 0) then
         GET_OUT = YES;
      end;
   if GET_OUT = NO then
   do RECORD_NUMBER = 1 to 10;
      call SET_ROW_OFFSET (RECORD_NUMBER * 1 - 1);
      if AD_DIST_GL_ACCT_ARRA(RECORD_NUMBER) ^= 0 then
         do LOOP_INDEX =10 to  12;
            call CLEAR_FIELD (LOOP_INDEX);
         end;
      end;
      call SET_ROW_OFFSET (0);
end;	/* do while (GET_OUT = NO) */
return;
end;	/* TABLE_MAINT          */

/****************************************************************
	CHANGE_ITEM
	Any change? (Input screen fields)
****************************************************************/

CHANGE_ITEM:
	procedure;

declare		SELECT               fixed binary (15);
call ANY_CHANGE (1, 17,SELECT,RETURN_CODE);
if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
   do;
   ERROR_INPUT_SCREEN = YES;
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
   end;
if SELECT = 0 then
   do;
   END_CHANGE_ITEM = YES;
   return;
   end;
if SELECT >=  1 then if SELECT <=  7 then
   do;
   if SELECT =  1 then
      LOOP_INDEX =  1;
   if SELECT >=  2 then
      LOOP_INDEX = SELECT +   1;
   if LOOP_INDEX =   3 then
      call DISPLAY_MSG_NO ( 75);
   if LOOP_INDEX =   4 then
      do;

      /* SKIP_IF_DEPOSIT - Don't enter if deposit */

      if index("DSXBI+-",AD_TRX_TYPE) ^= 0 then
         do;
         AD_TRX_NUMBER = 0;
         LOOP_INDEX = LOOP_INDEX + 1;
         end;

      end;
   if LOOP_INDEX =   6 then
      do;

      /* SKIP_DEPOSIT - Skip if this is a deposit */

      if index("DSXBI+-",AD_TRX_TYPE) ^= 0 then
         do;
         AD_PAYEE = "";
         LOOP_INDEX = LOOP_INDEX + 1;
         end;

      end;
   call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
   if LOOP_INDEX =   1 then
      do;

      /* READ_SECOND - Read info and display secondary fileinfo */

      AD_ACCOUNT_NO = AD_BANK_NO;
      call READ_KEYED (AD_ACCT_NO,KEY_AREA_1,ERROR_CODE);
      if ERROR_CODE = RECORD_NOT_FOUND then
         do;
         call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
         call PRESS_RETURN;
         call CLEAR_MESSAGE;
         RETURN_CODE = DO_AGAIN;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      else
         do;
         do LOOP_INDEX =   2 to   2;
            call OUTPUT_FIELD (LOOP_INDEX);
         end;
         LOOP_INDEX = LOOP_INDEX - 1;
         end;
      end;
   if LOOP_INDEX =   3 then
      do;

      /* CHECK_AD_TYPE - Make sure the right type is entered */

      if index("CDSXBI+-",AD_TRX_TYPE) = 0 then
         LOOP_INDEX = LOOP_INDEX - 1;

      end;
   if LOOP_INDEX =   7 then
      do;

      /* CHECK_TRX_SIGN - Deposits are positive, checks minus */

      if index("DI+",AD_TRX_TYPE) ^= 0 then
         do;
         if AD_TRX_AMOUNT < 0 then
            do;
            AD_TRX_AMOUNT = -AD_TRX_AMOUNT;
            call OUTPUT_FIELD(LOOP_INDEX);
            end;
         end;
      if index("CB-",AD_TRX_TYPE) ^= 0 then
         do;
         if AD_TRX_AMOUNT > 0 then
            do;
            AD_TRX_AMOUNT = -AD_TRX_AMOUNT;
            call OUTPUT_FIELD(LOOP_INDEX);
            end;
         end;

      end;
   end;
if SELECT >=  8 then if SELECT <= 17 then
   do;
   RECORD_NUMBER = SELECT - 7;
   call AD_GL_DIST_LINE;
   call SET_ROW_OFFSET (0);
   end;
return;
end;	/* CHANGE_ITEM          */

/****************************************************************
	AD_GL_DIST_LINE
	Change one line in the secondary file
****************************************************************/

AD_GL_DIST_LINE:
	procedure;

declare		REWRITE              bit (1);
declare		DEL_RECORD           bit (1);
call SET_ROW_OFFSET (RECORD_NUMBER - 1);
REWRITE = NO;
if AD_DIST_GL_ACCT_ARRA(RECORD_NUMBER) ^= 0 then
   do;
   REWRITE = YES;
   AD_DIST_GL_ACCT = AD_DIST_GL_ACCT_ARRA(RECORD_NUMBER);
   call READ_KEYED (AD_GL_DIST_NO+?LOCK_RECORD,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE = RECORD_LOCKED then
      do;
      call DISPLAY_MESSAGE("Record locked by " !! LOCK_NAME() !! "<BEL>"c);
      call PRESS_RETURN;
      return;
      end;
   do LOOP_INDEX = 10 to  12;
      call CLEAR_FIELD (LOOP_INDEX);
   end;
   AD_GL_BALANCE = floor((AD_GL_BALANCE - AD_DIST_AMOUNT) * 100 + 0.5) / 100;
   end;
else
   do;
   AD_DIST_GL_ACCT = 0;
   AD_DIST_DATE = 0;
   AD_DIST_AMOUNT = 0;
   AD_DIST_POSTED = 0;
   AD_DIST_POST = "N";
   end;
ERROR_CODE = 1;
do while (ERROR_CODE ^= 0);
   ERROR_CODE = 0;
   do LOOP_INDEX =  10 to  10;
      call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
      if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
         do;
         ERROR_INPUT_SCREEN = YES;
         return;
         end;
      if LOOP_INDEX =  10 then
         do;

         /* READ_SECOND_DIS - Read Second - Display line version */

         if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
            do;
            GL_ACCOUNT_NO = AD_DIST_GL_ACCT;
            call READ_KEYED (GL_CHART_NO,KEY_AREA_1,ERROR_CODE);
            if ERROR_CODE = RECORD_NOT_FOUND then
               do;
               call DISPLAY_MESSAGE ("Record not found!!!<BEL>"c);
               call PRESS_RETURN;
               call CLEAR_MESSAGE;
               RETURN_CODE = DO_AGAIN;
               LOOP_INDEX = LOOP_INDEX - 1;
               end;
            end;
         end;
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   if AD_DIST_GL_ACCT = 0 then
      do;
      AD_GL_BALANCE = floor((AD_GL_BALANCE + AD_DIST_AMOUNT) * 100 + 0.5) / 100;
      ERROR_INPUT_SCREEN = YES;
      return;
      end;
   DEL_RECORD = YES;
   if (INPUT_LENGTH ^= 0) & (RETURN_CODE ^= END_TYPED) then
      do;
      DEL_RECORD = NO;
      do LOOP_INDEX =  11 to  12;
         if LOOP_INDEX =  11 then
            do;
            call OUTPUT_FIELD (LOOP_INDEX);
            LOOP_INDEX = LOOP_INDEX + 1;
            end;
         if LOOP_INDEX =  12 then
            do;

            /* SET_DET_DEF - Set the detail default */

            if AD_DIST_AMOUNT = 0 then
               AD_DIST_AMOUNT = -AD_TRX_AMOUNT;

            end;
         call INPUT_FIELD (LOOP_INDEX,INPUT_LENGTH,RETURN_CODE);
         if (RETURN_CODE = END_TYPED) ! (RETURN_CODE = ESCAPE) then
            do;
            ERROR_INPUT_SCREEN = YES;
            return;
            end;
         if LOOP_INDEX =  12 then
            do;

            /* CHECK_DET_SIGN - Check the sign on the G/L detail */

            if AD_TRX_AMOUNT > 0 then
               do;
               if AD_DIST_AMOUNT > 0 then
                  do;
                  AD_DIST_AMOUNT = -AD_DIST_AMOUNT;
                  call OUTPUT_FIELD(LOOP_INDEX);
                  end;
               end;
            else
               do;
               if AD_DIST_AMOUNT < 0 then
                  do;
                  AD_DIST_AMOUNT = -AD_DIST_AMOUNT;
                  call OUTPUT_FIELD(LOOP_INDEX);
                  end;
               end;

            end;
      end;
      LOOP_INDEX = LOOP_INDEX - 1;
      INPUT_LENGTH = 1;
      end;
   ERROR_CODE = 0;
   if DEL_RECORD = YES then
      do;
      AD_DIST_GL_ACCT = AD_DIST_GL_ACCT_ARRA(RECORD_NUMBER);
      if REWRITE = YES then
         call DELETE_RECORD (AD_GL_DIST_NO,ERROR_CODE);
      call CLEAR_FIELD(LOOP_INDEX);
      AD_DIST_GL_ACCT = 0;
      end;
   else
      do;
      if REWRITE = NO then
         call WRITE_RECORD (AD_GL_DIST_NO,ERROR_CODE);
      else
         call UPDATE_RECORD (AD_GL_DIST_NO,ERROR_CODE);
      AD_GL_BALANCE = floor((AD_GL_BALANCE + AD_DIST_AMOUNT) * 100 + 0.5) / 100;
      end;
   call SET_ROW_OFFSET(0);
   do LOOP_INDEX =   9 to   9;
      call OUTPUT_FIELD (LOOP_INDEX);
   end;
   LOOP_INDEX = LOOP_INDEX - 1;
   call SET_ROW_OFFSET (RECORD_NUMBER - 1);
   if ERROR_CODE ^= KEY_ALREADY_EXISTS then
      do;
      AD_DIST_GL_ACCT_ARRA(RECORD_NUMBER) = AD_DIST_GL_ACCT;
      end;
end;
return;
end;	/* AD_GL_DIST_LINE      */

/****************************************************************
	CHECK_AD_OK
	Check to make sure this entry is okay
****************************************************************/

CHECK_AD_OK:
	procedure;

if RETURN_CODE = DELETE_TYPED then
   do;
   END_CHECK_AD_OK = YES;
   return;
   end;

if AD_TRX_AMOUNT ^= -AD_GL_BALANCE then
   do;
   call DISPLAY_MESSAGE("Warning -- The G/L distribution does not equal the trx amount<BEL>"c);
   call PRESS_RETURN;
   END_CHANGE_ITEM = NO;
   do while (END_CHANGE_ITEM ^= YES);
      call CHANGE_ITEM;
   end;
   return;
   end;

call OUTPUT_LINE(23,10,"Are you sure you want to post this item?");
call INPUT_DATA(23,51,1,"Y",byteaddr(ANSWER),INPUT_LENGTH,RETURN_CODE);
call CLEAR_TO_BOS(23);
call DUMP_BUFFER;
if ANSWER ^= "Y" then
   RETURN_CODE = DELETE_TYPED;
do;
END_CHECK_AD_OK = YES;
return;
end;

return;
end;	/* CHECK_AD_OK          */

/****************************************************************
	DETAIL_DELETE
	Delete the detail
****************************************************************/

DETAIL_DELETE:
	procedure;


   /* SET_FIRST - Set the record pointer to the first rec */

   AD_DIST_BANK = AD_BANK_NO;
   AD_DIST_NUMBER = AD_TRX_NUMBER;
   AD_DIST_TYPE = AD_TRX_TYPE;
   AD_DIST_TRX_SEQ = -1;
   AD_DIST_GL_ACCT = 0;
   call SET_POSITION (AD_GL_DIST_NO,KEY_AREA_1,ERROR_CODE);

   /* READNEXT - Read the next record */

   call READ_NEXT (AD_GL_DIST_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AD_GL_DIST_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AD_DIST_BANK > AD_BANK_NO) !
   (AD_DIST_NUMBER > AD_TRX_NUMBER) !
   (AD_DIST_TYPE > AD_TRX_TYPE) !
   (AD_DIST_TRX_SEQ > -1) then
      do;
      END_DETAIL_DELETE = YES;
      return;
      end;

   /* DELETE_RECORD - Delete the record */

   call DELETE_RECORD (AD_GL_DIST_NO,ERROR_CODE);
return;
end;	/* DETAIL_DELETE        */

/****************************************************************
	FIX_GL_DETAIL
	Fix this G/L detail
****************************************************************/

FIX_GL_DETAIL:
	procedure;


   /* SET_FIRST - Set the record pointer to the first rec */

   AD_DIST_BANK = AD_BANK_NO;
   AD_DIST_NUMBER = AD_TRX_NUMBER;
   AD_DIST_TYPE = AD_TRX_TYPE;
   AD_DIST_TRX_SEQ = -1;
   AD_DIST_GL_ACCT = 0;
   call SET_POSITION (AD_GL_DIST_NO,KEY_AREA_1,ERROR_CODE);

   /* READNEXT - Read the next record */

   call READ_NEXT (AD_GL_DIST_NO,KEY_AREA_1,ERROR_CODE);
   if ERROR_CODE > 3 then
   	call PRINT_ERROR (AD_GL_DIST_NO,ERROR_CODE);

   /* CHECK_END - Check to see if this is the last record */

   if (ERROR_CODE = END_OF_FILE) !
   (AD_DIST_BANK > AD_BANK_NO) !
   (AD_DIST_NUMBER > AD_TRX_NUMBER) !
   (AD_DIST_TYPE > AD_TRX_TYPE) !
   (AD_DIST_TRX_SEQ > -1) then
      do;
      END_FIX_GL_DETAIL = YES;
      return;
      end;

   /* FIX_GL_SEQ - Fix the sequence number */

   AD_DIST_TRX_SEQ = AD_TRX_SEQ;
   AD_DIST_DATE = AD_TRX_DATE;


   /* UPDATE_RECORD - Update the record */

   call UPDATE_RECORD (AD_GL_DIST_NO,ERROR_CODE);
return;
end;	/* FIX_GL_DETAIL        */

/****************************************************************
	END_PROGRAM
	End of program stuff
****************************************************************/

END_PROGRAM:
	procedure;


   /* CLOSE_FILES - Close all the files for this program */

   call CLOSE_FILE (AD_CHECKING_NO);
   call CLOSE_FILE (AD_ACCT_NO);
   call CLOSE_FILE (AD_GL_DIST_NO);
   call CLOSE_FILE (GL_CHART_NO);
return;
end;	/* END_PROGRAM          */
end;	/* END_PROGRAM          */
/*********************************End of Program*********************/
