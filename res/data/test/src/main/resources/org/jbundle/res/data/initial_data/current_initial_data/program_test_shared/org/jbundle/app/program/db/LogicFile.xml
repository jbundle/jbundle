<?xml version="1.0" encoding="UTF-8" standalone="no"?><file>
	<LogicFile ID="189">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Animal</MethodClassName>
		<LogicSource><![CDATA[this.addTable(new Cat(recordOwner));
this.addTable(new Dog(recordOwner));
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="190">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnimalVets</MethodClassName>
		<LogicSource><![CDATA[//?	this.addTable(new Animal(recordOwner));
this.addTable(new Dog(recordOwner));
this.addTable(new Vet(recordOwner));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="191">
		<LastChanged>2012-02-01T19:01:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnimalVets</MethodClassName>
		<LogicSource><![CDATA[this.setSelected(false);	// de-select all
super;

//?this.getField(Animal.ANIMAL_FILE, Animal.ID).setSelected(true);
//?this.getField(Animal.ANIMAL_FILE, Animal.NAME).setSelected(true);
//?this.getField(Animal.ANIMAL_FILE, Animal.COLOR).setSelected(true);
//?this.getField(Animal.ANIMAL_FILE, Animal.WEIGHT).setSelected(true);

this.getField(Dog.DOG_FILE, Animal.ID).setSelected(true);
this.getField(Dog.DOG_FILE, Animal.NAME).setSelected(true);
this.getField(Dog.DOG_FILE, Animal.COLOR).setSelected(true);
this.getField(Dog.DOG_FILE, Animal.WEIGHT).setSelected(true);

this.getField(Vet.VET_FILE, Vet.NAME).setSelected(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="192">
		<LastChanged>2012-02-01T19:01:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupRelationships</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnimalVets</MethodClassName>
		<LogicSource><![CDATA[//?this.addRelationship(DBConstants.LEFT_INNER, this.getRecord(Animal.ANIMAL_FILE), this.getRecord(Vet.VET_FILE), Animal.VET, Vet.ID);
this.addRelationship(DBConstants.LEFT_INNER, this.getRecord(Dog.DOG_FILE), this.getRecord(Vet.VET_FILE), Animal.VET, Vet.ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2225">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScreenTest2</MethodClassName>
		<LogicSource>return new Cat(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2226">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScreenTest2</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2227">
		<LastChanged>2009-10-13T13:28:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetField</MethodClassName>
		<LogicSource>return new Vet(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2228">
		<LastChanged>2012-01-31T06:27:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), Vet.NAME_KEY, Vet.NAME, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2229">
		<LastChanged>2012-01-31T06:27:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReport</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(Animal.NAME_KEY);
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(Animal.VET), this.getScreenRecord().getField(TestReportScreenRecord.VET_ID), "="));
		
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(TestReportScreenRecord.REPORT_COUNT), false, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2230">
		<LastChanged>2012-01-23T09:37:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReport</MethodClassName>
		<LogicSource>return new TestReportToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2231">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReport</MethodClassName>
		<LogicSource>return new TestReportScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2232">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>220</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReport</MethodClassName>
		<LogicSource>return new TestReportFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2233">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>210</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReport</MethodClassName>
		<LogicSource>return new TestReportHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2234">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReport</MethodClassName>
		<LogicSource>return new Cat(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2235">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReport</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2236">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2237">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReportToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2238">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetPopupField</MethodClassName>
		<LogicSource><![CDATA[		return this.setupTablePopup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), Vet.NAME_KEY, Vet.NAME, true, true);
//		return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), -1, Vet.NAME, true, true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2239">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReportHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2240">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReportFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2241">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2242">
		<LastChanged>2012-02-01T19:01:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailReport</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(Vet.NAME_KEY);
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(Vet.ID), this.getScreenRecord().getField(TestReportScreenRecord.VET_ID), "="));
		
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(TestReportScreenRecord.REPORT_COUNT), false, true));

Record recCat = this.getRecord(Cat.CAT_FILE);
recCat.setKeyArea(Cat.VET_KEY);
recCat.addListener(new SubFileFilter(this.getMainRecord().getField(Vet.ID), Cat.VET, null, null, null, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2243">
		<LastChanged>2012-01-23T09:37:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailReport</MethodClassName>
		<LogicSource>return new TestReportToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2244">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>310</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailReport</MethodClassName>
		<LogicSource>return new TestReportFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2245">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>320</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailReport</MethodClassName>
		<LogicSource>return new TestReportHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2246">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailReport</MethodClassName>
		<LogicSource>return new Vet(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2247">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailReport</MethodClassName>
		<LogicSource><![CDATA[super;
new Cat(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2248">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailReport</MethodClassName>
		<LogicSource>return new TestReportScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2249">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addReportDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailReport</MethodClassName>
		<LogicSource>return new TestDetailDetail(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2250">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailDetail</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2251">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailDetail</MethodClassName>
		<LogicSource>return this.getRecord(Cat.CAT_FILE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2252">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetScreen</MethodClassName>
		<LogicSource>return new Vet(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2253">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2254">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2255">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetGridScreen</MethodClassName>
		<LogicSource>return new Vet(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2256">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatVetGridScreen</MethodClassName>
		<LogicSource>return new Cat(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2257">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatVetGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2258">
		<LastChanged>2012-02-01T19:01:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatVetGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
	// Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(TestReportScreenRecord.VET_ID)).syncReference(this.getRecord(Vet.VET_FILE));
	// The detail file is the sub-file to to passed-in header record.
this.getMainRecord().setKeyArea(Cat.VET_KEY);
this.getMainRecord().addListener(new SubFileFilter(this.getHeaderRecord()));
	// Any change to the bundle file triggers a re-select (note: SPopup read-thru will not respond)
this.getRecord(Vet.VET_FILE).getField(Vet.ID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2259">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatVetHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2260">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((m_iDisplayFieldDesc & ScreenConstants.SELECT_MODE) != ScreenConstants.SELECT_MODE)
	new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2261">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2262">
		<LastChanged>2009-10-13T13:33:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, Vet.CAT_VET_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2263">
		<LastChanged>2009-10-13T13:34:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, Vet.CAT_VET_GRID_SCREEN, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2264">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2265">
		<LastChanged>2012-06-30T10:47:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Vet</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == Vet.CAT_VET_GRID_SCREEN)
//	screen = new CatVetGridScreen(this, null, (ScreenLocation)itsLocation, (BasePanel)parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
	screen = Record.makeNewScreen(CAT_VET_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
//	screen = new VetScreen(this, (ScreenLocation)itsLocation, (BasePanel)parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
	screen = Record.makeNewScreen(VET_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
else
//	screen = new VetGridScreen(this, (ScreenLocation)itsLocation, (BasePanel)parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
	screen = Record.makeNewScreen(VET_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2266">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CatVetGridScreen*2</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recVet, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>CatVetGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2268">
		<LastChanged>2012-01-23T08:58:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatVetGridScreen</MethodClassName>
		<LogicSource>return new CatVetHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2269">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatVetGridScreen</MethodClassName>
		<LogicSource>return new Vet(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2270">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatVetHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(TestReportScreenRecord.VET_ID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2271">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatVetGridScreen</MethodClassName>
		<LogicSource>return new TestReportScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2319">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(TestTable.TEST_TABLE_FILE).addListener(new CompareFileFilter(TestTable.TEST_KEY, this.getScreenRecord().getField(TestScreenRecord.NAME_SORT), "=", null, true));
this.getScreenRecord().getField(TestScreenRecord.NAME_SORT).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2320">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestGridScreen</MethodClassName>
		<LogicSource>return new TestTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2321">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2322">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestGridScreen</MethodClassName>
		<LogicSource>return new TestScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="2323">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestGridScreen</MethodClassName>
		<LogicSource>toolScreen.getScreenRecord().getField(TestScreenRecord.NAME_SORT).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3072">
		<LastChanged>2009-10-13T13:30:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestSecondField</MethodClassName>
		<LogicSource>return new TestSecond(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3340">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_DOUBLE).addListener(new CheckRangeHandler(5, 10));
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_NAME).addListener(new FieldToUpperHandler(null));
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_KEY).addListener(new RegisterValueHandler(null));

this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_CODE).addListener(new ChangeFocusOnChangeHandler(this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_LONG)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3341">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestScreen</MethodClassName>
		<LogicSource>return new TestTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3342">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3343">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestScreenLock</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setOpenMode((this.getMainRecord().getOpenMode() & ~DBConstants.LOCK_STRATEGY_MASK) | DBConstants.OPEN_LOCK_ON_EDIT_STRATEGY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3344">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestScreenWaitLock</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setOpenMode((this.getMainRecord().getOpenMode() & ~(DBConstants.LOCK_TYPE_MASK | DBConstants.LOCK_STRATEGY_MASK)) | DBConstants.OPEN_WAIT_FOR_LOCK_STRATEGY | DBConstants.OPEN_EXCEPTION_ON_LOCK_TYPE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3591">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestTableAnalysis</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3592">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestTableAnalysis</MethodClassName>
		<LogicSource>return new TestTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3594">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestTableAnalysis</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3595">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestTableAnalysis</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3919">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBreakReport</MethodClassName>
		<LogicSource>return new Cat(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3920">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBreakReport</MethodClassName>
		<LogicSource><![CDATA[super;
new Vet(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3921">
		<LastChanged>2012-02-03T20:09:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBreakReport</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(Cat.VET_KEY);

Record recVet = this.getRecord(Vet.VET_FILE);
this.getMainRecord().getField(Cat.VET).addListener(new ReadSecondaryHandler(recVet));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(TestReportScreenRecord.REPORT_COUNT), null, true, true, true));
this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(TestReportScreenRecord.REPORT_TOTAL), Cat.WEIGHT, true, true, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3922">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBreakReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3923">
		<LastChanged>2012-01-23T09:37:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBreakReport</MethodClassName>
		<LogicSource>return new TestReportToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3924">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBreakReport</MethodClassName>
		<LogicSource>return new TestReportScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3925">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBreakReport</MethodClassName>
		<LogicSource>return new TestReportHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3926">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBreakReport</MethodClassName>
		<LogicSource>return new TestReportFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3927">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBreakBreak</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3928">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getServletPath</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBreakReport</MethodClassName>
		<LogicSource>return super.getServletPath(DBParams.XHTMLSERVLET); // Use cocoon</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3941">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestTableAnalysis</MethodClassName>
		<LogicSource>return new TestTableSummary(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="3942">
		<LastChanged>2012-01-31T09:43:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>addSummary</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestTableAnalysis</MethodClassName>
		<LogicSource><![CDATA[this.getScreenRecord().getField(TestTableSummary.TEST_CODE).moveFieldToThis(this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_CODE));
this.getScreenRecord().getField(TestTableSummary.TEST_KEY).moveFieldToThis(this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_KEY));
this.getScreenRecord().getField(TestTableSummary.TEST_COUNT).setValue(1);
this.getScreenRecord().getField(TestTableSummary.TEST_SHORT).moveFieldToThis(this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_SHORT));
this.getScreenRecord().getField(TestTableSummary.TEST_DOUBLE).moveFieldToThis(this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_DOUBLE));

super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4040">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatVetScreen</MethodClassName>
		<LogicSource>return new Cat(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4041">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatVetScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(Cat.VET).addListener(new InitOnceFieldHandler(false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4532">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SnakeGridScreen</MethodClassName>
		<LogicSource>return new Snake(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4533">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SnakeScreen</MethodClassName>
		<LogicSource>return new Snake(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4534">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LizardScreen</MethodClassName>
		<LogicSource>return new Lizard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4535">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LizardGridScreen</MethodClassName>
		<LogicSource>return new Lizard(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4536">
		<LastChanged>2012-06-30T11:03:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Reptile</MethodClassName>
		<LogicSource><![CDATA[ScreenParent screen = null;
if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
{
    Object objObjectID = null;
    try {
        objObjectID = this.getHandle(DBConstants.OBJECT_ID_HANDLE);
    } catch (DBException ex)    {
        ex.printStackTrace();
    }
    String strObjectID = null;
    if (objObjectID != null)
        parentScreen.setProperty(DBConstants.STRING_OBJECT_ID_HANDLE, objObjectID.toString());
    if (this.getField(Reptile.REPTILE_TYPE_ID).getValue() == ReptileTypeField.SNAKE)
//        screen = new SnakeScreen(null, (ScreenLocation)itsLocation, (BasePanel)parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
            screen = Record.makeNewScreen(SnakeModel.SNAKE_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
    else //if (this.getField(Reptile.REPTILE_TYPE_ID).getValue() == ReptileTypeField.LIZARD)
//        screen = new LizardScreen(null, (ScreenLocation)itsLocation, (BasePanel)parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
            screen = Record.makeNewScreen(LizardModel.LIZARD_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
}
else //if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
//    screen = new ReptileGridScreen(this, (ScreenLocation)itsLocation, (BasePanel)parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
      screen = Record.makeNewScreen(REPTILE_GRID_SCREEN_CLASS, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, this, true);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4537">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ReptileGridScreen</MethodClassName>
		<LogicSource>return new Reptile(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4538">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SnakeScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4561">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Reptile</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4562">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>520</Sequence>
		<MethodName>getSharedRecordTypeKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Reptile</MethodClassName>
		<LogicSource>return this.getField(Reptile.REPTILE_TYPE_ID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4563">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>530</Sequence>
		<MethodName>makeSharedRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>Object objKey, RecordOwner recordOwner</MethodInterface>
		<MethodClassName>Reptile</MethodClassName>
		<LogicSource><![CDATA[if (objKey instanceof Integer)
{
    int iReptileType = ((Integer)objKey).intValue();
    if (iReptileType == ReptileTypeField.LIZARD)
        return new Lizard(recordOwner);
    if (iReptileType == ReptileTypeField.SNAKE)
        return new Snake(recordOwner);
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4564">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ReptileGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().setKeyArea(Reptile.NAME_KEY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4567">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ReptileScreen</MethodClassName>
		<LogicSource>return new Reptile(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4568">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ReptileScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="4569">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ReptileGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
this.addColumn(new MultipleTableFieldConverter(record, Reptile.NAME));
this.addColumn(new MultipleTableFieldConverter(record, Reptile.VET_ID));
this.addColumn(new MultipleTableFieldConverter(record, Reptile.WEIGHT));

this.addColumn(new MultipleTableFieldConverter(record, Reptile.REPTILE_TYPE_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5001">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailXMLReport</MethodClassName>
		<LogicSource>return new Cat(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5002">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailXMLReport</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(Animal.NAME_KEY);
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(Animal.VET), this.getScreenRecord().getField(TestReportScreenRecord.VET_ID), "="));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(TestReportScreenRecord.REPORT_COUNT), false, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5003">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailXMLReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5004">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailXMLReport</MethodClassName>
		<LogicSource>return new TestReportFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5005">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailXMLReport</MethodClassName>
		<LogicSource>return new TestReportHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5006">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailXMLReport</MethodClassName>
		<LogicSource>return new TestReportScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5007">
		<LastChanged>2012-01-23T09:37:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailXMLReport</MethodClassName>
		<LogicSource>return new TestReportXMLToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5008">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReportXMLToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5009">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getServletPath</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestDetailXMLReport</MethodClassName>
		<LogicSource>return super.getServletPath(DBParams.XHTMLSERVLET); // Use cocoon</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5148">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileReport</MethodClassName>
		<LogicSource>return new Reptile(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5149">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileReport</MethodClassName>
		<LogicSource><![CDATA[this.addColumn(new MultipleTableFieldConverter(this.getRecord(Reptile.REPTILE_FILE), Reptile.NAME));
this.addColumn(new MultipleTableFieldConverter(this.getRecord(Reptile.REPTILE_FILE), Reptile.WEIGHT));
this.addColumn(new MultipleTableFieldConverter(this.getRecord(Reptile.REPTILE_FILE), Reptile.VET_ID));

new TestReptileBreak(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | HtmlConstants.FOOTING_SCREEN, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5150">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileReport</MethodClassName>
		<LogicSource><![CDATA[super;
new Vet(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5151">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileReport</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().setKeyArea(Reptile.VET_ID_KEY);
Record recVet = this.getRecord(Vet.VET_FILE); //((ReferenceField)this.getMainRecord().getField(Reptile.VET_ID)).getReferenceRecord();
this.getMainRecord().getField(Reptile.VET_ID).addListener(new ReadSecondaryHandler(recVet));
//?this.getRecord(Cat.CAT_FILE).getField(Animal.VET).addListener(new ReadSecondaryHandler(recVet));
//?this.getRecord(Dog.DOG_FILE).getField(Animal.VET).addListener(new ReadSecondaryHandler(recVet));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5152">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileBreak</MethodClassName>
		<LogicSource>this.getRecord(Vet.VET_FILE).getField(Vet.NAME).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5153">
		<LastChanged>2009-10-17T07:30:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileXmlReport</MethodClassName>
		<LogicSource>return new Reptile(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5154">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileXmlReport</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5155">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileXmlReport</MethodClassName>
		<LogicSource><![CDATA[super;

Record recVet = ((ReferenceField)this.getMainRecord().getField(Reptile.VET_ID)).getReferenceRecord();
this.getMainRecord().getField(Reptile.VET_ID).addListener(new ReadSecondaryHandler(recVet));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5156">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileXmlReport</MethodClassName>
		<LogicSource><![CDATA[this.addColumn(new MultipleTableFieldConverter(this.getRecord(Reptile.REPTILE_FILE), Reptile.NAME));
this.addColumn(new MultipleTableFieldConverter(this.getRecord(Reptile.REPTILE_FILE), Reptile.WEIGHT));
this.addColumn(new MultipleTableFieldConverter(this.getRecord(Reptile.REPTILE_FILE), Reptile.VET_ID, Vet.NAME));
//?new TestReptileXmlRecordDetail(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC | HtmlConstants.FOOTING_SCREEN);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5157">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileXmlRecordDetail</MethodClassName>
		<LogicSource><![CDATA[this.getRecord(Reptile.REPTILE_FILE).getField(Reptile.VET_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(Vet.VET_FILE).getField(Vet.NAME).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5158">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getServletPath</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileXmlReport</MethodClassName>
		<LogicSource>return super.getServletPath(DBParams.XHTMLSERVLET); // Use cocoon</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5159">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileXmlReport</MethodClassName>
		<LogicSource>return new TestReportScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5160">
		<LastChanged>2012-01-23T09:37:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileXmlReport</MethodClassName>
		<LogicSource>return new TestReptileXmlToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5161">
		<LastChanged>2012-02-02T17:58:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestReptileXmlToolbar</MethodClassName>
		<LogicSource><![CDATA[super;
//if (this.isPrintReport())
//  return;   // Don't display params if entered
this.getScreenRecord().getField(TestReportScreenRecord.TEMPLATE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5920">
		<LastChanged>2012-01-31T06:27:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBasicScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_DOUBLE).addListener(new CheckRangeHandler(5, 10));
this.getRecord(TestTable.TEST_TABLE_FILE).addListener(new ValidateFieldHandler(TestTable.TEST_FLOAT, "21.00", false));
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_NAME).addListener(new FieldToUpperHandler(null));
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_KEY).addListener(new RegisterValueHandler(null));

this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_CODE).addListener(new ChangeFocusOnChangeHandler(this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_LONG)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5921">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBasicScreen</MethodClassName>
		<LogicSource>return new TestTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5922">
		<LastChanged>2012-02-01T19:01:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBasicScreen</MethodClassName>
		<LogicSource><![CDATA[this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_CODE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_NAME).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_YES_NO).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_LONG).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_SHORT).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_DATE_TIME).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_DATE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_TIME).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_FLOAT).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);

new SPopupBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_YES_NO), ScreenConstants.DEFAULT_DISPLAY);

this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_DOUBLE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_PERCENT).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);

this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_SECOND).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
new SCannedBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, "Next");

this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_REAL).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_CURRENCY).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_DOUBLE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_KEY).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);

new SEditText(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_YES_NO), ScreenConstants.DEFAULT_DISPLAY);
new SButtonBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_YES_NO), ScreenConstants.DEFAULT_DISPLAY);
new SToggleButton(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_YES_NO), ScreenConstants.DEFAULT_DISPLAY);
new SCheckBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_YES_NO), ScreenConstants.DEFAULT_DISPLAY);

//      new SPopupBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_KEY), ScreenConstants.DEFAULT_DISPLAY);

new SRadioButton(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_YES_NO), ScreenConstants.DEFAULT_DISPLAY);
new SStaticString(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, "Static String");
new SStaticText(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_YES_NO), ScreenConstants.DEFAULT_DISPLAY);

this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_MEMO).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_HTML).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_XML).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_IMAGE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5923">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBasicGridScreen</MethodClassName>
		<LogicSource>return new TestTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5924">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBasicGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(TestScreenRecord.SORT_KEY).addListener(new SortOrderHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5925">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBasicGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.DELETE, MenuConstants.DELETE, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5926">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBasicGridScreen</MethodClassName>
		<LogicSource>return new TestScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5927">
		<LastChanged>2012-02-01T19:01:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestBasicGridScreen</MethodClassName>
		<LogicSource><![CDATA[this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_CODE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_NAME).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_DATE).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_YES_NO).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
new SPopupBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_YES_NO), ScreenConstants.DEFAULT_DISPLAY);
new SStaticText(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_NAME), ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_KEY).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_LONG).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_SHORT).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5928">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestInputGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5929">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestInputGridScreen</MethodClassName>
		<LogicSource><![CDATA[//      this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_ID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_NAME).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_YES_NO).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
//      new SPopupBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_YES_NO), ScreenConstants.DEFAULT_DISPLAY);
//      new SStaticText(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_NAME), ScreenConstants.DEFAULT_DISPLAY);
//      this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_KEY).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_LONG).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_SHORT).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5930">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestSoftScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().addListener(new SoftDeleteHandler(this.getMainRecord().getField(TestTable.TEST_YES_NO)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5931">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestSoftGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().addListener(new SoftDeleteHandler(this.getMainRecord().getField(TestTable.TEST_YES_NO)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5932">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatScreen</MethodClassName>
		<LogicSource>return new Cat(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5933">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5934">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatSession</MethodClassName>
		<LogicSource>return new Cat(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5935">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CatSession</MethodClassName>
		<LogicSource><![CDATA[super;
Vet recVet = (Vet)this.getRecord(Vet.VET_FILE);

this.getMainRecord().setKeyArea(Cat.VET_KEY);
this.getMainRecord().addListener(new SubFileFilter(recVet));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5936">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetSession</MethodClassName>
		<LogicSource>return new Vet(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="5937">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VetSession</MethodClassName>
		<LogicSource><![CDATA[if (DBConstants.RESET.equalsIgnoreCase(strCommand))
{
    Vet recVet = (Vet)this.getMainRecord();
    try {
        recVet.addNew();
    } catch (DBException ex)   {
        ex.printStackTrace();
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6440">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Lizard</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(Reptile.REPTILE_TYPE_ID, ReptileTypeField.LIZARD));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6441">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Snake</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(Reptile.REPTILE_TYPE_ID, ReptileTypeField.SNAKE));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6795">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestSecondGridScreen</MethodClassName>
		<LogicSource>return new TestTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6796">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestSecondGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="6797">
		<LastChanged>2012-01-31T08:52:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestSecondField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.makeReferenceRecord();
String iQueryKeySeq = TestSecond.CODE_KEY;
Converter fldDisplayFieldDesc = record.getField(TestSecond.DESCRIPTION);
boolean bIncludeBlankOption = true;
boolean bIncludeFormButton = true;
return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, iQueryKeySeq, fldDisplayFieldDesc, bIncludeBlankOption, bIncludeFormButton);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7011">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestControlGridScreen</MethodClassName>
		<LogicSource>return new TestTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7012">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestControlGridScreen</MethodClassName>
		<LogicSource>return new TestScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7013">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestControlGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(TestScreenRecord.SORT_KEY).addListener(new SortOrderHandler(this));        

BaseField fldTargetValue = this.getMainRecord().getField(TestTable.TEST_FLOAT);
BaseField fldValue1 = this.getMainRecord().getField(TestTable.TEST_LONG);
BaseField fldValue2 = this.getMainRecord().getField(TestTable.TEST_SHORT);
this.getMainRecord().getField(TestTable.TEST_SHORT).addListener(new CalcBalanceHandler(fldTargetValue, fldValue1, fldValue2, CalcBalanceHandler.MULTIPLY, false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7014">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestControlGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.DELETE, MenuConstants.DELETE, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7015">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestControlGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7122">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestScreenLockStorm</MethodClassName>
		<LogicSource><![CDATA[super;
//? this.getMainRecord().setOpenMode(this.getMainRecord().getOpenMode() | DBConstants.OPEN_LOCK_ON_EDIT);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7123">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestScreenLockStorm</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(TestTable.TEST_TABLE_FILE).getField(TestTable.TEST_PROPERTIES).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
new SCannedBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, "Start storm");
new SCannedBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, "Stop storm"); 
new SCannedBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, "Auto storm"); 
this.getScreenRecord().getField(TourEventScreenRecord.RUN_PROCESS_IN).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7124">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestScreenLockStorm</MethodClassName>
		<LogicSource><![CDATA[if ("Start storm".equalsIgnoreCase(strCommand))
    return this.startStorm();
if ("Stop storm".equalsIgnoreCase(strCommand))
    return this.stopStorm();
if ("Auto storm".equalsIgnoreCase(strCommand))
    return this.autoStorm();
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7125">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>startStorm</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>TestScreenLockStorm</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> properties = new HashMap<String,Object>();
properties.put(DBParams.PROCESS, MessageStormProcess.class.getName());
Application app = (Application)this.getTask().getApplication();
String strQueueName = MessageConstants.TRX_SEND_QUEUE;
String strQueueType = MessageConstants.INTRANET_QUEUE;
BaseMessage message = new MapMessage(new TrxMessageHeader(strQueueName, strQueueType, properties), properties);
String strProcess = Utility.propertiesToURL(null, properties);

if (RunProcessInField.REMOTE_PROCESS.equalsIgnoreCase(this.getScreenRecord().getField(TourEventScreenRecord.RUN_PROCESS_IN).toString()))
{
    app.getMessageManager().sendMessage(message);
}
else if (RunProcessInField.LOCAL_PROCESS.equalsIgnoreCase(this.getScreenRecord().getField(TourEventScreenRecord.RUN_PROCESS_IN).toString()))
{
    app.getTaskScheduler().addTask(new ProcessRunnerTask(app, strProcess, null));
}
else // LOCAL
{
    new ProcessRunnerTask(app, strProcess, null).run();
}

return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7126">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>stopStorm</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>TestScreenLockStorm</MethodClassName>
		<LogicSource>return true;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7127">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestScreenLockStorm</MethodClassName>
		<LogicSource>return new TourEventScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7128">
		<LastChanged>2009-04-25T07:14:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageStormProcess</MethodClassName>
		<LogicSource><![CDATA[int MULTIPLIER = (int)(0.250 * TestScreenLockStorm.WAIT_MULTIPLIER);
for (int i = TestScreenLockStorm.COUNT; i > 0; i--)
{
    this.startProcess(TestUpdateProcess.class.getName(), RunProcessInField.LOCAL_PROCESS, Integer.toString(i));
    synchronized(this)
    {
        try {
            this.wait(i * MULTIPLIER); // Start with 2.5 seconds, and drop
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7129">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestUpdateProcess</MethodClassName>
		<LogicSource><![CDATA[int iWaitTime;

Record recTestTable = this.getMainRecord();
try {
    recTestTable.addNew();
    recTestTable.getCounterField().setString("1");
    if (recTestTable.seek(null))
    {
        synchronized(this)
        {
            try {
                iWaitTime = (int)(Math.random() * 2.5 * TestScreenLockStorm.WAIT_MULTIPLIER + 1);     // Between 0 and 5 seconds
                this.wait(iWaitTime);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        recTestTable.edit();
        ((PropertiesField)recTestTable.getField(TestTable.TEST_PROPERTIES)).setProperty(this.getProperty("count"), new Date().toString());
        synchronized(this)
        {
            try {
                iWaitTime = (int)(Math.random() * 2.5 * TestScreenLockStorm.WAIT_MULTIPLIER + 1);     // Between 0 and 5 seconds
                this.wait(iWaitTime);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        recTestTable.set();
    }
    else
        System.out.println("---------------- Error: record not found"); //Never
} catch (DBException ex) {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7130">
		<LastChanged>2009-09-09T15:49:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestUpdateProcess</MethodClassName>
		<LogicSource>return new TestTable(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7131">
		<LastChanged>2010-03-02T05:33:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>startProcess</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strProcessName, String strProcessType, String strProcessCount</MethodInterface>
		<MethodClassName>MessageStormProcess</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> properties = new HashMap<String,Object>();
properties.put(DBParams.PROCESS, strProcessName);
properties.put("count", strProcessCount);
Application app = (Application)this.getTask().getApplication();
String strQueueName = MessageConstants.TRX_SEND_QUEUE;
String strQueueType = MessageConstants.INTRANET_QUEUE;
BaseMessage message = new MapMessage(new TrxMessageHeader(strQueueName, strQueueType, properties), properties);
String strProcess = Utility.propertiesToURL(null, properties);

if (RunProcessInField.REMOTE_PROCESS.equalsIgnoreCase(strProcessType))
{
    app.getMessageManager().sendMessage(message);
}
else if (RunProcessInField.LOCAL_PROCESS.equalsIgnoreCase(strProcessType))
{
    app.getTaskScheduler().addTask(new ProcessRunnerTask(app, strProcess, null));
}
else // LOCAL
{
    new ProcessRunnerTask(app, strProcess, null).run();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7132">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>TestUpdateProcess</MethodClassName>
		<LogicSource><![CDATA[super;
// Use default lock strategy for now.
//x this.getMainRecord().setOpenMode((this.getMainRecord().getOpenMode() & ~DBConstants.LOCK_MASK) | DBConstants.OPEN_MERGE_ON_LOCK);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7133">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>autoStorm</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>TestScreenLockStorm</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
try {
    record.addNew();
    record.getCounterField().setString("1");
    record.setKeyArea(DBConstants.MAIN_KEY_AREA);
    if (record.seek(null))
    {
        record.edit();
        record.getField(TestTable.TEST_PROPERTIES).setData(null);
        record.set();
        
        record.seek(null);
        
        this.startStorm();

        SwingWorker<String,Object> worker = new SwingWorker<String,Object>()
        {
            
            protected String doInBackground() throws Exception
            {
                synchronized(Thread.currentThread())
                {
                    try {
                        Thread.currentThread().wait(25 * WAIT_MULTIPLIER); // 25 Seconds should be plenty
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                return null;
            }
            /**
             * Called on the event dispatching thread (not on the worker thread)
             * after the <code>construct</code> method has returned.
             */
            public void done()
            {
                Record record = getMainRecord();
                for (int i = 1; i <=COUNT; i++)
                {
                    if (((PropertiesField)record.getField(TestTable.TEST_PROPERTIES)).getProperty(Integer.toString(i)) == null)
                        return;
                }
             
                autoStorm();
            }
        };
        worker.execute();
    }
} catch (DBException e) {
    e.printStackTrace();
}        

return true;  ]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7650">
		<LastChanged>2009-10-13T13:28:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnimalField</MethodClassName>
		<LogicSource>return new Animal(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7651">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnimalGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(Animal.NAME_KEY);
this.setEditing(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7652">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnimalGridScreen</MethodClassName>
		<LogicSource>return new Animal(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7653">
		<LastChanged>2012-01-31T06:27:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnimalGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
this.addColumn(new MultipleTableFieldConverter(record, Animal.NAME));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
	<LogicFile ID="7654">
		<LastChanged>2012-01-20T05:57:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnimalField</MethodClassName>
		<LogicSource><![CDATA[// Add code here to setup the popup or lookup button
Record record = this.getReferenceRecord();  // Get/make the record that describes the referenced class.
ScreenComponent screenField = this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, record.getDefaultScreenKeyArea(), this.getDefaultDisplayFieldSeq(), true, false); 
return screenField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
		<IncludeScope>1</IncludeScope>
	</LogicFile>
</file>