<?xml version="1.0" encoding="UTF-8"?><file>
	<LogicFile ID="16777636">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BaseField</MethodName>
		<LogicDescription><![CDATA[Constructor.
@param record The parent record.
@param strName The field name.
@param iDataLength The maximum string length (pass -1 for default).
@param strDesc The string description (usually pass null, to use the resource file desc).
@param strDefault The default value (if object, this value is the default value, if string, the string is the default).]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record record, String strName, int iDataLength, String strDesc, Object strDefault</MethodInterface>
		<MethodClassName>BaseField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777637">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>convertFieldToIndex</MethodName>
		<LogicDescription><![CDATA[Convert the field's code to the display's index (for popup).
@return The value in this field to a 0 based index in a table.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>BaseField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777638">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription><![CDATA[Convert this index to a display field.
@param index The index to convert.
@return The display string.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>int index</MethodInterface>
		<MethodClassName>BaseField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777639">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>convertIndexToField</MethodName>
		<LogicDescription><![CDATA[Convert the display's index to the field value and move to field.
@param index The index to convert an set this field to.
@param bDisplayOption If true, display the change in the converters.
@param iMoveMove The type of move.]]></LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>int index, Boolean bDisplayOption</MethodInterface>
		<MethodClassName>BaseField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777640">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>convertIndexToString</MethodName>
		<LogicDescription><![CDATA[Convert this index to a string.
This method is usually overidden by popup fields.
@param index The index to convert.
@return The display string.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>int index</MethodInterface>
		<MethodClassName>BaseField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777641">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>convertStringToIndex</MethodName>
		<LogicDescription>Convert this string to it's index value</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>String tempString</MethodInterface>
		<MethodClassName>BaseField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777642">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>displayField</MethodName>
		<LogicDescription>Display this field using all this field's screen fields.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777648">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription><![CDATA[Constructor.
@param record The parent record.
@param strName The field name.
@param iDataLength The maximum string length (pass -1 for default).
@param strDesc The string description (usually pass null, to use the resource file desc).
@param strDefault The default value (if object, this value is the default value, if string, the string is the default).]]></LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>Record record, String strName, int iDataLength, String strDesc, Object strDefault</MethodInterface>
		<MethodClassName>BaseField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777649">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>initField</MethodName>
		<LogicDescription>Set this field to its initial value</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>boolean bDisplayOption</MethodInterface>
		<MethodClassName>BaseField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777652">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription><![CDATA[Set up the default screen control for this field.
@param itsLocation Location of this component on screen (ie., GridBagConstraint).
@param targetScreen Where to place this component (ie., Parent screen or GridBagLayout).
@param converter The converter to set the screenfield to.
@param iDisplayFieldDesc Display the label? (optional).
@return Return the component or ScreenField that is created for this field.]]></LogicDescription>
		<MethodReturns>ScreenField</MethodReturns>
		<MethodInterface>ScreenLocation itsLocation, BasePanel targetScreen, Converter converter, int iDisplayFieldDesc</MethodInterface>
		<MethodClassName>BaseField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777653">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>830</Sequence>
		<MethodName>addScreenLayout</MethodName>
		<LogicDescription>Setup this screen's screen layout</LogicDescription>
		<MethodReturns>LayoutManager</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777654">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription>Add button(s) to the toolbar</LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>ToolScreen toolScreen</MethodInterface>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777655">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription><![CDATA[Add the toolbars that belong with this screen.
@return The new toolbar.]]></LogicDescription>
		<MethodReturns>ToolScreen</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777656">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>720</Sequence>
		<MethodName>addReportDetail</MethodName>
		<LogicDescription>Get the detail screen for this report item (null = none)</LogicDescription>
		<MethodReturns>BaseScreen</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource>return null;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777657">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>730</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription>Get the footing for this report</LogicDescription>
		<MethodReturns>BaseScreen</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777658">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>710</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription>Get the Heading for this report</LogicDescription>
		<MethodReturns>BaseScreen</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777659">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription>Get the command string to restore screen</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777660">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription><![CDATA[Make a sub-screen.
@return the new sub-screen.]]></LogicDescription>
		<MethodReturns>BasePanel</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777661">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>620</Sequence>
		<MethodName>onDelete</MethodName>
		<LogicDescription>User selected the "delete" command</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777662">
		<LastChanged>2009-09-15T20:34:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>onForm</MethodName>
		<LogicDescription>Create a data entry screen of this type</LogicDescription>
		<MethodReturns>BasePanel</MethodReturns>
		<MethodInterface>Record recordMain, int iDocMode, boolean bReadCurrentRecord, int iCommandOptions, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777663">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription><![CDATA[Add the screen fields.
Override this to create (and return) the screen record for this recordowner.
@return The screen record.]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777664">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BaseScreen</MethodName>
		<LogicDescription><![CDATA[Constructor.
@param record The main record for this screen.
@param itsLocation The location of this component within the parent.
@param parentScreen The parent screen.
@param fieldConverter The field this screen field is linked to.
@param iDisplayFieldDesc Do I display the field desc?
@param properties Addition properties to pass to the screen.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777665">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription><![CDATA[If there is a header record, return it, otherwise, return the main record.
The header record is the (optional) main record on gridscreens and is sometimes used
to enter data in a sub-record when a header is required.
@return The header record.]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777667">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription><![CDATA[Get the main record for this screen.
@return The main record.]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777668">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getSubScreen</MethodName>
		<LogicDescription>Open the sub-screen</LogicDescription>
		<MethodReturns>BaseScreen</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777670">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription><![CDATA[Open the files and setup the screen.
@param record The main record for this screen.
@param itsLocation The location of this component within the parent.
@param parentScreen The parent screen.
@param fieldConverter The field this screen field is linked to.
@param iDisplayFieldDesc Do I display the field desc?
@param properties Additional properties to pass to the screen]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777671">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>makeDependentScreen</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseScreen</MethodReturns>
		<MethodInterface>Record fileToClone, eDocMode docMode</MethodInterface>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777672">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,000</Sequence>
		<MethodName>onLButtonDblClk</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int wParam, Point location</MethodInterface>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777673">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription><![CDATA[Override this to open the main file.
<p />You should pass this record owner to the new main file (ie., new MyNewTable(thisRecordOwner)).
@return The new record.]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777674">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>setupFooting</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseScreen</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777675">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>setupHeading</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseScreen</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777686">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Object owner</MethodInterface>
		<MethodClassName>BaseListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777687">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription><![CDATA[Set the object that owns this listener.
@owner The object that this listener is being added to (if null, this listener is being removed).]]></LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>ListenerOwner owner</MethodInterface>
		<MethodClassName>BaseListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16777991">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>CheckConverter</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>field, strTargetValue, null, strAltFieldDesc, bTrueIfMatch, null</MethodReturns>
		<MethodInterface>Converter field, String strTargetValue, String strAltFieldDesc, boolean bTrueIfMatch</MethodInterface>
		<MethodClassName>CheckConverter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778018">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassFieldsGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
Record recClassInfo = this.getRecord(ClassInfo.kClassInfoFile);
if (recClassInfo != null)
{
    record.setKeyArea(ClassFields.kClassInfoClassNameKey);
    SubFileFilter listener = new SubFileFilter(recClassInfo.getField(ClassInfo.kClassName), ClassFields.kClassInfoClassName, null, -1, null, -1, true);
    record.addListener(listener);
    recClassInfo.getField(ClassInfo.kClassName).addListener(new FieldReSelectHandler(this));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778019">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassFieldsGridScreen</MethodClassName>
		<LogicSource>return new ClassFields(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778020">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassFieldsGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778021">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassFieldsScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
Record recClassInfo = this.getRecord(ClassInfo.kClassInfoFile);
if (recClassInfo != null)
{
    record.setKeyArea(ClassFields.kClassInfoClassNameKey);
    SubFileFilter listener = new SubFileFilter(recClassInfo.getField(ClassInfo.kClassName), ClassFields.kClassInfoClassName, null, -1, null, -1, true);
    record.addListener(listener);
}
MainFieldHandler fieldBeh = new MainFieldHandler(DBConstants.MAIN_KEY_AREA);
this.getMainRecord().getField(ClassFields.kClassFieldName).addListener(fieldBeh);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778022">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassFieldsScreen</MethodClassName>
		<LogicSource>return new ClassFields(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778023">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassFieldsScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778024">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getLink</MethodName>
		<LogicDescription>Get the link that will run this class.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource><![CDATA[String strType = this.getField(ClassInfo.kClassType).getString();
String strLink = this.getField(ClassInfo.kClassName).getString();
if (this.getField(ClassInfo.kClassPackage).getLength() > 0)
	strLink = DBConstants.ROOT_PACKAGE + this.getField(ClassInfo.kClassPackage).toString() + "." + strLink;
if (strType.equalsIgnoreCase("screen"))
	strLink = HtmlConstants.SERVLET_LINK + "?screen=" + strLink;
else if (strType.equalsIgnoreCase("record"))
	strLink = HtmlConstants.SERVLET_LINK + "?record=" + strLink;
return strLink;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778025">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoDescScreen</MethodClassName>
		<LogicSource>return null;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778026">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoDescScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778027">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoHelpScreen</MethodClassName>
		<LogicSource>return null;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778028">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoHelpScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778029">
		<LastChanged>2010-10-20T12:32:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
this.getMainRecord().addListener(new EnableOnPhysicalHandler(null));
this.getMainRecord().getField(ClassInfo.kClassName).addListener(new MoveOnChangeHandler(this.getMainRecord().getField(ClassInfo.kClassSourceFile), this.getMainRecord().getField(ClassInfo.kClassName), false, true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778030">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoScreen</MethodClassName>
		<LogicSource>return new ClassVars(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778031">
		<LastChanged>2010-06-09T21:16:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoScreen</MethodClassName>
		<LogicSource><![CDATA[super;

ToolScreen toolbar = new EmptyToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);

Record mainFile = this.getMainRecord();

JavaButton pJavaButton = new JavaButton(toolbar.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolbar, null, ScreenConstants.DISPLAY_FIELD_DESC);
pJavaButton.setClassInfo((ClassInfo)mainFile);
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, null, ScreenConstants.DEFAULT_DISPLAY, "?screen=" + FileHdrScreen.class.getName(), "File header");
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, null, ScreenConstants.DEFAULT_DISPLAY, "?screen=" + DatabaseInfoScreen.class.getName(), "Database info");
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, null, ScreenConstants.DEFAULT_DISPLAY, "?screen=" + LayoutScreen.class.getName(), "Layout");
String strJob = null;
strJob = Utility.addURLParam(strJob, DBParams.TASK, DBConstants.SAPPLET); // Screen class
strJob = Utility.addURLParam(strJob, DBParams.SCREEN, ExportRecordsToXmlScreen.class.getName());    // Screen class
strJob = Utility.addURLParam(strJob, "newwindow", DBConstants.TRUE);    // Screen class
strJob = Utility.addURLParam(strJob, "prefix", this.getRecord(ProgramControl.kProgramControlFile).getField(ProgramControl.kBaseDirectory).toString()+ this.getRecord(ProgramControl.kProgramControlFile).getField(ProgramControl.kProjectName).toString() + "/");    // Screen class
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, null, ScreenConstants.DEFAULT_DISPLAY, strJob, "Export");
strJob = Utility.addURLParam(strJob, "mode", "import");
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, null, ScreenConstants.DEFAULT_DISPLAY, strJob, "Import");

new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, null, ScreenConstants.DEFAULT_DISPLAY, "?screen=" + org.jbundle.app.program.access.AccessGridScreen.class.getName(), "Maintenance");
strJob = null;
strJob = Utility.addURLParam(strJob, DBParams.TASK, DBConstants.SAPPLET); // Screen class
strJob = Utility.addURLParam(strJob, DBParams.SCREEN, ".app.program.manual.util.process.CopyHelpInfo");    // Screen class
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, null, ScreenConstants.DEFAULT_DISPLAY, strJob, "Scan Help");

BaseField field = this.getScreenRecord().getField(ClassVars.kClassKey);
new SCannedBox(toolbar.getNextLocation(ScreenConstants.FLUSH_LEFT, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, "5", "Description");
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, "0", "Logic");
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, "1", "Fields");
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, "2", "Keys");
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, "3", "Members");
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, "4", "Screen");
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, "6", "Help Desc");
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, "7", "Resources");
new SCannedBox(toolbar.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), toolbar, field, ScreenConstants.DEFAULT_DISPLAY, "8", "Issues");
return toolbar;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778032">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoScreen</MethodClassName>
		<LogicSource><![CDATA[SwitchClassSub listener = new SwitchClassSub(null, null, null);
this.getScreenRecord().getField(ClassVars.kClassKey).addListener(listener);
this.getScreenRecord().getField(ClassVars.kClassKey).setValue(5, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
return (BasePanel)listener.getSubScreen();
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778033">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoScreen</MethodClassName>
		<LogicSource>return new ClassInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778034">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778036">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Company</MethodClassName>
		<LogicSource><![CDATA[super;

this.getField(Person.kName).removeListener(this.getField(Person.kName).getListener(CopyLastHandler.class), true);    // Only if dest is null (ie., company name is null)
this.getField(Person.kName).addListener(new CopyFieldHandler(Person.kNameSort));
this.getField(Company.kNameSort).addListener(new CheckForTheHandler(null));

CopyLastHandler listener = new CopyLastHandler(Company.kNameSort);
this.getField(Company.kContact).addListener(listener);    // Only if dest is null (ie., company name is null)
listener.setOnlyIfDestNull(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778040">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>CompareFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record record, int fsToCheck, String strToCompare, String szSeekSign, Converter pconvFlag, boolean bValidOnNull, BaseField pfldToCheck, BaseField pfldToCompare</MethodInterface>
		<MethodClassName>CompareFileFilter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778043">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ControlTypeField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
	{"", "Default"}, 
	{"SStaticText", "Static Text"},
	{"disabled", "disabled"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778044">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addComponent</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Object sField</MethodInterface>
		<MethodClassName>Converter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778045">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>Converter</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Object object</MethodInterface>
		<MethodClassName>Converter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778046">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>getCurStringLen</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>Converter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778047">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getFieldDesc</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Converter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778048">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>getMaxLength</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Converter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778049">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getString</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Converter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778050">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Object object</MethodInterface>
		<MethodClassName>Converter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778051">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>setData</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Object objData, boolean bDisplayOption, int iMoveMode</MethodInterface>
		<MethodClassName>Converter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778052">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setString</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface> String strField, boolean bDisplayOption, int iMoveMode</MethodInterface>
		<MethodClassName>Converter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778214">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>210</Sequence>
		<MethodName>getDefaultScreenKeyArea</MethodName>
		<LogicDescription><![CDATA[Get the default key index for grid screens and popup displays.
The default key area for grid screens is the first non-unique key that is a string.
Override this to supply a different key area.
@return The key area to use for screens and popups.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778261">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doSetData</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Object objData, boolean bDisplayOption, int iMoveMode</MethodInterface>
		<MethodClassName>FieldListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778263">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>boolean bDisplayOption, int iMoveMode</MethodInterface>
		<MethodClassName>FieldListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778264">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>BaseField field</MethodInterface>
		<MethodClassName>FieldListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778265">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>boolean bDisplayOption, int iMoveMode</MethodInterface>
		<MethodClassName>FieldChangedHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778266">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>FieldConverter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Converter converter</MethodInterface>
		<MethodClassName>FieldConverter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778267">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>BaseField field</MethodInterface>
		<MethodClassName>FieldConverter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778268">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FieldData</MethodClassName>
		<LogicSource><![CDATA[super;
this.addListener(new SetDataClass(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778269">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FieldDataGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
Record recClassInfo = this.getRecord(ClassInfo.kClassInfoFile);
if (recClassInfo != null)
{
	record.setKeyArea(FieldData.kFieldFileNameKey);
	SubFileFilter listener = new SubFileFilter(recClassInfo.getField(ClassInfo.kClassName), FieldData.kFieldFileName, null, -1, null, -1, true);
	record.addListener(listener);
	recClassInfo.getField(ClassInfo.kClassName).addListener(new FieldReSelectHandler(this));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778270">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FieldDataGridScreen</MethodClassName>
		<LogicSource>return new FieldData(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778271">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FieldDataGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778272">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FieldDataScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
Record recClassInfo = this.getRecord(ClassInfo.kClassInfoFile);
if (recClassInfo != null)
{
	record.setKeyArea(FieldData.kFieldFileNameKey);
	SubFileFilter listener = new SubFileFilter(recClassInfo.getField(ClassInfo.kClassName), FieldData.kFieldFileName, null, -1, null, -1, true);
	record.addListener(listener);
}
MainFieldHandler fieldBeh = new MainFieldHandler(DBConstants.MAIN_KEY_AREA);
this.getMainRecord().getField(FieldData.kFieldName).addListener(fieldBeh);
this.getMainRecord().setKeyArea(FieldData.kFieldFileNameKey);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778273">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FieldDataScreen</MethodClassName>
		<LogicSource>return new FieldData(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778274">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FieldDataScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778275">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FieldDescField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
	{"", "Default"}, 
	{"DISPLAY_FIELD_DESC", "Display Field Desc"},
	{"DONT_DISPLAY_FIELD_DESC", "Dont Display Field Desc"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778276">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>FieldReSelectHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>GridScreen gridScreen</MethodInterface>
		<MethodClassName>FieldReSelectHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778277">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField field, GridScreen gridScreen, SPopupBox sPopupBox</MethodInterface>
		<MethodClassName>FieldReSelectHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778279">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>doKeyOnly</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>FileListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778280">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>doLocalCriteria</MethodName>
		<LogicDescription><![CDATA[Set up/do the local criteria.
@param strbFilter The SQL query string to add to.
@param bIncludeFileName Include the file name with this query?
@param vParamList The param list to add the raw data to (for prepared statements).
@return True if you should not skip this record (does a check on the local data).]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>StringBuffer strbFilter, boolean bIncludeFileName, Vector vParamList</MethodInterface>
		<MethodClassName>FileListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778281">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription><![CDATA[Called when a new blank record is required for the table/query.
@param bDisplayOption If true, display any changes.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>boolean bDisplayOption</MethodInterface>
		<MethodClassName>FileListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778282">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription><![CDATA[Called when a change is the record status is about to happen/has happened.
@param field If this file change is due to a field, this is the field.
@param iChangeType The type of change that occurred.
@param bDisplayOption If true, display any changes.
@return an error code.
ADD_TYPE - Before a write.
UPDATE_TYPE - Before an update.
DELETE_TYPE - Before a delete.
AFTER_UPDATE_TYPE - After a write or update.
LOCK_TYPE - Before a lock.
SELECT_TYPE - After a select.
DESELECT_TYPE - After a deselect.
MOVE_NEXT_TYPE - After a move.
AFTER_REQUERY_TYPE - Record opened.
SELECT_EOF_TYPE - EOF Hit.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>FieldInfo field, int iChangeType, boolean bDisplayOption</MethodInterface>
		<MethodClassName>FileListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778283">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,400</Sequence>
		<MethodName>doRemoteCriteria</MethodName>
		<LogicDescription><![CDATA[Set up/do the remote criteria.
@param strbFilter The SQL query string to add to.
@param bIncludeFileName Include the file name with this query?
@param vParamList The param list to add the raw data to (for prepared statements).
@return True if you should not skip this record (does a check on the local data).]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>StringBuffer strbFilter, boolean bIncludeFileName, Vector vParamList</MethodInterface>
		<MethodClassName>FileListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778284">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription><![CDATA[Called when a valid record is read from the table/query.
@param bDisplayOption If true, display any changes.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>boolean bDisplayOption</MethodInterface>
		<MethodClassName>FileListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778285">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>fieldCompare</MethodName>
		<LogicDescription><![CDATA[Compare these fields using this compare string and setup
the params (if String given).
@param recordField The field in this record to compare.
@param strCompare the data string to compare to.
@param strSeekSign The SQL Seek Sign.
@param strbFilter The SQL query string to add to.
@param bIncludeFileName Include the file name with this query?
@param vParamList The param list to add the raw data to (for prepared statements).
@return true if the comparison is valid (For local Criteria or LTable).]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseField recordField, BaseField compareField, String strSeekSign, String strFilter, boolean bIncludeFileName, Vector vParamList</MethodInterface>
		<MethodClassName>FileListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778287">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>FileListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778288">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FileHdrScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778289">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FileHdrScreen</MethodClassName>
		<LogicSource>return new FileHdr(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778290">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FileHdrScreen</MethodClassName>
		<LogicSource><![CDATA[Record query = this.getMainRecord();
for (int fieldSeq = FileHdr.kFileName; fieldSeq < FileHdr.kFileNotes; fieldSeq++)
	query.getField(fieldSeq).setupFieldView(this);	// Add this view to the list
for (int fieldSeq = FileHdr.kFileNotes+1; fieldSeq <= FileHdr.kFileHdrLastField; fieldSeq++)
	query.getField(fieldSeq).setupFieldView(this);	// Add this view to the list
query.getField(FileHdr.kFileNotes).setupFieldView(this);	// Add this view to the list
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778387">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getBaseDate</MethodName>
		<LogicDescription/>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>GridCalendar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778388">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getCalendarCellDate</MethodName>
		<LogicDescription/>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>GridCell gridCell</MethodInterface>
		<MethodClassName>GridCalendar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778389">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getFirstSunday</MethodName>
		<LogicDescription/>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>GridCalendar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778390">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>GridScreen</MethodName>
		<LogicDescription><![CDATA[Constructor.
@param record The main record for this screen.
@param itsLocation The location of this component within the parent.
@param parentScreen The parent screen.
@param fieldConverter The field this screen field is linked to.
@param iDisplayFieldDesc Do I display the field desc?]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778391">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription><![CDATA[Constructor.
@param record The main record for this screen.
@param itsLocation The location of this component within the parent.
@param parentScreen The parent screen.
@param fieldConverter The field this screen field is linked to.
@param iDisplayFieldDesc Do I display the field desc?]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778489">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>createTarget</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>INetStream</MethodClassName>
		<LogicSource><![CDATA[String strParse, strTarget;
while (m_fileTemplate.ReadString(strParse))
{
	strParse += "\n";
	this.ParseString(strParse);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778490">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>INetStream</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>fileTemplate, fileTarget, fldParam</MethodReturns>
		<MethodInterface>StdioFile fileTemplate, StdioFile fileTarget, BaseField fldParam</MethodInterface>
		<MethodClassName>INetStream</MethodClassName>
		<LogicSource><![CDATA[m_fileTemplate = fileTemplate;
m_fileTarget = fileTarget;
m_fldParam = fldParam;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778491">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>parseString</MethodName>
		<LogicDescription>Parse this string and write it!</LogicDescription>
		<MethodReturns/>
		<MethodInterface>String strSource</MethodInterface>
		<MethodClassName>INetStream</MethodClassName>
		<LogicSource><![CDATA[while (!strSource.IsEmpty())
{
	int iStart = strSource.Find("[!");
	if (iStart == -1)
	{
		m_fileTarget.writeString(strSource);	// End
		strSource.Empty();
	}
	else
	{
		if (iStart != 0)
			m_fileTarget.writeString(strSource.Left(iStart));
		strSource = strSource.Right(strSource.getLength() - iStart);
		int iEnd = strSource.Find(']');
		if (iEnd == -1)
		{
			m_fileTarget.writeString("Error no closing ']'");
			return;
		}
		String strTarget = strSource.Left(iEnd + 1);
		strSource = strSource.Right(strSource.getLength() - iEnd - 1);
		String strParam = "", strParam1 = "", strParam2 = "", strParam3 = "", strParam4 = "", strParam5 = "";
		int iParam = strTarget.Find('=');
		if (iParam != -1)
		{
			strParam = strTarget.Mid(iParam + 1, strTarget.getLength() - iParam - 2);
			strTarget = strTarget.Left(iParam) + "]";
			int iCount = 1;
			iParam = 0;
			while (iParam != -1)
			{		// More than 1 param?
				iParam = strParam.Find(',');
				String strTemp = strParam;
				if (iParam != -1)
					strTemp = strParam.Left(iParam);
				switch (iCount)
				{
				case 1:
					strParam1 = strTemp;break;
				case 2:
					strParam2 = strTemp;break;
				case 3:
					strParam3 = strTemp;break;
				case 4:
					strParam4 = strTemp;break;
				case 5:
				default:
					strParam5 = strTemp;break;
				}
				iCount++;
				strParam = strParam.Mid(iParam + 1, strParam.getLength() - iParam);
			}
		}
		if (strTarget == "[!Bundle]")
			this.WriteBundle(strParam1, strParam2);
		else if (strTarget == "[!Count]")
			this.WriteCount(strParam);
		else
			m_fileTarget.writeString("Unknown code: " + strTarget);
	}
}
return;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778492">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>writeBundle</MethodName>
		<LogicDescription>Write the bundle info</LogicDescription>
		<MethodReturns/>
		<MethodInterface>String strParam1, String strParam2</MethodInterface>
		<MethodClassName>INetStream</MethodClassName>
		<LogicSource><![CDATA[boolean bAddQty = true;
String strBundleName;
if (m_fldParam != null)
	strBundleName = m_fldParam.getString();
if (strParam1 != "Brochure") if (strParam1 != "Brochures")
	strBundleName = strParam1;
if (strParam2.IsEmpty())
	strParam2 = strParam1;
if ((strParam2 == "false") || (strParam2 == "Brochure"))
	bAddQty = false;
BrochuresByBundleName pBrocByBundle = new BrochuresByBundleName(null);
if (m_fldParam == null)
	pBrocByBundle.WriteHtmlByName(this, strBundleName, bAddQty);
else if (m_fldParam.GetStandardSignature() == kIntegerField)
	pBrocByBundle.WriteHtmlByID(this, m_fldParam, bAddQty);
else
	pBrocByBundle.WriteHtmlByName(this, strBundleName, bAddQty);
delete pBrocByBundle;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778493">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>writeCount</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strParam</MethodInterface>
		<MethodClassName>INetStream</MethodClassName>
		<LogicSource><![CDATA[if (strParam.IsEmpty())
{	// Output count
	String strTemp;
	strTemp.Format("%u", m_iCount);
	m_fileTarget.writeString(strTemp);
	m_iCount++;
}
else
{	// Set new count
	m_iCount = .atoi(strParam);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778494">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>writeString</MethodName>
		<LogicDescription>Write the string</LogicDescription>
		<MethodReturns/>
		<MethodInterface>String string</MethodInterface>
		<MethodClassName>INetStream</MethodClassName>
		<LogicSource>this.ParseString(string);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778512">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>KeyInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
Record recClassInfo = this.getRecord(ClassInfo.kClassInfoFile);
if (recClassInfo != null)
{
	record.setKeyArea(KeyInfo.kKeyFilenameKey);
	SubFileFilter listener = new SubFileFilter(recClassInfo.getField(ClassInfo.kClassName), KeyInfo.kKeyFilename, null, -1, null, -1, true);
	record.addListener(listener);
	recClassInfo.getField(ClassInfo.kClassName).addListener(new FieldReSelectHandler(this));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778513">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>KeyInfoGridScreen</MethodClassName>
		<LogicSource>return new KeyInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778514">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>KeyInfoGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778515">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>KeyInfoScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
Record recClassInfo = this.getRecord(ClassInfo.kClassInfoFile);
if (recClassInfo != null)
{
	record.setKeyArea(KeyInfo.kKeyFilenameKey);
	SubFileFilter listener = new SubFileFilter(recClassInfo.getField(ClassInfo.kClassName), KeyInfo.kKeyFilename, null, -1, null, -1, true);
	record.addListener(listener);
}
MainFieldHandler fieldBeh = new MainFieldHandler(DBConstants.MAIN_KEY_AREA);
this.getMainRecord().getField(KeyInfo.kKeyNumber).addListener(fieldBeh);
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778516">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>KeyInfoScreen</MethodClassName>
		<LogicSource>return new KeyInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778517">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>KeyInfoScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778579">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Layout</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
	screen = new LayoutGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
	screen = new LayoutScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
	screen = new LayoutGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778581">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LayoutGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.PRINT, MenuConstants.PRINT, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778582">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LayoutGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.PRINT, MenuConstants.PRINT, MenuConstants.PRINT, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778583">
		<LastChanged>2009-09-15T22:54:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LayoutGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(MenuConstants.PRINT))
{
	LayoutPrint layoutPrint = new LayoutPrint(this.getMainRecord(), null);
	return true;
}
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778586">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>LayoutGridScreen*2</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recLayout, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>LayoutGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778587">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LayoutGridScreen</MethodClassName>
		<LogicSource>return new LayoutHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778588">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LayoutGridScreen</MethodClassName>
		<LogicSource>return new Layout(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778590">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LayoutGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778592">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recLayout, PrintWriter out</MethodInterface>
		<MethodClassName>LayoutPrint</MethodClassName>
		<LogicSource><![CDATA[boolean bFirstTime = false;
boolean bNewRecord = false;
if (out == null)
{	// First time
	bFirstTime = true;
	if (recLayout == null)
	{
		recLayout = new Layout(Utility.getRecordOwner((Record)null));
		bNewRecord = true;
	}
	recLayout.getField(Layout.kID).setValue(1);
	try	{
		if (!recLayout.seek("="))
		{	// Error - top level not found?
		}
	} catch	(DBException ex)	{
		ex.printStackTrace();
		return;
	}
	String strFileName = recLayout.getField(Layout.kName).toString() + ".idl";
	try	{
		FileOutputStream outStream = new FileOutputStream(strFileName);
		BufferedOutputStream buffOut = new BufferedOutputStream(outStream);
		out = new PrintWriter(buffOut);
	} catch (IOException ex)	{
		ex.printStackTrace();
		return;
	}
}
	
this.printIt(recLayout, out, 0, ";");

if (bFirstTime)
	out.close();
if (bNewRecord)
	recLayout.free();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778593">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>LayoutPrint</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recLayout, PrintWriter out</MethodInterface>
		<MethodClassName>LayoutPrint</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778594">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>printIt</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recLayout, PrintWriter out, int iIndents, String strEnd</MethodInterface>
		<MethodClassName>LayoutPrint</MethodClassName>
		<LogicSource><![CDATA[// Print out the current record
String strName = recLayout.getField(Layout.kName).toString();
String strType = recLayout.getField(Layout.kType).toString();
String strValue = recLayout.getField(Layout.kFieldValue).toString();
String strReturns = recLayout.getField(Layout.kReturnsValue).toString();
String strMax = recLayout.getField(Layout.kMax).toString();
String strDescription = recLayout.getField(Layout.kComment).toString();
boolean bLoop = false;
if ((strType.equalsIgnoreCase("module")) ||
	(strType.equalsIgnoreCase("enum")) ||
	(strType.equalsIgnoreCase("struct")) ||
	(strType.equalsIgnoreCase("interface")))
		bLoop = true;
if (bLoop)
{
	this.println(out, strType + " " + strName, strDescription, iIndents, "");
	String strEndLoop = ";";
	if (strType.equalsIgnoreCase("enum"))
		strEndLoop = null;
	this.println(out, "{", null, iIndents, "");
	Layout recLayoutLoop = new Layout(Utility.getRecordOwner(recLayout));
	recLayoutLoop.setKeyArea(Layout.kParentFolderIDKey);
	recLayoutLoop.addListener(new SubFileFilter(recLayout));
	try	{
		boolean bFirstLoop = true;
		while (recLayoutLoop.hasNext())
		{
			if (strEndLoop == null) if (!bFirstLoop)
				this.println(out, ",", null, 0, "");
			recLayoutLoop.next();
			this.printIt(recLayoutLoop, out, iIndents + 1, strEndLoop);
			bFirstLoop = false;
		}
		if (strEndLoop == null) if (!bFirstLoop)
			this.println(out, "", null, 0, "");	// Carriage return
		recLayoutLoop.free();
		recLayoutLoop = null;
	} catch (DBException ex)	{
		ex.printStackTrace();
	}
	this.println(out, "}", null, iIndents, strEnd);
}
else
{
	if (strType.equalsIgnoreCase("collection"))
		strType = "typedef sequence<" + strValue +">";
	else if (strType.equalsIgnoreCase("method"))
	{
		strType = strReturns + " ";
		strName += "(" + strValue + ")";
	}
	else if (strType.equalsIgnoreCase("comment"))
		strType = "//\t" + strType;
	else if (strValue.length() > 0)
		strName += " = " + strValue;
	this.println(out, strType + " " + strName, strDescription, iIndents, strEnd);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778595">
		<LastChanged>2009-02-12T14:49:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>println</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>PrintWriter out, String string, String strDescription, int iIndents, String strEnd</MethodInterface>
		<MethodClassName>LayoutPrint</MethodClassName>
		<LogicSource><![CDATA[while (iIndents-- > 0)
	out.print("\t");
if (strEnd != null) if ((strDescription != null) && (strDescription.length() > 0))
	strEnd = strEnd + "\t\t// " + strDescription;
if (strEnd != null)
	out.println(string + strEnd);
else
	out.print(string);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778599">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LayoutScreen</MethodClassName>
		<LogicSource>return new Layout(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778600">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LayoutScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778601">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LogicFileGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
Record recClassInfo = this.getRecord(ClassInfo.kClassInfoFile);
if (recClassInfo != null)
{
	record.setKeyArea(LogicFile.kSequenceKey);
	SubFileFilter listener = new SubFileFilter(recClassInfo.getField(ClassInfo.kClassName), LogicFile.kMethodClassName, null, -1, null, -1, true);
	record.addListener(listener);
	recClassInfo.getField(ClassInfo.kClassName).addListener(new FieldReSelectHandler(this));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778602">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LogicFileGridScreen</MethodClassName>
		<LogicSource>return new LogicFile(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778603">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LogicFileGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778604">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LogicFileScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
Record recClassInfo = this.getRecord(ClassInfo.kClassInfoFile);
if (recClassInfo != null)
{
	record.setKeyArea(LogicFile.kSequenceKey);
	SubFileFilter listener = new SubFileFilter(recClassInfo.getField(ClassInfo.kClassName), LogicFile.kMethodClassName, null, -1, null, -1, true);
	record.addListener(listener);
}
MainFieldHandler fieldBeh = new MainFieldHandler(DBConstants.MAIN_KEY_AREA);
this.getMainRecord().getField(LogicFile.kMethodName).addListener(fieldBeh);
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778605">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LogicFileScreen</MethodClassName>
		<LogicSource>return new LogicFile(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778606">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LogicFileScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778609">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>LynxApp</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778610">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>LynxApp</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>LynxApp</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778703">
		<LastChanged>2010-02-20T07:00:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getLink</MethodName>
		<LogicDescription>Get the html code to access this link.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Menus</MethodClassName>
		<LogicSource><![CDATA[String strType = this.getField(Menus.kType).getString();
String strLink = this.getField(Menus.kProgram).getString();
if (strLink != null)
    if (strLink.length() > 1)
        if (strLink.charAt(0) == '.')
            strLink = DBConstants.ROOT_PACKAGE + strLink.substring(1);
String strTitle = this.getField(Menus.kName).getString();
String strParams = Utility.addURLParam(null, strType, strLink); // Default command
if ((strType.equalsIgnoreCase(DBParams.SCREEN))
        || (strType.equalsIgnoreCase(DBParams.RECORD)))
{
    strParams = Utility.addURLParam(null, strType, strLink);
}
else if ((strType.equalsIgnoreCase(MenuConstants.MENUREC)) 
        || (strType.equalsIgnoreCase(MenuConstants.FORM))
        || (strType.equalsIgnoreCase(MenuConstants.GRID)))
{
    strParams = Utility.addURLParam(null, DBParams.RECORD, strLink);
    strParams = Utility.addURLParam(strParams, DBParams.COMMAND, strType);
}
else if (strType.equalsIgnoreCase(DBParams.MENU))
{ // Default is correct
}
else if (strType.equalsIgnoreCase(DBParams.XML))
{
    strParams = Utility.addURLParam(strParams, "title", strTitle);
}
else if (strType.equalsIgnoreCase(DBParams.LINK))
{
    strParams = strLink;
    if ((strLink.indexOf('.') < strLink.indexOf('/'))
        && (strLink.indexOf('.') != -1))
            strParams = "http://" + strLink;
}
else if (strType.equalsIgnoreCase(DBParams.MAIL))
{
    strParams = strLink;
    if (strLink.indexOf("mailto:") != 0)
        strParams = "mailto:" + strLink;
}
else if (strType.equalsIgnoreCase(DBParams.APPLET))
{ // Default is usually okay
    if ((strLink == null) || (strLink.length() == 0))
        strParams = Utility.addURLParam(null, strType, DBParams.BASE_APPLET); // Default command
    if (strParams.indexOf(DBConstants.DEFAULT_SERVLET) != 0)
        strParams = DBConstants.DEFAULT_SERVLET + strParams;   // Make sure applets don't go through cocoon
}
else
{ // Default is okay
}
Map<String,Object> properties = ((PropertiesField)this.getField(Menus.kParams)).loadProperties();
if (properties != null)
    if (DBConstants.BLANK.equalsIgnoreCase((String)properties.get(DBParams.USER_NAME)))
{       // They want me to fill in the user name
    if (this.getTask() != null)
    {
        if (this.getTask().getProperty(DBParams.USER_ID) != null)
            properties.put(DBParams.USER_ID, this.getTask().getProperty(DBParams.USER_ID));
// todo (don) For now, don't pass authentication to remote menu items
//        if (this.getTask().getProperty(DBParams.AUTH_TOKEN) != null)    // This is used instead of a password to authenticate
//            properties.put(DBParams.AUTH_TOKEN, this.getTask().getProperty(DBParams.AUTH_TOKEN));
        properties.remove(DBParams.USER_NAME);
    }
}
if (properties != null)
    if (!strType.equalsIgnoreCase(DBParams.MENU))
        strParams = Utility.propertiesToURL(strParams, properties);
return strParams;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778709">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getIndexOfConverterToPass</MethodName>
		<LogicDescription><![CDATA[Get the index of the converter to use (-1 means use the next converter on the chain).
Should I pass the alternate field (or the main field)?
@param bSetData If true I will be set(ing) the data of this field, if false I will be get(ing) the data.
@return index (-1)= next converter, 0 - n = List of converters.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>boolean bSetData</MethodInterface>
		<MethodClassName>MultipleFieldConverter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778710">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>MultipleFieldConverter</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Converter converter, Converter converterAlt</MethodInterface>
		<MethodClassName>MultipleFieldConverter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778711">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertIndexToValue</MethodName>
		<LogicDescription/>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>int index</MethodInterface>
		<MethodClassName>NumberField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778712">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>convertValueToIndex</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>double value</MethodInterface>
		<MethodClassName>NumberField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778713">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>clone</MethodName>
		<LogicDescription/>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>Object</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778805">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Person</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new DateChangedHandler(Person.kDateChanged));
this.addListener(new SetUserIDHandler(Person.kChangedID, false));

this.getField(Person.kName).addListener(new CopyLastHandler(Person.kNameSort));    // Only if dest is null (ie., company name is null)
this.getField(Person.kNameSort).addListener(new FieldToUpperHandler(null));

this.getField(Person.kPostalCode).addListener(new CopyFieldHandler(Person.kPostalCodeSort));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778942">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField field, String strTargetValue, boolean bTrueIfMatch</MethodInterface>
		<MethodClassName>RadioConverter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778943">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>RadioConverter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField field, String strTargetValue, boolean bTrueIfMatch</MethodInterface>
		<MethodClassName>RadioConverter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778946">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>computeValue</MethodName>
		<LogicDescription><![CDATA[Compute the target value.
@param srcValue The value of this listener's owner.
@return The value to set the target field to.]]></LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>double dSrcValue</MethodInterface>
		<MethodClassName>ReComputeFieldHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778947">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ReComputeFieldHandler</MethodName>
		<LogicDescription><![CDATA[Constructor.
@param iTargetFieldSeq The target field sequence to recompute on field change.]]></LogicDescription>
		<MethodReturns>null, iTargetFieldSeq, null</MethodReturns>
		<MethodInterface>int iTargetFieldSeq</MethodInterface>
		<MethodClassName>ReComputeFieldHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778948">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription><![CDATA[Add all standard file & field behaviors.
Override this to add record listeners and filters.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778949">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>510</Sequence>
		<MethodName>addTables</MethodName>
		<LogicDescription><![CDATA[Override this to Setup all the records for this query.
Only used for querys and abstract-record queries.
Actually adds records not tables, but the records aren't physically
added here, the record's tables are added to my table.
@param The recordOwner to pass to the records that are added.
@see addTable]]></LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>RecordOwner recordOwner</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778950">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>clone</MethodName>
		<LogicDescription><![CDATA[Make an exact copy of this record.
Note This new record does not have a recordowner, so be sure to set one.
@return     a clone of this instance.
@exception  CloneNotSupportedException  if the object's class does not support the <code>Cloneable</code> interface.
@see        java.lang.Cloneable]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778951">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getBaseRecord</MethodName>
		<LogicDescription><![CDATA[Get the actual record to add/edit/etc
Usually used in queryrecords.
@return The physical record.]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778952">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>getBitmap</MethodName>
		<LogicDescription>Get the icon that goes with this file</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778953">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription>Initialization</LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>RecordOwner screen</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778954">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>isQueryRecord</MethodName>
		<LogicDescription>Is this record a table (or query)?</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778955">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseScreen</MethodReturns>
		<MethodInterface>ScreenLocation itsLocation, BasePanel parentScreen, int iDocMode, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778956">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,250</Sequence>
		<MethodName>queryCore</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseScreen screen</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778957">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>Record</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>RecordOwner screen</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778958">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>650</Sequence>
		<MethodName>selectFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778959">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>setupKey</MethodName>
		<LogicDescription>Setup this key area</LogicDescription>
		<MethodReturns>KeyArea</MethodReturns>
		<MethodInterface>int iKeyArea</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778960">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getXMLParser</MethodName>
		<LogicDescription>Get the object that will parse the XML for this screen.</LogicDescription>
		<MethodReturns>XMLParser</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ReportScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16778961">
		<LastChanged>2009-05-23T03:12:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription>Get (or make) the current record for this reference</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>RecordOwner recordOwner</MethodInterface>
		<MethodClassName>ReferenceField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779019">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, String strValue, String strDesc, String strImage, String strCommand, String strToolTip</MethodInterface>
		<MethodClassName>SButtonBox</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779020">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>SButtonBox</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, String strValue, String strDesc, String strImage, String strCommand, String strToolTip</MethodInterface>
		<MethodClassName>SButtonBox</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779023">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getButtonDesc</MethodName>
		<LogicDescription>Get the button description</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>SCheckBox</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779024">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Screen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779025">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>Screen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Screen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779026">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>selectFirstField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Screen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779027">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>setupQuery</MethodName>
		<LogicDescription>Set up the default query for this screen</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Screen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779028">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>setupSField</MethodName>
		<LogicDescription>Add this screen field to this screen</LogicDescription>
		<MethodReturns/>
		<MethodInterface>TField field</MethodInterface>
		<MethodClassName>Screen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779029">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription>Set up all the screen fields</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Screen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779030">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScreenAnchorField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
	{"", "Default"}, 
	{"SET_ANCHOR", "Set Anchor"},
	{"FILL_REMAINDER", "Fill Remainder"},
	{"DONT_SET_ANCHOR", "Dont Set Anchor"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779031">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>controlToField</MethodName>
		<LogicDescription><![CDATA[Move the control's value to the field.
@return An error value.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779032">
		<LastChanged>2009-09-15T22:38:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription><![CDATA[Process the command.
<br />Step 1 - Process the command if possible and return true if processed.
<br />Step 2 - If I can't process, pass to all children (with me as the source).
<br />Step 3 - If children didn't process, pass to parent (with me as the source).
<br />Note: Never pass to a parent or child that matches the source (to avoid an endless loop).
@param strCommand The command to process.
@param sourceSField The source screen field (to avoid echos).
@param iCommandOptions If this command creates a new screen, create in a new window?
@return true if success.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strCommand, ScreenField sourceSField, int iCommandOptions</MethodInterface>
		<MethodClassName>ScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779034">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription><![CDATA[Constructor.
@param itsLocation The location of this component within the parent.
@param parentScreen The parent screen.
@param fieldConverter The field this screen field is linked to.
@param iDisplayFieldDesc Do I display the field desc?]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc</MethodInterface>
		<MethodClassName>ScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779035">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ScreenField</MethodName>
		<LogicDescription><![CDATA[Constructor.
@param itsLocation The location of this component within the parent.
@param parentScreen The parent screen.
@param fieldConverter The field this screen field is linked to.
@param iDisplayFieldDesc Do I display the field desc?]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc</MethodInterface>
		<MethodClassName>ScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779036">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScreenInGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
Record recClassInfo = this.getRecord(ClassInfo.kClassInfoFile);
if (recClassInfo != null)
{
	record.setKeyArea(ScreenIn.kScreenInProgNameKey);
	SubFileFilter listener = new SubFileFilter(recClassInfo.getField(ClassInfo.kClassName), ScreenIn.kScreenInProgName, null, -1, null, -1, true);
	record.addListener(listener);
	recClassInfo.getField(ClassInfo.kClassName).addListener(new FieldReSelectHandler(this));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779037">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScreenInGridScreen</MethodClassName>
		<LogicSource>return new ScreenIn(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779038">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScreenInGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779039">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScreenInScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
Record recClassInfo = this.getRecord(ClassInfo.kClassInfoFile);
if (recClassInfo != null)
{
	record.setKeyArea(ScreenIn.kScreenInProgNameKey);
	SubFileFilter listener = new SubFileFilter(recClassInfo.getField(ClassInfo.kClassName), ScreenIn.kScreenInProgName, null, -1, null, -1, true);
	record.addListener(listener);
}
MainFieldHandler fieldBeh = new MainFieldHandler(DBConstants.MAIN_KEY_AREA);
this.getMainRecord().getField(ScreenIn.kScreenItemNumber).addListener(fieldBeh);
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779040">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScreenInScreen</MethodClassName>
		<LogicSource>return new ScreenIn(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779041">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScreenInScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779042">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScreenLocField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
	{"", "Default"}, 
	{"NEXT_LOGICAL", "Next Logical"},
	{"RIGHT_OF_LAST", "Right of Last"},
	{"BELOW_LAST", "Below Last"},
	{"TOP_NEXT", "Top Next"},
	{"AT_ANCHOR", "At Anchor"},
	{"USE_THIS_LOCATION", "Use This Location"},
	{"RIGHT_WITH_DESC", "Right With Desc"},
	{"NEXT_INPUT_LOCATION", "Next Input Location"},
	{"USE_ROW_COL", "Use Row/Col"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779049">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getBumpValue</MethodName>
		<LogicDescription>Get the increment value</LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface/>
		<MethodClassName>SequenceHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779050">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SequenceHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField fldDest, BaseField fldSource</MethodInterface>
		<MethodClassName>SequenceHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779059">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetDataClass</MethodClassName>
		<LogicSource><![CDATA[String strClass = this.getOwner().getField(FieldData.kFieldClass).toString();
String strType = null;
if (strClass.indexOf("Field") != -1)
{
	strType = strClass.substring(0, strClass.indexOf("Field"));
	if ("Short Integer Double Float Currencys Percent Real Boolean String DateTime".indexOf(strType) == -1)
		strType = null;
	if (strType != null) if ((strType.equals("DateTime")) || (strType.equals("Time")))
		strType = "Date";
	if (strType != null) if ((strType.equals("Currencys")) || (strType.equals("Real")))
		strType = "Double";
	if (strType != null) if (strType.equals("Percent"))
		strType = "Float";
}
if (strType != null)
	this.getOwner().getField(FieldData.kDataClass).setString(strType);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779060">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetFieldOnValid</MethodClassName>
		<LogicSource><![CDATA[super.doValidRecord(bDisplayOption);
m_Field.setString(m_String, bDisplayOption);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779061">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>SetFieldOnValid</MethodName>
		<LogicDescription>Set this field on valid record</LogicDescription>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField field, String string</MethodInterface>
		<MethodClassName>SetFieldOnValid</MethodClassName>
		<LogicSource><![CDATA[m_Field = field;
m_String = string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779069">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>buttonClicked</MethodName>
		<LogicDescription>One of the report buttons were clicked</LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>int iButtonNumber</MethodInterface>
		<MethodClassName>SListCtrl</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779071">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface> Point itsLocation, BaseScreen parentScreen, Converter fieldConverter, short displayFieldDesc, Record query</MethodInterface>
		<MethodClassName>SNextBox</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779072">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>SNextBox</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface> Point itsLocation, BaseScreen parentScreen, Converter fieldConverter, short displayFieldDesc, Record query</MethodInterface>
		<MethodClassName>SNextBox</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779110">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getTreeField</MethodName>
		<LogicDescription>Get the converter for this column</LogicDescription>
		<MethodReturns>Converter</MethodReturns>
		<MethodInterface>int iSelectIndex</MethodInterface>
		<MethodClassName>STreeCtrl</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779111">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setString</MethodName>
		<LogicDescription>Move info to this field</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>StringField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779112">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription>Get the conversion Map</LogicDescription>
		<MethodReturns>String[][]</MethodReturns>
		<MethodInterface/>
		<MethodClassName>StringPopupField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779113">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getFieldValue</MethodName>
		<LogicDescription><![CDATA[Get the value to add (Overidden from SubCountHandler).
If there was a field specified, return the value, otherwise just return a count of 1.
@return The field value.]]></LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface>void</MethodInterface>
		<MethodClassName>SubCountHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779114">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SubCountHandler</MethodName>
		<LogicDescription>Count a sub-field</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recordMain, int iMainFilesField, BaseField fieldMain, boolean bRecountOnSelect, boolean bVerifyOnEOF</MethodInterface>
		<MethodClassName>SubCountHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779115">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SwitchClassSub</MethodClassName>
		<LogicSource><![CDATA[switch (screenNo)
{
case 0:
    return new LogicFileGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
case 1:
    return new FieldDataGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
case 2:
    return new KeyInfoGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
case 3:
    return new ClassFieldsGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
case 4:
    return new ScreenInGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
case 5:
    return new ClassInfoDescScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
case 6:
    return new ClassInfoHelpScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
case 7:
    return new ClassResourceGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
case 8:
    return new ClassIssueGridScreen(null, screenLocation, parentScreen, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779253">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getImageIndex</MethodName>
		<LogicDescription>Get the image offset for this level/rec.</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>int iLevel</MethodInterface>
		<MethodClassName>TreeCtrlHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779254">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription>Fill up a tree control from a query</LogicDescription>
		<MethodReturns/>
		<MethodInterface>CSTreeCtrl m_TreeCtrl, boolean bRequeryOnFill</MethodInterface>
		<MethodClassName>TreeCtrlHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779255">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>TreeCtrlHandler</MethodName>
		<LogicDescription>Fill up a tree control from a query</LogicDescription>
		<MethodReturns/>
		<MethodInterface>CSTreeCtrl m_TreeCtrl, boolean bRequeryOnFill</MethodInterface>
		<MethodClassName>TreeCtrlHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779336">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getUserID</MethodName>
		<LogicDescription>Get the current User's ID</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UserField</MethodClassName>
		<LogicSource><![CDATA[int iUserID = -1;
String strUserID = DBConstants.BLANK;
if (this.getRecord().getRecordOwner() != null)
	if (this.getRecord().getRecordOwner().getTask() != null)
		if (this.getRecord().getRecordOwner().getTask().getApplication() != null)
	strUserID = ((BaseApplication)this.getRecord().getRecordOwner().getTask().getApplication()).getUserID();
try	{
	iUserID = Integer.parseInt(strUserID);
	if (iUserID == 0)
		iUserID = -1;
} catch (NumberFormatException e)	{
	iUserID = -1;
}
return iUserID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779337">
		<LastChanged>2009-06-05T12:48:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserField</MethodClassName>
		<LogicSource><![CDATA[if (this.getRecord() instanceof Person)
    this.addListener(new UserContactHandler(null));
return new UserInfo(recordOwner);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779338">
		<LastChanged>2009-06-05T12:48:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), -1, UserInfo.kUserName, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779344">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserFileHandler</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getOwner().isOpen())		// Don't do first time!
{
    String strUserID = ((BaseApplication)this.getOwner().getRecordOwner().getTask().getApplication()).getUserID();
    int iUserID = -1;
    if ((strUserID != null) && (strUserID.length() > 0))
        iUserID = Integer.parseInt(strUserID);
    this.getOwner().getField(UserInfo.kID).setValue(iUserID);
    String strOldKey = this.getOwner().getKeyName();
    try	{
        this.getOwner().setKeyArea(UserInfo.kIDKey);
        if (!this.getOwner().seek("="))
        {
            this.getOwner().addNew();	// Make a new one
        }
    } catch (DBException ex)	{
        ex.printStackTrace();
    } finally   {
        this.getOwner().setKeyArea(strOldKey);
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779345">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserFileHandler</MethodClassName>
		<LogicSource><![CDATA[super;
if (owner == null)
    return;
try	{		// Open this table and move to the control record
    if (!this.getOwner().isOpen())
        this.getOwner().open();		// Open the control file
    if (this.getOwner().getEditMode() == Constants.EDIT_NONE)
        this.doNewRecord(true);		// Read the control file
} catch (DBException e)	{
    return;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779346">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserFilter</MethodClassName>
		<LogicSource>return new UserInfo(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779347">
		<LastChanged>2009-09-15T22:42:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserFilter</MethodClassName>
		<LogicSource><![CDATA[UserInfo user = (UserInfo)this.makeReferenceRecord();
user.addListener(new StringSubFileFilter(Integer.toString(UserGroup.RES_USER), UserInfo.kUserGroupID, null, -1, null, -1));
Converter convName = new FirstMLastConverter(user, -1, UserInfo.kFirstName, -1, UserInfo.kLastName);

ScreenField screenField = this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, user, UserInfo.kUserNameKey, convName, true, false);
new SCannedBox(targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, converter, ThinMenuConstants.HOME, ScreenConstants.DONT_DISPLAY_FIELD_DESC, this)
{
    public boolean doCommand(String strCommand, ScreenField sourceSField, int iCommandOptions)
    {
    	boolean bHandled = false;
    	if (ThinMenuConstants.HOME.equals(strCommand))
    	{
    		bHandled = true;
    		String strUserID = ((BaseApplication)getField().getRecord().getRecordOwner().getTask().getApplication()).getUserID();
    		if (strUserID != null)
    			if (strUserID.length() > 0)
    				getField().setString(strUserID, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
    	}
    	if (!bHandled)
    		bHandled = super.doCommand(strCommand, sourceSField, iCommandOptions);
    	return bHandled;
    }
};

return screenField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779348">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserHomeField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
{MAIN, "Default home page [web]"}, 
{APP, "Intranet home page"},
{AGENT, "Travel Agent home page"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779349">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserJavaField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
	{DEFAULT, "Use default Java"}, 
	{WEBSTART, "Java Web Start"}, 
	{PLUG_IN, "JDK Plug-in"}, 
	{YES, "Java Applet Tags"},
	{NO, "No Java - Use HTML"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779350">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserLanguageField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {DEFAULT, "(default)"}, 
    {ENGLISH, "English"}, 
    {SPANISH, "Español"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779351">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserLogosField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
{HOME_PAGE_ONLY, "Home page only"},
{NO, "Never"}, 
{YES, "Always"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779352">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserMenubarField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
{YES, "Yes"}, 
{NO, "No"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779353">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns>String[][]</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UserMenuField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
{DEFAULT, "Default menu [web]"}, 
{APP, "Intranet menu"},
{AGENT, "Travel Agent menu"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779354">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserNavMenusField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
{FULL_MENU, "Full nav-area"},
{NO_ICONS, "No left nav-area"}, 
{ICONS_ONLY, "Nav icons only"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779357">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPreferenceScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779358">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ValidateDigit</MethodClassName>
		<LogicSource><![CDATA[int value = (int)((NumberField)m_Owner).getValue();
if ((value / 10) % 7 != value - (value / 10  10))
	return DBConstants.ERROR_RETURN;
return super.FieldChanged(bDisplayOption, iMoveMode);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779426">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getDefaultXML</MethodName>
		<LogicDescription>If no template is supplied, get the default XML code.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>XMLParser</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779427">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getRecordOwner</MethodName>
		<LogicDescription>Get the screen</LogicDescription>
		<MethodReturns>RecordOwner</MethodReturns>
		<MethodInterface/>
		<MethodClassName>XMLParser</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779428">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>getTagData</MethodName>
		<LogicDescription>Return the string between these XML tags</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strData, String strTag</MethodInterface>
		<MethodClassName>XMLParser</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779429">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>parseHtmlData</MethodName>
		<LogicDescription>Output this screen using HTML</LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>PrintWriter out, String str</MethodInterface>
		<MethodClassName>XMLParser</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779430">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>parseHtmlTag</MethodName>
		<LogicDescription>Process this XML Tag</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>PrintWriter out, String strTag, String strParams, String strData</MethodInterface>
		<MethodClassName>XMLParser</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779431">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>printHtmlData</MethodName>
		<LogicDescription><![CDATA[Output this screen using HTML/XML.
Override this method.]]></LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>PrintWriter out, InputStream streamIn</MethodInterface>
		<MethodClassName>XMLParser</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779432">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>XMLParser</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>void</MethodReturns>
		<MethodInterface>RecordOwner screen</MethodInterface>
		<MethodClassName>XMLParser</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779439">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779440">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfo</MethodClassName>
		<LogicSource><![CDATA[super;
this.getField(UserInfo.kUserName).addListener(new CheckNonNumericListener(null));
this.addListener(new ReadOnlyRecordHandler(UserInfo.kReadOnlyRecord, true));
this.addListener(new FileListener(null)
{
    /**
     * Make sure the user group ID is non-null (set it to the anon group id)
     */
    public int doRecordChange(FieldInfo field, int iChangeType, boolean bDisplayOption)
    { // Read a valid record
        switch (iChangeType)
        {
            case DBConstants.ADD_TYPE:
            case DBConstants.UPDATE_TYPE:
                if (this.getOwner().getField(UserInfo.kUserGroupID).isNull())
                    if (this.getOwner().getRecordOwner() != null)
                {
                    Record recUserControl = this.getOwner().getRecordOwner().getRecord(UserControl.kUserControlFile);
                    if (recUserControl == null)
                    {
                        recUserControl = new UserControl(this.getOwner().getRecordOwner());
                        this.getOwner().addListener(new FreeOnFreeHandler(recUserControl));
                    }
                    this.getOwner().getField(UserInfo.kUserGroupID).moveFieldToThis(recUserControl.getField(UserControl.kAnonUserGroupID));
                }
                break;
        }
        return super.doRecordChange(field, iChangeType, bDisplayOption);        // Initialize the record
    }
    
});]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779516">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription>Override this to open the main file for this session</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseSession</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779517">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription>Override this to open other session files</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseSession</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779518">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription>Add behaviors to this session</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseSession</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779519">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription>Add the screen record to this session</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseSession</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779531">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>820</Sequence>
		<MethodName>addHiddenParams</MethodName>
		<LogicDescription>Add any hidden params to the form</LogicDescription>
		<MethodReturns/>
		<MethodInterface>PrintWriter out</MethodInterface>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779532">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>760</Sequence>
		<MethodName>printHtmlToolbars</MethodName>
		<LogicDescription>Render the toolbars in HTML</LogicDescription>
		<MethodReturns/>
		<MethodInterface>PrintWriter out</MethodInterface>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779545">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>750</Sequence>
		<MethodName>getHtmlOptions</MethodName>
		<LogicDescription><![CDATA[Get the options for displaying this screen in HTML format.
Need the position of the toolbars and whether the detail should be displayed.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779546">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>770</Sequence>
		<MethodName>processHtmlMove</MethodName>
		<LogicDescription>Move the HTML input format to the fields and do the action requested.</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>PrintWriter out, boolean bDefaultParamsFound</MethodInterface>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779547">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>610</Sequence>
		<MethodName>onAdd</MethodName>
		<LogicDescription>Process the "Add" toolbar command.</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779559">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>BaseRecordOwner</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>BaseRecordOwner</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779560">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription>Open the main file</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseRecordOwner</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779561">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription>Open the other files</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseRecordOwner</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779562">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription>Add the behaviors</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseRecordOwner</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779563">
		<LastChanged>2010-04-29T10:44:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription>Add the screen record</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseRecordOwner</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779564">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BaseProcess</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>RecordOwnerParent taskParent, Record recordMain, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BaseProcess</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779571">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassResourceGridScreen</MethodClassName>
		<LogicSource>return new ClassResource(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779573">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassResourceGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779574">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassResourceGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
Record classInfo = this.getRecord(ClassInfo.kClassInfoFile);
if (classInfo != null)
{
	SubFileFilter listener = new SubFileFilter(classInfo.getField(ClassInfo.kClassName), ClassResource.kClassName, null, -1, null, -1, true);
	record.addListener(listener);
	classInfo.getField(ClassInfo.kClassName).addListener(new FieldReSelectHandler(this));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779575">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassResourceScreen</MethodClassName>
		<LogicSource>return new ClassResource(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779576">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassResourceScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779577">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassResourceScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
Record recClassInfo = this.getRecord(ClassInfo.kClassInfoFile);
if (recClassInfo != null)
{
    record.setKeyArea(ClassFields.kClassInfoClassNameKey);
    SubFileFilter listener = new SubFileFilter(recClassInfo.getField(ClassInfo.kClassName), ClassFields.kClassInfoClassName, null, -1, null, -1, true);
    record.addListener(listener);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779591">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>layoutPrintControl</MethodName>
		<LogicDescription>Layout the special print control (usually a JPanel).</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Component control</MethodInterface>
		<MethodClassName>CustomReportScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779593">
		<LastChanged>2010-02-10T02:34:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoScreen</MethodClassName>
		<LogicSource><![CDATA[boolean bFlag = false;

if ((strCommand.indexOf("FileHdrScreen") != -1)
    || (strCommand.indexOf("LayoutScreen") != -1))
        iCommandOptions = ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROSWER;
if ((strCommand.indexOf("ExportRecordsToXml") != -1)
    || (strCommand.indexOf("AccessGridScreen") != -1))
{
    iCommandOptions = ScreenConstants.USE_NEW_WINDOW | ScreenConstants.DONT_PUSH_TO_BROSWER;
    strCommand = Utility.addURLParam(strCommand, DBParams.RECORD, this.getMainRecord().getField(ClassInfo.kClassName).toString());
    String packageName = ((ClassInfo)this.getMainRecord()).getPackageName();
    strCommand = Utility.addURLParam(strCommand, "package", packageName);
    strCommand = Utility.addURLParam(strCommand, "project", Converter.stripNonNumber(this.getMainRecord().getField(ClassInfo.kClassProjectID).toString()));
}

if (bFlag == false)
    bFlag = super;  // This will send the command to my parent
return bFlag;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779604">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseFolderScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779605">
		<LastChanged>2009-09-15T22:40:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseFolderScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
	return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else
	return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779606">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Menus</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
	screen = new MenusGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
	screen = new MenusScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
	screen = new MenusGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MENU_MODE) != 0)
	screen = new MenuScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
	screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779607">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>MenusGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>MenusGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779608">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenusGridScreen</MethodClassName>
		<LogicSource>return new Menus(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779610">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderScreen</MethodClassName>
		<LogicSource>return new Folder(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779611">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenusScreen</MethodClassName>
		<LogicSource>return new Menus(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779891">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseFolderGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779892">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseFolderGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779893">
		<LastChanged>2009-09-15T22:40:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseFolderGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
{ // Make sure if the use wants to select a record to re-connect the selection
    Record targetRecord = null;
    int iMode = ScreenConstants.DETAIL_MODE;
    OnSelectHandler listener = (OnSelectHandler)this.getMainRecord().getListener(OnSelectHandler.class);
    if (listener != null)
    {
        targetRecord = listener.getRecordToSync();
        this.getMainRecord().removeListener(listener, false);
        iMode = iMode | ScreenConstants.SELECT_MODE;
    }
    BasePanel screen = this.onForm(null, iMode, true, iCommandOptions, null);
    if (targetRecord != null)
        screen.setSelectQuery(targetRecord, false);
    return true;
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779894">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>7</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseFolderGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (m_recHeader != null)
{
	m_recHeader.free();
	m_recHeader = null;
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779896">
		<LastChanged>2010-02-17T05:30:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>BaseFolderGridScreen*2</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns>recHeader, record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BaseFolderGridScreen</MethodClassName>
		<LogicSource>m_recHeader = recHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779897">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseFolderGridScreen</MethodClassName>
		<LogicSource>return super;//+new BaseFolderHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);// Override this</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779899">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779900">
		<LastChanged>2010-02-17T05:23:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderGridScreen</MethodClassName>
		<LogicSource><![CDATA[// This beginning code is a trick to make the grid screen think that a zero record is the header.
this.setProperty("fakeHeader", DBConstants.FALSE);
if (m_recHeader != null)
    if ((m_recHeader.getEditMode() == DBConstants.EDIT_ADD) || (m_recHeader.getEditMode() == DBConstants.EDIT_NONE))
        if (this.getProperty(DBParams.HEADER_OBJECT_ID) == null)
        {
            this.setProperty("fakeHeader", DBConstants.TRUE);
            this.setProperty(DBParams.HEADER_OBJECT_ID, "0");
            if (m_recHeader.getCounterField() != null)
                if (m_recHeader.getCounterField().getDefault() == null)
            {
                m_recHeader.getCounterField().setDefault(new Integer(0)); // This will guarantee that the sub record's parent field is non-null
                try {
                    m_recHeader.addNew();
                } catch (DBException ex) {
                }
            }
        }
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779901">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>FolderGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>FolderGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779902">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderGridScreen</MethodClassName>
		<LogicSource>return new FolderHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779903">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderGridScreen</MethodClassName>
		<LogicSource>return new Folder(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779904">
		<LastChanged>2010-02-17T05:23:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
if (m_recHeader == null)
{
	Record record = this.getMainRecord();
	try	{
		m_recHeader = (Record)record.clone();	// Do not add to screen's list - will mix with other file
	} catch (CloneNotSupportedException ex)	{
		ex.printStackTrace();
	}
	// Do not clone the listeners,
	while (m_recHeader.getListener() != null)
	{
		m_recHeader.removeListener(m_recHeader.getListener(), true);
	}
	m_recHeader.addListeners();	// Just use the standard listeners
}
return m_recHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779905">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779906">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getParentScreen() instanceof GridScreen)
{
	Record recHeader = ((GridScreen)this.getParentScreen()).getHeaderRecord();
	recHeader.getField(Folder.kName).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779907">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderField</MethodClassName>
		<LogicSource>return new Folder(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779908">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Folder</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
	screen = new FolderGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
	screen = new FolderScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
	screen = new FolderGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
	screen = super;
return screen;
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779910">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenusGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779911">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenusScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779912">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenusSession</MethodClassName>
		<LogicSource><![CDATA[super;
try   {
    this.doRemoteAction(DBConstants.BLANK, null); // Initial default menu
} catch (Exception ex)  {
    // Never
}
Record recMenus = this.getMainRecord();
recMenus.setOpenMode(DBConstants.OPEN_NORMAL);  // Double check to see that I don't update on change
recMenus.addListener(new FileListener(null)
{
    /**
     * Called when a valid record is read from the table/query.
     * @param bDisplayOption If true, display any changes.
     */
    public void doValidRecord(boolean bDisplayOption) // init this field override for other value
    {   // Convert the XMLProperties field to a URL type string (yikes... in the same field)
        Record recMenus = this.getOwner();
        XMLPropertiesField field = (XMLPropertiesField)recMenus.getField(Menus.kParams);
        Map<String,Object> properties = field.getProperties();
        String strURL = null;
        strURL = Utility.propertiesToURL(strURL, properties);
        if (strURL != null)
            if (strURL.length() > 0)
                if (strURL.charAt(0) == '?')
                    strURL = strURL.substring(1);
        field.setString(strURL);
        super.doValidRecord(bDisplayOption);
    }
});]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779913">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenusSession</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> propMenu = properties; // I know for a fact this is a Properties object.
if (propMenu == null)
    propMenu = new Hashtable<String,Object>();
if (strCommand != null)
    if (strCommand.length() > 0)
        if (strCommand.indexOf('=') == -1)
            strCommand = DBParams.MENU + '=' + strCommand;  // If no param specified, it is a menu=
Utility.parseArgs(propMenu, strCommand);
String strMenu = (String)propMenu.get(DBParams.MENU);
if ((strMenu == null) || (strMenu.length() == 0))
    strMenu = this.getProperty(DBParams.MENU);
if ((strMenu == null) || (strMenu.length() == 0))
    strMenu = this.getProperty(DBParams.HOME);
if ((strMenu == null) || (strMenu.length() == 0))
    strMenu = HtmlConstants.MAIN_MENU_KEY;

if (strMenu != null)
{
    this.setupSubMenus(strMenu);
    return Boolean.TRUE;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779914">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenusSession</MethodClassName>
		<LogicSource>return new Menus(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779915">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>setupSubMenus</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strMenu</MethodInterface>
		<MethodClassName>MenusSession</MethodClassName>
		<LogicSource><![CDATA[Record recMenu = this.getMainRecord();
try	{
	String strCommandNoCommas = Utility.replace(strMenu, ",", null);	// Get any commas out
	boolean bIsNumeric = Utility.isNumeric(strCommandNoCommas);
	if (bIsNumeric)
	{
		recMenu.setKeyArea(Menus.kIDKey);
		recMenu.getField(Menus.kID).setString(strCommandNoCommas);
		bIsNumeric = recMenu.seek("=");
	}
	if (!bIsNumeric)
	{
		recMenu.setKeyArea(Menus.kCodeKey);
		recMenu.getField(Menus.kCode).setString(strMenu);
		if (!recMenu.seek("="))
		{		// Not found, try the default main menu
			recMenu.getField(Menus.kCode).setString(HtmlConstants.MAIN_MENU_KEY);
			recMenu.seek("=");
		}
	}
} catch (DBException ex)	{
	ex.printStackTrace();	// Never
}
String strParentID = recMenu.getField(Menus.kID).toString();
BaseListener listener = recMenu.getListener(StringSubFileFilter.class.getName());
if (listener != null)
{	// Should just change the string
	recMenu.removeListener(listener, true);
}
recMenu.setKeyArea(Menus.kParentFolderIDKey);
recMenu.addListener(new StringSubFileFilter(strParentID, Menus.kParentFolderID, null, -1, null, -1));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779917">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegistrationScreen</MethodClassName>
		<LogicSource>return new Registration(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779918">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegistrationGridScreen</MethodClassName>
		<LogicSource>return new Registration(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779920">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegistrationGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779921">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegistrationScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779923">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseFolderScreen</MethodClassName>
		<LogicSource><![CDATA[if (m_recHeader != null)
{
	m_recHeader.free();
	m_recHeader = null;
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779925">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseFolderScreen</MethodClassName>
		<LogicSource>return super; //+new BaseFolderHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);// Override this</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779927">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderScreen</MethodClassName>
		<LogicSource>return new FolderHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779928">
		<LastChanged>2010-02-17T05:19:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderScreen</MethodClassName>
		<LogicSource><![CDATA[if (m_recHeader == null)
{
	Record record = this.getMainRecord();
	try	{
		m_recHeader = (Record)record.clone();	// Do not add to screen's list - will mix with other file
	} catch (CloneNotSupportedException ex)	{
		ex.printStackTrace();
	}
	// Do not clone the listeners,
	while (m_recHeader.getListener() != null)
	{
		m_recHeader.removeListener(m_recHeader.getListener(), true);
	}
	m_recHeader.addListeners();	// Just use the standard listeners
}
return m_recHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779929">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>MenusScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>MenusScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779930">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>FolderScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>FolderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779931">
		<LastChanged>2010-02-17T05:28:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BaseFolderScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>recHeader, record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BaseFolderScreen</MethodClassName>
		<LogicSource>m_recHeader = recHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779934">
		<LastChanged>2010-02-27T07:35:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegistrationGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strJob = null;
strJob = Utility.addURLParam(strJob, DBParams.TASK, ProcessRunnerTask.class.getName()); // Screen class
strJob = Utility.addURLParam(strJob, DBParams.PROCESS, WriteResources.class.getName());
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.PRINT, MenuConstants.PRINT, strJob, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779940">
		<LastChanged>2009-09-15T23:25:56</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenusGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
if (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK))
{
    int iDocMode = ScreenConstants.MAINT_MODE;
    BasePanel parentScreen = this.getParentScreen();
    ScreenLocation itsLocation = null;
    if ((iCommandOptions & ScreenConstants.USE_NEW_WINDOW) == ScreenConstants.USE_SAME_WINDOW)	// Use same window
        itsLocation = this.getScreenLocation();
    else
        parentScreen = Screen.makeWindow(this.getTask().getApplication());

    Record record = this.getMainRecord();
    Record recordNew = null;
    try   {
        recordNew = (Record)record.clone();
        boolean bRefreshIfChanged = false;
        if ((iCommandOptions & ScreenConstants.USE_NEW_WINDOW) == ScreenConstants.USE_NEW_WINDOW)
            bRefreshIfChanged = true;    // If I use the same window, I will free this record, so no need to refresh
        if ((record.getEditMode() == Constants.EDIT_CURRENT) || (record.getEditMode() == Constants.EDIT_IN_PROGRESS))
            recordNew.readSameRecord(record, true, bRefreshIfChanged);
        else
            recordNew.addNew();
    } catch (CloneNotSupportedException ex)   {
        return false;
    } catch (DBException ex)    {
        ex.printStackTrace();
    }

    Record recHeader = m_recHeader;
    m_recHeader = null;   // Pass header, don't close it on free

    if ((iCommandOptions & ScreenConstants.USE_NEW_WINDOW) == ScreenConstants.USE_SAME_WINDOW)	// Use same window
        this.free();
    new MenusScreen(recHeader, recordNew, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);
    return true;
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779950">
		<LastChanged>2010-02-11T12:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccessScreen</MethodClassName>
		<LogicSource><![CDATA[String strRecord = this.getProperty(DBParams.RECORD);
String strPackage = this.getProperty("package");
if ((strRecord == null) || (strPackage == null))
    return null;
if (strPackage.startsWith("."))
    strPackage = DBConstants.ROOT_PACKAGE.substring(0, DBConstants.ROOT_PACKAGE.length() - 1) + strPackage;   // Never
String strRecordClassName = strPackage + '.' + strRecord;
String oldBaseTableProperty = this.getTask().getApplication().getProperty(DBConstants.BASE_TABLE_ONLY);
this.getTask().getApplication().setProperty(DBConstants.BASE_TABLE_ONLY, DBConstants.TRUE);
Record record = Record.makeRecordFromClassName(strRecordClassName, this);
record.setEnableListeners(false);
record.setEnableFieldListeners(false);
// Restore properties
this.getTask().getApplication().setProperty(DBConstants.BASE_TABLE_ONLY, oldBaseTableProperty);   // Make sure system record owner property is reset also
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779951">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccessScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779952">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccessScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
BaseField field = record.getField(DBConstants.MAIN_FIELD);
if (field == record.getCounterField())
	field.setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), this, ScreenConstants.DEFAULT_DISPLAY);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779953">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccessScreen</MethodClassName>
		<LogicSource><![CDATA[String strCommand = super;
strCommand = Utility.addURLParam(strCommand, DBParams.RECORD, this.getProperty(DBParams.RECORD));
strCommand = Utility.addURLParam(strCommand, "package", this.getProperty("package"));
return strCommand;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779954">
		<LastChanged>2010-04-09T14:17:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccessScreen</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.FORM))
    || (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
{
    String strHandle = null;
    if (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK))
    {
        try   {
            strHandle = this.getMainRecord().getHandle(DBConstants.OBJECT_ID_HANDLE).toString();
        } catch (DBException ex)    {
            strHandle = null; // Ignore error - just go to form
        }
    }
    strCommand = Utility.addURLParam(null, DBParams.SCREEN, Constants.ROOT_PACKAGE + AccessScreen.class.getName());    // Screen class
    strCommand = Utility.addURLParam(strCommand, DBParams.RECORD, this.getProperty(DBParams.RECORD));
    strCommand = Utility.addURLParam(strCommand, "package", this.getProperty("package"));
    if (strHandle != null)
        strCommand = Utility.addURLParam(strCommand, DBConstants.STRING_OBJECT_ID_HANDLE, strHandle);
}
else if ("Delete all".equalsIgnoreCase(strCommand))
{
    Record record = this.getMainRecord();
    record.close();
    try {
        while (record.hasNext())
        {
            Record rec = record.next();
            rec.edit();
            rec.remove();
        }
    } catch (DBException ex)    {
        ex.printStackTrace();
    }
}
return super;	// This will send the command to my parent]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779955">
		<LastChanged>2010-02-11T12:01:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccessGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strRecord = this.getProperty(DBParams.RECORD);
String strPackage = this.getProperty("package");
if ((strRecord == null) || (strPackage == null))
    return null;
if (strPackage.startsWith("."))
    strPackage = DBConstants.ROOT_PACKAGE.substring(0, DBConstants.ROOT_PACKAGE.length() - 1) + strPackage;   // Never
String strRecordClassName = strPackage + '.' + strRecord;
String oldBaseTableProperty = this.getTask().getApplication().getProperty(DBConstants.BASE_TABLE_ONLY);
this.getTask().getApplication().setProperty(DBConstants.BASE_TABLE_ONLY, DBConstants.TRUE);
Record record = Record.makeRecordFromClassName(strRecordClassName, this);
record.setEnableListeners(false);
record.setEnableFieldListeners(false);
// Restore properties
this.getTask().getApplication().setProperty(DBConstants.BASE_TABLE_ONLY, oldBaseTableProperty);   // Make sure system record owner property is reset also
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779956">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccessGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
BaseField field = record.getField(DBConstants.MAIN_FIELD);
if (field == record.getCounterField())
	this.addColumn(field);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779957">
		<LastChanged>2010-04-09T14:17:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccessGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((strCommand.equalsIgnoreCase(MenuConstants.FORM))
	|| (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK)))
{
	String strHandle = null;
	if (strCommand.equalsIgnoreCase(MenuConstants.FORMLINK))
	{
		try	{
			Record record = this.getMainRecord();
			if ((record.getEditMode() == DBConstants.EDIT_CURRENT)
				|| (record.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
					strHandle = record.getHandle(DBConstants.OBJECT_ID_HANDLE).toString();
		} catch (DBException ex)	{
			strHandle = null;	// Ignore error - just go to form
		}
	}
	strCommand = Utility.addURLParam(null, DBParams.SCREEN, AccessScreen.class.getName());	// Screen class
	strCommand = Utility.addURLParam(strCommand, DBParams.RECORD, this.getProperty(DBParams.RECORD));
	strCommand = Utility.addURLParam(strCommand, "package", this.getProperty("package"));
	if (strHandle != null)
		strCommand = Utility.addURLParam(strCommand, DBConstants.STRING_OBJECT_ID_HANDLE, strHandle);
}
return super;	// This will send the command to my parent]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779958">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccessGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strCommand = super;
strCommand = Utility.addURLParam(strCommand, DBParams.RECORD, this.getProperty(DBParams.RECORD));
strCommand = Utility.addURLParam(strCommand, "package", this.getProperty("package"));
return strCommand;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16779977">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>setSelected</MethodName>
		<LogicDescription>Set all the fields to selected/not selected</LogicDescription>
		<MethodReturns/>
		<MethodInterface>boolean bSelect</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780022">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(CalendarEntry.kStartDateTimeKey);
this.setEditing(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780023">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarGridScreen</MethodClassName>
		<LogicSource>return new CalendarEntry(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780024">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
//this.addColumn(new MergeConverter(record, Animal.kName));
this.addColumn(new MultipleTableFieldConverter(record, CalendarEntry.kStartDateTime));
this.addColumn(new MultipleTableFieldConverter(record, CalendarEntry.kEndDateTime));
this.addColumn(new MultipleTableFieldConverter(record, CalendarEntry.kDescription));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780027">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnnivMasterField</MethodClassName>
		<LogicSource>return new AnnivMaster(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780028">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnnivMasterField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), AnnivMaster.kIDKey, AnnivMaster.kDescription, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780039">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doGetData</MethodName>
		<LogicDescription>Get the raw data from this behavior's owner's field</LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface/>
		<MethodClassName>FieldListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780040">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription>Free the resources</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FieldListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780042">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>AutoTask</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Application application,String strParams</MethodInterface>
		<MethodClassName>AutoTask</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780077">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>BaseListener</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Object owner</MethodInterface>
		<MethodClassName>BaseListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780078">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>FileListener</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>FileListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780079">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>FieldListener</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField field</MethodInterface>
		<MethodClassName>FieldListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780080">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SwitchSubScreenHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField field, BasePanel screenParent, BasePanel subScreen</MethodInterface>
		<MethodClassName>SwitchSubScreenHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780081">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns>BasePanel</MethodReturns>
		<MethodInterface>BasePanel parentScreen, ScreenLocation screenLocation, Map&lt;String,Object&gt; properties, int screenNo</MethodInterface>
		<MethodClassName>SwitchSubScreenHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780096">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarModelSession</MethodClassName>
		<LogicSource>return new CalendarEntry(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780098">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BaseSession</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseSession parentSessionObject, Record record, Object objectID</MethodInterface>
		<MethodClassName>BaseSession</MethodClassName>
		<LogicSource/>
		<LogicThrows>RemoteException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780122">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>AutoRecordMessageListener</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseMessageReceiver messageHandler, Record record, boolean bUpdateRecord, BaseMessageFilter messageFilter</MethodInterface>
		<MethodClassName>AutoRecordMessageListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780124">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>handleMessage</MethodName>
		<LogicDescription>Handle the incoming message</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BaseMessage message</MethodInterface>
		<MethodClassName>BaseMessageListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780243">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>printReport</MethodName>
		<LogicDescription><![CDATA[Output this complete report to the output file.
Display the headers, etc. then:
<ol>
 - Parse any parameters passed in and set the field values.
 - Process any command (such as move=Next).
 - Render this screen using the view (by calling printxxmlScreen()).
</ol>
@param out The output stream.
@exception DBException File exception.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>PrintWriter out</MethodInterface>
		<MethodClassName>ScreenFieldViewAdapter</MethodClassName>
		<LogicSource/>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780244">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getHTMLAlignment</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>HScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780245">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>getHtmlFieldParam</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>HScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780246">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>170</Sequence>
		<MethodName>moveHtmlInput</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strSuffix</MethodInterface>
		<MethodClassName>HScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780247">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>isHtmlInputField</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>HScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780248">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>140</Sequence>
		<MethodName>getSFieldHtmlParam</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>HScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780249">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>230</Sequence>
		<MethodName>setHtmlParamString</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>String strHtmlParamString</MethodInterface>
		<MethodClassName>HScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780250">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>180</Sequence>
		<MethodName>printHtmlControlDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>PrintWriter out, String strFieldDesc, int iHtmlAttributes</MethodInterface>
		<MethodClassName>HScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780251">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>220</Sequence>
		<MethodName>printHtmlInputControl</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>PrintWriter out, String strFieldDesc, String strFieldName, String strSize, String strMaxSize, String strValue, String strControlType, int iHtmlAttributes</MethodInterface>
		<MethodClassName>HScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780253">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>160</Sequence>
		<MethodName>isHtmlToolbar</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>HScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780254">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>getHtmlString</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>boolean bDisplayFormat</MethodInterface>
		<MethodClassName>HScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780255">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>190</Sequence>
		<MethodName>printHtmlDisplayControl</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>PrintWriter out</MethodInterface>
		<MethodClassName>HScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780256">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>210</Sequence>
		<MethodName>printHtmlHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>PrintWriter out</MethodInterface>
		<MethodClassName>HScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780257">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupScreenFieldView</MethodName>
		<LogicDescription><![CDATA[Set up the physical control (that implements Component).
@param bEditableControl If false, set up a read-only control.
@return The new view.]]></LogicDescription>
		<MethodReturns>ScreenFieldView</MethodReturns>
		<MethodInterface>boolean bEditableControl</MethodInterface>
		<MethodClassName>ScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780259">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ScreenFieldViewAdapter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>ScreenField model,boolean bEditableControl</MethodInterface>
		<MethodClassName>ScreenFieldViewAdapter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780260">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addHiddenParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>PrintWriter out</MethodInterface>
		<MethodClassName>HBasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780263">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>processServletCommand</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>HBasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780268">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnniversaryTableSession</MethodClassName>
		<LogicSource>return new AnnivMaster(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780269">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnniversaryTableSession</MethodClassName>
		<LogicSource><![CDATA[super;
Debug.pl("AnniversaryTableSession/68 + Add Listeners here");
// +++ Add a behavior to scan the newly added anniversary and add the actual entries.]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780270">
		<LastChanged>2009-06-05T13:38:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addPropertyListeners</MethodName>
		<LogicDescription>Add The listeners to sync the property field with the virtual fields.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfo</MethodClassName>
		<LogicSource><![CDATA[BaseField fldProperties = this.getField(PropertiesRecord.kProperties);
if (fldProperties.getListener(CopyConvertersHandler.class) != null)
    return;

this.addPropertiesFieldBehavior(this.getField(UserInfo.kFrames), DBParams.FRAMES);
this.addPropertiesFieldBehavior(this.getField(UserInfo.kJava), DBParams.JAVA);
this.addPropertiesFieldBehavior(this.getField(UserInfo.kHome), DBParams.HOME);
this.addPropertiesFieldBehavior(this.getField(UserInfo.kMenu), DBParams.MENU);

this.addPropertiesFieldBehavior(this.getField(UserInfo.kBanners), DBParams.BANNERS);
this.addPropertiesFieldBehavior(this.getField(UserInfo.kTrailers), DBParams.TRAILERS);
this.addPropertiesFieldBehavior(this.getField(UserInfo.kMenubars), DBParams.MENUBARS);
this.addPropertiesFieldBehavior(this.getField(UserInfo.kLogos), DBParams.LOGOS);
this.addPropertiesFieldBehavior(this.getField(UserInfo.kNavMenus), DBParams.NAVMENUS);
this.addPropertiesFieldBehavior(this.getField(UserInfo.kMenuDesc), DBParams.MENUDESC);
this.addPropertiesFieldBehavior(this.getField(UserInfo.kHelpPage), MenuConstants.USER_HELP_DISPLAY);
this.addPropertiesFieldBehavior(this.getField(UserInfo.kLanguage), DBParams.LANGUAGE);

Record recContactType = ((ReferenceField)this.getField(UserInfo.kContactTypeID)).getReferenceRecord();
this.getField(UserInfo.kContactTypeID).addListener(new ReadSecondaryHandler(recContactType));
BaseField fldContactTypeCode = recContactType.getField(ContactType.kCode);
CopyConvertersHandler listener = new CopyConvertersHandler(new PropertiesConverter(fldProperties, DBParams.CONTACT_TYPE), fldContactTypeCode);
this.getField(UserInfo.kContactTypeID).addListener(listener);
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
this.addPropertiesFieldBehavior(this.getField(UserInfo.kContactTypeID), DBParams.CONTACT_TYPE + DBParams.ID);
this.addPropertiesFieldBehavior(this.getField(UserInfo.kContactID), DBParams.CONTACT_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780272">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription>Field must be non-numeric</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CheckNonNumericListener</MethodClassName>
		<LogicSource><![CDATA[String string = this.getOwner().toString();
if (Utility.isNumeric(string))
{
    Task task = null;
    if (this.getOwner() != null)
        if (this.getOwner().getRecord() != null)
            if (this.getOwner().getRecord().getRecordOwner() != null)
                task = this.getOwner().getRecord().getRecordOwner().getTask();
    if (task == null)
        task = BaseApplet.getSharedInstance();
    return task.setLastError("Must be non-numeric");
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780273">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserFileHandler</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if (iChangeType == DBConstants.AFTER_UPDATE_TYPE)
{   // Update this user's preferences
    MainApplication app = (MainApplication)this.getOwner().getRecordOwner().getTask().getApplication();
    app.readUserInfo(false, false);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780284">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>handleMessage</MethodName>
		<LogicDescription><![CDATA[A record with this datasource handle changed, notify any behaviors that are checking.
NOTE: Be very careful as this code is running in an independent thread
(synchronize to the task before calling record calls).
NOTE: For now, you are only notified of the main record changes.
@param message The message to handle.
@return The error code.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BaseMessage message</MethodInterface>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780385">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>JavaButton</MethodName>
		<LogicDescription/>
		<MethodReturns>itsLocation, parentScreen, fieldConverter, sDisplayFieldDesc, "", "Print Java", null, null, null</MethodReturns>
		<MethodInterface>ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int sDisplayFieldDesc</MethodInterface>
		<MethodClassName>JavaButton</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780386">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>setClassInfo</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>ClassInfo classInfo</MethodInterface>
		<MethodClassName>JavaButton</MethodClassName>
		<LogicSource>m_classInfo = classInfo;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780387">
		<LastChanged>2010-06-09T21:17:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>controlToField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>JavaButton</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super.controlToField();
if (m_classInfo != null)
{
    TaskScheduler js = BaseApplet.getSharedInstance().getApplication().getTaskScheduler();
    String strJob = Utility.addURLParam(null, DBParams.SCREEN, ".app.program.manual.util.WriteClasses");
    strJob = Utility.addURLParam(strJob, "fileName", m_classInfo.getField(ClassInfo.kClassSourceFile).toString());
    strJob = Utility.addURLParam(strJob, "package", m_classInfo.getField(ClassInfo.kClassPackage).toString());
    strJob = Utility.addURLParam(strJob, "project", Converter.stripNonNumber(m_classInfo.getField(ClassInfo.kClassProjectID).toString()));
    strJob = Utility.addURLParam(strJob, DBParams.TASK, DBConstants.SAPPLET); // Screen class
    js.addTask(strJob);
//BasePanel parentScreen = Screen.makeWindow(this.getParentScreen().getTask().getApplication());
//WriteJava screen = new WriteJava(null, null, parentScreen, null, ScreenConstants.DISPLAY_FIELD_DESC, m_classInfo.getField(ClassInfo.kClassSourceFile), m_classInfo.getField(ClassInfo.kClassPackage));
//screen.writeFileDesc();     // Write the code
//BasePanel panel = screen.getRootScreen();
//panel.free();
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780395">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getServletPath</MethodName>
		<LogicDescription><![CDATA[Get the path to the target servlet.
@param The servlet type (regular html or xhtml)
@return the servlet path.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strServletParam</MethodInterface>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780455">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getState</MethodName>
		<LogicDescription><![CDATA[Get the state of this boolean field.
Usually overidden.
@return True if data is true.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Converter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780456">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>setState</MethodName>
		<LogicDescription><![CDATA[Set the state of this field for binary fields (don't override this).
Usually overidden.
@param bState the state to set the data to.
@param bDisplayOption Display the data on the screen if true.
@param iMoveMode INIT, SCREEN, or READ move mode.
@return The error code.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>boolean bState, boolean bDisplayOption, int iMoveMode</MethodInterface>
		<MethodClassName>Converter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780466">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription>Override this to open the other files in the query.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780475">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>setEnabled</MethodName>
		<LogicDescription><![CDATA[Enable or disable this control.
@param bEnable If true, enable this field.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>boolean bEnable</MethodInterface>
		<MethodClassName>ScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780476">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setEnabled</MethodName>
		<LogicDescription><![CDATA[Enable/Disable the associated control(s).
@param bEnable If false, disable all this field's screen fields.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>boolean bEnable</MethodInterface>
		<MethodClassName>BaseField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780554">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription>Add all the screen listeners.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780555">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription>Add the navigation button(s) to the left of the grid row.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780660">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CopyStringHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField fldDest, String stringValue, Converter convCheckMark</MethodInterface>
		<MethodClassName>CopyStringHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780812">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getBasisRecord</MethodName>
		<LogicDescription><![CDATA[Get the record to analyze.
@return the source record (defaults to the main record).]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>AnalysisScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780813">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getSummaryRecord</MethodName>
		<LogicDescription><![CDATA[Get the summary file.
@return The summary record (if null, this code creates a default record from the source).]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>AnalysisScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780814">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>isKeyField</MethodName>
		<LogicDescription><![CDATA[This is field a potential index for analysis.
(Override this to allow number fields to be keys).
@param field The field to check.
@param iSourceFieldSeq The source field sequence of this field
@return True if this is a potential key field.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseField field, int iSourceFieldSeq</MethodInterface>
		<MethodClassName>AnalysisScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780828">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getSourceField</MethodName>
		<LogicDescription><![CDATA[Get the source field to analyze at this position (From the selection).
@param iSeq location of the source field.
@return The field.]]></LogicDescription>
		<MethodReturns>BaseField</MethodReturns>
		<MethodInterface>int iSeq</MethodInterface>
		<MethodClassName>AnalysisScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780831">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addSummary</MethodName>
		<LogicDescription><![CDATA[Add/update this summary record.
@param recSummary The destination summary record.
@param mxKeyFields The key fields map.
@param mxDataFields The data fields map.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recSummary, BaseField[][] mxKeyFields, BaseField[][] mxDataFields</MethodInterface>
		<MethodClassName>AnalysisScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780863">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getComponentAfter</MethodName>
		<LogicDescription><![CDATA[Returns the Component that should receive the focus after aComponent.
@param sfCurrent Currently focused control.
@param iSelectField Type of field to select next (first, next, prev, last).
@return Control to select next.]]></LogicDescription>
		<MethodReturns>ScreenField</MethodReturns>
		<MethodInterface>ScreenField sfCurrent, int iSelectField</MethodInterface>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16780952">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription><![CDATA[Convert the command to the screen document type.
@param strCommand The command text.
@param The standard document type (MAINT/DISPLAY/SELECT/MENU/etc).]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>String strCommand</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781017">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,150</Sequence>
		<MethodName>getRecord</MethodName>
		<LogicDescription><![CDATA[Get the record with this file name.
This is more usefull in the queryrecord.
@return This if match.]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>String strFileName</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781027">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>DisableOnFieldHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField fieldToDisable, String strCompareString, boolean bDisableIfMatch</MethodInterface>
		<MethodClassName>DisableOnFieldHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781028">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>compareFieldToString</MethodName>
		<LogicDescription><![CDATA[Compare the field to the string.
@return true if match.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>DisableOnFieldHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781055">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccessScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, "Delete All", MenuConstants.DELETE, "Delete All", null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781146">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getPrintOptions</MethodName>
		<LogicDescription><![CDATA[Get the print options (view defined).
@return The HTML options.
@exception DBException File exception.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ScreenFieldViewAdapter</MethodClassName>
		<LogicSource/>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781147">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>printControlLabels</MethodName>
		<LogicDescription><![CDATA[Display this control in print (view) format.
@return true if default params were found for this form.
@param out The http output stream.
@exception DBException File exception.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>PrintWriter out</MethodInterface>
		<MethodClassName>ScreenFieldViewAdapter</MethodClassName>
		<LogicSource/>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781148">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>printControlData</MethodName>
		<LogicDescription><![CDATA[Display this control's data in print (view) format.
@return true if default params were found for this form.
@param out The http output stream.
@exception DBException File exception.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>PrintWriter out, int iPrintOptions</MethodInterface>
		<MethodClassName>ScreenFieldViewAdapter</MethodClassName>
		<LogicSource/>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781149">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>isPrintableControl</MethodName>
		<LogicDescription><![CDATA[Display this sub-control in html input format?
@param iPrintOptions The view specific print options.
@return True if this sub-control is printable.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>int iPrintOptions</MethodInterface>
		<MethodClassName>ScreenFieldViewAdapter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781162">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getNextGridRecord</MethodName>
		<LogicDescription><![CDATA[Get the next grid record.
@param bFirstTime If true, I want the first record.
@return the next record (or null if EOF).]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>boolean bFirstTime</MethodInterface>
		<MethodClassName>BaseGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781245">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>750</Sequence>
		<MethodName>addScreenListeners</MethodName>
		<LogicDescription><![CDATA[Override this to add record listeners and filters to every screen where this is the main record.
@param screen The screen these listeners will be in.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>RecordOwner screen</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781521">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>DetailGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>DetailGridScreen</MethodClassName>
		<LogicSource>m_recHeader = recHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781522">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
if (m_recHeader != null)
    this.addRecord(m_recHeader, false);
else
    m_recHeader = this.openHeaderRecord();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781523">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>DetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781524">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addSubFileFilter();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781525">
		<LastChanged>2009-09-23T03:14:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>45</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[// Override this if it is not correct.
SubFileFilter listener = null;
this.getMainRecord().addListener(listener = new SubFileFilter(this.getHeaderRecord()));
if (this.getMainRecord().getKeyArea().getField(DBConstants.MAIN_KEY_FIELD).isNullable() == false)
{
    listener.setFilterIfNull(true);
    listener.setAddNewHeaderOnAdd(false);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781526">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>27</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DetailGridScreen</MethodClassName>
		<LogicSource>return m_recHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781531">
		<LastChanged>2011-10-12T16:52:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DetailScreen</MethodClassName>
		<LogicSource><![CDATA[if (m_recHeader != null)
    return m_recHeader;
Utility.getLogger().severe("Forgot to override getHeaderRecord()");
return super;	// Remember to override this!]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781532">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addSubFileFilter();
this.syncScreenFieldToHeader();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781533">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>42</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription>Read the current file in the header record given the current detail record.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;
//x I Don't think I need this anymore
//xRecord recMain = this.getMainRecord();
//xRecord recHeader = this.getHeaderRecord();
//xReferenceField fldMain = recMain.getReferenceField(recHeader);
//xif (fldMain != null)
//x{
//x    fldMain.setReferenceRecord(recHeader);
//x    if ((recHeader.getEditMode() != Constants.EDIT_IN_PROGRESS) && (recHeader.getEditMode() != Constants.EDIT_CURRENT))
//x        if (recMain.getEditMode() != Constants.EDIT_NONE)
//x    {   // Wow... If there isn't a valid header, but I have a detail record, read the header record.
//x        Record record = fldMain.getReference();   // This should read the header record.
//x    }
//x}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781534">
		<LastChanged>2009-09-23T03:14:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>41</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription><![CDATA[Add the sub file filter (linking the header to the main file)
Override this if the header does not have a direct link to the detail.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DetailScreen</MethodClassName>
		<LogicSource><![CDATA[// Override this if it is not correct.
SubFileFilter listener = null;
this.getMainRecord().addListener(listener = new SubFileFilter(this.getHeaderRecord()));
if (this.getMainRecord().getKeyArea().getField(DBConstants.MAIN_KEY_FIELD).isNullable() == false)
{
    listener.setFilterIfNull(true);
    listener.setAddNewHeaderOnAdd(false);
}
this.syncHeaderToMain();    // Read in the current (optional) Header record.]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781535">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>46</Sequence>
		<MethodName>syncScreenFieldToHeader</MethodName>
		<LogicDescription><![CDATA[Sync the screen field to the header record.
This method does nothing - Override it to provide the link.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DetailScreen</MethodClassName>
		<LogicSource><![CDATA[// Do something like this to Link the screen field to the passed in record
//((ReferenceField)this.getScreenRecord().getField(ProductScreenRecord.kProductID)).syncReference(this.getHeaderRecord());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781537">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;
if (m_recHeader != null)
    this.addRecord(m_recHeader, false);
else
    m_recHeader = this.openHeaderRecord();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781538">
		<LastChanged>2011-10-12T16:52:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription><![CDATA[Open the header record.
@return The new header record.]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>DetailScreen</MethodClassName>
		<LogicSource><![CDATA[Utility.getLogger().warning("Override openHeaderRecord");
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781596">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SharedFileHandler</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781598">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SharedFileHandler</MethodClassName>
		<LogicSource><![CDATA[super;
BaseField fldTarget = this.getOwner().getField(m_iTypeField);
fldTarget.setEnableListener(false);
fldTarget.setValue(m_iTargetValue);
fldTarget.setModified(false);
fldTarget.setEnableListener(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781604">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SharedFileReadHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>iTypeField, iTargetValue</MethodReturns>
		<MethodInterface>int iTypeField, int iTargetValue</MethodInterface>
		<MethodClassName>SharedFileReadHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setMasterSlaveFlag(FileListener.RUN_IN_SLAVE);   // This runs on the slave (if there is a slave)]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781606">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SharedFileHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>iTypeField, iTargetValue</MethodReturns>
		<MethodInterface>int iTypeField, int iTargetValue</MethodInterface>
		<MethodClassName>SharedFileHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781607">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doLocalCriteria</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SharedFileReadHandler</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781608">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doRemoteCriteria</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SharedFileReadHandler</MethodClassName>
		<LogicSource><![CDATA[BaseField fldTarget = this.getOwner().getField(m_iTypeField);
String strToCompare = Integer.toString(m_iTargetValue);
boolean bDontSkip = this.fieldCompare(fldTarget, strToCompare, "=", strbFilter, bIncludeFileName, vParamList);
if (strbFilter != null)
    bDontSkip = true; // Don't need to compare, if I'm creating a filter to pass to SQL 
if (bDontSkip)
    return super;    // Dont skip this record
else
    return false;   // Skip this one]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781609">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SharedFileReadHandler</MethodClassName>
		<LogicSource>return super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781610">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>initRemoteStub</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SharedFileReadHandler</MethodClassName>
		<LogicSource><![CDATA[try   {
    daOut.writeInt(m_iTypeField);
    daOut.writeInt(m_iTargetValue);
} catch (IOException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781611">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>initRemoteSkel</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SharedFileReadHandler</MethodClassName>
		<LogicSource><![CDATA[try   {
    int iTypeField = daIn.readInt();
    int iTargetValue = daIn.readInt();

    this.init(iTypeField, iTargetValue);
} catch (IOException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781612">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,100</Sequence>
		<MethodName>initRemoteSkel</MethodName>
		<LogicDescription><![CDATA[Use these marshalled params to initialize this object.
Note: Do not call super.initRemoteSkel() when you override, because you only
call this.init(xxx) one time per object.
@param daIn The input stream to unmarshal the data from.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>ObjectInputStream daIn</MethodInterface>
		<MethodClassName>FileListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781613">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,000</Sequence>
		<MethodName>initRemoteStub</MethodName>
		<LogicDescription><![CDATA[Marshall all of this listener's params to pass to mirror copy to initialize a new object.
Note: Do not call super.initRemoteSkel() when you override, because you only
call this.init(xxx) one time per object.
@param daOut The output stream to marshal the data to.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>ObjectOutputStream daOut</MethodInterface>
		<MethodClassName>FileListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781636">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailScreen</MethodClassName>
		<LogicSource>return new MessageDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781637">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailGridScreen</MethodClassName>
		<LogicSource>return new MessageDetail(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781638">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportField</MethodClassName>
		<LogicSource>return new MessageTransport(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781639">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportField</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781640">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfoField</MethodClassName>
		<LogicSource>return new MessageInfo(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781641">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfoField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), -1, MessageInfo.kDescription, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781642">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription><![CDATA[Override this to do an action sent from the client.
@param strCommand The command to execute
@param properties The properties for the command
@returns Object Return a Boolean.TRUE for success, Boolean.FALSE for failure]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>String strCommand, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>BaseSession</MethodClassName>
		<LogicSource/>
		<LogicThrows>RemoteException, DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781644">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>MessageDetailGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>recHeader, record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>MessageDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781645">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[ContactType recContactType = (ContactType)this.getRecord(ContactType.kContactTypeFile);
Record recHeader = this.getHeaderRecord();
recContactType = recContactType.getContactType(recHeader);
Record recMessageDetail = this.getMainRecord();
recMessageDetail.setKeyArea(MessageDetail.kContactTypeIDKey);
recMessageDetail.addListener(new SubFileFilter(recContactType.getField(ContactType.kID), MessageDetail.kContactTypeID, recHeader.getField(VirtualRecord.kID), MessageDetail.kPersonID, null, -1));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781646">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getContactType</MethodName>
		<LogicDescription><![CDATA[Get the contact type for this record.
(The code is the record table name).
@param The record.
@return The Contact Type record (or null if not found).]]></LogicDescription>
		<MethodReturns>ContactType</MethodReturns>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>ContactType</MethodClassName>
		<LogicSource><![CDATA[String strType = record.getTableNames(false);
this.setKeyArea(ContactType.kCodeKey);
this.getField(ContactType.kCode).setString(strType);
try {
    if (this.seek(null))
    {   // Success
        return this;
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
return null;    // Not found]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781647">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record recContactType = ((ReferenceField)this.getMainRecord().getField(MessageDetail.kContactTypeID)).getReferenceRecord(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781648">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781649">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailScreen</MethodClassName>
		<LogicSource><![CDATA[((ReferenceField)this.getMainRecord().getField(MessageDetail.kContactTypeID)).getReferenceRecord(this);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781650">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = null;
this.syncContactTypeToMain();    // Read in the current contact record
ReferenceField fldContactType = (ReferenceField)this.getMainRecord().getField(MessageDetail.kContactTypeID);
ContactType recContactType = (ContactType)fldContactType.getReferenceRecord(this);
recContactType = (ContactType)fldContactType.getReference(); // Being careful
String strHeaderRecordName = null;
if (recContactType != null)
    strHeaderRecordName = recContactType.getField(ContactType.kCode).toString();
if ((strHeaderRecordName == null) || (strHeaderRecordName.length() == 0))
    strHeaderRecordName = this.getProperty(fldContactType.getFieldName());
record = recContactType.makeRecordFromRecordName(strHeaderRecordName, this);
if (record != null)
        ((ReferenceField)this.getMainRecord().getField(MessageDetail.kPersonID)).setReferenceRecord(record);
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781651">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailScreen</MethodClassName>
		<LogicSource>return ((ReferenceField)this.getMainRecord().getField(MessageDetail.kPersonID)).getReferenceRecord();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781652">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailScreen</MethodClassName>
		<LogicSource><![CDATA[ContactType recContactType = (ContactType)((ReferenceField)this.getMainRecord().getField(MessageDetail.kContactTypeID)).getReferenceRecord(this);
Record recHeader = this.getHeaderRecord();
recContactType = recContactType.getContactType(recHeader);
Record recMessageDetail = this.getMainRecord();
recMessageDetail.setKeyArea(MessageDetail.kContactTypeIDKey);
recMessageDetail.addListener(new SubFileFilter(recContactType.getField(ContactType.kID), MessageDetail.kContactTypeID, recHeader.getField(VirtualRecord.kID), MessageDetail.kPersonID, null, -1));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781653">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781654">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addPropertiesFieldBehavior</MethodName>
		<LogicDescription>Add the behaviors to sync this property to this virtual field.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseField fldDisplay, String strProperty</MethodInterface>
		<MethodClassName>PropertiesRecord</MethodClassName>
		<LogicSource><![CDATA[BaseField fldProperties = this.getField(PropertiesRecord.kProperties);
FieldListener listener = new CopyConvertersHandler(new PropertiesConverter(fldProperties, strProperty));
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
fldDisplay.addListener(listener);
listener = new CopyConvertersHandler(fldDisplay, new PropertiesConverter(fldProperties, strProperty));
fldProperties.addListener(listener);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781655">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addPropertyListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetail</MethodClassName>
		<LogicSource><![CDATA[this.addPropertiesFieldBehavior(this.getField(MessageDetail.kDestinationSite), TrxMessageHeader.DESTINATION_PARAM);
this.addPropertiesFieldBehavior(this.getField(MessageDetail.kDestinationPath), TrxMessageHeader.DESTINATION_MESSAGE_PARAM);
this.addPropertiesFieldBehavior(this.getField(MessageDetail.kReturnSite), TrxMessageHeader.SOURCE_PARAM);
this.addPropertiesFieldBehavior(this.getField(MessageDetail.kReturnPath), TrxMessageHeader.SOURCE_MESSAGE_PARAM);
this.addPropertiesFieldBehavior(this.getField(MessageDetail.kXSLTDocument), TrxMessageHeader.XSLT_DOCUMENT);
this.addPropertiesFieldBehavior(this.getField(MessageDetail.kInitialManualTransportStatusID), MessageTransport.INITIAL_MESSAGE_DATA_STATUS); 
this.addPropertiesFieldBehavior(this.getField(MessageDetail.kDefaultMessageVersionID), TrxMessageHeader.MESSAGE_VERSION_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781656">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactTypeField</MethodClassName>
		<LogicSource>return new ContactType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781657">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription>Read the current file in the header record given the current detail record.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781658">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strURL = super;
ReferenceField fldContactType = (ReferenceField)this.getMainRecord().getField(MessageDetail.kContactTypeID);
strURL = Utility.addFieldParam(strURL, fldContactType);
return strURL;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781659">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailScreen</MethodClassName>
		<LogicSource><![CDATA[String strURL = super;
ReferenceField fldContactType = (ReferenceField)this.getMainRecord().getField(MessageDetail.kContactTypeID);
strURL = Utility.addFieldParam(strURL, fldContactType);
return strURL;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781660">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailScreen</MethodClassName>
		<LogicSource><![CDATA[// Don't call super.
this.syncContactTypeToMain();
ReferenceField fldMain = (ReferenceField)this.getMainRecord().getField(MessageDetail.kPersonID);
this.syncRecordToMainField(fldMain, null, DBParams.HEADER_OBJECT_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781661">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[// Don't call super.
this.syncContactTypeToMain();
ReferenceField fldMain = (ReferenceField)this.getMainRecord().getField(MessageDetail.kPersonID);
this.syncRecordToMainField(fldMain, null, DBParams.HEADER_OBJECT_ID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781662">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>37</Sequence>
		<MethodName>syncContactTypeToMain</MethodName>
		<LogicDescription>Sync the contact type record to the main value</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailScreen</MethodClassName>
		<LogicSource><![CDATA[ReferenceField fldContactType = (ReferenceField)this.getMainRecord().getField(MessageDetail.kContactTypeID);
String strContactTypeParam = fldContactType.getFieldName();
this.syncRecordToMainField(fldContactType, null, strContactTypeParam);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781663">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>syncContactTypeToMain</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[ReferenceField fldContactType = (ReferenceField)this.getMainRecord().getField(MessageDetail.kContactTypeID);
String strContactTypeParam = fldContactType.getFieldName();
this.syncRecordToMainField(fldContactType, null, strContactTypeParam);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781664">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailScreen</MethodClassName>
		<LogicSource><![CDATA[super;
((MessageDetail)this.getMainRecord()).addPropertyListeners();
this.getMainRecord().addListener(new MessageDetailDefTransHandler(null));
String strManualTransportID = Integer.toString(((ReferenceField)this.getMainRecord().getField(MessageDetail.kMessageTransportID)).getIDFromCode(MessageTransport.MANUAL));

this.getMainRecord().getField(MessageDetail.kMessageTransportID).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(MessageDetail.kInitialManualTransportStatusID), strManualTransportID, false));
Converter convCheckMark = new RadioConverter(this.getMainRecord().getField(MessageDetail.kMessageTransportID), strManualTransportID, false);
this.getMainRecord().getField(MessageDetail.kMessageTransportID).addListener(new RemoveConverterOnFreeHandler(convCheckMark));
this.getMainRecord().getField(MessageDetail.kMessageTransportID).addListener(new CopyDataHandler(this.getMainRecord().getField(MessageDetail.kInitialManualTransportStatusID), null, convCheckMark));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781665">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[Record recContact = ((ReferenceField)this.getMainRecord().getField(MessageDetail.kPersonID)).getReferenceRecord();
if (recContact != null)
    if (recContact.getEditMode() == DBConstants.EDIT_CURRENT)
    if (recContact instanceof Person)   // Profile
    {
        BaseField field = recContact.getField(recContact.getDefaultDisplayFieldSeq());
        field.setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
    }]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781666">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record recHeader = this.getHeaderRecord();
Record recMessageDetail = this.getMainRecord();        
if (recHeader instanceof Company)   // Profile
    ((ReferenceField)recMessageDetail.getField(MessageDetail.kPersonID)).setReferenceRecord(recHeader);   // Make sure this is hooked up
return new MessageDetailHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781667">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailScreen</MethodClassName>
		<LogicSource>return new MessageDetailHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781668">
		<LastChanged>2009-05-11T08:24:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = null;
this.syncContactTypeToMain();    // Read in the current contact record
ReferenceField fldContactType = (ReferenceField)this.getMainRecord().getField(MessageDetail.kContactTypeID);
ContactType recContactType = (ContactType)fldContactType.getReferenceRecord(this);
String strHeaderRecordName = null;
if (recContactType != null)
    strHeaderRecordName = recContactType.getField(ContactType.kCode).toString();
if ((strHeaderRecordName == null) || (strHeaderRecordName.length() == 0))
    strHeaderRecordName = this.getProperty(fldContactType.getFieldName());
record = recContactType.makeRecordFromRecordName(strHeaderRecordName, this);
if (record != null)
        ((ReferenceField)this.getMainRecord().getField(MessageDetail.kPersonID)).setReferenceRecord(record);
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781672">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>addMessageProperties</MethodName>
		<LogicDescription><![CDATA[Get the message properties for this vendor.
@param strMessageName The message name.
@return A map with the message properties.]]></LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader, MessageDetailTarget recMessageDetailTarget, MessageProcessInfo recMessageProcessInfo, MessageTransport recMessageTransport</MethodInterface>
		<MethodClassName>MessageDetail</MethodClassName>
		<LogicSource><![CDATA[try {
    if (trxMessageHeader == null)
        trxMessageHeader = new TrxMessageHeader(null, null);
    ContactType recContactType = (ContactType)((ReferenceField)this.getField(MessageDetail.kContactTypeID)).getReferenceRecord(null);
    recContactType = recContactType.getContactType((Record)recMessageDetailTarget);
    if (recContactType == null)
        return trxMessageHeader;    // Just being careful

    this.setKeyArea(MessageDetail.kContactTypeIDKey);
    this.getField(MessageDetail.kContactTypeID).moveFieldToThis((BaseField)recContactType.getCounterField());
    this.getField(MessageDetail.kPersonID).moveFieldToThis((BaseField)((Record)recMessageDetailTarget).getCounterField());
    this.getField(MessageDetail.kMessageProcessInfoID).moveFieldToThis((BaseField)recMessageProcessInfo.getCounterField());
    this.getField(MessageDetail.kMessageTransportID).moveFieldToThis((BaseField)recMessageTransport.getCounterField());
    if (this.seek(null))
    {
        Map<String,Object> propHeader = ((PropertiesField)this.getField(MessageDetail.kProperties)).loadProperties();
        if (propHeader == null)
            propHeader = new HashMap<String,Object>(); // Never return null.
        Map<String,Object> map = trxMessageHeader.getMessageHeaderMap();
        if (map != null)
            map.putAll(propHeader);
        else
            map = propHeader;
        trxMessageHeader.setMessageHeaderMap(map);
        if ((recMessageTransport != null)
            && ((recMessageTransport.getEditMode() == DBConstants.EDIT_CURRENT) || (recMessageTransport.getEditMode() == DBConstants.EDIT_IN_PROGRESS)))
        {
            trxMessageHeader = recMessageTransport.addMessageProperties(trxMessageHeader);
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
// No need to free the two files as they are linked to the fields in this record

return trxMessageHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781681">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription><![CDATA[Convert this source message to the ECXML format.
Typically you do not override this method, you override the getTransformer method
to supply a XSLT document to do the conversion.
@param source The source XML document.
@return The XML tree that conforms to the ECXML format.]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>InternalTrxMessage trxMessage, BaseMessageTransport messageTransport</MethodInterface>
		<MethodClassName>BaseInternalMessageProcessor</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781684">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription><![CDATA[Convert the external form to the internal message form.
You must override this method.
@param externalMessage The received message to be converted to internal form.
@return The internal message.]]></LogicDescription>
		<MethodReturns>BaseMessage</MethodReturns>
		<MethodInterface>ExternalTrxMessage externalMessage, BaseMessageTransport messageTransport</MethodInterface>
		<MethodClassName>BaseExternalMessageProcessor</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781694">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getXSLTDocument</MethodName>
		<LogicDescription><![CDATA[Get the XSLT Document to do the conversion.
Override this if you have a standard document to suppyl.
@param source The source XML document.
@return The XML tree that conforms to the ECXML format.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>InternalTrxMessage trxMessage, BaseMessageTransport messageTransport</MethodInterface>
		<MethodClassName>BaseInternalMessageProcessor</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781697">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageStatusField</MethodClassName>
		<LogicSource>return new MessageStatus(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781715">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportSelect</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781720">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportTypeField</MethodClassName>
		<LogicSource>return TRANSPORT_TYPES;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781721">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportTypeField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 10;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781728">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>doFirstValidRecord</MethodName>
		<LogicDescription>Do valid record, but only the first time the record is displayed.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>boolean bDisplayOption</MethodInterface>
		<MethodClassName>RecordCacheHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781746">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription><![CDATA[Set up the default control for this field.
@param  itsLocation     Location of this component on screen (ie., GridBagConstraint).
@param  targetScreen    Where to place this component (ie., Parent screen or GridBagLayout).
@param  iDisplayFieldDesc Display the label? (optional).
@return   Return the component or ScreenField that is created for this field.]]></LogicDescription>
		<MethodReturns>ScreenField</MethodReturns>
		<MethodInterface>ScreenLocation itsLocation, BasePanel targetScreen, Converter converter, int iDisplayFieldDesc</MethodInterface>
		<MethodClassName>FieldConverter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781781">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>520</Sequence>
		<MethodName>getSharedRecordTypeKey</MethodName>
		<LogicDescription><![CDATA[Get the record type from the field that specifies the record type.
(Override this).
@return The record type (as an object).]]></LogicDescription>
		<MethodReturns>BaseField</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781782">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>530</Sequence>
		<MethodName>createSharedRecord</MethodName>
		<LogicDescription><![CDATA[Get the shared record that goes with this key.
(Always override this).
@param objKey The value that specifies the record type.
@return The correct (new) record for this type (or null if none).]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>Object objKey, RecordOwner recordOwner</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781791">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription><![CDATA[The button for this converter was pressed do the command.
@param bDisplayOption Display the data on the screen if true.
@param iMoveMode INIT, SCREEN, or READ move mode.
@return The error code.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>boolean bDisplayOption, int iMoveMode</MethodInterface>
		<MethodClassName>CommandConverter</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781885">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>createMessageHeader*1</MethodName>
		<LogicDescription><![CDATA[Create the original message header for this transaction ID.
@param strTrxID The transaction ID of the original transaction.
@return A message header with the params of this trx (or null if nonexistent).]]></LogicDescription>
		<MethodReturns>BaseMessageHeader</MethodReturns>
		<MethodInterface>String strTrxID</MethodInterface>
		<MethodClassName>MessageLog</MethodClassName>
		<LogicSource><![CDATA[if (this.getMessageLog(strTrxID) != null)
    return this.createMessageHeader();
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781891">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getXSLTDocument</MethodName>
		<LogicDescription><![CDATA[Get the XSLT Document to do the conversion.
Override this if you have a standard document to suppyl.
@param source The source XML document.
@return The XML tree that conforms to the ECXML format.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ExternalTrxMessageOut</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781893">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>JAXBTrxMessageOut</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseMessage message, Object root</MethodInterface>
		<MethodClassName>JAXBTrxMessageOut</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781897">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getUserInfo</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strUser, boolean bForceRead</MethodInterface>
		<MethodClassName>UserInfo</MethodClassName>
		<LogicSource><![CDATA[boolean bFound = false;
if ((strUser == null) || (strUser.length() ==0))
    return false; // Not found.
int iUserID = -1;
try   {   // First see if strUser is the UserID in string format
    if (Utility.isNumeric(strUser))
        if ((strUser != null) && (strUser.length() > 0))
            iUserID = Integer.parseInt(strUser);
    if (iUserID == 0)
        iUserID = -1;
} catch (NumberFormatException ex)  {
    iUserID = -1;
}
if ((iUserID == -1) && (strUser.length() > 0))
{ // Read using the User name
    if (!bForceRead)
        if ((this.getEditMode() == DBConstants.EDIT_CURRENT) || (this.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
            if (this.getField(UserInfo.kUserName).toString().equalsIgnoreCase(strUser))
                return true;    // Already current
    this.getField(UserInfo.kUserName).setString(strUser);
    this.setKeyArea(UserInfo.kUserNameKey);
    try   {
        bFound = this.seek(null);
    } catch (DBException ex)    {
        ex.printStackTrace();
        bFound = false;
    }
    this.setKeyArea(UserInfo.kIDKey);
}
if (iUserID != -1)
{   // Valid UserID, read it!
    if (!bForceRead)
        if ((this.getEditMode() == DBConstants.EDIT_CURRENT) || (this.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
            if (this.getField(UserInfo.kID).getValue() == iUserID)
                return true;    // Already current
    this.getField(UserInfo.kID).setValue(iUserID);
    try   {
        this.setKeyArea(UserInfo.kIDKey);
        bFound = this.seek(null);
    } catch (DBException ex)    {
        ex.printStackTrace();
        bFound = false;
    }
}
return bFound;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781898">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getProperty</MethodName>
		<LogicDescription>Get this property from this record.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>MessageLog</MethodClassName>
		<LogicSource><![CDATA[String strProperty = this.getMessageProperty(strKey);
if (strProperty == null)
    strProperty = ((PropertiesField)this.getField(MessageLog.kMessageHeaderProperties)).getProperty(strKey);
if (strProperty == null)
    strProperty = ((PropertiesField)this.getField(MessageLog.kMessageInfoProperties)).getProperty(strKey);
if (strProperty == null)
    strProperty = ((PropertiesField)this.getField(MessageLog.kMessageTransportProperties)).getProperty(strKey);
return strProperty;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781899">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>getMessageLog</MethodName>
		<LogicDescription>Get this record</LogicDescription>
		<MethodReturns>MessageLog</MethodReturns>
		<MethodInterface>String strID</MethodInterface>
		<MethodClassName>MessageLog</MethodClassName>
		<LogicSource><![CDATA[int iOldOrder = this.getDefaultOrder();
try {
    this.addNew();
    this.getField(MessageLog.kID).setString(strID);
    this.setKeyArea(MessageLog.kIDKey);
    if (this.seek(null))
        return this;
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    this.setKeyArea(iOldOrder);
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781910">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ScriptScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>recHeader, record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ScriptScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781911">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScriptScreen</MethodClassName>
		<LogicSource>return new Script(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781912">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScriptScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781913">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Script</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
	screen = new ScriptGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
	screen = new ScriptScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
	screen = new ScriptGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MENU_MODE) != 0)
	screen = new ScriptScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
	screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781914">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ScriptGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>recHeader, record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ScriptGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781915">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScriptGridScreen</MethodClassName>
		<LogicSource>return new Script(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781916">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScriptGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781917">
		<LastChanged>2009-09-15T22:54:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScriptGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781918">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>initField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseStatusField</MethodClassName>
		<LogicSource><![CDATA[//if (this.getDefault() == null)
//    return this.setValue(BaseStatus.NO_STATUS, bDisplayOption, Constants.INIT_MOVE);   // zero out the field
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781919">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseStatusField</MethodClassName>
		<LogicSource>return this.setupPopupView(itsLocation, targetScreen, converter, iDisplayFieldDesc, false);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781921">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScriptScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, ScriptScreen.GO, ScriptScreen.GO, ScriptScreen.GO, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781922">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScriptScreen</MethodClassName>
		<LogicSource><![CDATA[if (ScriptScreen.GO.equalsIgnoreCase(strCommand))
{
    Record record = this.getMainRecord();
    if (record.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
    {
        try {
            record.set();
            Object bookmark = record.getLastModified(DBConstants.BOOKMARK_HANDLE);
            record.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
        } catch (DBException ex) {
            ex.printStackTrace();
        }
    }
    if ((record.getEditMode() == DBConstants.EDIT_CURRENT)
        || (record.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
    {
        ((Script)record).execute(null);
    }
    return true;
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781923">
		<LastChanged>2009-11-25T14:41:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>execute</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Properties properties</MethodInterface>
		<MethodClassName>Script</MethodClassName>
		<LogicSource><![CDATA[if (this.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
{
    try {
        this.writeAndRefresh();
    } catch (DBException ex) {
        ex.printStackTrace();
    }
}
if (this.getEditMode() != DBConstants.EDIT_CURRENT)
    return false;
RunScriptProcess process = new RunScriptProcess(this.getTask(), null, null);
boolean bSuccess = (process.doCommand(this, null) == DBConstants.NORMAL_RETURN);
process.free();
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781938">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription><![CDATA[Process this internal message.
@param internalMessage The message to process.
@return (optional) The return message if applicable]]></LogicDescription>
		<MethodReturns>BaseMessage</MethodReturns>
		<MethodInterface>BaseMessage internalMessage</MethodInterface>
		<MethodClassName>BaseMessageProcessor</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781941">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BaseMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseMessageHeader messageHeader, Object mapMessage</MethodInterface>
		<MethodClassName>BaseMessage</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16781971">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addPropertiesFieldBehavior</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField fldDisplay, String strProperty</MethodInterface>
		<MethodClassName>MessageInfo</MethodClassName>
		<LogicSource><![CDATA[BaseField fldProperties = this.getField(MessageInfo.kMessageProperties);
FieldListener listener = new CopyConvertersHandler(new PropertiesConverter(fldProperties, strProperty));
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
fldDisplay.addListener(listener);
listener = new CopyConvertersHandler(fldDisplay, new PropertiesConverter(fldProperties, strProperty));
listener.setRespondsToMode(DBConstants.SCREEN_MOVE, false);
fldProperties.addListener(listener);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782052">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>isPhysicalFile</MethodName>
		<LogicDescription>Is this the physical file that can be imported/exported, etc?</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>FileHdr</MethodClassName>
		<LogicSource><![CDATA[String strFileType = this.getField(FileHdr.kType).toString();
if (strFileType == null)
    return false;
strFileType = strFileType.toUpperCase();
boolean bPhysicalFile = false;
if (strFileType.indexOf(DBParams.LOCAL.toUpperCase()) != -1)
    bPhysicalFile = true;
if (strFileType.indexOf(DBParams.REMOTE.toUpperCase()) != -1)
   bPhysicalFile = true;
if ((" " + strFileType).indexOf(" " + DBParams.TABLE.toUpperCase()) != -1)
   bPhysicalFile = true;
if (bPhysicalFile)
    if (strFileType.indexOf("SHARED_TABLE") != -1)
        if (strFileType.indexOf("BASE_TABLE_CLASS") == -1)
            bPhysicalFile = false;  // Only the base table is considered physical
if (bPhysicalFile)
    if (strFileType.indexOf("MAPPED") != -1)
        bPhysicalFile = false;  // Only the base table is considered physical
return bPhysicalFile;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782078">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>createMessageHeader*2</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseMessageHeader</MethodReturns>
		<MethodInterface/>
		<MethodClassName>MessageLog</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> properties = ((PropertiesField)this.getField(MessageLog.kMessageHeaderProperties)).getProperties();
BaseMessageHeader messageHeader = null;
String strMessageHeaderClassName = this.getField(MessageLog.kMessageHeaderClassName).toString();
String strQueueName = this.getField(MessageLog.kMessageQueueName).toString();
String strQueueType = this.getField(MessageLog.kMessageQueueType).toString();
Object source = null;
messageHeader = BaseMessageHeader.createMessageHeader(strMessageHeaderClassName, strQueueName, strQueueType, source, properties);
if (messageHeader == null)
    messageHeader = new TrxMessageHeader(null, properties);
if (messageHeader instanceof TrxMessageHeader)
{
    properties = ((PropertiesField)this.getField(MessageLog.kMessageInfoProperties)).getProperties();
    ((TrxMessageHeader)messageHeader).setMessageInfoMap(properties);
    properties = ((PropertiesField)this.getField(MessageLog.kMessageTransportProperties)).getProperties();
    ((TrxMessageHeader)messageHeader).setMessageTransportMap(properties);
    ((TrxMessageHeader)messageHeader).put(TrxMessageHeader.LOG_TRX_ID, this.getCounterField().toString());  // Should be there
}
return messageHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782079">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>350</Sequence>
		<MethodName>createMessage*1</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseMessage</MethodReturns>
		<MethodInterface>String strTrxID</MethodInterface>
		<MethodClassName>MessageLog</MethodClassName>
		<LogicSource><![CDATA[if (this.getMessageLog(strTrxID) != null)
{
    BaseMessageHeader messageHeader = this.createMessageHeader();
    MessageRecordDesc messageData = (MessageRecordDesc)this.createMessageData();
    return this.createMessage(messageHeader, messageData);
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782080">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>createMessage*2</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseMessage</MethodReturns>
		<MethodInterface>BaseMessageHeader messageHeader, MessageRecordDesc messageDataDesc</MethodInterface>
		<MethodClassName>MessageLog</MethodClassName>
		<LogicSource><![CDATA[BaseMessage message = null;
String strMessageClassName = this.getField(MessageLog.kMessageClassName).toString();
message = BaseMessage.createMessage(strMessageClassName, messageHeader, null);
if (messageDataDesc != null)
    message.addMessageDataDesc(messageDataDesc);
if (messageHeader instanceof TrxMessageHeader)
{
    if (message == null)
        message = BaseMessage.createMessage((TrxMessageHeader)messageHeader);
    if (message == null)
        message = new TreeMessage((TrxMessageHeader)messageHeader, null);
}
String strXMLData = this.getField(MessageLog.kXMLMessageData).getString();
message.setXML(strXMLData);
return message;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782082">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>moveMessageParamsToScreen</MethodName>
		<LogicDescription>Move the original(sent) message params to this screen</LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseMessage message</MethodInterface>
		<MethodClassName>MessageScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782083">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>moveScreenParamsToMessage</MethodName>
		<LogicDescription>Move to entered fields to the return message</LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseMessage message</MethodInterface>
		<MethodClassName>MessageScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782086">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogScreen</MethodClassName>
		<LogicSource>return new MessageLog(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782087">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782089">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource>return new MessageLog(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782090">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>MessageLogGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>recHeader, record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782091">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782092">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782093">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = null;
//this.syncContactTypeToMain();    // Read in the current contact record
if (this.getScreenRecord() == null)
    this.setScreenRecord(this.addScreenRecord());
ReferenceField fldContactType = (ReferenceField)this.getScreenRecord().getField(MessageLogScreenRecord.kContactTypeID);
ContactType recContactType = (ContactType)fldContactType.getReferenceRecord(this);
recContactType = (ContactType)fldContactType.getReference(); // Being careful
String strHeaderRecordName = null;
if (recContactType != null)
    strHeaderRecordName = recContactType.getField(ContactType.kCode).toString();
if ((strHeaderRecordName == null) || (strHeaderRecordName.length() == 0))
    strHeaderRecordName = this.getProperty(fldContactType.getFieldName());
record = recContactType.makeRecordFromRecordName(strHeaderRecordName, this);
if (record != null)
    ((ReferenceField)this.getScreenRecord().getField(MessageLogScreenRecord.kContactID)).setReferenceRecord(record);
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782096">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource><![CDATA[ContactType recContactType = (ContactType)((ReferenceField)this.getScreenRecord().getField(MessageLogScreenRecord.kContactTypeID)).getReference();
Record recHeader = this.getHeaderRecord();
if (recHeader != null)
{
    recContactType = recContactType.getContactType(recHeader);
    this.getScreenRecord().getField(MessageLogScreenRecord.kContactTypeID).moveFieldToThis(recContactType.getField(ContactType.kID));   // Display the field
    if ((recHeader.getEditMode() == DBConstants.EDIT_CURRENT) || (recHeader.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
        this.getScreenRecord().getField(MessageLogScreenRecord.kContactID).moveFieldToThis(recHeader.getField(VirtualRecord.kID));   // Display the field
}
Record recMessageDetail = this.getMainRecord();
this.getMainRecord().addListener(new CompareFileFilter(MessageLog.kContactTypeID, this.getScreenRecord().getField(MessageLogScreenRecord.kContactTypeID), DBConstants.EQUALS, null, true));
this.getScreenRecord().getField(MessageLogScreenRecord.kContactTypeID).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new CompareFileFilter(MessageLog.kContactID, this.getScreenRecord().getField(MessageLogScreenRecord.kContactID), DBConstants.EQUALS, null, true));
FieldListener listener = null;
this.getScreenRecord().getField(MessageLogScreenRecord.kContactID).addListener(listener = new FieldListener(null)
{
    public int fieldChanged(boolean bDisplayOption, int iMoveMode)
    {
        int iKeyOrder = MessageLog.kContactTypeIDKey;
        if (this.getOwner().isNull())
            iKeyOrder = MessageLog.kMessageTimeKey;
        getMainRecord().setKeyArea(iKeyOrder);
        return super.fieldChanged(bDisplayOption, iMoveMode);
    }
});
listener.fieldChanged(true, DBConstants.INIT_MOVE); // Initialize key order.
this.getScreenRecord().getField(MessageLogScreenRecord.kContactID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782097">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strURL = super;
ReferenceField fldContactType = (ReferenceField)this.getScreenRecord().getField(MessageLogScreenRecord.kContactTypeID);
String strContactTypeParam = fldContactType.getFieldName();
if (!fldContactType.isNull())
{
    String strContactType = fldContactType.getReference().getField(ContactType.kCode).toString();
    strURL = this.addURLParam(strURL, strContactTypeParam, strContactType);
}
return strURL;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782098">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.isContactDisplay())
    return null;
Record recHeader = this.getHeaderRecord();
Record recMessageDetail = this.getMainRecord();
if (recHeader instanceof Company)   // Profile
    ((ReferenceField)recMessageDetail.getField(MessageDetail.kPersonID)).setReferenceRecord(recHeader);   // Make sure this is hooked up
return new MessageLogHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782099">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782100">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>35</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource>return new MessageLogScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782101">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>38</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

if (this.isContactDisplay())
{
    ReferenceField field = (ReferenceField)this.getScreenRecord().getField(MessageLogScreenRecord.kMessageInfoTypeID);
    field.setValue(field.getReferenceRecord(this).getIDFromCode(MessageInfoType.REQUEST));
    field = (ReferenceField)this.getScreenRecord().getField(MessageLogScreenRecord.kMessageTypeID);
    field.setValue(field.getReferenceRecord(this).getIDFromCode(MessageType.MESSAGE_OUT));
    field = (ReferenceField)this.getScreenRecord().getField(MessageLogScreenRecord.kMessageStatusID);
    field.setValue(field.getReferenceRecord(this).getIDFromCode(MessageStatus.SENT));
}

this.getMainRecord().getKeyArea().setKeyOrder(DBConstants.DESCENDING);

this.getMainRecord().addListener(new CompareFileFilter(MessageLog.kReferenceID, this.getScreenRecord().getField(MessageLogScreenRecord.kReferenceID), DBConstants.EQUALS, null, true));
this.getScreenRecord().getField(MessageLogScreenRecord.kReferenceID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(MessageLog.kReferenceType, this.getScreenRecord().getField(MessageLogScreenRecord.kReferenceType), DBConstants.EQUALS, null, true));
this.getScreenRecord().getField(MessageLogScreenRecord.kReferenceType).addListener(new FieldReSelectHandler(this));

this.getScreenRecord().getField(MessageLogScreenRecord.kContactID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(MessageLog.kMessageInfoTypeID, this.getScreenRecord().getField(MessageLogScreenRecord.kMessageInfoTypeID), DBConstants.EQUALS, null, true));
this.getScreenRecord().getField(MessageLogScreenRecord.kMessageInfoTypeID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(MessageLog.kMessageTypeID, this.getScreenRecord().getField(MessageLogScreenRecord.kMessageTypeID), DBConstants.EQUALS, null, true));
this.getScreenRecord().getField(MessageLogScreenRecord.kMessageTypeID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(MessageLog.kMessageStatusID, this.getScreenRecord().getField(MessageLogScreenRecord.kMessageStatusID), DBConstants.EQUALS, null, true));
this.getScreenRecord().getField(MessageLogScreenRecord.kMessageStatusID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(MessageLog.kMessageTransportID, this.getScreenRecord().getField(MessageLogScreenRecord.kMessageTransportID), DBConstants.EQUALS, null, true));
this.getScreenRecord().getField(MessageLogScreenRecord.kMessageTransportID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(MessageLog.kUserID, this.getScreenRecord().getField(MessageLogScreenRecord.kUserID), DBConstants.EQUALS, null, true));
this.getScreenRecord().getField(MessageLogScreenRecord.kUserID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(MessageLog.kMessageTime, this.getScreenRecord().getField(MessageLogScreenRecord.kStartDate), CompareFileFilter.GREATER_THAN_EQUAL, null, true));
this.getScreenRecord().getField(MessageLogScreenRecord.kStartDate).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(MessageLog.kMessageTime, this.getScreenRecord().getField(MessageLogScreenRecord.kEndDate), CompareFileFilter.LESS_THAN_EQUAL, null, true));
this.getScreenRecord().getField(MessageLogScreenRecord.kEndDate).addListener(new FieldReSelectHandler(this));

this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782102">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(true);
Record screenRecord = this.getScreenRecord();
ReferenceField fldMessageInfoType = (ReferenceField)screenRecord.getField(MessageLogScreenRecord.kMessageInfoTypeID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782103">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLog</MethodClassName>
		<LogicSource><![CDATA[if (MessageLog.MESSAGE_SCREEN.equalsIgnoreCase(strCommand))
    return MessageLog.MESSAGE_SCREEN_MODE;
if (MessageLog.SOURCE_SCREEN.equalsIgnoreCase(strCommand))
    return MessageLog.SOURCE_SCREEN_MODE;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782104">
		<LastChanged>2010-03-10T04:42:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLog</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & MessageLog.MESSAGE_SCREEN_MODE) == MessageLog.MESSAGE_SCREEN_MODE)
{
    if ((this.getEditMode() == DBConstants.EDIT_ADD) || (this.getEditMode() == DBConstants.EDIT_NONE))
    {
        String strObjectID = parentScreen.getProperty(DBConstants.OBJECT_ID);
        if ((strObjectID != null) && (strObjectID.length() > 0))
        {
            try {
                this.setHandle(strObjectID, DBConstants.BOOKMARK_HANDLE);
            } catch (DBException ex)    {
                ex.printStackTrace();
            }
        }
    }
    if ((this.getEditMode() == DBConstants.EDIT_CURRENT) || (this.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
    {
        String strScreenClass = this.getProperty(ScreenMessageTransport.SCREEN_SCREEN);
        if (strScreenClass == null)
            strScreenClass = this.getProperty(DBParams.SCREEN);
        if (strScreenClass != null)
        {
            parentScreen.setProperty(TrxMessageHeader.LOG_TRX_ID, this.getProperty(TrxMessageHeader.LOG_TRX_ID));
            screen = BaseScreen.makeNewScreen(strScreenClass, itsLocation, parentScreen, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties, true);
        }
    }
    if (screen == null) // ? I don't know what else to do?
        screen = new MessageLogScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
}
else if ((iDocMode & MessageLog.SOURCE_SCREEN_MODE) == MessageLog.SOURCE_SCREEN_MODE)
{
    String strReferenceClass = this.getProperty(TrxMessageHeader.REFERENCE_CLASS);
    String strReferenceID = this.getField(MessageLog.kReferenceID).toString();
    if (strReferenceID == null)
        strReferenceID = this.getProperty(TrxMessageHeader.REFERENCE_ID);
    if ((strReferenceClass != null) && (strReferenceID != null))
    {
        Record record = Record.makeRecordFromClassName(strReferenceClass, Utility.getRecordOwner(this));
        if (record != null)
        {
            try {
                record.addNew();
                record.getCounterField().setString(strReferenceID);
                if (record.seek(null))
                {
                    iDocMode = ScreenConstants.MAINT_MODE;
                    screen = record.makeScreen(itsLocation, parentScreen, iDocMode, properties);
                }
            } catch (DBException e) {
                e.printStackTrace();
            }
        }
    }
}
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = new MessageLogScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
    screen = new MessageLogGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782105">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>85</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
String strMessageScreen = application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(MessageLog.MESSAGE_SCREEN);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MessageLog.MESSAGE_ICON, MessageLog.MESSAGE_SCREEN, strMessageScreen);
if (!this.isContactDisplay())
{
    strMessageScreen = application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(MessageLog.SOURCE_SCREEN);
    new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MessageLog.SOURCE_ICON, MessageLog.SOURCE_SCREEN, strMessageScreen);
}
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782106">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>87</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();

String strMessageScreen = null;
String strMessageScreenTip = null;

if (!this.isContactDisplay())
{
    strMessageScreen = application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(MessageLog.SOURCE_SCREEN);
    strMessageScreenTip = application.getResources(ResourceConstants.MAIN_RESOURCE, false).getString(MessageLog.SOURCE_SCREEN + DBConstants.TIP);
    new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strMessageScreen, MessageLog.SOURCE_ICON, MessageLog.SOURCE_SCREEN, strMessageScreenTip);
}

strMessageScreen = application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(MessageLog.MESSAGE_SCREEN);
strMessageScreenTip = application.getResources(ResourceConstants.MAIN_RESOURCE, false).getString(MessageLog.MESSAGE_SCREEN + DBConstants.TIP);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strMessageScreen, MessageLog.MESSAGE_ICON, MessageLog.MESSAGE_SCREEN, strMessageScreenTip);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782112">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogField</MethodClassName>
		<LogicSource>return new MessageLog(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782174">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarEntryCalendarScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(CalendarEntry.kStartDateTimeKey);
BaseField fieldTrue = new BooleanField(null, "FalseField", DBConstants.DEFAULT_FIELD_LENGTH, "FalseField", null);
fieldTrue.setState(true);
this.getMainRecord().addListener(new FreeOnFreeHandler(fieldTrue));
//+this.getMainRecord().addListener(new CompareFileFilter(CalendarEntry.kHidden, fieldTrue, "<>", null, true));
this.setEditing(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782175">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarEntryCalendarScreen</MethodClassName>
		<LogicSource>return new CalendarEntry(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782176">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarEntryCalendarScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
this.addColumn(new MultipleTableFieldConverter(record, CalendarEntry.kStartDateTime));
this.addColumn(new MultipleTableFieldConverter(record, CalendarEntry.kEndDateTime));
this.addColumn(new MultipleTableFieldConverter(record, CalendarEntry.kDescription));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782177">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>getCalendarItem</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarEntryCalendarScreen</MethodClassName>
		<LogicSource>return new CalendarEntryItem(this, -1, 0, 1, 2, -1);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782179">
		<LastChanged>2011-08-18T14:33:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getCalendarItem</MethodName>
		<LogicDescription>Get the CalendarItem for this record</LogicDescription>
		<MethodReturns>CalendarItem</MethodReturns>
		<MethodInterface>Rec fieldList</MethodInterface>
		<MethodClassName>CalendarScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782185">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PackagesScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>recHeader, record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>PackagesScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782186">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesScreen</MethodClassName>
		<LogicSource>return new Packages(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782187">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782188">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PackagesGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>recHeader, record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>PackagesGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782189">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782190">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesGridScreen</MethodClassName>
		<LogicSource>return new Packages(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782191">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PartField</MethodClassName>
		<LogicSource>return new Part(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782192">
		<LastChanged>2010-02-10T12:10:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Packages</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = new PackagesGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = new PackagesScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) == ScreenConstants.DISPLAY_MODE)
    screen = new PackagesGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782194">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, Packages.SCAN, MenuConstants.SELECT, Packages.SCAN, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782195">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, Packages.SCAN, MenuConstants.SELECT, Packages.SCAN, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782196">
		<LastChanged>2009-10-10T17:32:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BaseScanListener</MethodName>
		<LogicDescription>Constructor</LogicDescription>
		<MethodReturns/>
		<MethodInterface>RecordOwnerParent parent, String strSourcePrefix</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782197">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>filterFile</MethodName>
		<LogicDescription>If this file should be processed, return true.</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>File file</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource><![CDATA[String strName = file.getName();
if (strName.endsWith("~"))
    return false;
if (strName.endsWith("#"))
    return false;
if (strName.startsWith("#"))
    return false;
if (strName.startsWith("."))
    return false;
return true;    // Process this.]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782198">
		<LastChanged>2009-12-04T04:58:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>moveThisFile</MethodName>
		<LogicDescription>Do whatever processing that needs to be done on this file.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>File fileSource, File fileDestDir, String strDestName</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource><![CDATA[fileDestDir.mkdirs();
m_fileSource = fileSource;
try {
    FileInputStream fileIn = new FileInputStream(fileSource);
    InputStreamReader inStream = new InputStreamReader(fileIn);
    LineNumberReader reader = new LineNumberReader(inStream);
    
    this.moveThisFile(reader, fileDestDir, strDestName);
    
    reader.close();
    inStream.close();

    fileIn.close();

} catch (FileNotFoundException ex)  {
    ex.printStackTrace();
} catch (IOException ex)  {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782199">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>filterDirectory</MethodName>
		<LogicDescription>If this file should be processed, return true</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>File file</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource><![CDATA[if ("CVS".equalsIgnoreCase(file.getName()))
    return false;
if (file.getName().startsWith("."))
    return false;
return true;    // By default, process all directories]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782200">
		<LastChanged>2009-04-15T15:25:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>processThisDirectory</MethodName>
		<LogicDescription><![CDATA[Do whatever processing that needs to be done on this directory.
@return caller specific information about this directory.]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>File fileDir, Object objDirID</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource>return null;    // By default don't process directories</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782201">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>convertString</MethodName>
		<LogicDescription>Do any string conversion on the file text.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String string</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource>return string;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782204">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>filterFile</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesScanListener</MethodClassName>
		<LogicSource>return false; // Not used</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782205">
		<LastChanged>2010-02-10T12:03:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>filterDirectory</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesScanListener</MethodClassName>
		<LogicSource><![CDATA[if ("META-INF".equalsIgnoreCase(file.getName()))
    return false;
return super;	// All valid directories]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782206">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>moveThisFile</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesScanListener</MethodClassName>
		<LogicSource>// Do not process any files</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782207">
		<LastChanged>2010-02-27T06:38:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>processThisDirectory</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesScanListener</MethodClassName>
		<LogicSource><![CDATA[int iCounter = 0;
try {
    String directoryName = fileDir.getName();

    boolean containsFiles = this.directoryContainsFiles(fileDir);
    
    ClassProject.CodeType codeType = (ClassProject.CodeType)this.getProperties().get("codeType");
    String projectString = this.getProperty("projectID");
    int projectID = Integer.parseInt(Converter.stripNonNumber(projectString));
            
    Integer intParent = (Integer)objDirID;
    if (intParent != null)
    {
        Object bookmark = null;
        m_recPackages.addNew();
        m_recPackages.setKeyArea(Packages.kNameKey);
        m_recPackages.getField(Packages.kParentFolderID).setValue(intParent);
        m_recPackages.getField(Packages.kName).setString(directoryName);
        m_recPackages.getField(Packages.kClassProjectID).setData(null);
        boolean recordExists = false;
        if ((m_recPackages.seek(">=") == true)
            && (m_recPackages.getField(Packages.kParentFolderID).getValue() == intParent)
            && (m_recPackages.getField(Packages.kName).toString().equalsIgnoreCase(directoryName)))
    			recordExists = true;
        if (recordExists)
        { // Good, one exists already, use it (note: this reads the default [0] if it exists)
            bookmark = m_recPackages.getHandle(DBConstants.BOOKMARK_HANDLE);
        	ClassProject.CodeType fieldCodeType = ((CodeTypeField)m_recPackages.getField(Packages.kCodeType)).getCodeType();
            m_recPackages.edit(); // Always updates the "last updated" time
            if (containsFiles)
            {
            	if ((m_recPackages.getField(Packages.kClassProjectID).getValue() == 0)	// No project yet, I own it
            			|| (ClassProject.CodeType.BASE == codeType)	// If there are files in a base dir, I own it
            			|| (fieldCodeType == codeType)	// Another dir of the same type is default, now I own it
            			|| (ClassProject.CodeType.BASE != codeType) && (ClassProject.CodeType.BASE != fieldCodeType))	// base doesn't own it, I own it
            	{
                    m_recPackages.getField(Packages.kClassProjectID).setValue(projectID);	// If there are files, I own it.
                    ((CodeTypeField)m_recPackages.getField(Packages.kCodeType)).setCodeType(codeType);
            	}
            }
            else
            {
                if (m_recPackages.getField(Packages.kClassProjectID).getValue() == projectID)
                    if (fieldCodeType == codeType)
                {	// That's weird. I should not own it if there are no files in here.
                    m_recPackages.getField(Packages.kClassProjectID).setValue(0); // This says it is empty (will be replaced when I find a dir with files in it)
                }
            }
            m_recPackages.handleRecordChange(m_recPackages.getField(Packages.kParentFolderID), DBConstants.FIELD_CHANGED_TYPE, true);     // init this field override for other value
            m_recPackages.set();                        
        }
        else
        { // None exists, create a default entry
            m_recPackages.addNew();
            m_recPackages.getField(Packages.kParentFolderID).setValue(intParent);
            m_recPackages.getField(Packages.kName).setString(directoryName);
            if (containsFiles)
            	m_recPackages.getField(Packages.kClassProjectID).setValue(projectID);	// If there are files, I own it.
            else
            	m_recPackages.getField(Packages.kClassProjectID).setValue(0);
            ((CodeTypeField)m_recPackages.getField(Packages.kCodeType)).setCodeType(codeType);
            m_recPackages.add();
            bookmark = m_recPackages.getLastModified(DBConstants.BOOKMARK_HANDLE);                      
        }

        // Now claim ownership of any empty directories above this
        while (m_recPackages.getField(Packages.kParentFolderID).getValue() != 0)
        {
            int parentFolderID = (int)m_recPackages.getField(Packages.kParentFolderID).getValue();
            m_recPackages.setKeyArea(Packages.kIDKey);
            m_recPackages.addNew();
            m_recPackages.getField(Packages.kID).setValue(parentFolderID);
            if ((!m_recPackages.seek(null)) || (m_recPackages.getEditMode() != DBConstants.EDIT_CURRENT))
                break;
            if (m_recPackages.getField(Packages.kClassProjectID).getValue() == 0)
            { // Any empty parents belong to the same project
                m_recPackages.edit();
                if (containsFiles)
                	m_recPackages.getField(Packages.kClassProjectID).setValue(projectID);	// If there are files in child, I own it (for now)
                else
                	m_recPackages.getField(Packages.kClassProjectID).setValue(0);
                ((CodeTypeField)m_recPackages.getField(Packages.kCodeType)).setCodeType(codeType);
                m_recPackages.set();
            }
        }

        m_recPackages.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
        iCounter = (int)m_recPackages.getField(Packages.kID).getValue();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
return new Integer(iCounter);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782208">
		<LastChanged>2009-04-15T15:21:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>PackagesScanListener</MethodName>
		<LogicDescription/>
		<MethodReturns>parent, null</MethodReturns>
		<MethodInterface>ConvertCode parent, Packages recPackages</MethodInterface>
		<MethodClassName>PackagesScanListener</MethodClassName>
		<LogicSource>m_recPackages = recPackages;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782209">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Packages</MethodClassName>
		<LogicSource><![CDATA[super;
this.addListener(new DateChangedHandler(Packages.kLastUpdated));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782211">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>JnlpFileField</MethodClassName>
		<LogicSource>return new JnlpFile(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782212">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>JnlpFileScreen</MethodClassName>
		<LogicSource>return new JnlpFile(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782213">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>JnlpFileGridScreen</MethodClassName>
		<LogicSource>return new JnlpFile(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782214">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>JnlpFileScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, JnlpFileScreen.WRITE_FILE, MenuConstants.PRINT, JnlpFileScreen.WRITE_FILE, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782215">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>JnlpFileScreen</MethodClassName>
		<LogicSource><![CDATA[if (JnlpFileScreen.WRITE_FILE.equals(strCommand))
{
    return true;	// Command handled
}
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782216">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReport</MethodClassName>
		<LogicSource>return new Part(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782226">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReport</MethodClassName>
		<LogicSource>return new PackagesReportScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782227">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReport</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(Part.kJnlpFileIDKey);
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(Part.kJnlpFileID), this.getScreenRecord().getField(PackagesReportScreenRecord.kJnlpFileID), "="));

this.getMainRecord().addListener(new SubCountHandler(this.getScreenRecord().getField(PackagesReportScreenRecord.kReportCount), false, true));

this.getRecord(Packages.kPackagesFile).addListener(new SubFileFilter(this.getMainRecord()));
this.getRecord(Packages.kPackagesFile).addListener(new SetupPackagesTree(this.getScreenRecord().getField(PackagesReportScreenRecord.kPackagesTree))); 
this.getRecord(Packages.kPackagesFile).addListener(new SetupExcludePackagesHandler(this.getScreenRecord().getField(PackagesReportScreenRecord.kExcludePackages)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782228">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReport</MethodClassName>
		<LogicSource>return new PackagesReportToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782229">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReportToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782230">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReport</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782231">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getServletPath</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReport</MethodClassName>
		<LogicSource>return super.getServletPath(DBParams.XHTMLSERVLET); // Use cocoon</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782232">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addReportDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReport</MethodClassName>
		<LogicSource>return new PackagesReportDetail(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782233">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReport</MethodClassName>
		<LogicSource><![CDATA[super;
new Packages(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782234">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReportDetail</MethodClassName>
		<LogicSource>return this.getRecord(Packages.kPackagesFile);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782235">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReportDetail</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782236">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetupPackagesTree</MethodClassName>
		<LogicSource><![CDATA[try {
    if (m_recPackages == null)
    {
        RecordOwner recordOwner = Utility.getRecordOwner(this.getOwner());
        m_recPackages = new Packages(recordOwner);
        if (recordOwner != null)
            recordOwner.removeRecord(m_recPackages);
    }
    String strPackagesTree = this.getOwner().getField(Packages.kName).toString();
    m_recPackages.addNew();
    m_recPackages.getField(Packages.kID).moveFieldToThis(this.getOwner().getField(Packages.kParentFolderID));
    while ((m_recPackages.getField(Packages.kID).getValue() > 0) && (m_recPackages.seek(null)))
    {
        strPackagesTree = m_recPackages.getField(Packages.kName).toString() + '.' + strPackagesTree;
        m_recPackages.getField(Packages.kID).moveFieldToThis(m_recPackages.getField(Packages.kParentFolderID));
    }
    m_fldTargetTree.setString(strPackagesTree);
} catch (DBException ex) {
    ex.printStackTrace();
}

super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782237">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SetupPackagesTree</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField fldTargetTree</MethodInterface>
		<MethodClassName>SetupPackagesTree</MethodClassName>
		<LogicSource>m_fldTargetTree = fldTargetTree;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782238">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetupPackagesTree</MethodClassName>
		<LogicSource><![CDATA[if (m_recPackages != null)
    m_recPackages.free();
m_recPackages = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782346">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>initSharedRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>PurgeRecordsProcess</MethodClassName>
		<LogicSource><![CDATA[FieldListener listener = null;
try {
    BaseField field = record.getSharedRecordTypeKey();
    field.addListener(listener = new InitOnceFieldHandler(null));
    field.setData(new Integer(0), true, DBConstants.INIT_MOVE);
    field.setData(new Integer(0), true, DBConstants.INIT_MOVE);
    if (field != null)
        if (field.getDataClass() == Integer.class)
    {
        for (int i = 1; ; i++)
        {
            Integer intData = new Integer(i);
            field.setData(intData);
            record.addNew();
            Record recShared = record.getTable().getCurrentTable().getRecord();
            if (recShared == null)
                break;
            if (recShared == record)
                break;
            if (recShared.getField(field.getFieldName()).getValue() != i)
                break;
            this.disableAllListeners(recShared);
        }
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    if (listener != null)
        record.removeListener(listener, true);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782349">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getDescription</MethodName>
		<LogicDescription><![CDATA[Get the description.
@return The description]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CalendarRecordItem</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782350">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>getStartDate</MethodName>
		<LogicDescription><![CDATA[Get the start time of this service.
@return The start date.]]></LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CalendarRecordItem</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782351">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>getEndDate</MethodName>
		<LogicDescription><![CDATA[Get the ending time of this service.
@return The end date.]]></LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CalendarRecordItem</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782352">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>getMealDesc</MethodName>
		<LogicDescription><![CDATA[Get the meal description on this date.
@return The meal description.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Date date</MethodInterface>
		<MethodClassName>CalendarRecordItem</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782353">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>160</Sequence>
		<MethodName>getIcon</MethodName>
		<LogicDescription><![CDATA[Get the icon (opt).
@return The icon.]]></LogicDescription>
		<MethodReturns>ImageIcon</MethodReturns>
		<MethodInterface>int iIconType</MethodInterface>
		<MethodClassName>CalendarRecordItem</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782354">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>170</Sequence>
		<MethodName>getHighlightColor</MethodName>
		<LogicDescription><![CDATA[Highlight color (optional).
@return The highlight color (green).]]></LogicDescription>
		<MethodReturns>Color</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CalendarRecordItem</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782355">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>180</Sequence>
		<MethodName>getSelectColor</MethodName>
		<LogicDescription><![CDATA[Highlight color (optional).
@return The select color (red).]]></LogicDescription>
		<MethodReturns>Color</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CalendarRecordItem</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782356">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>210</Sequence>
		<MethodName>setStartDate</MethodName>
		<LogicDescription><![CDATA[Change the start time of this service.
@param time The new start date.]]></LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>Date date</MethodInterface>
		<MethodClassName>CalendarRecordItem</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782357">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>220</Sequence>
		<MethodName>setEndDate</MethodName>
		<LogicDescription><![CDATA[Change the ending time of this service.
@param date The new end date.]]></LogicDescription>
		<MethodReturns>Date</MethodReturns>
		<MethodInterface>Date date</MethodInterface>
		<MethodClassName>CalendarRecordItem</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782358">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>190</Sequence>
		<MethodName>getStatus</MethodName>
		<LogicDescription><![CDATA[Get the status of this object.
@return The status.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CalendarRecordItem</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782359">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>290</Sequence>
		<MethodName>setStatus</MethodName>
		<LogicDescription><![CDATA[Set the status of this item.
@param iStatus The new status for this item.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>int iStatus</MethodInterface>
		<MethodClassName>CalendarRecordItem</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782360">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>CalendarRecordItem</MethodName>
		<LogicDescription>A class to return a CalendarItem from a record.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseScreen gridScreen, int iIconField, int iStartDateTimeField, int iEndDateTimeField, int iDescriptionField, int iStatusField</MethodInterface>
		<MethodClassName>CalendarRecordItem</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782383">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addColumn</MethodName>
		<LogicDescription><![CDATA[Set up the screen fields (default = set them all up for the current record).
@param converter The converter to creat a default screen field for.
]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>Converter converter</MethodInterface>
		<MethodClassName>BaseGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782389">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>isPrintableControl</MethodName>
		<LogicDescription><![CDATA[Display this sub-control in html input format?
@param iPrintOptions The view specific print options.
@return True if this sub-control is printable.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>ScreenField sField, int iPrintOptions</MethodInterface>
		<MethodClassName>ScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782425">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RequestTypeField</MethodClassName>
		<LogicSource>return new RequestType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782426">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProcessTypeField</MethodClassName>
		<LogicSource>return new ProcessType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782427">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfoGridScreen</MethodClassName>
		<LogicSource>return new MessageInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782428">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfoGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782429">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfoScreen</MethodClassName>
		<LogicSource>return new MessageInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782430">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfo</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = new MessageInfoScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
    screen = new MessageInfoGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & MessageInfo.PROCESS_DETAIL_MODE) == MessageInfo.PROCESS_DETAIL_MODE)
    screen = new MessageProcessInfoGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782431">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportInfoGridScreen</MethodClassName>
		<LogicSource>return new MessageTransportInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782432">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>MessageTransportInfoGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recMain, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>MessageTransportInfoGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782433">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportInfoScreen</MethodClassName>
		<LogicSource>return new MessageTransportInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782434">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>MessageProcessInfoGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recMain, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>MessageProcessInfoGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782435">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoScreen</MethodClassName>
		<LogicSource>return new MessageProcessInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782436">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfo</MethodClassName>
		<LogicSource><![CDATA[if (MessageInfo.PROCESS_DETAIL_SCREEN.equalsIgnoreCase(strCommand))
    return MessageInfo.PROCESS_DETAIL_MODE;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782438">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfoScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(MessageInfo.PROCESS_DETAIL_SCREEN), MenuConstants.GRID, MessageInfo.PROCESS_DETAIL_SCREEN, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782439">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.GRID, MessageInfo.PROCESS_DETAIL_SCREEN, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(MessageInfo.PROCESS_DETAIL_SCREEN));
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782440">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(MessageInfo.PROCESS_DETAIL_SCREEN), MenuConstants.GRID, MessageInfo.PROCESS_DETAIL_SCREEN, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782441">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoGridScreen</MethodClassName>
		<LogicSource>return new MessageProcessInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782442">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoGridScreen</MethodClassName>
		<LogicSource>return new MessageInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782443">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportInfoGridScreen</MethodClassName>
		<LogicSource>return new MessageProcessInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782444">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoScreen</MethodClassName>
		<LogicSource>return new MessageInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782445">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportInfoScreen</MethodClassName>
		<LogicSource>return new MessageProcessInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782446">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DetailScreen</MethodClassName>
		<LogicSource><![CDATA[m_recHeader = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782447">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoField</MethodClassName>
		<LogicSource>return new MessageProcessInfo(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782449">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(MessageInfo.TRANSPORT_DETAIL_SCREEN), MenuConstants.GRID, MessageInfo.TRANSPORT_DETAIL_SCREEN, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782450">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.GRID, MessageInfo.TRANSPORT_DETAIL_SCREEN, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(MessageInfo.TRANSPORT_DETAIL_SCREEN));
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782451">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.PRODUCT_RESOURCE, true).getString(MessageInfo.TRANSPORT_DETAIL_SCREEN), MenuConstants.GRID, MessageInfo.TRANSPORT_DETAIL_SCREEN, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782452">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[if (MessageInfo.TRANSPORT_DETAIL_SCREEN.equalsIgnoreCase(strCommand))
    return MessageInfo.TRANSPORT_DETAIL_MODE;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782453">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = new MessageProcessInfoScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
    screen = new MessageProcessInfoGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & MessageInfo.TRANSPORT_DETAIL_MODE) == MessageInfo.TRANSPORT_DETAIL_MODE)
    screen = new MessageTransportInfoGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
    screen = super;
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782454">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTypeField</MethodClassName>
		<LogicSource>return new MessageType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782455">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfoHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782456">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoGridScreen</MethodClassName>
		<LogicSource>return new MessageInfoHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782457">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoScreen</MethodClassName>
		<LogicSource>return new MessageInfoHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782458">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportInfoGridScreen</MethodClassName>
		<LogicSource>return new MessageProcessInfoHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782459">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportInfoScreen</MethodClassName>
		<LogicSource>return new MessageProcessInfoHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782460">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782461">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoGridScreen</MethodClassName>
		<LogicSource>return new MessageInfoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782462">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoScreen</MethodClassName>
		<LogicSource>return new MessageInfoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782463">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportInfoScreen</MethodClassName>
		<LogicSource>return new MessageInfoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782464">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportInfoGridScreen</MethodClassName>
		<LogicSource>return new MessageInfoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782465">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfoHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(MessageInfoScreenRecord.kMessageInfoID).setEnabled(true);
this.getScreenRecord().getField(MessageInfoScreenRecord.kMessageInfoTypeID).setEnabled(true);
this.getScreenRecord().getField(MessageInfoScreenRecord.kMessageTypeID).setEnabled(true);
this.getScreenRecord().getField(MessageInfoScreenRecord.kProcessTypeID).setEnabled(true);
this.getScreenRecord().getField(MessageInfoScreenRecord.kContactTypeID).setEnabled(true);
this.getScreenRecord().getField(MessageInfoScreenRecord.kRequestTypeID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782466">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getScreenRecord().getField(MessageInfoScreenRecord.kMessageProcessInfoID).setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782467">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

// Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(MessageInfoScreenRecord.kMessageInfoID)).syncReference(this.getHeaderRecord());
this.getScreenRecord().getField(MessageInfoScreenRecord.kMessageInfoID).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new CompareFileFilter(MessageProcessInfo.kMessageTypeID, this.getScreenRecord().getField(MessageInfoScreenRecord.kMessageTypeID), DBConstants.EQUALS, null, true));
this.getScreenRecord().getField(MessageInfoScreenRecord.kMessageTypeID).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(MessageProcessInfo.kProcessTypeID, this.getScreenRecord().getField(MessageInfoScreenRecord.kProcessTypeID), DBConstants.EQUALS, null, true));
this.getScreenRecord().getField(MessageInfoScreenRecord.kProcessTypeID).addListener(new FieldReSelectHandler(this));

this.getScreenRecord().getField(MessageInfoScreenRecord.kMessageInfoTypeID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(MessageInfoScreenRecord.kContactTypeID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(MessageInfoScreenRecord.kRequestTypeID).addListener(new FieldReSelectHandler(this));
// This is a little inefficient, but this filter is not used much.
this.getMainRecord().addListener(new FileFilter(null)
{
    /**
     * Set up/do the remote criteria.
     * @param strbFilter The SQL query string to add to.
     * @param bIncludeFileName Include the file name with this query?
     * @param vParamList The param list to add the raw data to (for prepared statements).
     * @return True if you should not skip this record (does a check on the local data).
     */
    public boolean doLocalCriteria(StringBuffer strbFilter, boolean bIncludeFileName, Vector<BaseField> vParamList)
    {
        Record recMessageInfoScreenRecord = getScreenRecord();
        if (recMessageInfoScreenRecord != null)
            if ((!recMessageInfoScreenRecord.getField(MessageInfoScreenRecord.kMessageInfoTypeID).isNull())
                || (!recMessageInfoScreenRecord.getField(MessageInfoScreenRecord.kContactTypeID).isNull())
                || (!recMessageInfoScreenRecord.getField(MessageInfoScreenRecord.kRequestTypeID).isNull()))
        {
            // Note I move the MessageInfoField to a temp field since the reference is a header filter.
                    recMessageInfoScreenRecord.getField(MessageInfoScreenRecord.kMessageInfoCompareID).moveFieldToThis(this.getOwner().getField(MessageProcessInfo.kMessageInfoID));
                    Record recMessageInfo = ((ReferenceField)recMessageInfoScreenRecord.getField(MessageInfoScreenRecord.kMessageInfoCompareID)).getReference();
                    if (recMessageInfo != null)
                    {
                        if (!recMessageInfoScreenRecord.getField(MessageInfoScreenRecord.kMessageInfoTypeID).isNull())
                            if (!recMessageInfoScreenRecord.getField(MessageInfoScreenRecord.kMessageInfoTypeID).equals(recMessageInfo.getField(MessageInfo.kMessageInfoTypeID)))
                                return false;
                        if (!recMessageInfoScreenRecord.getField(MessageInfoScreenRecord.kContactTypeID).isNull())
                            if (!recMessageInfoScreenRecord.getField(MessageInfoScreenRecord.kContactTypeID).equals(recMessageInfo.getField(MessageInfo.kContactTypeID)))
                                return false;
                        if (!recMessageInfoScreenRecord.getField(MessageInfoScreenRecord.kRequestTypeID).isNull())
                            if (!recMessageInfoScreenRecord.getField(MessageInfoScreenRecord.kRequestTypeID).equals(recMessageInfo.getField(MessageInfo.kRequestTypeID)))
                                return false;
                    }
                }
                return super.doLocalCriteria(strbFilter, bIncludeFileName, vParamList);                
            }
 
        });]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782468">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoScreen</MethodClassName>
		<LogicSource><![CDATA[super;
    // Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(MessageInfoScreenRecord.kMessageInfoID)).syncReference(this.getHeaderRecord());

String strManualTransportID = Integer.toString(((ReferenceField)this.getMainRecord().getField(MessageProcessInfo.kDefaultMessageTransportID)).getIDFromCode(MessageTransport.MANUAL));
this.getMainRecord().getField(MessageProcessInfo.kDefaultMessageTransportID).addListener(new DisableOnFieldHandler(this.getMainRecord().getField(MessageProcessInfo.kInitialMessageStatusID), strManualTransportID, false));
Converter convCheckMark = new RadioConverter(this.getMainRecord().getField(MessageProcessInfo.kDefaultMessageTransportID), strManualTransportID, false);
this.getMainRecord().getField(MessageProcessInfo.kDefaultMessageTransportID).addListener(new RemoveConverterOnFreeHandler(convCheckMark));
this.getMainRecord().getField(MessageProcessInfo.kDefaultMessageTransportID).addListener(new CopyDataHandler(this.getMainRecord().getField(MessageProcessInfo.kInitialMessageStatusID), null, convCheckMark));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782469">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportInfoScreen</MethodClassName>
		<LogicSource><![CDATA[super;
    // Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(MessageInfoScreenRecord.kMessageProcessInfoID)).syncReference(this.getHeaderRecord());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782470">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
    // Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(MessageInfoScreenRecord.kMessageProcessInfoID)).syncReference(this.getHeaderRecord());
this.getScreenRecord().getField(MessageInfoScreenRecord.kMessageProcessInfoID).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782471">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), -1, MessageProcessInfo.kDescription, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782474">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getMessageProcessInfo*1</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageProcessInfo</MethodReturns>
		<MethodInterface>String strMessageKey</MethodInterface>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[int iOldKeyArea = this.getDefaultOrder();
try {
    if (Utility.isNumeric(strMessageKey))
    {
        this.getField(MessageProcessInfo.kID).setString(strMessageKey);
        this.setKeyArea(MessageProcessInfo.kIDKey);
        if (this.seek(null))
            return this;
    }
    this.getField(MessageProcessInfo.kCode).setString(strMessageKey);
    this.setKeyArea(MessageProcessInfo.kCodeKey);
    if (this.seek(null))
        return this;
    MessageInfo recMessageInfo = (MessageInfo)((ReferenceField)this.getField(MessageProcessInfo.kMessageInfoID)).getReferenceRecord();
    recMessageInfo.addNew();
    recMessageInfo.getField(MessageInfo.kCode).setString(strMessageKey);
    recMessageInfo.setKeyArea(MessageInfo.kCodeKey);
    if (recMessageInfo.seek(null))
    {
        if (MessageInfoType.REQUEST.equalsIgnoreCase(((ReferenceField)recMessageInfo.getField(MessageInfo.kMessageInfoTypeID)).getReference().getField(MessageInfoType.kCode).toString()))
        {   // Must be a request!
            this.getField(MessageProcessInfo.kMessageInfoID).moveFieldToThis(recMessageInfo.getField(MessageInfo.kID));
            this.getField(MessageProcessInfo.kMessageTypeID).setValue(((ReferenceField)this.getField(MessageProcessInfo.kMessageTypeID)).getIDFromCode(MessageType.MESSAGE_IN));
            this.getField(MessageProcessInfo.kProcessTypeID).setValue(((ReferenceField)this.getField(MessageProcessInfo.kProcessTypeID)).getIDFromCode(ProcessType.INFO));
            this.setKeyArea(MessageProcessInfo.kMessageInfoIDKey);
            if (this.seek(null))
                return this;
            this.getField(MessageProcessInfo.kProcessTypeID).setValue(((ReferenceField)this.getField(MessageProcessInfo.kProcessTypeID)).getIDFromCode(ProcessType.UPDATE));    // Should not be, but check anyway
            if (this.seek(null))
                return this;
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    this.setKeyArea(iOldKeyArea);   // Set this back
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782475">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfoTypeField</MethodClassName>
		<LogicSource>return new MessageInfoType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782477">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addMessageProperties</MethodName>
		<LogicDescription>Add the properties to this message (info).</LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>MessageTransportInfo</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> mapHeaderMessageInfo = trxMessageHeader.getMessageInfoMap();

Map<String,Object> propMessageTransportInfo = ((PropertiesField)this.getField(MessageTransportInfo.kProperties)).loadProperties();
if (mapHeaderMessageInfo != null)
    mapHeaderMessageInfo.putAll(propMessageTransportInfo);
else
    mapHeaderMessageInfo = propMessageTransportInfo;
trxMessageHeader.setMessageInfoMap(mapHeaderMessageInfo);

return trxMessageHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782478">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>addMessageProperties</MethodName>
		<LogicDescription>add the properties to this message (info).</LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>MessageInfo</MethodClassName>
		<LogicSource><![CDATA[Map<String, Object> mapHeaderMessageInfo = trxMessageHeader.getMessageInfoMap();
Map<String, Object> propMessageInfo = ((PropertiesField)this.getField(MessageInfo.kMessageProperties)).loadProperties();
propMessageInfo.put(TrxMessageHeader.INTERNAL_MESSAGE_CLASS, this.getField(MessageInfo.kMessageClass).toString());

MessageInfoType recMessageInfoType = (MessageInfoType)((ReferenceField)this.getField(MessageInfo.kMessageInfoTypeID)).getReference();
if (recMessageInfoType != null)
    propMessageInfo.put(TrxMessageHeader.MESSAGE_INFO_TYPE, recMessageInfoType.getField(MessageInfoType.kCode).toString());
String schemaLocation = (String)propMessageInfo.get(SCHEMA_LOCATION);
if (schemaLocation == null)
    schemaLocation = this.getField(MessageInfo.kCode).toString();
if (schemaLocation != null)
    propMessageInfo.put(SCHEMA_LOCATION, schemaLocation);

Record recRequestType = ((ReferenceField)this.getField(MessageInfo.kRequestTypeID)).getReference();
if ((recRequestType != null) && (recRequestType.getEditMode() == DBConstants.EDIT_CURRENT))
    propMessageInfo.put(TrxMessageHeader.MESSAGE_REQUEST_TYPE, recRequestType.getField(RequestType.kCode).toString());

if (mapHeaderMessageInfo != null)
    mapHeaderMessageInfo.putAll(propMessageInfo);
else
    mapHeaderMessageInfo = propMessageInfo;
trxMessageHeader.setMessageInfoMap(mapHeaderMessageInfo);

return trxMessageHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782480">
		<LastChanged>2010-12-03T03:59:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>createProcessMessageHeader</MethodName>
		<LogicDescription><![CDATA[From this valid record and target record, create the proper message.
This must be valid and the recTarget must be valid.]]></LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>MessageDetailTarget recMessageDetailTarget, String strMessageTransport</MethodInterface>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[if ((this.getEditMode() != DBConstants.EDIT_CURRENT) && (this.getEditMode() != DBConstants.EDIT_IN_PROGRESS))
    return null;    // Must have a valid record
TrxMessageHeader trxMessageHeader = new TrxMessageHeader(null, null);
// Add properties from this process info
MessageInfo recMessageInfo = (MessageInfo)((ReferenceField)this.getField(MessageProcessInfo.kMessageInfoID)).getReference();
if (recMessageInfo == null)
    return null;    // Impossible
trxMessageHeader = recMessageInfo.addMessageProperties(trxMessageHeader);
trxMessageHeader = this.addMessageProperties(trxMessageHeader);

if (recMessageDetailTarget != null)
{
    if (m_recMessageDetail == null)
    {
        RecordOwner recordOwner = Utility.getRecordOwner(this);
        m_recMessageDetail = new MessageDetail(recordOwner);
        recordOwner.removeRecord(m_recMessageDetail);
        this.addListener(new FreeOnFreeHandler(m_recMessageDetail));
    }
    Vector<MessageDetailTarget> vMessageDetailTarget = new Vector<MessageDetailTarget>();
    while (recMessageDetailTarget != null)
    {
        vMessageDetailTarget.addElement(recMessageDetailTarget);
        recMessageDetailTarget = recMessageDetailTarget.getNextMessageDetailTarget();
    }
    for (int i = vMessageDetailTarget.size() - 1; i >= 0; i--)
    {
        recMessageDetailTarget = vMessageDetailTarget.get(i);
        trxMessageHeader = recMessageDetailTarget.addMessageProperties(trxMessageHeader);
    }
    MessageTransport recMessageTransport = null;
    if ((strMessageTransport == null) || (strMessageTransport.length() == 0))
        strMessageTransport = (String)trxMessageHeader.get(MessageTransport.SEND_MESSAGE_BY_PARAM);
    if ((strMessageTransport != null) && (strMessageTransport.length() != 0))
        recMessageTransport = this.getMessageTransport(strMessageTransport);
    if (recMessageTransport == null)
    { // Still no transport, see if there is a default transport in the MessageDetail
        for (int i = 0; i < vMessageDetailTarget.size(); i++)
        {
            recMessageDetailTarget = vMessageDetailTarget.get(i);
            recMessageTransport = m_recMessageDetail.getDefaultMessageTransport(recMessageDetailTarget, this);
            if (recMessageTransport != null)
                break;
        }
    }
    if (recMessageTransport == null)
    { // See if there is a default transport specified in this record
        if (!this.getField(MessageProcessInfo.kDefaultMessageTransportID).isNull())
            recMessageTransport = (MessageTransport)((ReferenceField)this.getField(MessageProcessInfo.kDefaultMessageTransportID)).getReference();
    }
    if (recMessageTransport == null)
    { // See if there is a default transport in the MessageDetailTarget chain.
        for (int i = 0; i < vMessageDetailTarget.size(); i++)
        {
            recMessageDetailTarget = vMessageDetailTarget.get(i);
            recMessageTransport = recMessageDetailTarget.getMessageTransport(trxMessageHeader);
            if (recMessageTransport != null)
                if ((recMessageTransport.getEditMode() == DBConstants.EDIT_CURRENT) || (recMessageTransport.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
                    break;
        }
    }
    if ((recMessageTransport == null)
        || ((recMessageTransport.getEditMode() != DBConstants.EDIT_CURRENT) && (recMessageTransport.getEditMode() != DBConstants.EDIT_IN_PROGRESS)))
            recMessageTransport = this.getMessageTransport(MessageTransport.DIRECT);
    trxMessageHeader = recMessageTransport.addMessageProperties(trxMessageHeader);
    for (int i = vMessageDetailTarget.size() - 1; i >= 0; i--)
    {
        recMessageDetailTarget = vMessageDetailTarget.get(i);
        trxMessageHeader = m_recMessageDetail.addMessageProperties(trxMessageHeader, recMessageDetailTarget, this, recMessageTransport);
    }
    for (int i = vMessageDetailTarget.size() - 1; i >= 0; i--)
    {
        recMessageDetailTarget = vMessageDetailTarget.get(i);
        trxMessageHeader = recMessageDetailTarget.addDestInfo(trxMessageHeader);
    }
}
else
{	// If there is no target detail, at least try to get the transport
    MessageTransport recMessageTransport = null;
    if ((strMessageTransport == null) || (strMessageTransport.length() == 0))
        strMessageTransport = (String)trxMessageHeader.get(MessageTransport.SEND_MESSAGE_BY_PARAM);
    if ((strMessageTransport != null) && (strMessageTransport.length() != 0))
        recMessageTransport = this.getMessageTransport(strMessageTransport);
    if (recMessageTransport != null) if (true)
    	trxMessageHeader = recMessageTransport.addMessageProperties(trxMessageHeader);        	
}
trxMessageHeader = this.addTransportProperties(trxMessageHeader, null);
if (trxMessageHeader.get(MessageConstants.QUEUE_NAME) != null)
    trxMessageHeader.setQueueName((String)trxMessageHeader.get(MessageConstants.QUEUE_NAME));
if (trxMessageHeader.get(MessageConstants.QUEUE_TYPE) != null)
    trxMessageHeader.setQueueType((String)trxMessageHeader.get(MessageConstants.QUEUE_TYPE));

return trxMessageHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782481">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>addMessageProperties</MethodName>
		<LogicDescription/>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> mapHeaderMessageInfo = trxMessageHeader.getMessageInfoMap();

Map<String,Object> propMessageProcessInfo = ((PropertiesField)this.getField(MessageProcessInfo.kProperties)).loadProperties();
String strQueueName = this.getQueueName(false);
if (propMessageProcessInfo.get(MessageConstants.QUEUE_NAME) == null)
    if (strQueueName != null)
        propMessageProcessInfo.put(MessageConstants.QUEUE_NAME, strQueueName);
String strQueueType = this.getQueueType(false);
if (propMessageProcessInfo.get(MessageConstants.QUEUE_TYPE) == null)
    if (strQueueType != null)
        propMessageProcessInfo.put(MessageConstants.QUEUE_TYPE, strQueueType);
if (!this.getField(MessageProcessInfo.kReplyMessageProcessInfoID).isNull())
    propMessageProcessInfo.put(TrxMessageHeader.MESSAGE_RESPONSE_ID, this.getField(MessageProcessInfo.kReplyMessageProcessInfoID).toString());
if (!this.getField(MessageProcessInfo.kLocalMessageProcessInfoID).isNull())
    propMessageProcessInfo.put(LocalMessageTransport.LOCAL_PROCESSOR, this.getField(MessageProcessInfo.kLocalMessageProcessInfoID).toString());
if (!this.getField(MessageProcessInfo.kMessageTypeID).isNull())
{
    MessageType recMessageType = (MessageType)((ReferenceField)this.getField(MessageProcessInfo.kMessageTypeID)).getReference();
    if (recMessageType != null)
        propMessageProcessInfo.put(TrxMessageHeader.MESSAGE_PROCESS_TYPE, recMessageType.getField(MessageType.kCode).toString());
}

if (!this.getField(MessageProcessInfo.kProcessorClass).isNull())
    propMessageProcessInfo.put(TrxMessageHeader.MESSAGE_PROCESSOR_CLASS, this.getField(MessageProcessInfo.kProcessorClass).toString());
if (mapHeaderMessageInfo != null)
    mapHeaderMessageInfo.putAll(propMessageProcessInfo);
else
    mapHeaderMessageInfo = propMessageProcessInfo;
if (mapHeaderMessageInfo.get(TrxMessageHeader.MESSAGE_PROCESSOR_CLASS) == null)
    this.setDefaultMessageProcessor(mapHeaderMessageInfo);
trxMessageHeader.setMessageInfoMap(mapHeaderMessageInfo);

trxMessageHeader.put(TrxMessageHeader.MESSAGE_PROCESS_INFO_ID, this.getCounterField().toString());

String strDescription = this.getField(MessageProcessInfo.kDescription).toString();
if (((ReferenceField)this.getField(MessageProcessInfo.kMessageInfoID)).getReference() != null)
    if (!((ReferenceField)this.getField(MessageProcessInfo.kMessageInfoID)).getReference().getField(MessageInfo.kDescription).isNull())
        strDescription = ((ReferenceField)this.getField(MessageProcessInfo.kMessageInfoID)).getReference().getField(MessageInfo.kDescription).toString();
trxMessageHeader.put(TrxMessageHeader.DESCRIPTION, strDescription);

return trxMessageHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782482">
		<LastChanged>2009-06-03T11:36:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>addTransportProperties</MethodName>
		<LogicDescription/>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader, String strVersion</MethodInterface>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[if (trxMessageHeader.get(MessageTransport.TRANSPORT_ID_PARAM) != null)
{
    RecordOwner recordOwner = Utility.getRecordOwner(this);
    if (m_recMessageTransport == null)
    {
        m_recMessageTransport = new MessageTransport(recordOwner);
        if (recordOwner != null)
            recordOwner.removeRecord(m_recMessageTransport);
        this.addListener(new FreeOnFreeHandler(m_recMessageTransport));
    }
    if (m_recMessageTransportInfo == null)
    {
        m_recMessageTransportInfo = new MessageTransportInfo(recordOwner);
        if (recordOwner != null)
            recordOwner.removeRecord(m_recMessageTransportInfo);
        this.addListener(new FreeOnFreeHandler(m_recMessageTransportInfo));
    }
    SubFileFilter subFileFilter = null;
    try {
        if (m_recMessageTransport.setHandle(trxMessageHeader.get(MessageTransport.TRANSPORT_ID_PARAM), DBConstants.BOOKMARK_HANDLE) != null)
        {
            Map<String,Object> propMessageTransport = ((PropertiesField)m_recMessageTransport.getField(MessageTransport.kProperties)).loadProperties();
            String strInitialMessageStatusID = null;
            if (!this.getField(MessageProcessInfo.kInitialMessageStatusID).isNull())
                strInitialMessageStatusID = this.getField(MessageProcessInfo.kInitialMessageStatusID).toString();
            if (strInitialMessageStatusID != null)
            {
                if (propMessageTransport == null)
                    propMessageTransport = new Hashtable<String,Object>();
                propMessageTransport.put(MessageTransport.INITIAL_MESSAGE_DATA_STATUS, strInitialMessageStatusID);
            }
            if (propMessageTransport != null)
            {
                Map<String,Object> propHeaderTransport = trxMessageHeader.getMessageTransportMap();
                if (propHeaderTransport != null)
                    propHeaderTransport.putAll(propMessageTransport);
                else
                    propHeaderTransport = propMessageTransport;
                trxMessageHeader.setMessageTransportMap(propHeaderTransport);
            }
            m_recMessageTransportInfo.setKeyArea(MessageTransportInfo.kMessageProcessInfoIDKey);
            int iMessageVersionID = 0;
            if (trxMessageHeader.getProperties() != null)
                if (strVersion == null)
            {
                if (trxMessageHeader.getProperties().get(MessageVersion.VERSION_ID) != null)
                {
                    try {
                        iMessageVersionID = Integer.parseInt(trxMessageHeader.getProperties().get(MessageVersion.VERSION_ID).toString());
                    } catch (NumberFormatException ex) {
                        // Ignore
                    }
                }
                else
                    strVersion = (String)trxMessageHeader.getProperties().get(MessageVersion.VERSION);
            }
            MessageVersion recMessageVersion = this.getMessageControl().getMessageVersion();
            if (iMessageVersionID != 0)
            {
                recMessageVersion.getField(MessageVersion.kID).setValue(iMessageVersionID);
                recMessageVersion.setKeyArea(MessageVersion.kIDKey);
                if (!recMessageVersion.seek(DBConstants.EQUALS))
                    iMessageVersionID = 0;  // Never
            }
            if (iMessageVersionID == 0)
            {
                recMessageVersion = this.getMessageControl().getMessageVersion(strVersion);
                iMessageVersionID = (int)recMessageVersion.getField(MessageVersion.kID).getValue();
                if (strVersion == null)
                {
                    int iMessageVersionIDDefault = 0;
                    int iMessageVersionIDBestGuess = iMessageVersionID;
                    boolean bDefaultExists = false;
                    m_recMessageTransportInfo.addListener(subFileFilter = new SubFileFilter(this.getField(MessageProcessInfo.kID), MessageTransportInfo.kMessageProcessInfoID, m_recMessageTransport.getField(MessageTransport.kID), MessageTransportInfo.kMessageTransportID, null, -1));
                    while  (m_recMessageTransportInfo.hasNext())
                    {
                        m_recMessageTransportInfo.next();
                        if (m_recMessageTransportInfo.getField(MessageTransportInfo.kActive).getState())
                            iMessageVersionIDBestGuess = (int)m_recMessageTransportInfo.getField(MessageTransportInfo.kMessageVersionID).getValue();
                        else if (m_recMessageTransportInfo.getField(MessageTransportInfo.kMessageVersionID).getValue() == 0)
                            iMessageVersionIDBestGuess = 0;    // If not active with no version, best guess is no version
                        if (m_recMessageTransportInfo.getField(MessageTransportInfo.kDefaultTransport).getState())  // Default is always the best guess
                            iMessageVersionIDDefault = (int)m_recMessageTransportInfo.getField(MessageTransportInfo.kMessageVersionID).getValue();
                        if (m_recMessageTransportInfo.getField(MessageTransportInfo.kMessageVersionID).getValue() == iMessageVersionID)  // Default is always the best guess
                            bDefaultExists = true;
                    }
                    subFileFilter.free();
                    subFileFilter = null;
                    if (iMessageVersionIDDefault != 0)
                        iMessageVersionID = iMessageVersionIDDefault;   // If there is a default, always use it
                    else if (!bDefaultExists)
                        iMessageVersionID = iMessageVersionIDBestGuess; // else, If the default doesn't exist, use the best guess
                    recMessageVersion.getField(MessageVersion.kID).setValue(iMessageVersionID);
                    recMessageVersion.setKeyArea(MessageVersion.kIDKey);
                    if (!recMessageVersion.seek(DBConstants.EQUALS))
                        iMessageVersionID = 0;  // Never
                }
            }
            m_recMessageTransportInfo.getField(MessageTransportInfo.kMessageProcessInfoID).moveFieldToThis(this.getField(MessageProcessInfo.kID));
            m_recMessageTransportInfo.getField(MessageTransportInfo.kMessageTransportID).moveFieldToThis(m_recMessageTransport.getField(MessageTransport.kID));
            m_recMessageTransportInfo.getField(MessageTransportInfo.kMessageVersionID).setValue(iMessageVersionID);
            if (m_recMessageTransportInfo.seek(DBConstants.EQUALS))
            {
                trxMessageHeader = recMessageVersion.addMessageProperties(trxMessageHeader, this.getMessageControl());
                trxMessageHeader = m_recMessageTransportInfo.addMessageProperties(trxMessageHeader);
            }
        }
    } catch (DBException ex) {
        ex.printStackTrace();
    } finally {
        if (subFileFilter != null)
            subFileFilter.free();
    }
}
return trxMessageHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782483">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>setDefaultMessageProcessor</MethodName>
		<LogicDescription>et the default processor if one is not specified</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Map&lt;String,Object&gt; mapHeaderMessageInfo</MethodInterface>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[if (mapHeaderMessageInfo.get(TrxMessageHeader.MESSAGE_PROCESSOR_CLASS) == null)
{
    String strMessageInfoTypeCode = (String)mapHeaderMessageInfo.get(TrxMessageHeader.MESSAGE_INFO_TYPE);
    String strMessageProcessTypeCode = (String)mapHeaderMessageInfo.get(TrxMessageHeader.MESSAGE_PROCESS_TYPE);
    if ((strMessageInfoTypeCode != null) && (strMessageProcessTypeCode != null))
    {
        String strProcessorClass = null;
        if ((MessageInfoType.REQUEST.equals(strMessageInfoTypeCode)) && (MessageType.MESSAGE_OUT.equals(strMessageProcessTypeCode)))
            strProcessorClass = BaseMessageOutProcessor.class.getName();
        else if ((MessageInfoType.REQUEST.equals(strMessageInfoTypeCode)) && (MessageType.MESSAGE_IN.equals(strMessageProcessTypeCode)))
            strProcessorClass = BaseMessageInProcessor.class.getName();
        else if ((MessageInfoType.REPLY.equals(strMessageInfoTypeCode)) && (MessageType.MESSAGE_OUT.equals(strMessageProcessTypeCode)))
            strProcessorClass = BaseMessageReplyOutProcessor.class.getName();
        if ((MessageInfoType.REPLY.equals(strMessageInfoTypeCode)) && (MessageType.MESSAGE_IN.equals(strMessageProcessTypeCode)))
            strProcessorClass = BaseMessageReplyInProcessor.class.getName();
        if (strProcessorClass != null)
            mapHeaderMessageInfo.put(TrxMessageHeader.MESSAGE_PROCESSOR_CLASS, strProcessorClass);
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782487">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,150</Sequence>
		<MethodName>setupMessageHeaderFromCode</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>BaseMessage trxMessage, String strMessageCode, String strVersion</MethodInterface>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[TrxMessageHeader trxMessageHeader = (TrxMessageHeader)trxMessage.getMessageHeader();
if ((trxMessageHeader == null) && (strMessageCode == null))
    return false;
if (trxMessageHeader == null)
{
    trxMessageHeader = new TrxMessageHeader(null, null);
    trxMessage.setMessageHeader(trxMessageHeader);
}
if (strMessageCode == null)
    strMessageCode = (String)trxMessageHeader.get(TrxMessageHeader.MESSAGE_CODE);
Utility.getLogger().info("Message code: " + strMessageCode);
if (strMessageCode == null)
    return false;   // Message not found
MessageProcessInfo recMessageProcessInfo = this.getMessageProcessInfo(strMessageCode);
if (recMessageProcessInfo == null)
    return false;   // Message not found
MessageInfo recMessageInfo = (MessageInfo)((ReferenceField)this.getField(MessageProcessInfo.kMessageInfoID)).getReference();
if (recMessageInfo == null)
    return false;    // Impossible
trxMessageHeader = recMessageInfo.addMessageProperties(trxMessageHeader);
trxMessageHeader = this.addMessageProperties(trxMessageHeader);

trxMessageHeader = this.addTransportProperties(trxMessageHeader, strVersion);
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782488">
		<LastChanged>2010-03-26T00:58:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addMessageProperties</MethodName>
		<LogicDescription><![CDATA[Add the properties to this message (transportinfo).
NOTE: The properties are added ONLY if they don't currently exist in the transport map.]]></LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>MessageTransport</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> mapHeaderMessageTransport = trxMessageHeader.getMessageTransportMap();

Map<String,Object> propMessageTransport = ((PropertiesField)this.getField(MessageTransport.kProperties)).loadProperties();
String strSendBy = this.getField(MessageTransport.kCode).toString();
if ((strSendBy != null) && (strSendBy.length() > 0))
    propMessageTransport.put(MessageTransport.SEND_MESSAGE_BY_PARAM, strSendBy);
String strTransType = this.getField(MessageTransport.kMessageTransportType).toString();
if ((strTransType != null) && (strTransType.length() > 0))
    propMessageTransport.put(MessageTransport.TRANSPORT_TYPE_PARAM, strTransType);
propMessageTransport.put(MessageTransport.TRANSPORT_ID_PARAM, this.getField(MessageTransport.kID).toString());
if (mapHeaderMessageTransport != null)
	Utility.putAllIfNew(mapHeaderMessageTransport, propMessageTransport);
else
    mapHeaderMessageTransport = propMessageTransport;
trxMessageHeader.setMessageTransportMap(mapHeaderMessageTransport);

return trxMessageHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782489">
		<LastChanged>2009-06-07T23:40:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addDestInfo</MethodName>
		<LogicDescription>Add the destination information of this person to the message</LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>Person</MethodClassName>
		<LogicSource><![CDATA[String strMessageTransport = (String)trxMessageHeader.get(MessageTransport.SEND_MESSAGE_BY_PARAM);
if ((MessageTransport.EMAIL.equalsIgnoreCase(strMessageTransport))
    && (trxMessageHeader.get(TrxMessageHeader.DESTINATION_PARAM) == null))
        trxMessageHeader.put(TrxMessageHeader.DESTINATION_PARAM, this.getField(Person.kEmail).toString());
else if ((MessageTransport.FAX.equalsIgnoreCase(strMessageTransport))
    && (trxMessageHeader.get(TrxMessageHeader.DESTINATION_PARAM) == null))
        trxMessageHeader.put(TrxMessageHeader.DESTINATION_PARAM, this.getField(Person.kFax).toString());
else if ((MessageTransport.MAIL.equalsIgnoreCase(strMessageTransport))
    && (trxMessageHeader.get(TrxMessageHeader.DESTINATION_PARAM) == null))
{
    String strMail = this.getField(Person.kName).toString();
    strMail += '\n' + this.getField(Person.kAddressLine1).toString();
    if (!this.getField(Person.kAddressLine2).isNull())
        strMail += '\n' + this.getField(Person.kAddressLine2).toString();
    strMail += '\n' + this.getField(Person.kCityOrTown).toString();
    if (!this.getField(Person.kStateOrRegion).isNull())
        strMail += ", " + this.getField(Person.kStateOrRegion).toString();
    if (!this.getField(Person.kPostalCode).isNull())
        strMail += ' ' + this.getField(Person.kPostalCode).toString();
    if (!this.getField(Person.kCountry).isNull())
        strMail += ' ' + this.getField(Person.kCountry).toString();
    trxMessageHeader.put(TrxMessageHeader.DESTINATION_PARAM, strMail);
}
Map<String,Object> mapInfo = trxMessageHeader.getMessageInfoMap();
if (mapInfo == null)
    trxMessageHeader.setMessageInfoMap(mapInfo = new HashMap<String,Object>());

mapInfo.put(TrxMessageHeader.CONTACT_TYPE, this.getTableNames(false));
mapInfo.put(TrxMessageHeader.CONTACT_ID, this.getField(Person.kID).toString());
if (!this.getField(Person.kUserID).isNull())
{
    mapInfo.put(TrxMessageHeader.CONTACT_USER_ID, this.getField(Person.kUserID).toString());
    Record recUserInfo = ((ReferenceField)this.getField(Person.kUserID)).getReference();
    if (recUserInfo != null)
        if ((recUserInfo.getEditMode() == DBConstants.EDIT_CURRENT) || (recUserInfo.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
            if (!recUserInfo.getField(UserInfo.kUserName).isNull())
                mapInfo.put(TrxMessageHeader.CONTACT_USER, recUserInfo.getField(UserInfo.kUserName).toString());
}

return trxMessageHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782492">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,110</Sequence>
		<MethodName>getMessageProcessInfo*2</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageProcessInfo</MethodReturns>
		<MethodInterface>String strMessageInfoType, String strContactType, String strRequestType, String strMessageProcessType, String strProcessType</MethodInterface>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[int iOldKeyArea = this.getDefaultOrder();
try {
    Record recMessageInfo = ((ReferenceField)this.getField(MessageProcessInfo.kMessageInfoID)).getReferenceRecord();
    int iMessageTypeID = ((ReferenceField)recMessageInfo.getField(MessageInfo.kMessageInfoTypeID)).getIDFromCode(strMessageInfoType);
    if (iMessageTypeID <= 0)
        return null;
    recMessageInfo.getField(MessageInfo.kMessageInfoTypeID).setValue(iMessageTypeID);
    int iContactTypeID = ((ReferenceField)recMessageInfo.getField(MessageInfo.kContactTypeID)).getIDFromCode(strContactType);
    if (iContactTypeID <= 0)
        return null;
    recMessageInfo.getField(MessageInfo.kContactTypeID).setValue(iContactTypeID);
    int iRequestTypeID = ((ReferenceField)recMessageInfo.getField(MessageInfo.kRequestTypeID)).getIDFromCode(strRequestType);
    if (iRequestTypeID <= 0)
        return null;
    recMessageInfo.getField(MessageInfo.kRequestTypeID).setValue(iRequestTypeID);
    recMessageInfo.setKeyArea(MessageInfo.kMessageInfoTypeIDKey);
    if (recMessageInfo.seek(DBConstants.EQUALS))
    {
        this.setKeyArea(MessageProcessInfo.kMessageInfoIDKey);
        this.getField(MessageProcessInfo.kMessageInfoID).moveFieldToThis((BaseField)recMessageInfo.getCounterField());
        int iMessageProcessTypeID = ((ReferenceField)this.getField(MessageProcessInfo.kMessageTypeID)).getIDFromCode(strMessageProcessType);
        if (iMessageProcessTypeID <= 0)
            return null;
        this.getField(MessageProcessInfo.kMessageTypeID).setValue(iMessageProcessTypeID);
        int iProcessTypeID = ((ReferenceField)this.getField(MessageProcessInfo.kProcessTypeID)).getIDFromCode(strProcessType);
        if (iProcessTypeID <= 0)
            return null;
        this.getField(MessageProcessInfo.kProcessTypeID).setValue(iProcessTypeID);
        
        if (this.seek(null))
            return this;
    }
    // Try the parent contact type
    Record recContactType = ((ReferenceField)recMessageInfo.getField(MessageInfo.kContactTypeID)).getReferenceRecord();
    if (recContactType != null)
    {
        recContactType = ((ReferenceField)recContactType.getField(ContactType.kParentContactTypeID)).getReference();
        if (recContactType != null)
            if ((recContactType.getEditMode() == DBConstants.EDIT_CURRENT) || (recContactType.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
        {
            strContactType = recContactType.getField(ContactType.kCode).toString();
            if (strContactType != null)
                return this.getMessageProcessInfo(strMessageInfoType, strContactType, strRequestType, strMessageProcessType, strProcessType);
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    this.setKeyArea(iOldKeyArea);   // Set this back
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782495">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[this.getMainRecord().addListener(new CompareFileFilter(MessageProcessInfo.kMessageInfoID, (BaseField)this.getHeaderRecord().getCounterField(), DBConstants.EQUALS, null, true));
this.getMainRecord().getField(MessageProcessInfo.kMessageInfoID).addListener(new InitFieldHandler((BaseField)this.getHeaderRecord().getCounterField(), false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782496">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782502">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>handleMessage</MethodName>
		<LogicDescription><![CDATA[A record with this datasource handle changed, notify any behaviors that are checking.
NOTE: Be very careful as this code is running in an independent thread
(synchronize to the task before calling record calls).
NOTE: For now, you are only notified of the main record changes.
@param message The message to handle.
@return The error code.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>BaseMessage message</MethodInterface>
		<MethodClassName>RemoteRecordOwner</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782663">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoScreen</MethodClassName>
		<LogicSource><![CDATA[this.getMainRecord().addListener(new CompareFileFilter(MessageProcessInfo.kMessageInfoID, (BaseField)this.getHeaderRecord().getCounterField(), DBConstants.EQUALS, null, true));
this.getMainRecord().getField(MessageProcessInfo.kMessageInfoID).addListener(new InitFieldHandler((BaseField)this.getHeaderRecord().getCounterField(), false));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782718">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ChangeOnChangeHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null, fldTarget, false</MethodReturns>
		<MethodInterface>BaseField fldTarget</MethodInterface>
		<MethodClassName>ChangeOnChangeHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782860">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addMessageProperties</MethodName>
		<LogicDescription>Add general properties to this message</LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>MessageDetailTarget</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782861">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getSharedRecordTypeKey</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarEntry</MethodClassName>
		<LogicSource>return this.getField(CalendarEntry.kCalendarEntryTypeID);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782862">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createSharedRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarEntry</MethodClassName>
		<LogicSource><![CDATA[if (objKey instanceof Integer)
{
    int iCalendarType = ((Integer)objKey).intValue();
    if (iCalendarType == CalendarEntry.APPOINTMENT_ID)
        return new Appointment(recordOwner);
    if (iCalendarType == CalendarEntry.ANNIVERSARY_ID)
        return new Anniversary(recordOwner);
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782865">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarEntryTypeField</MethodClassName>
		<LogicSource>return new SPopupBox(itsLocation, targetScreen, this,iDisplayFieldDesc);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782877">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>resetCount</MethodName>
		<LogicDescription>Reset the field count</LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>SubCountHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782922">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getMessageTransport</MethodName>
		<LogicDescription>Get the message transport for this target</LogicDescription>
		<MethodReturns>MessageTransport</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>MessageDetailTarget</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782923">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>addDestInfo</MethodName>
		<LogicDescription>Add the destination information to this message</LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader</MethodInterface>
		<MethodClassName>MessageDetailTarget</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782924">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getNextMessageDetailTarget</MethodName>
		<LogicDescription>Get the next target in the chain</LogicDescription>
		<MethodReturns>MessageDetailTarget</MethodReturns>
		<MethodInterface/>
		<MethodClassName>MessageDetailTarget</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16782957">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>DetailScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>DetailScreen</MethodClassName>
		<LogicSource>m_recHeader = recHeader;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783024">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>190</Sequence>
		<MethodName>addReportHeading</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReport</MethodClassName>
		<LogicSource>return new PackagesReportHeading(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783025">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReportHeading</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783026">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReportHeading</MethodClassName>
		<LogicSource><![CDATA[super;
new JnlpFile(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783027">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReportHeading</MethodClassName>
		<LogicSource><![CDATA[super;
this.getRecord(PackagesReportScreenRecord.kPackagesReportScreenRecordFile).getField(PackagesReportScreenRecord.kJnlpFileID).addListener(new ReadSecondaryHandler(this.getRecord(JnlpFile.kJnlpFileFile)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783028">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceField</MethodClassName>
		<LogicSource>return new Resource(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783029">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceScreen</MethodClassName>
		<LogicSource>return new Resource(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783030">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceGridScreen</MethodClassName>
		<LogicSource>return new Resource(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783031">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783032">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;  // Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783033">
		<LastChanged>2009-09-15T22:52:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783034">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Resource</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = new RegistrationGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = new ResourceScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
    screen = new ResourceGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783035">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783036">
		<LastChanged>2009-09-15T22:52:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783037">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>RegistrationGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>recHeader, record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>RegistrationGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783038">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegistrationGridScreen</MethodClassName>
		<LogicSource>return new Resource(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783039">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>RegistrationScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>recHeader, record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>RegistrationScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783040">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegistrationScreen</MethodClassName>
		<LogicSource>return new Resource(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783041">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegistrationGridScreen</MethodClassName>
		<LogicSource>return new ResourceHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783042">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegistrationScreen</MethodClassName>
		<LogicSource>return new ResourceHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783043">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783044">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783052">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>isSoftDeleteThisRecord</MethodName>
		<LogicDescription><![CDATA[Soft delete this record?
Override this to decide whether to soft delete or physically delete the record]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>SoftDeleteHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783053">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>softDeleteThisRecord</MethodName>
		<LogicDescription><![CDATA[Soft delete this record.
Set the deleted flag.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>SoftDeleteHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783054">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>isRecordSoftDeleted</MethodName>
		<LogicDescription>Is this record soft deleted?</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>SoftDeleteHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783058">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SoftDeleteHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField fldDeleteFlag</MethodInterface>
		<MethodClassName>SoftDeleteHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783084">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEditing(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783085">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactTypeLevelOneField</MethodClassName>
		<LogicSource><![CDATA[Record record = super;
record.addListener(new CompareFileFilter(ContactType.kLevel, "1", DBConstants.EQUALS, null, true));
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783086">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>220</Sequence>
		<MethodName>getDefaultDisplayFieldSeq</MethodName>
		<LogicDescription><![CDATA[Get the default display field for this record (for popups and lookups).
@return The sequence of the field that should be displayed.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783087">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getDefaultDisplayFieldSeq</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Person</MethodClassName>
		<LogicSource>return Person.kName;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783088">
		<LastChanged>2010-03-17T10:11:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactField</MethodClassName>
		<LogicSource><![CDATA[ContactTypeField fldContactType = this.getContactTypeField();
if (fldContactType == null)
    return null;
if (this.getRecord().getScreen() != null)
    recordOwner = this.getRecord().getScreen();
ContactType recContactType = (ContactType)fldContactType.getReferenceRecord();
recContactType = (ContactType)fldContactType.getReference();
if (m_recVendor == null)
{
    String strRecordName = "Vendor";
    m_recVendor = (Company)recContactType.makeRecordFromRecordName(strRecordName, recordOwner);
    if (m_recVendor != null)
        VENDOR_CONTACT_TYPE_ID = recContactType.getContactType(m_recVendor).getField(ContactType.kID).toString();
}
if (m_recProfile == null)
{
    String strRecordName = "Profile";
    m_recProfile = (Company)recContactType.makeRecordFromRecordName(strRecordName, recordOwner);
    if (m_recProfile != null)
        PROFILE_CONTACT_TYPE_ID = recContactType.getContactType(m_recProfile).getField(ContactType.kID).toString();
}
recContactType = (ContactType)fldContactType.getReference();
String strHeaderRecordName = null;
if (recContactType != null)
    strHeaderRecordName = recContactType.getField(ContactType.kCode).toString();
if ((strHeaderRecordName == null) || (strHeaderRecordName.length() == 0))
    strHeaderRecordName = recordOwner.getProperty(fldContactType.getFieldName());
Record record = m_recVendor;
if (strHeaderRecordName != null)
{    // Always
    if ("Vendor".equalsIgnoreCase(strHeaderRecordName))
        record = m_recVendor;
    else if ("Profile".equalsIgnoreCase(strHeaderRecordName))
        record = m_recProfile;
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783090">
		<LastChanged>2010-03-17T10:09:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ContactField</MethodClassName>
		<LogicSource><![CDATA[this.makeReferenceRecord();
if (m_recVendor == null)	// Possible that these are not in my classpath
    return super.setupDefaultView(itsLocation, targetScreen, converter, iDisplayFieldDesc);

ScreenField screenField = null;
FieldListener listener = null;
// ----------- Vendor -----------
// First set up the code access:
m_recVendor.setKeyArea(Company.kCodeKey);
m_recVendor.getField(Company.kCode).addListener(new MainReadOnlyHandler(Company.kCodeKey));
//  Set up the listener to read the current record on a valid main record
m_recVendor.getField(Company.kID).addListener(listener = new MainReadOnlyHandler(Company.kIDKey));
listener.setRespondsToMode(DBConstants.INIT_MOVE, true);
listener.setRespondsToMode(DBConstants.READ_MOVE, true);
// On change or new, change this; on change, set the type to vendor
m_recVendor.addListener(new MoveOnEventHandler(this, m_recVendor.getField(Company.kID), null, true, true, false, false, false, null, false));
m_recVendor.addListener(new MoveOnValidHandler(this.getContactTypeField(), VENDOR_CONTACT_TYPE_ID));
// ----------- Profile -----------
// First set up the code access:
m_recProfile.setKeyArea(Company.kCodeKey);
m_recProfile.getField(Company.kCode).addListener(new MainReadOnlyHandler(Company.kCodeKey));
//  Set up the listener to read the current record on a valid main record
m_recProfile.getField(Company.kID).addListener(listener = new MainReadOnlyHandler(Company.kIDKey));
listener.setRespondsToMode(DBConstants.INIT_MOVE, true);
listener.setRespondsToMode(DBConstants.READ_MOVE, true);
// On change or new, change this; on change, set the type to profile
m_recProfile.addListener(new MoveOnEventHandler(this, m_recProfile.getField(Company.kID), null, true, true, false, false, false, null, false));
m_recProfile.addListener(new MoveOnValidHandler(this.getContactTypeField(), PROFILE_CONTACT_TYPE_ID));

this.getContactTypeField().addListener(listener = new InitOnChangeHandler(this));
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);
listener.setRespondsToMode(DBConstants.READ_MOVE, false);
String strAltFieldDesc = null;
// Do the code to read the correct record
Converter checkConverter = new CheckConverter(this.getContactTypeField(), PROFILE_CONTACT_TYPE_ID, strAltFieldDesc, true);
Converter convContactID = new FlagDepFieldConverter(m_recVendor.getField(Company.kID), m_recProfile.getField(Company.kID), checkConverter);
this.addListener(listener = new MoveOnChangeHandler(convContactID));
listener.setRespondsToMode(DBConstants.INIT_MOVE, true);
listener.setRespondsToMode(DBConstants.READ_MOVE, true);
// Setup the code box
checkConverter = new CheckConverter(this.getContactTypeField(), PROFILE_CONTACT_TYPE_ID, strAltFieldDesc, true);
Converter conv = new FlagDepFieldConverter(m_recVendor.getField(Company.kCode), m_recProfile.getField(Company.kCode), checkConverter);
conv = new FieldDescConverter(conv, this);  // Use the description for this field
screenField = new SEditText(itsLocation, targetScreen, conv, iDisplayFieldDesc);
// Set up to display the record description
checkConverter = new CheckConverter(this.getContactTypeField(), PROFILE_CONTACT_TYPE_ID, strAltFieldDesc, true);
itsLocation = targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR);
iDisplayFieldDesc = ScreenConstants.DONT_DISPLAY_DESC;      // Display it only once
Converter convContactName = new FlagDepFieldConverter(m_recVendor.getField(Company.kName), m_recProfile.getField(Company.kName), checkConverter);
ScreenField sfDesc = new SEditText(itsLocation, targetScreen, convContactName, iDisplayFieldDesc)
{
    public void setEnabled(boolean bEnable)
    {
        super.setEnabled(false);    // Don't enable
    }
};
sfDesc.setEnabled(false);
// Add the lookup button and form (opt) button (Even though SSelectBoxes don't use converter, pass it, so field.enable(true), etc will work)
new SSelectBox(targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, converter, ScreenConstants.DONT_DISPLAY_DESC, m_recVendor)
{
    public Record getRecord()
    {
        if (getContactTypeField() != null)
        {
            String strContactTypeID = getContactTypeField().toString();
            if (PROFILE_CONTACT_TYPE_ID.equals(strContactTypeID))
                return m_recProfile;
        }
        return m_record;
    }
};

return screenField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783091">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getContactTypeField</MethodName>
		<LogicDescription><![CDATA[Get the contact type field in the same record as this contact field.
@return The contact type field]]></LogicDescription>
		<MethodReturns>ContactTypeField</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ContactField</MethodClassName>
		<LogicSource><![CDATA[BaseField field = this.getRecord().getField("ContactTypeID");
if (field instanceof ContactTypeField)
    return (ContactTypeField)field;
return null;    // Never]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783097">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectField</MethodClassName>
		<LogicSource>return new Project(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783099">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueStatusField</MethodClassName>
		<LogicSource>return new IssueStatus(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783100">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueScreen</MethodClassName>
		<LogicSource>return new Issue(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783101">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueGridScreen</MethodClassName>
		<LogicSource>return new Issue(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783102">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Issue</MethodClassName>
		<LogicSource><![CDATA[super;
this.addListener(new SetUserIDHandler(Issue.kEnteredByUserID, true));
this.addListener(new SetUserIDHandler(Issue.kChangedByUserID, true));
this.addListener(new DateChangedHandler(Issue.kChangedDate));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783104">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueTypeField</MethodClassName>
		<LogicSource>return new IssueType(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783107">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Project</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.DETAIL_MODE) == ScreenConstants.DETAIL_MODE)
    screen = new ProjectGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = new ProjectScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
    screen = new ProjectGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MENU_MODE) != 0)
    screen = new ProjectScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
    screen = super.makeScreen(itsLocation, parentScreen, iDocMode, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783108">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectGridScreen</MethodClassName>
		<LogicSource>return new Project(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783109">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectScreen</MethodClassName>
		<LogicSource>return new Project(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783110">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProjectGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProjectGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783111">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueField</MethodClassName>
		<LogicSource>return new Issue(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783112">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectVersionField</MethodClassName>
		<LogicSource>return new ProjectVersion(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783113">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783114">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783115">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783116">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783117">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssuePriorityField</MethodClassName>
		<LogicSource>return new IssuePriority(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783118">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new IssueControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783119">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(Issue.kProjectID).addListener(new InitFieldHandler(this.getRecord(IssueControl.kIssueControlFile).getField(IssueControl.kProjectID)));
this.getMainRecord().getField(Issue.kProjectVersionID).addListener(new InitFieldHandler(this.getRecord(IssueControl.kIssueControlFile).getField(IssueControl.kProjectVersionID)));
this.getMainRecord().getField(Issue.kIssueTypeID).addListener(new InitFieldHandler(this.getRecord(IssueControl.kIssueControlFile).getField(IssueControl.kIssueTypeID)));
this.getMainRecord().getField(Issue.kIssueStatusID).addListener(new InitFieldHandler(this.getRecord(IssueControl.kIssueControlFile).getField(IssueControl.kIssueStatusID)));
this.getMainRecord().getField(Issue.kIssuePriorityID).addListener(new InitFieldHandler(this.getRecord(IssueControl.kIssueControlFile).getField(IssueControl.kIssuePriorityID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783120">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

Record recIssue = this.getMainRecord();
SortOrderHandler keyBehavior = new SortOrderHandler(this, true);
this.getScreenRecord().getField(IssueScreenRecord.kKeyOrder).setValue(1);
this.getScreenRecord().getField(IssueScreenRecord.kKeyOrder).addListener(keyBehavior);

recIssue.addListener(new CompareFileFilter(Issue.kProjectID, this.getScreenRecord().getField(IssueScreenRecord.kProjectID), "=", null, true));
recIssue.addListener(new CompareFileFilter(Issue.kProjectVersionID, this.getScreenRecord().getField(IssueScreenRecord.kProjectVersionID), "=", null, true));
recIssue.addListener(new CompareFileFilter(Issue.kIssueTypeID, this.getScreenRecord().getField(IssueScreenRecord.kIssueTypeID), "=", null, true));
recIssue.addListener(new CompareFileFilter(Issue.kIssueStatusID, this.getScreenRecord().getField(IssueScreenRecord.kIssueStatusID), "=", null, true));
recIssue.addListener(new CompareFileFilter(Issue.kAssignedUserID, this.getScreenRecord().getField(IssueScreenRecord.kAssignedUserID), "=", null, true));
recIssue.addListener(new CompareFileFilter(Issue.kIssuePriorityID, this.getScreenRecord().getField(IssueScreenRecord.kIssuePriorityID), "=", null, true));

this.getScreenRecord().getField(IssueScreenRecord.kProjectID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(IssueScreenRecord.kProjectVersionID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(IssueScreenRecord.kIssueTypeID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(IssueScreenRecord.kIssueStatusID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(IssueScreenRecord.kAssignedUserID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(IssueScreenRecord.kIssuePriorityID).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(IssueScreenRecord.kProjectID).addListener(new FieldReSelectHandler(this));

this.getScreenRecord().getField(IssueScreenRecord.kProjectVersionID).addListener(new RegisterValueHandler(null));
this.getScreenRecord().getField(IssueScreenRecord.kIssueTypeID).addListener(new RegisterValueHandler(null));
this.getScreenRecord().getField(IssueScreenRecord.kIssueStatusID).addListener(new RegisterValueHandler(null));
this.getScreenRecord().getField(IssueScreenRecord.kAssignedUserID).addListener(new RegisterValueHandler(null));
this.getScreenRecord().getField(IssueScreenRecord.kIssuePriorityID).addListener(new RegisterValueHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783121">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
toolScreen.getScreenRecord().getField(IssueScreenRecord.kProjectID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(IssueScreenRecord.kProjectVersionID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(IssueScreenRecord.kIssueTypeID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(IssueScreenRecord.kIssueStatusID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(IssueScreenRecord.kAssignedUserID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.NEXT_INPUT_LOCATION, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(IssueScreenRecord.kIssuePriorityID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);

new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783122">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueGridScreen</MethodClassName>
		<LogicSource>return new IssueScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783124">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Issue</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.DETAIL_MODE) == ScreenConstants.DETAIL_MODE)
	screen = new IssueHistoryGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
	screen = new IssueScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
	screen = new IssueGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783125">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>IssueHistoryGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>IssueHistoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783126">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueHistoryGridScreen</MethodClassName>
		<LogicSource>return new IssueHistory(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783127">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueHistoryGridScreen</MethodClassName>
		<LogicSource>return new IssueHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783128">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueHistoryGridScreen</MethodClassName>
		<LogicSource>return new Issue(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783129">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;	// Next buttons will be "First!"]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783130">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783131">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783132">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueHistoryGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783133">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueHistoryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783134">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueHistoryScreen</MethodClassName>
		<LogicSource>return new Issue(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783135">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>IssueHistoryScreen</MethodClassName>
		<LogicSource>return new IssueHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783154">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegistrationGridScreen</MethodClassName>
		<LogicSource>return new ResourceScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783155">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>25</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegistrationScreen</MethodClassName>
		<LogicSource>return new ResourceScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783156">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEnabled(true);
this.getRecord(Resource.kResourceFile).getField(Resource.kCode).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783157">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegistrationGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
// This is all temporary. It will be much better to display the resources next to the key for each record
this.getScreenRecord().getField(ResourceScreenRecord.kLanguage).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(Registration.kLanguage, this.getScreenRecord().getField(ResourceScreenRecord.kLanguage), DBConstants.EQUALS, null, false));
this.getMainRecord().getField(Registration.kLanguage).addListener(new InitFieldHandler(this.getScreenRecord().getField(ResourceScreenRecord.kLanguage)));
this.getScreenRecord().getField(ResourceScreenRecord.kLocale).addListener(new FieldReSelectHandler(this));
this.getMainRecord().addListener(new CompareFileFilter(Registration.kLocale, this.getScreenRecord().getField(ResourceScreenRecord.kLocale), DBConstants.EQUALS, null, false));
this.getMainRecord().getField(Registration.kLocale).addListener(new InitFieldHandler(this.getScreenRecord().getField(ResourceScreenRecord.kLocale)));

this.getMainRecord().getField(Registration.kCode).addListener(new InitFieldHandler(this.getHeaderRecord().getField(Resource.kCode)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783158">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[super;
// This is all temporary. It will be much better to display the resources next to the key for each record
this.getMainRecord().addListener(new CompareFileFilter(Registration.kLanguage, this.getScreenRecord().getField(ResourceScreenRecord.kLanguage), DBConstants.EQUALS, null, false));
this.getMainRecord().getField(Registration.kLanguage).addListener(new InitFieldHandler(this.getScreenRecord().getField(ResourceScreenRecord.kLanguage)));
this.getMainRecord().addListener(new CompareFileFilter(Registration.kLocale, this.getScreenRecord().getField(ResourceScreenRecord.kLocale), DBConstants.EQUALS, null, false));
this.getMainRecord().getField(Registration.kLocale).addListener(new InitFieldHandler(this.getScreenRecord().getField(ResourceScreenRecord.kLocale)));

this.getMainRecord().getField(Registration.kCode).addListener(new InitFieldHandler(this.getHeaderRecord().getField(Resource.kCode)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783159">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceTypeField</MethodClassName>
		<LogicSource><![CDATA[String[][] string = {
    {LIST_RESOURCE_BUNDLE, "ListResourceBundle"},
    {PROPERTIES, "Properties"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783161">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskField</MethodClassName>
		<LogicSource>return new ProjectTask(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783162">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PredecessorTypeField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {FINISH_START, "Finish-Start"},
    {START_FINISH, "Start-Finish"},
    {FINISH_FINISH, "Finish-Finish"},
    {START_START, "Start-Start"},
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783163">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PredecessorTypeField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 3;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783166">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783167">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskGridScreen</MethodClassName>
		<LogicSource>return new ProjectTask(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783168">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProjectTaskGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProjectTaskGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783169">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskScreen</MethodClassName>
		<LogicSource>return new ProjectTask(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783170">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783171">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskCalendar</MethodClassName>
		<LogicSource>return new ProjectTask(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783172">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getTitle</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskCalendar</MethodClassName>
		<LogicSource>return "Project calendar";</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783173">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskCalendar</MethodClassName>
		<LogicSource><![CDATA[super;

if (m_recHeader != null)
	this.getMainRecord().addListener(new ProjectTaskParentFilter(m_recHeader));

this.setEditing(true);
this.getMainRecord().addListener(new FileFilter(null)
{
    public boolean doLocalCriteria(StringBuffer strbFilter, boolean bIncludeFileName, Vector vParamList)
    {   // Between start and end dates? (Defaults to Currentdate thru +1 year)
        boolean bDontSkip = true;
        if (this.getOwner().getField(ProjectTask.kStartDateTime).isNull())
            bDontSkip = false;
        if (bDontSkip)
            return super.doLocalCriteria(strbFilter, bIncludeFileName, vParamList);    // Dont skip this record
        else
            return false;   // Skip this one
    }
        });]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783174">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getCalendarItem</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskCalendar</MethodClassName>
		<LogicSource><![CDATA[return new CalendarRecordItem(this, -1, 0, 1, 2, -1)
{
    public ImageIcon getIcon(int iIconType)
    {
        Record recProjectControl = getRecord(ProjectControl.kProjectControlFile);
        ImageField field = null;
        int fieldSeq = (iIconType == CalendarConstants.START_ICON) ? ProjectControl.kStartParentIcon : ProjectControl.kEndParentIcon;
        if (this.isParentTask())
            field = (ImageField)recProjectControl.getField(fieldSeq);
        fieldSeq = (iIconType == CalendarConstants.START_ICON) ? ProjectControl.kStartIcon : ProjectControl.kEndIcon;
        if ((field == null) || (field.isNull()))
            field = (ImageField)recProjectControl.getField(fieldSeq);
        if (field.isNull())
            return super.getIcon(iIconType);
        return field.getImage();
    }
    public Color getHighlightColor()
    {
        Record recProjectControl = getRecord(ProjectControl.kProjectControlFile);
        ColorField field = null;
        if (this.isParentTask())
            field = (ColorField)recProjectControl.getField(ProjectControl.kParentTaskColor);
        if ((field == null) || (field.isNull()))
            field = (ColorField)recProjectControl.getField(ProjectControl.kTaskColor);
        if (field.isNull())
            return super.getHighlightColor();
        return field.getColor();
    }
    public Color getSelectColor()
    {
        Record recProjectControl = getRecord(ProjectControl.kProjectControlFile);
        ColorField field = null;
        if (this.isParentTask())
            field = (ColorField)recProjectControl.getField(ProjectControl.kParentTaskSelectColor);
        if ((field == null) || (field.isNull()))
            field = (ColorField)recProjectControl.getField(ProjectControl.kTaskSelectColor);
        if (field.isNull())
            return super.getSelectColor();
        return field.getColor();
    }
    public boolean isParentTask()
    {
        return ((ProjectTask)getMainRecord()).isParentTask();
    }
};]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783175">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskCalendar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783176">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getTitle</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CalendarScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783177">
		<LastChanged>2009-05-22T12:23:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTask</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SetUserIDHandler(ProjectTask.kEnteredByUserID, true));
this.addListener(new SetUserIDHandler(ProjectTask.kChangedByUserID, true));
this.addListener(new DateChangedHandler(ProjectTask.kChangedDate));

FieldListener listener = null;
this.getField(ProjectTask.kEndDateTime).addListener(listener = new InitDateOffsetHandler(this.getField(ProjectTask.kDuration), (DateTimeField)this.getField(ProjectTask.kStartDateTime)));
listener.setRespondsToMode(DBConstants.READ_MOVE, true);

this.getField(ProjectTask.kEndDateTime).addListener(listener = new ReComputeTimeOffsetHandler(ProjectTask.kDuration, (DateTimeField)this.getField(ProjectTask.kStartDateTime)));

this.getField(ProjectTask.kStartDateTime).addListener(listener = new ReComputeEndDateHandler(ProjectTask.kEndDateTime, (NumberField)this.getField(ProjectTask.kDuration)));

this.getField(ProjectTask.kDuration).addListener(listener = new ChangeOnChangeHandler(this.getField(ProjectTask.kStartDateTime)));
listener.setRespondsToMode(DBConstants.INIT_MOVE, false);


this.getField(ProjectTask.kStartDateTime).addListener(new InitFieldHandler((BaseField)null)
{
    public int fieldChanged(boolean bDisplayOption, int iMoveMode)
    {
        if (!getField(ProjectTask.kParentProjectTaskID).isNull())
        {
            Record recParent = ((ReferenceField)getField(ProjectTask.kParentProjectTaskID)).getReference();
            if (recParent != null)
                if ((recParent.getEditMode() == DBConstants.EDIT_IN_PROGRESS) || (recParent.getEditMode() == DBConstants.EDIT_CURRENT))
                {
                    if (recParent.getField(ProjectTask.kHasChildren).getState() == true)
                        return this.getOwner().moveFieldToThis(recParent.getField(ProjectTask.kEndDateTime), bDisplayOption, iMoveMode);
                    else
                        return this.getOwner().moveFieldToThis(recParent.getField(ProjectTask.kStartDateTime), bDisplayOption, iMoveMode);
                }
        }
        return super.fieldChanged(bDisplayOption, iMoveMode);
    }
});

this.addListener(new UpdateChildrenHandler(null));
this.addListener(new UpdateDependenciesHandler(null));
this.addListener(new SurveyDatesHandler(null));


// todo (don) Move these to the server environment
this.addListener(new SubFileIntegrityHandler(ProjectTask.class.getName(), true));

this.addListener(new SubFileIntegrityHandler(ProjectTaskPredecessor.class.getName(), true));

this.addListener(new SubFileIntegrityHandler(ProjectTaskPredecessor.class.getName(), true)
{
    public Record getSubRecord()
    {
        if (m_recDependent == null)
            m_recDependent = this.createSubRecord();
        if (m_recDependent != null)
        {
            if (m_recDependent.getListener(SubFileFilter.class.getName()) == null)
            {
                m_recDependent.addListener(new SubFileFilter(getField(ProjectTask.kID), ProjectTaskPredecessor.kProjectTaskID, null, -1, null, -1));
                m_recDependent.setKeyArea(ProjectTaskPredecessor.kProjectTaskIDKey);
            }
        }
        return m_recDependent;
    }
});]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783178">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTask</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ProjectTask.PROJECT_TASK_CALENDAR_MODE) == ProjectTask.PROJECT_TASK_CALENDAR_MODE)
    screen = new ProjectTaskCalendar(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ProjectTask.PROJECT_PREDECESSOR_DETAIL_MODE) == ProjectTask.PROJECT_PREDECESSOR_DETAIL_MODE)
    screen = new ProjectTaskPredecessorGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DETAIL_MODE) == ScreenConstants.DETAIL_MODE)
    screen = new ProjectTaskGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = new ProjectTaskScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
    screen = new ProjectTaskGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MENU_MODE) != 0)
    screen = new ProjectTaskScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
    screen = super.makeScreen(itsLocation, parentScreen, iDocMode, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783179">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderField</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getReferenceRecord();  // Get/make the record that describes the referenced class.
if (record != null)
    return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, record, record.getDefaultScreenKeyArea(), m_iDescription, true, false); 
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783180">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getColor</MethodName>
		<LogicDescription>Get the color</LogicDescription>
		<MethodReturns>Color</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ColorField</MethodClassName>
		<LogicSource><![CDATA[if (this.isNull())
    return null;
return new Color(((Integer)this.getData()).intValue());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783181">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>setColor</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Color color, boolean bDisplayOption, int iMoveMode</MethodInterface>
		<MethodClassName>ColorField</MethodClassName>
		<LogicSource><![CDATA[Integer intColor = null;
if (color != null)
    intColor = new Integer(color.getRGB());
return this.setData(intColor, bDisplayOption, iMoveMode);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783182">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>65</Sequence>
		<MethodName>setColor*2</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Color color</MethodInterface>
		<MethodClassName>ColorField</MethodClassName>
		<LogicSource>return this.setColor(color, true, DBConstants.SCREEN_MOVE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783183">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ColorField</MethodClassName>
		<LogicSource><![CDATA[return super;	// FIX THIS]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783184">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskCalendar</MethodClassName>
		<LogicSource><![CDATA[super;
new ProjectControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783185">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>linkLastPredecessor</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Record recNewProjectTask, boolean bDisplayOption</MethodInterface>
		<MethodClassName>ProjectTask</MethodClassName>
		<LogicSource><![CDATA[if ((recNewProjectTask == null)
    || (recNewProjectTask.getEditMode() != DBConstants.EDIT_ADD))
        return false; // Being careful
Object bookmark = recNewProjectTask.getLastModified(DBConstants.BOOKMARK_HANDLE);
if (bookmark == null)
    return false; // Never
if (m_recDetail == null)
{
    RecordOwner recordOwner = this.getRecordOwner();
    m_recDetail = new ProjectTask(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recDetail);
    m_recDetail.addListener(new SubFileFilter(this));
}
int iMoveMode = DBConstants.SCREEN_MOVE;
m_recDetail.getKeyArea().setKeyOrder(DBConstants.DESCENDING);
try {
    m_recDetail.close();
    while (m_recDetail.hasNext())
    {   // Always
        m_recDetail.next();
        if (m_recDetail.getHandle(DBConstants.BOOKMARK_HANDLE).equals(bookmark))
            continue;   // Don't use the one you just added
        if ((!m_recDetail.getField(ProjectTask.kEndDateTime).equals(this.getField(ProjectTask.kEndDateTime)))
            || (!m_recDetail.getField(ProjectTask.kEndDateTime).equals(recNewProjectTask.getField(ProjectTask.kStartDateTime))))
                return false;   // Never

        ProjectTaskPredecessor recProjectTaskPredecessor = this.getProjectTaskPredecessor();
        recProjectTaskPredecessor.addNew();
        recProjectTaskPredecessor.getField(ProjectTaskPredecessor.kProjectTaskPredecessorID).moveFieldToThis(m_recDetail.getField(ProjectTask.kID));
        recProjectTaskPredecessor.getField(ProjectTaskPredecessor.kProjectTaskID).setData(bookmark);
        recProjectTaskPredecessor.getField(ProjectTaskPredecessor.kPredecessorType).setString(PredecessorTypeField.FINISH_START);
        recProjectTaskPredecessor.add();

        this.getListener(UpdateChildrenHandler.class).setEnabledListener(false);

        this.edit();
        ((DateTimeField)this.getField(ProjectTask.kEndDateTime)).moveFieldToThis(recNewProjectTask.getField(ProjectTask.kEndDateTime), bDisplayOption, iMoveMode);
        bookmark = this.getHandle(DBConstants.BOOKMARK_HANDLE);
        this.set();
        this.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
        return true;    // Success - Survey unnecessary
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    this.getListener(UpdateChildrenHandler.class).setEnabledListener(true);
    m_recDetail.getKeyArea().setKeyOrder(DBConstants.ASCENDING);
}
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783186">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>surveyDates</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>boolean bDisplayOption</MethodInterface>
		<MethodClassName>ProjectTask</MethodClassName>
		<LogicSource><![CDATA[if (m_recDetail == null)
{
    RecordOwner recordOwner = this.getRecordOwner();
    m_recDetail = new ProjectTask(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recDetail);
    m_recDetail.addListener(new SubFileFilter(this, true));
}
Date startDate = null;
Date endDate = null;
try {
    m_recDetail.close();
    while (m_recDetail.hasNext())
    {
        m_recDetail.next();
        Date thisStartDate = null;
        if (!m_recDetail.getField(ProjectTask.kStartDateTime).isNull())
            thisStartDate = ((DateTimeField)m_recDetail.getField(ProjectTask.kStartDateTime)).getDateTime();
        if (thisStartDate != null)
            if ((startDate == null)
                || (thisStartDate.before(startDate)))
                    startDate = thisStartDate;
        Date thisEndDate = null;
        if (!m_recDetail.getField(ProjectTask.kEndDateTime).isNull())
            thisEndDate = ((DateTimeField)m_recDetail.getField(ProjectTask.kEndDateTime)).getDateTime();
        if (thisEndDate != null)
            if ((endDate == null)
                || (thisEndDate.after(endDate)))
                    endDate = thisEndDate;
    }
    this.getListener(UpdateChildrenHandler.class).setEnabledListener(false);
    this.edit();
    int iMoveMode = DBConstants.SCREEN_MOVE;
    if (startDate != null)
        ((DateTimeField)this.getField(ProjectTask.kStartDateTime)).setDateTime(startDate, bDisplayOption, iMoveMode);
    if (endDate != null)
        ((DateTimeField)this.getField(ProjectTask.kEndDateTime)).setDateTime(endDate, bDisplayOption, iMoveMode);
    boolean bHasChildren = true;
    if ((startDate == null) && (endDate == null))
    	bHasChildren = false;
	this.getField(ProjectTask.kHasChildren).setState(bHasChildren);
    if (this.isModified())
    {
        Object bookmark = this.getHandle(DBConstants.BOOKMARK_HANDLE);
        this.set();
        this.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
        return true;    // Record updated
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    this.getListener(UpdateChildrenHandler.class).setEnabledListener(true);
}
return false;   // No update required]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783187">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTask</MethodClassName>
		<LogicSource><![CDATA[if (m_recDetail != null)
    m_recDetail.free();
m_recDetail = null;
if (m_recDetailChildren != null)
    m_recDetailChildren.free();
m_recDetailChildren = null;
if (m_recProjectTaskPredecessor != null)
    m_recProjectTaskPredecessor.free();
m_recProjectTaskPredecessor = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783188">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getProjectTaskPredecessor</MethodName>
		<LogicDescription/>
		<MethodReturns>ProjectTaskPredecessor</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProjectTask</MethodClassName>
		<LogicSource><![CDATA[if (m_recProjectTaskPredecessor == null)
{
    m_recProjectTaskPredecessor = new ProjectTaskPredecessor(this.getRecordOwner());
    // Must have the sub-records set up in advance to keep them from mixing with this record.
    ((ReferenceField)m_recProjectTaskPredecessor.getField(ProjectTaskPredecessor.kProjectTaskID)).getReferenceRecord();
    ((ReferenceField)m_recProjectTaskPredecessor.getField(ProjectTaskPredecessor.kProjectTaskPredecessorID)).getReferenceRecord();
}
return m_recProjectTaskPredecessor;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783189">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>updateDependencies</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>boolean bMoveSiblings, boolean bDisplayOption</MethodInterface>
		<MethodClassName>ProjectTask</MethodClassName>
		<LogicSource><![CDATA[ProjectTaskPredecessor recProjectTaskPredecessor = this.getProjectTaskPredecessor();
Converter.initGlobals();
int iMoveMode = DBConstants.SCREEN_MOVE;
BaseListener listener = null;
try {

    DateTimeField fldSource = (DateTimeField)this.getField(ProjectTask.kEndDateTime);
    if (fldSource.isModified())
    {
    	recProjectTaskPredecessor.addListener(listener = new SubFileFilter(this.getField(ProjectTask.kID), ProjectTaskPredecessor.kProjectTaskPredecessorID, null, -1, null, -1));
    	recProjectTaskPredecessor.setKeyArea(ProjectTaskPredecessor.kProjectTaskPredecessorIDKey);
        recProjectTaskPredecessor.close();
        while (recProjectTaskPredecessor.hasNext())
        {
            recProjectTaskPredecessor.next();
            String strPredecessorType = recProjectTaskPredecessor.getField(ProjectTaskPredecessor.kPredecessorType).toString();
            if ((PredecessorTypeField.FINISH_START.equals(strPredecessorType))
                || (PredecessorTypeField.FINISH_FINISH.equals(strPredecessorType)))
            {
                Record recProjectTask = ((ReferenceField)recProjectTaskPredecessor.getField(ProjectTaskPredecessor.kProjectTaskID)).getReference();
                if (recProjectTask != null)
                    if ((recProjectTask.getEditMode() == DBConstants.EDIT_CURRENT)
                        || (recProjectTask.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
                {
                    if ((bMoveSiblings == true)
                    	|| (!recProjectTask.getField(ProjectTask.kParentFolderID).equals(this.getField(ProjectTask.kParentFolderID))))
                    {
	                    double iAdditionalOffset = 0;
	                    if (PredecessorTypeField.FINISH_FINISH.equals(strPredecessorType))
	                        iAdditionalOffset = recProjectTask.getField(ProjectTask.kDuration).getValue();
	                    recProjectTask.getListener(SurveyDatesHandler.class).setEnabledListener(false);
	                    recProjectTask.edit();
	                    Converter.gCalendar = fldSource.getCalendar();
	                    if ((recProjectTaskPredecessor.getField(ProjectTaskPredecessor.kPredecessorDelay).getValue() + iAdditionalOffset) != 0)
	                        Converter.gCalendar.add(Calendar.SECOND, (int)((recProjectTaskPredecessor.getField(ProjectTaskPredecessor.kPredecessorDelay).getValue() + iAdditionalOffset) * 24 * 60 * 60));
	
	                    Calendar lowerCalendarValue = ((DateTimeField)recProjectTask.getField(ProjectTask.kStartDateTime)).getCalendar();
	                    lowerCalendarValue.add(Calendar.MINUTE, -1);
	                    Calendar upperCalendarValue = ((DateTimeField)recProjectTask.getField(ProjectTask.kStartDateTime)).getCalendar();
	                    upperCalendarValue.add(Calendar.MINUTE, 1);
	                    if ((Converter.gCalendar.before(lowerCalendarValue))
	                        || (Converter.gCalendar.after(upperCalendarValue)))
	                            ((DateTimeField)recProjectTask.getField(ProjectTask.kStartDateTime)).setCalendar(Converter.gCalendar, bDisplayOption, iMoveMode);
	                    recProjectTask.set();
	                    recProjectTask.getListener(SurveyDatesHandler.class).setEnabledListener(true);
                    }
                }
            }
        }
    }
    if (listener != null)
        recProjectTaskPredecessor.removeListener(listener, true);

    fldSource = (DateTimeField)this.getField(ProjectTask.kStartDateTime);
    if (fldSource.isModified())
    {
        recProjectTaskPredecessor.addListener(listener = new SubFileFilter(this.getField(ProjectTask.kID), ProjectTaskPredecessor.kProjectTaskID, null, -1, null, -1));
        recProjectTaskPredecessor.setKeyArea(ProjectTaskPredecessor.kProjectTaskIDKey);
        recProjectTaskPredecessor.close();
        while (recProjectTaskPredecessor.hasNext())
        {
            recProjectTaskPredecessor.next();
            String strPredecessorType = recProjectTaskPredecessor.getField(ProjectTaskPredecessor.kPredecessorType).toString();
            if ((PredecessorTypeField.FINISH_START.equals(strPredecessorType))
                || (PredecessorTypeField.START_START.equals(strPredecessorType)))
            {
                Record recProjectTask = ((ReferenceField)recProjectTaskPredecessor.getField(ProjectTaskPredecessor.kProjectTaskPredecessorID)).getReference();
                if (recProjectTask != null)
                    if ((recProjectTask.getEditMode() == DBConstants.EDIT_CURRENT)
                        || (recProjectTask.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
                {
	                if ((bMoveSiblings == true)
	                    	|| (!recProjectTask.getField(ProjectTask.kParentFolderID).equals(this.getField(ProjectTask.kParentFolderID))))
                    {
	                    double iAdditionalOffset = 0;
	                    if (PredecessorTypeField.FINISH_START.equals(strPredecessorType))
	                        iAdditionalOffset = -recProjectTask.getField(ProjectTask.kDuration).getValue();
	                    recProjectTask.getListener(SurveyDatesHandler.class).setEnabledListener(false);
	                    recProjectTask.edit();
	                    Converter.gCalendar = fldSource.getCalendar();
	                    if ((recProjectTaskPredecessor.getField(ProjectTaskPredecessor.kPredecessorDelay).getValue() + iAdditionalOffset) != 0)
	                        Converter.gCalendar.add(Calendar.SECOND, (int)((recProjectTaskPredecessor.getField(ProjectTaskPredecessor.kPredecessorDelay).getValue() + iAdditionalOffset) * 24 * 60 * 60));
	                    Calendar lowerCalendarValue = ((DateTimeField)recProjectTask.getField(ProjectTask.kStartDateTime)).getCalendar();
	                    lowerCalendarValue.add(Calendar.MINUTE, -1);
	                    Calendar upperCalendarValue = ((DateTimeField)recProjectTask.getField(ProjectTask.kStartDateTime)).getCalendar();
	                    upperCalendarValue.add(Calendar.MINUTE, 1);
	                    if ((Converter.gCalendar.before(lowerCalendarValue))
	                        || (Converter.gCalendar.after(upperCalendarValue)))
	                            ((DateTimeField)recProjectTask.getField(ProjectTask.kStartDateTime)).setCalendar(Converter.gCalendar, bDisplayOption, iMoveMode);
	                    recProjectTask.set();
	                    recProjectTask.getListener(SurveyDatesHandler.class).setEnabledListener(true);
                    }
                }
            }
        }
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    if (listener != null)
        recProjectTaskPredecessor.removeListener(listener, true);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783191">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>updateChildren</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>boolean bDisplayOption</MethodInterface>
		<MethodClassName>ProjectTask</MethodClassName>
		<LogicSource><![CDATA[int iMoveMode = DBConstants.SCREEN_MOVE;
ProjectTask recDetailChildren = this.getDetailChildren();
Date startDate = ((DateTimeField)this.getField(ProjectTask.kStartDateTime)).getDateTime();
Date endDate = ((DateTimeField)this.getField(ProjectTask.kEndDateTime)).getDateTime();
try {
    boolean bFirstRecord = true;
    double dOffset = 0;
    recDetailChildren.getListener(SurveyDatesHandler.class).setEnabledListener(false);
    ((UpdateDependenciesHandler)recDetailChildren.getListener(UpdateDependenciesHandler.class)).setMoveSiblingDependents(false);
    recDetailChildren.close();
    while (recDetailChildren.hasNext())
    {
        recDetailChildren.next();
        Date thisStartDate = ((DateTimeField)recDetailChildren.getField(ProjectTask.kStartDateTime)).getDateTime();
        Date thisEndDate = ((DateTimeField)recDetailChildren.getField(ProjectTask.kEndDateTime)).getDateTime();
        if (bFirstRecord)
        {
            bFirstRecord = false;
            if ((thisStartDate == null) || (thisEndDate == null) || (startDate == null) || (endDate == null))
                break;
            if (thisStartDate.equals(startDate))
                break;
            dOffset = startDate.getTime() - thisStartDate.getTime();
            if ((dOffset >= -1000) && (dOffset <= 1000))
                break;
        }
        recDetailChildren.edit();
        Converter.gCalendar = ((DateTimeField)recDetailChildren.getField(ProjectTask.kStartDateTime)).getCalendar();
        Converter.gCalendar.add(Calendar.MILLISECOND, (int)dOffset);
        ((DateTimeField)recDetailChildren.getField(ProjectTask.kStartDateTime)).setCalendar(Converter.gCalendar, bDisplayOption, iMoveMode);
        recDetailChildren.set();
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    recDetailChildren.getListener(SurveyDatesHandler.class).setEnabledListener(true);
    ((UpdateDependenciesHandler)recDetailChildren.getListener(UpdateDependenciesHandler.class)).setMoveSiblingDependents(true);
}
return false;   // No update required]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783197">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SurveyDatesHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.AFTER_ADD_TYPE)
    || (iChangeType == DBConstants.AFTER_UPDATE_TYPE)
    || (iChangeType == DBConstants.AFTER_DELETE_TYPE))
{
    if ((iChangeType == DBConstants.AFTER_DELETE_TYPE)
        || (this.getOwner().getField(ProjectTask.kStartDateTime).isModified())
        || (this.getOwner().getField(ProjectTask.kEndDateTime).isModified()))
    {
        Record recParent = null;
        if (!this.getOwner().getField(ProjectTask.kParentProjectTaskID).isNull())
        	recParent = ((ReferenceField)this.getOwner().getField(ProjectTask.kParentProjectTaskID)).getReference();
        if (recParent != null)
            if ((recParent.getEditMode() == DBConstants.EDIT_IN_PROGRESS) || (recParent.getEditMode() == DBConstants.EDIT_CURRENT))
        {
            boolean bSurveyNeeded = true;
            if (iChangeType == DBConstants.AFTER_ADD_TYPE)
                if ((!this.getOwner().getField(ProjectTask.kStartDateTime).isNull())
                    && (this.getOwner().getField(ProjectTask.kStartDateTime).equals(recParent.getField(ProjectTask.kEndDateTime))))
                bSurveyNeeded = !((ProjectTask)recParent).linkLastPredecessor(this.getOwner(), bDisplayOption);
            if (bSurveyNeeded)
                ((ProjectTask)recParent).surveyDates(bDisplayOption);
        }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783198">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateChildrenHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.AFTER_ADD_TYPE)
    || (iChangeType == DBConstants.AFTER_UPDATE_TYPE)
    || (iChangeType == DBConstants.AFTER_DELETE_TYPE))
{
    if ((iChangeType == DBConstants.AFTER_DELETE_TYPE)
        || (this.getOwner().getField(ProjectTask.kStartDateTime).isModified())
        || (this.getOwner().getField(ProjectTask.kEndDateTime).isModified()))
    {
        if (iChangeType == DBConstants.AFTER_UPDATE_TYPE)
            ((ProjectTask)this.getOwner()).updateChildren(bDisplayOption);
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783199">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateDependenciesHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.AFTER_ADD_TYPE)
    || (iChangeType == DBConstants.AFTER_UPDATE_TYPE)
    || (iChangeType == DBConstants.AFTER_DELETE_TYPE))
{
    if ((iChangeType == DBConstants.AFTER_DELETE_TYPE)
        || (this.getOwner().getField(ProjectTask.kStartDateTime).isModified())
        || (this.getOwner().getField(ProjectTask.kEndDateTime).isModified()))
    {
        if (iChangeType == DBConstants.AFTER_UPDATE_TYPE)
            ((ProjectTask)this.getOwner()).updateDependencies(m_bMoveSiblings, bDisplayOption);
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783200">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskPredecessorGridScreen</MethodClassName>
		<LogicSource>return new ProjectTaskPredecessor(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783201">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskPredecessorGridScreen</MethodClassName>
		<LogicSource>return new ProjectTask(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783202">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskPredecessorGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783203">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setMoveSiblingDependents</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>boolean bMoveSiblings</MethodInterface>
		<MethodClassName>UpdateDependenciesHandler</MethodClassName>
		<LogicSource>m_bMoveSiblings = bMoveSiblings;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783204">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>isParentTask</MethodName>
		<LogicDescription>Does this project have sub-tasks?</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProjectTask</MethodClassName>
		<LogicSource>return this.getField(ProjectTask.kHasChildren).getState();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783205">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getDetailChildren</MethodName>
		<LogicDescription/>
		<MethodReturns>ProjectTask</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ProjectTask</MethodClassName>
		<LogicSource><![CDATA[if (m_recDetailChildren == null)
{
    RecordOwner recordOwner = this.getRecordOwner();
    m_recDetailChildren = new ProjectTask(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recDetailChildren);
    m_recDetailChildren.addListener(new SubFileFilter(this, true));
}
return m_recDetailChildren;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783206">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProjectTaskPredecessorGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProjectTaskPredecessorGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783207">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskPredecessorGridScreen</MethodClassName>
		<LogicSource>return new ProjectTaskHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783208">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProjectTaskPredecessorScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProjectTaskPredecessorScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783209">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskPredecessorScreen</MethodClassName>
		<LogicSource>return new ProjectTaskPredecessor(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783210">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskPredecessorScreen</MethodClassName>
		<LogicSource>return new ProjectTask(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783211">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskPredecessorScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783212">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskPredecessorScreen</MethodClassName>
		<LogicSource>return new ProjectTaskHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783213">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783214">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, JCalendarPopup.CALENDAR_ICON, ProjectTask.PROJECT_TASK_CALENDAR_SCREEN, ProjectTask.PROJECT_TASK_CALENDAR_SCREEN);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, ProjectTask.PROJECT_PREDECESSOR_DETAIL_SCREEN, ProjectTask.PROJECT_PREDECESSOR_DETAIL_SCREEN);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783215">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, ProjectTask.PROJECT_PREDECESSOR_DETAIL_SCREEN, MenuConstants.FORMDETAIL, ProjectTask.PROJECT_PREDECESSOR_DETAIL_SCREEN, ProjectTask.PROJECT_PREDECESSOR_DETAIL_SCREEN);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, ProjectTask.PROJECT_TASK_CALENDAR_SCREEN, JCalendarPopup.CALENDAR_ICON, ProjectTask.PROJECT_TASK_CALENDAR_SCREEN, ProjectTask.PROJECT_TASK_CALENDAR_SCREEN);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783216">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTask</MethodClassName>
		<LogicSource><![CDATA[if (ProjectTask.PROJECT_PREDECESSOR_DETAIL_SCREEN.equalsIgnoreCase(strCommand))
    return ProjectTask.PROJECT_PREDECESSOR_DETAIL_MODE;
if (ProjectTask.PROJECT_TASK_CALENDAR_SCREEN.equalsIgnoreCase(strCommand))
    return ProjectTask.PROJECT_TASK_CALENDAR_MODE;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783217">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, ProjectTask.PROJECT_PREDECESSOR_DETAIL_SCREEN, MenuConstants.FORMDETAIL, ProjectTask.PROJECT_PREDECESSOR_DETAIL_SCREEN, ProjectTask.PROJECT_PREDECESSOR_DETAIL_SCREEN);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, ProjectTask.PROJECT_TASK_CALENDAR_SCREEN, JCalendarPopup.CALENDAR_ICON, ProjectTask.PROJECT_TASK_CALENDAR_SCREEN, ProjectTask.PROJECT_TASK_CALENDAR_SCREEN);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783218">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskPredecessorGridScreen</MethodClassName>
		<LogicSource>this.getMainRecord().addListener(new SubFileFilter(ProjectTaskPredecessor.kProjectTaskIDKey, this.getHeaderRecord().getField(ProjectTask.kID)));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783219">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskPredecessorScreen</MethodClassName>
		<LogicSource>this.getMainRecord().addListener(new SubFileFilter(ProjectTaskPredecessor.kProjectTaskIDKey, this.getHeaderRecord().getField(ProjectTask.kID)));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783220">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProjectTaskParentFilter</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>ProjectTask recProjectTaskParent</MethodInterface>
		<MethodClassName>ProjectTaskParentFilter</MethodClassName>
		<LogicSource><![CDATA[super;
m_recProjectTaskParent = recProjectTaskParent;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783221">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doLocalCriteria</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectTaskParentFilter</MethodClassName>
		<LogicSource><![CDATA[Record recProjectTask = this.getOwner();
while (recProjectTask != null)
{
    if (recProjectTask.getField(ProjectTask.kID).equals(m_recProjectTaskParent.getField(ProjectTask.kID)))
        break;   // Match! This record is my target
    if (recProjectTask.getField(ProjectTask.kParentProjectTaskID).equals(m_recProjectTaskParent.getField(ProjectTask.kID)))
        break;   // Match! This record has my target as a ancestor
    recProjectTask = ((ReferenceField)recProjectTask.getField(ProjectTask.kParentProjectTaskID)).getReference();
    if ((recProjectTask == null)
            || ((recProjectTask.getEditMode() == DBConstants.EDIT_NONE) || (recProjectTask.getEditMode() == DBConstants.EDIT_ADD)))
        return false;  // No match
}

return super; // Match]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783222">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ProjectTaskCalendar*2</MethodName>
		<LogicDescription/>
		<MethodReturns>record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>ProjectTask recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ProjectTaskCalendar</MethodClassName>
		<LogicSource><![CDATA[m_recHeader = recHeader;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783223">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>VirtualRecord</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783224">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ControlRecord</MethodClassName>
		<LogicSource><![CDATA[super;
if ((this.getMasterSlave() & RecordOwner.MASTER) != 0)    // Don't add in slave
    this.addListener(new ControlFileHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783225">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ControlRecord</MethodClassName>
		<LogicSource><![CDATA[iDocMode = iDocMode | ScreenConstants.MAINT_MODE;   // Control files are always forms.
return super.makeScreen(itsLocation, parentScreen, iDocMode, properties);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783226">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>isBreak</MethodName>
		<LogicDescription><![CDATA[Is this a control break?
@return True if it is a break.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ReportBreakScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783227">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>getBreakValue</MethodName>
		<LogicDescription><![CDATA[Get the value to break on.
By default, use the first field of the current key (as long as it isn't the counter).
@return The break value.]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ReportBreakScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783231">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoField</MethodClassName>
		<LogicSource>return new ClassInfo(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783232">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, converter, iDisplayFieldDesc, this.makeReferenceRecord(), ClassInfo.kClassNameKey, ClassInfo.kClassName, true, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783233">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassIssueGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
Record record = this.getMainRecord();
Record recClassInfo = this.getRecord(ClassInfo.kClassInfoFile);
if (recClassInfo != null)
{
    record.setKeyArea(Issue.kClassInfoIDKey);
    SubFileFilter listener = new SubFileFilter(recClassInfo.getField(ClassInfo.kID), Issue.kClassInfoID, null, -1, null, -1, true);
    record.addListener(listener);
    recClassInfo.getField(ClassInfo.kID).addListener(new FieldReSelectHandler(this));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783245">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,250</Sequence>
		<MethodName>getMessageTransport</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageTransport</MethodReturns>
		<MethodInterface>String strMessageTransport</MethodInterface>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[if (m_recMessageTransport == null)
{
    RecordOwner recordOwner = Utility.getRecordOwner(this);
    m_recMessageTransport = new MessageTransport(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recMessageTransport);    // Set it is not on the recordowner's list
    this.addListener(new FreeOnFreeHandler(m_recMessageTransport));
}
return m_recMessageTransport.getMessageTransport(strMessageTransport);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783246">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[m_recMessageDetail = null;
m_recMessageTransport = null;
m_recMessageTransportInfo = null;
m_recMessageControl = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783252">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>39</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.restoreScreenParam(MessageLogScreenRecord.kReferenceID);
this.restoreScreenParam(MessageLogScreenRecord.kReferenceType);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783266">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PropertiesInputGridScreen</MethodClassName>
		<LogicSource>return new PropertiesInput(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783267">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PropertiesInputGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783268">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PropertiesInputGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
if (m_properties.size() > 0)
{
    Record recPropertiesInput = this.getMainRecord();
    recPropertiesInput.setKeyArea(PropertiesInput.kKeyKey);
    Iterator<Object> iterator = m_properties.keySet().iterator();
    while (iterator.hasNext())
    {
        String strKey = (String)iterator.next();
        try {
            recPropertiesInput.addNew();
            recPropertiesInput.getField(PropertiesInput.kKey).setString(strKey);
            if (!recPropertiesInput.seek(null))
            {
                recPropertiesInput.addNew();
                recPropertiesInput.getField(PropertiesInput.kKey).setString(strKey);
                recPropertiesInput.add();
            }
        } catch (DBException ex) {
            ex.printStackTrace();
        }
    }
    this.getMainRecord().getField(PropertiesInput.kKey).setEnabled(false);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783269">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>setPropertiesField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>PropertiesField fldProperties</MethodInterface>
		<MethodClassName>PropertiesInput</MethodClassName>
		<LogicSource><![CDATA[if (fldProperties != null)
{
    m_fldProperties = fldProperties;
    this.loadFieldProperties();
    this.addListener(new FileListener(null)
	{
        public void setOwner(ListenerOwner owner)
        {
        	if (owner == null)
        		if (this.getOwner() != null)
        			((PropertiesInput)PropertiesInput.this).restoreFieldProperties();
            super.setOwner(owner);
        }
	});
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783270">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>restoreFieldProperties*1</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PropertiesInput</MethodClassName>
		<LogicSource>this.restoreFieldProperties(m_fldProperties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783271">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>loadFieldProperties*1</MethodName>
		<LogicDescription>Load the field properties from the field and add them to this record</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PropertiesInput</MethodClassName>
		<LogicSource>this.loadFieldProperties(m_fldProperties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783272">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PropertiesInputGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((m_iDisplayFieldDesc & ScreenConstants.SELECT_MODE) != ScreenConstants.SELECT_MODE)
    new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.DELETE, MenuConstants.DELETE, null);
if (!(this.getParentScreen() instanceof Screen))
    super;	// Only allow form screen if not sub-window]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783273">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PropertiesInputGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((MenuConstants.FORMLINK.equalsIgnoreCase(strCommand)) || (MenuConstants.FORM.equalsIgnoreCase(strCommand)))
	return true;	// Ignore these commands
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783274">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>startEditor</MethodName>
		<LogicDescription/>
		<MethodReturns>GridScreen</MethodReturns>
		<MethodInterface>PropertiesField fldProperties, boolean bAllowAppending, Map&lt;String,Object&gt; mapKeyDescriptions</MethodInterface>
		<MethodClassName>PropertiesInput</MethodClassName>
		<LogicSource><![CDATA[this.setPropertiesField(fldProperties);
BaseApplication application = ((BaseApplication)fldProperties.getRecord().getRecordOwner().getTask().getApplication());
BasePanel screenParent = Screen.makeWindow(application);
GridScreen screen = (GridScreen)this.makeScreen(null, screenParent, ScreenConstants.DISPLAY_MODE, mapKeyDescriptions);
screen.setAppending(bAllowAppending);

fldProperties.getRecord().addDependentScreen(screen);

return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783275">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>setProperty</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strProperty, String strValue</MethodInterface>
		<MethodClassName>PropertiesInputGridScreen</MethodClassName>
		<LogicSource>m_properties.setProperty(strProperty, strValue);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783276">
		<LastChanged>2011-08-05T19:46:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>createNewMessage</MethodName>
		<LogicDescription><![CDATA[Create the message that this record describes
(in the classname field)
@returns The message or null if error]]></LogicDescription>
		<MethodReturns>MessageRecordDesc</MethodReturns>
		<MethodInterface>BaseMessage message, String strKey</MethodInterface>
		<MethodClassName>MessageInfo</MethodClassName>
		<LogicSource><![CDATA[MessageRecordDesc messageData = null;
String strClassName = this.getField(MessageInfo.kMessageClass).toString();
messageData = (MessageRecordDesc)ClassServiceUtility.getClassService().makeObjectFromClassName(strClassName);
if (messageData != null)
       messageData.init(message, strKey);
return messageData;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783277">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,700</Sequence>
		<MethodName>createReplyMessage</MethodName>
		<LogicDescription><![CDATA[Create the response message for this message.
@return the response message (or null if none)]]></LogicDescription>
		<MethodReturns>BaseMessage</MethodReturns>
		<MethodInterface>BaseMessage message</MethodInterface>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[Object objResponseID = message.getMessageHeader().get(TrxMessageHeader.MESSAGE_RESPONSE_ID);
if (objResponseID == null)
    return null;    // TODO (don) FIX this - return an error.
MessageProcessInfo recMessageProcessInfo = this.getMessageProcessInfo(objResponseID.toString());
MessageInfo recMessageInfo = (MessageInfo)((ReferenceField)recMessageProcessInfo.getField(MessageProcessInfo.kMessageInfoID)).getReference();
BaseMessage replyMessage = new TreeMessage(null, null);
MessageRecordDesc messageRecordDesc = recMessageInfo.createNewMessage(replyMessage, null);
return replyMessage;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783308">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailDefTransHandler</MethodClassName>
		<LogicSource><![CDATA[m_iOriginalMessageTransportID = (int)this.getOwner().getField(MessageDetail.kMessageTransportID).getValue();
m_iOriginalDefaultMessageTransportID = (int)this.getOwner().getField(MessageDetail.kDefaultMessageTransportID).getValue();
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783309">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailDefTransHandler</MethodClassName>
		<LogicSource><![CDATA[m_iOriginalMessageTransportID = 0;
m_iOriginalDefaultMessageTransportID = 0;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783310">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailDefTransHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.AFTER_ADD_TYPE) || (iChangeType == DBConstants.AFTER_UPDATE_TYPE) || (iChangeType == DBConstants.AFTER_DELETE_TYPE))
{
	BaseField fldMessageDetail = this.getOwner().getField(MessageDetail.kMessageTransportID);
	BaseField fldDefaultMessageDetail = this.getOwner().getField(MessageDetail.kDefaultMessageTransportID);
	Integer newDefaultMessageTransport = -1;	// None (to start)
	boolean bDefaultTransportFlag = fldMessageDetail.equals(fldDefaultMessageDetail);

	if (iChangeType == DBConstants.AFTER_ADD_TYPE)
	{
		if (bDefaultTransportFlag)
			newDefaultMessageTransport = (Integer)fldDefaultMessageDetail.getData();	// Change all the others
		else
		{
			newDefaultMessageTransport = -2;
		}
	}
	if (iChangeType == DBConstants.AFTER_DELETE_TYPE)
	{
		if (m_iOriginalMessageTransportID == m_iOriginalDefaultMessageTransportID)
			newDefaultMessageTransport = null;	// It was default before delete, so clear all!
	}
	else if (iChangeType == DBConstants.AFTER_UPDATE_TYPE)
	{
			if (fldMessageDetail.isModified() | fldDefaultMessageDetail.isModified())
			{
				if (bDefaultTransportFlag)
					newDefaultMessageTransport = (Integer)fldDefaultMessageDetail.getData();	// Change all the others
				else if (m_iOriginalMessageTransportID == m_iOriginalDefaultMessageTransportID)
					newDefaultMessageTransport = null;	// If it was default before update, clear all!
			}
	}
	if ((newDefaultMessageTransport == null) || (newDefaultMessageTransport != -1))
	{
		MessageDetail recMessageDetail = new MessageDetail(Utility.getRecordOwner(this.getOwner()));
		try {
			recMessageDetail.setKeyArea(MessageDetail.kContactTypeIDKey);
			recMessageDetail.addListener(new StringSubFileFilter(this.getOwner().getField(MessageDetail.kContactTypeID).toString(), MessageDetail.kContactTypeID, this.getOwner().getField(MessageDetail.kPersonID).toString(), MessageDetail.kPersonID, this.getOwner().getField(MessageDetail.kMessageProcessInfoID).toString(), MessageDetail.kMessageProcessInfoID));
			if (newDefaultMessageTransport != null) if (newDefaultMessageTransport == -2)
			{
				newDefaultMessageTransport = null;
				recMessageDetail.close();
				while (recMessageDetail.hasNext())
				{
					recMessageDetail.next();
					if (!recMessageDetail.getField(MessageDetail.kDefaultMessageTransportID).isNull())
					{
						newDefaultMessageTransport = (int)recMessageDetail.getField(MessageDetail.kDefaultMessageTransportID).getValue();
						break;	// This is the current default (to set in the new record)
					}
				}
			}
			recMessageDetail.close();
			while (recMessageDetail.hasNext())
			{
				recMessageDetail.next();
				recMessageDetail.edit();
				recMessageDetail.getField(MessageDetail.kDefaultMessageTransportID).setData(newDefaultMessageTransport, bDisplayOption, DBConstants.INIT_MOVE);
				recMessageDetail.set();
			}
		} catch (DBException ex) {
			recMessageDetail.free();
		}
	}
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783311">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>27</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageDetailGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().addListener(new MessageDetailDefTransHandler(null));
String strManualTransportID = Integer.toString(((ReferenceField)this.getMainRecord().getField(MessageDetail.kMessageTransportID)).getIDFromCode(MessageTransport.MANUAL));
this.getMainRecord().getField(MessageDetail.kMessageTransportID).setDefault(strManualTransportID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783313">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getDefaultMessageTransport</MethodName>
		<LogicDescription>Get the default message transport for this target/process</LogicDescription>
		<MethodReturns>MessageTransport</MethodReturns>
		<MethodInterface>MessageDetailTarget recMessageDetailTarget, MessageProcessInfo recMessageProcessInfo</MethodInterface>
		<MethodClassName>MessageDetail</MethodClassName>
		<LogicSource><![CDATA[try {
    ContactType recContactType = (ContactType)((ReferenceField)this.getField(MessageDetail.kContactTypeID)).getReferenceRecord(null);
    recContactType = recContactType.getContactType((Record)recMessageDetailTarget);
    if (recContactType == null)
        return null;    // Just being careful

    this.setKeyArea(MessageDetail.kContactTypeIDKey);
    this.getField(MessageDetail.kContactTypeID).moveFieldToThis((BaseField)recContactType.getCounterField());
    this.getField(MessageDetail.kPersonID).moveFieldToThis((BaseField)((Record)recMessageDetailTarget).getCounterField());
    this.getField(MessageDetail.kMessageProcessInfoID).moveFieldToThis((BaseField)recMessageProcessInfo.getCounterField());
    this.getField(MessageDetail.kMessageTransportID).setValue(0);
    if (this.seek(">="))
    {
    	if (this.getField(MessageDetail.kContactTypeID).equals((BaseField)recContactType.getCounterField()))
    		if (this.getField(MessageDetail.kPersonID).equals((BaseField)((Record)recMessageDetailTarget).getCounterField()))
                if (this.getField(MessageDetail.kMessageProcessInfoID).equals((BaseField)recMessageProcessInfo.getCounterField()))
                	if (!this.getField(MessageDetail.kDefaultMessageTransportID).isNull())
                		return (MessageTransport)((ReferenceField)this.getField(MessageDetail.kDefaultMessageTransportID)).getReference();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783355">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getMessageTransport</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageTransport</MethodReturns>
		<MethodInterface>String strMessageTransport</MethodInterface>
		<MethodClassName>MessageTransport</MethodClassName>
		<LogicSource><![CDATA[if ((strMessageTransport == null) || (strMessageTransport.length() == 0))
    return null;
if (Utility.isNumeric(strMessageTransport))
{
	this.setKeyArea(MessageTransport.kIDKey);
	this.getField(MessageTransport.kID).setString(strMessageTransport);	
}
else
{
	this.setKeyArea(MessageTransport.kCodeKey);
	this.getField(MessageTransport.kCode).setString(strMessageTransport);
}
try {
    if (this.seek(null))
        return this;
} catch (DBException ex) {
    ex.printStackTrace();
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783393">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getServletPath</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectReportScreen</MethodClassName>
		<LogicSource>return super.getServletPath(DBParams.XHTMLSERVLET); // Use cocoon</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783394">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectReportScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783395">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectReportScreen</MethodClassName>
		<LogicSource>return new ProjectTask(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783396">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectReportScreen</MethodClassName>
		<LogicSource>return new ProjectTaskScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783397">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectReportScreen</MethodClassName>
		<LogicSource>return new ProjectReportToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783398">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectReportToolbar</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783399">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectReportScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(ProjectTask.kParentProjectTaskIDKey);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783400">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getNextGridRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProjectReportScreen</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
Record recNew = null;
if (bFirstTime)
{
    String mainString = this.getScreenRecord().getField(ProjectTaskScreenRecord.kProjectTaskID).toString();
	recNew = this.getCurrentLevelInfo(+0, record);
	recNew.addListener(new StringSubFileFilter(mainString, ProjectTask.kParentProjectTaskID, null, -1, null, -1));
}
else
{	// See if there are any sub-records to the last valid record
	recNew = this.getCurrentLevelInfo(+1, record);
    String mainString = record.getCounterField().toString();
    if (recNew.getListener(StringSubFileFilter.class) == null)
    	recNew.addListener(new StringSubFileFilter(mainString, ProjectTask.kParentProjectTaskID, null, -1, null, -1));
}
boolean bHasNext = recNew.hasNext();
if (!bHasNext)
{
	int dLevel = (int)this.getScreenRecord().getField(ProjectTaskScreenRecord.kCurrentLevel).getValue();
	if (dLevel == 0)
        return null;	// All done
	Record recTemp = this.getCurrentLevelInfo(+0, record);
	recTemp.removeListener(recTemp.getListener(StringSubFileFilter.class), true);
	recTemp.close();
	dLevel = dLevel - 2;	// Since it is incremented next time
	this.getScreenRecord().getField(ProjectTaskScreenRecord.kCurrentLevel).setValue(dLevel);
	return this.getNextGridRecord(false);
}
Record recNext = (Record)recNew.next();
record.moveFields(recNext, null, true, DBConstants.SCREEN_MOVE, false, false, false);
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783402">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getCurrentLevelInfo</MethodName>
		<LogicDescription><![CDATA[Add to the current level, then
get the record at this level
If the record doesn't exist, clone a new one and return it.
@param record The main record (that I will clone if I need to)
@param iOffsetFromCurrentLevel The amount to bump the level
@return The record at this (new) level]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>int iOffsetFromCurrentLevel, Record record</MethodInterface>
		<MethodClassName>ProjectReportScreen</MethodClassName>
		<LogicSource><![CDATA[int dLevel = (int)this.getScreenRecord().getField(ProjectTaskScreenRecord.kCurrentLevel).getValue();
dLevel = dLevel + iOffsetFromCurrentLevel;
this.getScreenRecord().getField(ProjectTaskScreenRecord.kCurrentLevel).setValue(dLevel);
if (m_rgCurrentLevelInfo.size() >= dLevel)
{
	try {
		m_rgCurrentLevelInfo.add((Record)record.clone());
		m_rgCurrentLevelInfo.elementAt(dLevel).setKeyArea(ProjectTask.kParentProjectTaskIDKey);
	} catch (CloneNotSupportedException ex) {
		ex.printStackTrace();
	}
}
return m_rgCurrentLevelInfo.elementAt(dLevel);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783403">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>NameIndentConverter</MethodName>
		<LogicDescription/>
		<MethodReturns>converter</MethodReturns>
		<MethodInterface>Converter converter, Converter convIndent, int iIndentAmount</MethodInterface>
		<MethodClassName>NameIndentConverter</MethodClassName>
		<LogicSource><![CDATA[super;
m_convIndent = convIndent;
m_iIndentAmount = iIndentAmount;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783404">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>NameIndentConverter</MethodClassName>
		<LogicSource><![CDATA[String string = super;
int iIndent = (int)m_convIndent.getValue();
string = gstrSpaces.substring(0, iIndent * m_iIndentAmount) + string;
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783498">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>writeAndRefresh</MethodName>
		<LogicDescription><![CDATA[Write this record and re-read if (if it has been modified).
@return the bookmark]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows>DBException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783515">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportManualSelect</MethodClassName>
		<LogicSource><![CDATA[Record record = super.makeReferenceRecord(recordOwner);
record.addListener(new CompareFileFilter(MessageTransport.kMessageTransportType, MessageTransportTypeField.MANUAL_RESPONSE, DBConstants.EQUALS, null, false));
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783518">
		<LastChanged>2009-09-15T22:39:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoManualField</MethodClassName>
		<LogicSource><![CDATA[ScreenField screenField = super;

for (int i = 0; ; i++)
{
    Object comp = converter.getField().getComponent(i);
    if (comp == null)
        break;
    if (comp instanceof SCannedBox)
    {
        ((SCannedBox)comp).free();
        i--;
    }
}

Record record = this.makeReferenceRecord();
new SSelectBox(targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, converter, ScreenConstants.DONT_DISPLAY_DESC, record)
{
    public boolean doCommand(String strCommand, ScreenField sourceSField, int iCommandOptions)
    {
        boolean bHandled = false;
        if (ThinMenuConstants.LOOKUP.equalsIgnoreCase(strCommand))
            if (this.getParentScreen() != null) // Give the parent screen a shot at it.
                bHandled = this.getParentScreen().handleCommand(LOOKUP_WITH_PARAMS, sourceSField, iCommandOptions);
        if (!bHandled)
            bHandled = super.doCommand(strCommand, sourceSField, iCommandOptions);
        return bHandled;
    }
    
};
new SCannedBox(targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), targetScreen, converter, SCannedBox.CLEAR, ScreenConstants.DONT_DISPLAY_FIELD_DESC, this);

return screenField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783523">
		<LastChanged>2010-03-02T05:25:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>createAndSendURLMessage</MethodName>
		<LogicDescription><![CDATA[Using this URL, create a message and send it to the recepient
Note: If the MessageProcessInfo record is current, uses this information for sending the message
@param strMessageTransport The (optional) transport code or ID
@param recMessageTargetDetail The (optional) Message target (will use this for resolving transport and destination information)
@return An error code]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>String strMessageTransport, MessageDetailTarget recMessageDetailTarget, String strURL, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[String strBaseURL = strURL;
URL url = this.getTask().getApplication().getResourceURL(strURL, null);
strURL = url.toString();
if ((this.getRecordOwner() != null)
    && (this.getRecordOwner().getProperty(DBParams.BASE_URL) != null))
        strBaseURL = this.getRecordOwner().getProperty(DBParams.BASE_URL);
else if (strURL.indexOf(strBaseURL) > 0)   // Make sure the xsl processor creates all the links with a full URL (since emails, etc probably need full URLs)
    strBaseURL = strURL.substring(0, strURL.indexOf(strBaseURL));
else
    strBaseURL = null;
if (strBaseURL != null)
    strURL = Utility.addURLParam(strURL, DBParams.BASE_URL, strBaseURL);

// Now, transfer the URL data to the file or this string.
String strMessage = Utility.transferURLStream(strURL, null);

if ((strMessage != null) && (strMessage.length() > 0))
{   // Note: properties include SEND_BY and DESTINATION
    if (properties == null)
        properties = new Hashtable<String, Object>();
    Utility.parseArgs(properties, strURL);
    
    if (strMessage != null)
        if (strMessage.startsWith("%PDF"))
            if (properties.get("content-type") == null)
                properties.put("content-type", "application/pdf");

    BaseMessage message = null;
    // First see if the use specifies a specific message
    TrxMessageHeader trxMessageHeader = null;
    MessageProcessInfo recMessageProcessInfo = this;
    if (recMessageProcessInfo.getEditMode() != DBConstants.EDIT_CURRENT)
    {   // If not, try to look up the correct message
        String strMessageInfoType = MessageInfoType.REQUEST;
        String strContactType = null; 
        if (recMessageDetailTarget instanceof Record) // Usually
            strContactType = ((Record)recMessageDetailTarget).getTableNames(false);
        String strRequestType = RequestType.MANUAL;
        String strMessageProcessType = MessageType.MESSAGE_OUT;
        String strProcessType = ProcessType.INFO;
        recMessageProcessInfo = this.getMessageProcessInfo(strMessageInfoType, strContactType, strRequestType, strMessageProcessType, strProcessType);
    }
    if (recMessageProcessInfo != null)
        if (recMessageProcessInfo.getEditMode() == DBConstants.EDIT_CURRENT)
    {
        trxMessageHeader = recMessageProcessInfo.createProcessMessageHeader(recMessageDetailTarget, strMessageTransport);
        if (trxMessageHeader.getMessageHeaderMap() == null)
            trxMessageHeader.setMessageHeaderMap(properties);
        else
            trxMessageHeader.getMessageHeaderMap().putAll(properties); // These params override read params
        message = BaseMessage.createMessage(trxMessageHeader);
    }
    if (message == null)
    {   // If all else fails, just create a manual message.
        if (trxMessageHeader == null)
            trxMessageHeader = new TrxMessageHeader(this, properties);
        message = new ManualMessage(trxMessageHeader, strMessage);
    }
    else
        message.put(ManualMessage.MESSAGE_PARAM, strMessage);  // The physical message
    if (trxMessageHeader.get(TrxMessageHeader.MESSAGE_PROCESSOR_CLASS) == null)
        trxMessageHeader.put(TrxMessageHeader.MESSAGE_PROCESSOR_CLASS, BaseMessageOutProcessor.class.getName());   // Default processor
    
    if ((trxMessageHeader.get(TrxMessageHeader.DESTINATION_PARAM) == null) && (message.get(TrxMessageHeader.DESTINATION_PARAM) == null))
        return this.getTask().setLastError(this.getTask().getString("No destination address in message"));

    BaseMessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager();
    if (messageManager != null)
        messageManager.sendMessage(message);
}
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783526">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PropertiesInputGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getParentScreen() instanceof Screen)
    return null;    // Sub-screen
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783527">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>loadFieldProperties*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>PropertiesField fldProperties</MethodInterface>
		<MethodClassName>PropertiesInput</MethodClassName>
		<LogicSource><![CDATA[if (fldProperties == null)
    return;
boolean[] rgbEnabled = this.setEnableListeners(false);;
try {
    this.setKeyArea(PropertiesInput.kKeyKey);
    // First, delete the old records
    this.close();
    while (this.hasNext())
    {
        this.next();
        this.edit();
        this.remove();
    }
    // Now, add the properties to the record
    Map<String,Object> properties = fldProperties.getProperties();
    Iterator<String> iterator = properties.keySet().iterator();
    while (iterator.hasNext())
    {
        String strKey = iterator.next();
        String strValue = (String)properties.get(strKey);
        this.addNew();
        this.getField(PropertiesInput.kKey).setString(strKey);
        if (this.seek(null))
        {
            this.edit();
            this.remove();
        }
        this.addNew();
        this.getField(PropertiesInput.kKey).setString(strKey);
        this.getField(PropertiesInput.kValue).setString(strValue);
        this.add();
    }
    if (this.getRecordOwner() instanceof GridScreen)
        ((GridScreen)this.getRecordOwner()).reSelectRecords();
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    this.setEnableListeners(rgbEnabled);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783528">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>restoreFieldProperties*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>PropertiesField fldProperties</MethodInterface>
		<MethodClassName>PropertiesInput</MethodClassName>
		<LogicSource><![CDATA[if (fldProperties == null)
    return;
try {
    // This may seem a little wierd, but by doing this, I won't change the field if there was no change.
    Map<String,Object> properties = fldProperties.getProperties();
    this.close();
    while (this.hasNext())
    {
        this.next();
        String strKey = this.getField(PropertiesInput.kKey).getString();
        String strValue = this.getField(PropertiesInput.kValue).getString();
        if (strValue != null)
            if (strValue.length() > 0)
        {
            fldProperties.setProperty(strKey, strValue);
            properties.remove(strKey);
        }
    }
    Iterator<String> iterator = properties.keySet().iterator();
    while (iterator.hasNext())
    {
        String strKey = iterator.next();
        fldProperties.setProperty(strKey, null);
    }
} catch (DBException ex) {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783529">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarCategoryField</MethodClassName>
		<LogicSource>return new CalendarCategory(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783530">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>convertIndexToDisStr</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarEntryTypeField</MethodClassName>
		<LogicSource><![CDATA[if (index == CalendarEntry.ANNIVERSARY_ID)
    return ANNIVERSARY;
if (index == CalendarEntry.APPOINTMENT_ID)
    return APPOINTMENT;
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783533">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RepeatIntervalField</MethodClassName>
		<LogicSource>return new RepeatInterval(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783534">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AppointmentScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(Appointment.kCalendarCategoryID).addListener(new InitFieldHandler(this.getRecord(CalendarControl.kCalendarControlFile).getField(CalendarControl.kAppointmentCategoryID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783535">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AppointmentGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(Appointment.kCalendarCategoryID).addListener(new InitFieldHandler(this.getRecord(CalendarControl.kCalendarControlFile).getField(CalendarControl.kAppointmentCategoryID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783536">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AppointmentScreen</MethodClassName>
		<LogicSource>return new Appointment(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783537">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AppointmentScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new CalendarControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783538">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AppointmentGridScreen</MethodClassName>
		<LogicSource>return new Appointment(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783539">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AppointmentGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new CalendarControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783540">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnnivMasterGridScreen</MethodClassName>
		<LogicSource>return new AnnivMaster(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783541">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnnivMasterGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new CalendarControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783542">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnnivMasterGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(AnnivMaster.kCalendarCategoryID).addListener(new InitFieldHandler(this.getRecord(CalendarControl.kCalendarControlFile).getField(CalendarControl.kAnniversaryCategoryID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783543">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnnivMasterScreen</MethodClassName>
		<LogicSource>return new AnnivMaster(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783544">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnnivMasterScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new CalendarControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783545">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnnivMasterScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(AnnivMaster.kCalendarCategoryID).addListener(new InitFieldHandler(this.getRecord(CalendarControl.kCalendarControlFile).getField(CalendarControl.kAnniversaryCategoryID)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783546">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AppointmentScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783547">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AppointmentGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783548">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnnivMasterHandler</MethodClassName>
		<LogicSource><![CDATA[AnnivMaster recAnnivMaster = (AnnivMaster)this.getOwner();
if (iChangeType == DBConstants.AFTER_ADD_TYPE)
{
    Object bookmark = recAnnivMaster.getLastModified(DBConstants.BOOKMARK_HANDLE);
    try {
        recAnnivMaster.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
        
        Calendar calStart = ((DateTimeField)this.getCalendarControl().getField(CalendarControl.kStartAnnivDate)).getCalendar();
        Calendar calEnd = ((DateTimeField)this.getCalendarControl().getField(CalendarControl.kEndAnnivDate)).getCalendar();

        recAnnivMaster.addAppointments(this.getAnniversary(), calStart, calEnd);

        recAnnivMaster.addNew();
    } catch (DBException ex) {
        ex.printStackTrace();
    }
}
if (iChangeType == DBConstants.AFTER_UPDATE_TYPE)
{
    Calendar calStart = ((DateTimeField)this.getCalendarControl().getField(CalendarControl.kStartAnnivDate)).getCalendar();
    Calendar calEnd = ((DateTimeField)this.getCalendarControl().getField(CalendarControl.kEndAnnivDate)).getCalendar();

    recAnnivMaster.removeAppointments(this.getAnniversary());
    recAnnivMaster.addAppointments(this.getAnniversary(), calStart, calEnd);
}
if (iChangeType == DBConstants.AFTER_DELETE_TYPE)
{
    recAnnivMaster.removeAppointments(this.getAnniversary());
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783549">
		<LastChanged>2010-03-02T05:22:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AnnivMaster</MethodClassName>
		<LogicSource><![CDATA[super;

if ((this.getMasterSlave() & RecordOwner.MASTER) != 0)    // Don't do in slave
{
    this.addListener(new AnnivMasterHandler(null));
    
    this.addListener(new FileListener(null)
    {
        public int doRecordChange(FieldInfo field, int iChangeType, boolean bDisplayOption)
        {
            int iErrorCode = super.doRecordChange(field, iChangeType, bDisplayOption);
            if ((iChangeType == DBConstants.AFTER_ADD_TYPE) || (iChangeType == DBConstants.AFTER_UPDATE_TYPE))
                    if (!getField(AnnivMaster.kProperties).isNull())
            {   // This will cause the JobScheduler to reschedule the jobs (now that they have changed)
                BaseMessageManager messageManager = ((Application)getTask().getApplication()).getMessageManager();
                Map<String,Object> properties = new Hashtable<String,Object>();
                properties.put(DBParams.PROCESS, JobSchedulerReference.JOB_PROCESS_NAME);
                if (messageManager != null)
                    messageManager.sendMessage(new MapMessage(new BaseMessageHeader(CalendarEntry.JOB_QUEUE_NAME, MessageConstants.INTRANET_QUEUE, this, null), properties));
            }
            return iErrorCode;
        }
    });
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783550">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>removeAppointments</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Anniversary recAnniversary</MethodInterface>
		<MethodClassName>AnnivMaster</MethodClassName>
		<LogicSource><![CDATA[SubFileFilter listener = new SubFileFilter(this);
recAnniversary.addListener(listener);
try {
    recAnniversary.close();
    
    while (recAnniversary.hasNext())
    {
        recAnniversary.next();
        recAnniversary.edit();
        recAnniversary.remove();
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    recAnniversary.removeListener(listener, true);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783551">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>addAppointments</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Anniversary recAnniversary, Calendar calStart, Calendar calEnd</MethodInterface>
		<MethodClassName>AnnivMaster</MethodClassName>
		<LogicSource><![CDATA[try {
    Converter.initGlobals();
    Calendar calendar = Converter.gCalendar;
    
    Record recRepeat = ((ReferenceField)this.getField(AnnivMaster.kRepeatIntervalID)).getReference();
    String strRepeat = null;
    if (recRepeat != null)
        strRepeat = recRepeat.getField(RepeatInterval.kDescription).toString();
    char chRepeat;
    if ((strRepeat == null) || (strRepeat.length() == 0))
        chRepeat = 'Y';
    else
        chRepeat = strRepeat.toUpperCase().charAt(0);
    int iRepeatCode;
    if (chRepeat == 'D')
        iRepeatCode = Calendar.DATE;
    else if (chRepeat == 'W')
        iRepeatCode = Calendar.WEEK_OF_YEAR;
    else if (chRepeat == 'M')
        iRepeatCode = Calendar.MONTH;
    else
        iRepeatCode = Calendar.YEAR;
    short sRepeatCount = (short)this.getField(AnnivMaster.kRepeatCount).getValue();
    if (sRepeatCount == 0)
        sRepeatCount = 1;
    Date timeStart = ((DateTimeField)this.getField(AnnivMaster.kStartDateTime)).getDateTime();
    Date timeEnd = ((DateTimeField)this.getField(AnnivMaster.kEndDateTime)).getDateTime();
    long lTimeLength = -1;
    if (timeEnd != null)
        lTimeLength = timeEnd.getTime() - timeStart.getTime();

    calendar.setTime(timeStart);
    for (int i = 0; i < 100; i++)
    {
        if ((calendar.after(calStart))
            && (calendar.before(calEnd)))
        {
            timeStart = calendar.getTime();
            timeEnd = null;
            if (lTimeLength != -1)
                timeEnd = new Date(timeStart.getTime() + lTimeLength);

            recAnniversary.addNew();
            ((DateTimeField)recAnniversary.getField(Anniversary.kStartDateTime)).setDateTime(timeStart, false, DBConstants.SCREEN_MOVE);
            if (timeEnd != null)
                ((DateTimeField)recAnniversary.getField(Anniversary.kEndDateTime)).setDateTime(timeEnd, false, DBConstants.SCREEN_MOVE);
            recAnniversary.getField(Anniversary.kDescription).moveFieldToThis(this.getField(AnnivMaster.kDescription));
            ((ReferenceField)recAnniversary.getField(Anniversary.kAnnivMasterID)).setReference(this);
            recAnniversary.getField(Anniversary.kCalendarCategoryID).moveFieldToThis(this.getField(AnnivMaster.kCalendarCategoryID));
            recAnniversary.getField(Anniversary.kHidden).moveFieldToThis(this.getField(AnnivMaster.kHidden));
            // Don't move properties (you will have to read the AnnivMaster to get the properties)
            recAnniversary.add();
        }
        calendar.add(iRepeatCode, sRepeatCount);
    }
} catch (DBException ex) {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783552">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getAnniversary</MethodName>
		<LogicDescription/>
		<MethodReturns>Anniversary</MethodReturns>
		<MethodInterface/>
		<MethodClassName>AnnivMasterHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recAnniversary == null)
    m_recAnniversary = new Anniversary(this.getOwner().getRecordOwner());
return m_recAnniversary;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783553">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getCalendarControl</MethodName>
		<LogicDescription/>
		<MethodReturns>CalendarControl</MethodReturns>
		<MethodInterface/>
		<MethodClassName>AnnivMasterHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recCalendarControl == null)
    m_recCalendarControl = new CalendarControl(this.getOwner().getRecordOwner());
return m_recCalendarControl;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783554">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarControl</MethodClassName>
		<LogicSource><![CDATA[super;   // This will read the current record
// Make sure the AnnivMaster update is current.
this.updateDatesAndCalendar();    // Don't do in slave]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783555">
		<LastChanged>2010-04-27T17:38:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>updateCalendar</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Calendar calStart, Calendar calEnd</MethodInterface>
		<MethodClassName>CalendarControl</MethodClassName>
		<LogicSource><![CDATA[Anniversary recAnniversary = new Anniversary(this.getRecordOwner());
AnnivMaster recAnnivMaster = new AnnivMaster(this.getRecordOwner());
recAnniversary.setKeyArea(Anniversary.kStartDateTimeKey);
try {
    while (recAnniversary.hasNext())
    {
        recAnniversary.next();
        if (recAnniversary.getField(Anniversary.kStartDateTime).compareTo(this.getField(CalendarControl.kStartAnnivDate)) > 0)
            break;  // end of the entries that are not in the current range.
        recAnniversary.edit();
        recAnniversary.remove();
    }
    
    while (recAnnivMaster.hasNext())
    {
        recAnnivMaster.next();
        recAnnivMaster.addAppointments(recAnniversary, calStart, calEnd);
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    recAnniversary.free();
    recAnnivMaster.free();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783556">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>updateDatesAndCalendar</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarControl</MethodClassName>
		<LogicSource><![CDATA[if ((this.getEditMode() == DBConstants.EDIT_NONE) || (this.getEditMode() == DBConstants.EDIT_ADD))
    return; // Only on initial setup
boolean bUpdateDates = false;
int iUpdateDays = (int)this.getField(CalendarControl.kUpdateDays).getValue();
Calendar calNow = new GregorianCalendar();
if ((this.getField(CalendarControl.kStartAnnivDate).isNull())
    || (this.getField(CalendarControl.kEndAnnivDate).isNull()))
        bUpdateDates = true;
else
{
    Calendar calCutoff = ((DateTimeField)this.getField(CalendarControl.kLastUpdateDate)).getCalendar();
    calCutoff.add(Calendar.DAY_OF_YEAR, iUpdateDays);
    if (calNow.after(calCutoff))
        bUpdateDates = true;
}
if (bUpdateDates)
{
    int iBackDays = (int)this.getField(CalendarControl.kAnnivBackDays).getValue();
    int iRangeDays = (int)this.getField(CalendarControl.kAnniversaryDays).getValue();
    Calendar calStart = (Calendar)calNow.clone();
    calStart.add(Calendar.DAY_OF_YEAR, -iBackDays);
    Calendar calEnd = (Calendar)calStart.clone();
    calEnd.add(Calendar.DAY_OF_YEAR, iRangeDays - iBackDays);
    
    Calendar calOldEnd = ((DateTimeField)this.getField(CalendarControl.kEndAnnivDate)).getCalendar();
    if (calOldEnd == null)
        calOldEnd = calNow;

    ((DateTimeField)this.getField(CalendarControl.kStartAnnivDate)).setCalendar(calStart, true, DBConstants.SCREEN_MOVE);
    ((DateTimeField)this.getField(CalendarControl.kEndAnnivDate)).setCalendar(calEnd, true, DBConstants.SCREEN_MOVE);
    ((DateTimeField)this.getField(CalendarControl.kLastUpdateDate)).setCalendar(calNow, true, DBConstants.SCREEN_MOVE);
    
    this.updateCalendar(calOldEnd, calEnd);  // Update the calendar
    
    try {
        this.writeAndRefresh();
    } catch (DBException ex) {
        ex.printStackTrace();
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783557">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Anniversary</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
{   // This is a little weird... can't directly change this table, must edit AnnivMaster
    Record recAnnivMaster = ((ReferenceField)this.getField(Anniversary.kAnnivMasterID)).getReferenceRecord(this.getRecordOwner());
    recAnnivMaster.setOpenMode(recAnnivMaster.getOpenMode() & ~DBConstants.OPEN_READ_ONLY);
    if ((this.getEditMode() == DBConstants.EDIT_CURRENT)
        || (this.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
            recAnnivMaster = ((ReferenceField)this.getField(Anniversary.kAnnivMasterID)).getReference();
    // Disconnect recAnnivMaster and free this
    ((ReferenceField)this.getField(Anniversary.kAnnivMasterID)).setReferenceRecord(null);
    this.free();
    return recAnnivMaster.makeScreen(itsLocation, parentScreen, iDocMode, properties);
}
else
    screen = super.makeScreen(itsLocation, parentScreen, iDocMode, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783558">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RunProcessInField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {RunProcessInField.LOCAL, "Run locally"}, 
    {RunProcessInField.LOCAL_PROCESS, "Local process"}, 
    {RunProcessInField.REMOTE_PROCESS, "Remote process"}, 
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783559">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RunProcessInField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = RunProcessInField.REMOTE_PROCESS;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783560">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>QueueNameField</MethodClassName>
		<LogicSource>return new QueueName(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783561">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>QueueTypeField</MethodClassName>
		<LogicSource><![CDATA[String[][] string = {
    {DBConstants.BLANK, DBConstants.BLANK},
    {MessageConstants.LOCAL_QUEUE, MessageConstants.LOCAL_QUEUE},
    {MessageConstants.INTRANET_QUEUE, MessageConstants.INTRANET_QUEUE},
    {MessageConstants.INTERNET_QUEUE, MessageConstants.INTERNET_QUEUE},
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783562">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>QueueTypeField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 10;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783563">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>QueueTypeField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = MessageConstants.INTRANET_QUEUE;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783564">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription><![CDATA[Get the default value.
@return The default value.]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface/>
		<MethodClassName>FieldInfo</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783565">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransportTypeField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = DIRECT;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783566">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RunProcessInField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783567">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserHomeField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super.getDefault();
if (objDefault == null)
    objDefault = "Main";
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783568">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserHomeField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 5;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783569">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PredecessorTypeField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = FINISH_START;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783585">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>QueueNameField</MethodClassName>
		<LogicSource>return this.setupTableLookup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), -1, QueueName.kName, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783586">
		<LastChanged>2011-05-03T12:21:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>JobSchedulerApp</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.registerUniqueApplication(null, null) != Constants.NORMAL_RETURN)
{
    this.free();    // Don't start this application (It's already running somewhere)
    return;
}
// Okay good. I'm responsible for scheduling and running scheduled tasks.
final int MAX_TASKS = 1;    // For now, run them sequentially
this.setTaskScheduler(new PrivateTaskScheduler(this, MAX_TASKS, true));

BaseMessageManager messageManager = RemoteMessageManager.getMessageManager(this);
String strQueueName = this.getProperty(MessageConstants.QUEUE_NAME);
if (strQueueName == null)
    strQueueName = MessageConstants.TRX_RECEIVE_QUEUE; // Never
String strQueueType = this.getProperty(MessageConstants.QUEUE_TYPE);
if (strQueueType == null)
    strQueueType = MessageConstants.INTRANET_QUEUE; // Never
BaseMessageReceiver receiver = (BaseMessageReceiver)messageManager.getMessageQueue(strQueueName, strQueueType).getMessageReceiver();
new BaseMessageListener(receiver)    // Listener added to filter.
{
    public int handleMessage(BaseMessage message)
    {   // Whenever I'm pinged, restart the JobScanner which rescans the current job list
        Map<String,Object> properties = null;
        if (message instanceof MapMessage)  // Always
            properties = (Map)message.getData();
        ProcessRunnerTask task = new ProcessRunnerTask(JobSchedulerApp.this, null, properties);
        getTaskScheduler().addTask(task);
        return super.handleMessage(message);
    }
};]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783587">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>JobSchedulerProcess</MethodClassName>
		<LogicSource>return new CalendarEntry(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783588">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>JobSchedulerProcess</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().setKeyArea(CalendarEntry.kStartDateTimeKey);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783589">
		<LastChanged>2010-03-02T05:27:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>JobSchedulerProcess</MethodClassName>
		<LogicSource><![CDATA[CalendarEntry recCalendarEntry = (CalendarEntry)this.getMainRecord();
recCalendarEntry.close();
try {
    Date now = new Date();
    Date date = null;

    ((Application)this.getTask().getApplication()).getTaskScheduler().addTask(PrivateTaskScheduler.EMPTY_TIMED_JOBS);    // Clear out any jobs queued for a later time

    while (recCalendarEntry.hasNext())
    {
        recCalendarEntry.next();
        
        Map<String,Object> properties = recCalendarEntry.getProperties();
        if ((properties == null) || (properties.get(DBParams.PROCESS) == null))
            continue;   // Not a task
        if (properties.get(CalendarUpdateProcess.TASK_COMPLETED) != null)
            continue;   // It has already been run

        date = ((DateTimeField)recCalendarEntry.getField(CalendarEntry.kStartDateTime)).getDateTime();
        if (date == null)
            continue;   // Never?
        if ((date.getTime() - now.getTime()) > 0)
            break;  // The one should be run later

        this.runCalendarEntry(properties);  // Queue this job
        // Now, Add a process that will mark this job as done (todo(don) NOTE: This will only work if there is one thread on the task scheduler)
        Map<String,Object> propUpdateTask = new Hashtable<String,Object>();
        propUpdateTask.put(DBParams.PROCESS, CalendarUpdateProcess.class.getName());
        propUpdateTask.put(DBParams.ID, recCalendarEntry.getCounterField().toString());
        this.runCalendarEntry(propUpdateTask);  // Queue this job
    }
    
    if (date != null)
        if ((date.getTime() - now.getTime()) > 0)
    {
        Map<String,Object> propSleepTask = new Hashtable<String,Object>();
        propSleepTask.put(PrivateTaskScheduler.TIME_TO_RUN, date);
        propSleepTask.put(PrivateTaskScheduler.NO_DUPLICATE, Constants.TRUE);   // Being careful
        propSleepTask.put(DBParams.PROCESS, JobSchedulerProcess.class.getName());
        this.runCalendarEntry(propSleepTask);  // Queue this job
    }
} catch (DBException ex) {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783590">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>Application</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Object env, Map&lt;String,Object&gt; properties, JApplet applet</MethodInterface>
		<MethodClassName>Application</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783591">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProcessRunnerTask</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783593">
		<LastChanged>2010-03-06T04:21:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>runCalendarEntry</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>JobSchedulerProcess</MethodClassName>
		<LogicSource><![CDATA[ProcessRunnerTask task = new ProcessRunnerTask(null, null, properties);
((Application)this.getTask().getApplication()).getTaskScheduler().addTask(task);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783594">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Object env, Map&lt;String,Object&gt; properties, JApplet applet</MethodInterface>
		<MethodClassName>Application</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783595">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getQueueName</MethodName>
		<LogicDescription>Get the (internal) Queue name for this message process.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>boolean bDefaultIfNone</MethodInterface>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[String strName = null;
Record recQueueName = ((ReferenceField)this.getField(MessageProcessInfo.kQueueNameID)).getReference();
if ((recQueueName != null) && (recQueueName.getEditMode() == DBConstants.EDIT_CURRENT))
    strName = recQueueName.getField(QueueName.kCode).toString();
if ((strName == null) || (strName.length() == 0))
    if (bDefaultIfNone)
{
    int iMessageInfoType = MessageInfoType.REQUEST_ID;
    Record recMessageInfo = ((ReferenceField)this.getField(MessageProcessInfo.kMessageInfoID)).getReference();
    if ((recMessageInfo != null) && (recMessageInfo.getEditMode() == DBConstants.EDIT_CURRENT))
        iMessageInfoType = (int)recMessageInfo.getField(MessageInfo.kMessageInfoTypeID).getValue();
    if (iMessageInfoType == MessageInfoType.REQUEST_ID)
        strName = MessageConstants.TRX_SEND_QUEUE;
    else
        strName = MessageConstants.TRX_RECEIVE_QUEUE;
}
return strName;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783596">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getQueueType</MethodName>
		<LogicDescription>Get the queue type for this message process</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>boolean bDefaultIfNone</MethodInterface>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[String strQueueType = null;
Record recQueueName = ((ReferenceField)this.getField(MessageProcessInfo.kQueueNameID)).getReference();
if (recQueueName != null)
    if (recQueueName.getEditMode() == DBConstants.EDIT_CURRENT)
        strQueueType = recQueueName.getField(QueueName.kQueueType).toString();
if ((strQueueType == null) || (strQueueType.length() == 0))
    if (bDefaultIfNone)
        strQueueType = MessageConstants.DEFAULT_QUEUE;
return strQueueType;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783597">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>getProperties</MethodName>
		<LogicDescription><![CDATA[Get the properties from the Properties field,
and merge with the properties from the Master field
if it exists.]]></LogicDescription>
		<MethodReturns>Map&lt;String,Object&gt;</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CalendarEntry</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> properties = ((PropertiesField)this.getField(CalendarEntry.kProperties)).getProperties();
if (!this.getField(CalendarEntry.kAnnivMasterID).isNull())
    if (this.getField(CalendarEntry.kAnnivMasterID) instanceof ReferenceField)
{
    Record recAnnivMaster = ((ReferenceField)this.getField(CalendarEntry.kAnnivMasterID)).getReference();
    if ((recAnnivMaster != null) && ((recAnnivMaster.getEditMode() == DBConstants.EDIT_CURRENT) || (recAnnivMaster.getEditMode() == DBConstants.EDIT_IN_PROGRESS)))
    {
        Map<String,Object> propMaster = ((PropertiesField)recAnnivMaster.getField(AnnivMaster.kProperties)).getProperties();
        if (propMaster != null)
        {
            if (properties != null)
                propMaster.putAll(properties);  // Merge them
            properties = propMaster;
        }
    }
}
return properties;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783598">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getStartIcon</MethodName>
		<LogicDescription>Get the icon for the screen display</LogicDescription>
		<MethodReturns>ImageIcon</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CalendarEntry</MethodClassName>
		<LogicSource><![CDATA[ImageIcon iconStart = null;
Record recCalendarCategory = ((ReferenceField)this.getField(CalendarEntry.kCalendarCategoryID)).getReference();
if ((recCalendarCategory == null) || (recCalendarCategory.getEditMode() != DBConstants.EDIT_CURRENT))
    if (this.getField(CalendarEntry.kAnnivMasterID) instanceof ReferenceField)
{
//    Record recAnnivMaster = ((ReferenceField)this.getField(CalendarEntry.kAnnivMasterID)).getReference();
//    if ((recAnnivMaster != null) && ((recAnnivMaster.getEditMode() == DBConstants.EDIT_CURRENT) || (recAnnivMaster.getEditMode() == DBConstants.EDIT_IN_PROGRESS)))
//        recCalendarCategory = ((ReferenceField)recAnnivMaster.getField(AnnivMaster.kCalendarCategoryID)).getReference();
}
if ((recCalendarCategory != null) && (recCalendarCategory.getEditMode() == DBConstants.EDIT_CURRENT))
    iconStart = ((ImageField)recCalendarCategory.getField(CalendarCategory.kIcon)).getImage();
if (iconStart == null)
{
    if (this.getTask() instanceof BaseApplet)
        iconStart = ((BaseApplet)this.getTask()).loadImageIcon("Calendar");
}
return iconStart;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783599">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getIcon</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarEntryItem</MethodClassName>
		<LogicSource><![CDATA[if (iIconType == CalendarConstants.START_ICON)
    return ((CalendarEntry)this.getMainRecord().getTable().getCurrentTable().getRecord()).getStartIcon();
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783600">
		<LastChanged>2010-03-02T05:23:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarEntry</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new FileListener(null)
{
    public int doRecordChange(FieldInfo field, int iChangeType, boolean bDisplayOption)
    {
        int iErrorCode = super.doRecordChange(field, iChangeType, bDisplayOption);
        if ((iChangeType == DBConstants.AFTER_ADD_TYPE) || (iChangeType == DBConstants.AFTER_UPDATE_TYPE))
            if (getSharedRecordTypeKey().getValue() == CalendarEntry.APPOINTMENT_ID)
                if (!getField(CalendarEntry.kProperties).isNull())
        {   // This will cause the JobScheduler to reschedule the jobs (now that they have changed)
            BaseMessageManager messageManager = ((Application)getTask().getApplication()).getMessageManager();
            Map<String,Object> properties = new Hashtable<String,Object>();
            properties.put(DBParams.PROCESS, JobSchedulerReference.JOB_PROCESS_NAME);
            if (messageManager != null)
                messageManager.sendMessage(new MapMessage(new BaseMessageHeader(JOB_QUEUE_NAME, MessageConstants.INTRANET_QUEUE, this, null), properties));
        }
        return iErrorCode;
    }
});]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783601">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarUpdateProcess</MethodClassName>
		<LogicSource><![CDATA[String strID = this.getProperty(DBParams.ID);
if ((strID != null) && (strID.length() > 0))
{
    Record recCalendarEntry = this.getMainRecord();
    recCalendarEntry.getCounterField().setString(strID);
    try {
        if (recCalendarEntry.seek(null))
        {
            recCalendarEntry.edit();
            boolean[] rgbEnabled = recCalendarEntry.setEnableListeners(false);	// I need to do this since a change in properties will reschedule the jobs.
            ((PropertiesField)recCalendarEntry.getField(CalendarEntry.kProperties)).setProperty(TASK_COMPLETED, DBConstants.TRUE);
            recCalendarEntry.setEnableListeners(rgbEnabled);
            recCalendarEntry.set();
        }
    } catch (DBException ex) {
        ex.printStackTrace();
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783602">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarUpdateProcess</MethodClassName>
		<LogicSource>return new CalendarEntry(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783603">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInfoApplication</MethodClassName>
		<LogicSource><![CDATA[super;
//?if (this.registerUniqueApplication(null, null) != Constants.NORMAL_RETURN)
{
//?    this.free();    // Don't start this application (It's already running somewhere)
//?    return;
}
if (DBConstants.TRUE.equalsIgnoreCase(this.getProperty(DBParams.JMSSERVER)))
{
    Map<String,Object> propProcess = new Hashtable<String,Object>();
    propProcess.put(DBParams.PROCESS, MessageInitialProcess.class.getName());
    Task task = new ProcessRunnerTask(this, null, propProcess);
    task.run(); // Don't run this async (for now).
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783631">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource><![CDATA[String strID = null;
String strCode = this.getProperty(CODE);
if ((strCode == null) || (strCode.length() == 0))
{
    strID = this.getProperty(DBParams.ID);
    if ((strID == null) || (strID.length() == 0))
        return;
}
Script recScript = (Script)this.getMainRecord();
if ((strCode == null) || (strCode.length() == 0))
{
    recScript.setKeyArea(Script.kCodeKey);
    recScript.getField(Script.kCode).setString(strCode);
}
else
{
    recScript.setKeyArea(Script.kIDKey);
    recScript.getField(Script.kID).setString(strID);
}
try {
    if (recScript.seek(null) == false)
        return;
    this.doCommand(recScript, null);
} catch (DBException ex) {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783632">
		<LastChanged>2010-04-29T10:42:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource><![CDATA[return null;	// Don't auto-open, in case this is run stand-alone (to run script from properties)]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783638">
		<LastChanged>2010-03-06T04:18:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Script recScript, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
if (recScript.getEditMode() != DBConstants.EDIT_CURRENT)
    return DBConstants.ERROR_RETURN;
if (properties == null)
{   // First time, climb the tree and set up the properties.
    properties = new Hashtable<String,Object>();
    Script recTempScript = new Script(this);
    try {
        int iParentScriptID = (int)recScript.getField(Script.kParentFolderID).getValue();
        recTempScript.getField(Script.kID).setValue(iParentScriptID);
        while ((iParentScriptID > 0) && (recTempScript.seek(null) == true))
        {
            if (!recTempScript.getField(Script.kProperties).isNull())
            {   // Execute this script
                Map<String,Object> propRecord = ((PropertiesField)recTempScript.getField(Script.kProperties)).getProperties();
                propRecord.putAll(properties);  // These properties override parent properties
                properties = propRecord;
            }
            iParentScriptID = (int)recTempScript.getField(Script.kParentFolderID).getValue();
            recTempScript.addNew();
            recTempScript.getField(Script.kID).setValue(iParentScriptID);
        }
    } catch (DBException ex) {
        ex.printStackTrace();
    } finally {
        recTempScript.free();
        recTempScript = null;
    }
}
if (!recScript.getField(Script.kProperties).isNull())
{   // Execute this script
    Map<String,Object> propRecord = ((PropertiesField)recScript.getField(Script.kProperties)).getProperties();
    properties = new Hashtable<String,Object>(properties);    // Create a copy, so you don't mess up the original
    properties.putAll(propRecord);
}

String strCommand = recScript.getField(Script.kCommand).toString();
if (Script.RUN.equalsIgnoreCase(strCommand))
    iErrorCode = this.doRunCommand(recScript, properties);
else if (Script.RUN_REMOTE.equalsIgnoreCase(strCommand))
{
    BaseMessage message = new MapMessage(new TrxMessageHeader(MessageConstants.TRX_SEND_QUEUE, MessageConstants.INTRANET_QUEUE, properties), properties);
    ((Application)this.getTask().getApplication()).getMessageManager().sendMessage(message);
}
else if (Script.SEEK.equalsIgnoreCase(strCommand))
    iErrorCode = this.doSeekCommand(recScript, properties);
else if (Script.COPY_RECORDS.equalsIgnoreCase(strCommand))
    iErrorCode = this.doCopyRecordsCommand(recScript, properties);
else if (Script.COPY_FIELDS.equalsIgnoreCase(strCommand))
    iErrorCode = this.doCopyFieldsCommand(recScript, properties);
else if (Script.COPY_DATA.equalsIgnoreCase(strCommand))
    iErrorCode = this.doCopyDataCommand(recScript, properties);
if (iErrorCode != DONT_READ_SUB_SCRIPT)
    if (iErrorCode != DBConstants.NORMAL_RETURN)
        return iErrorCode;

if (iErrorCode != DONT_READ_SUB_SCRIPT)
    iErrorCode = this.doSubScriptCommands(recScript, properties);
else
    iErrorCode = DBConstants.NORMAL_RETURN;

return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783639">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>doCopyRecordsCommand</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Script recScript, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
Record record = recScript.getTargetRecord(properties, DBParams.RECORD);
if (record == null)
    return DBConstants.ERROR_RETURN;
if (properties.get(PARENT_RECORD) != null)
{
    Record recParent = recScript.getTargetRecord(properties, PARENT_RECORD);
    if (recParent != null)
        record.addListener(new SubFileFilter(recParent));
}
Record recDestination = recScript.getTargetRecord(properties, Script.DESTINATION_RECORD);
try {
    record.close();
    while (record.hasNext())
    {
        record.next();
        recDestination.addNew();
        recDestination.setAutoSequence(false);
        iErrorCode = this.doSubScriptCommands(recScript, properties);
        if (iErrorCode != DBConstants.NORMAL_RETURN)
            return iErrorCode;
        if (recDestination.getCounterField().isNull())
            recDestination.setAutoSequence(true);
        try {
            recDestination.add();
        } catch (DBException ex) {
            // Ignore duplicate records
        }
    }
} catch (DBException ex) {
    ex.printStackTrace();
}
return DONT_READ_SUB_SCRIPT;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783640">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>doCopyFieldsCommand</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Script recScript, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
Record recSource = recScript.getTargetRecord(properties, DBParams.RECORD);
if (recSource == null)
    return DBConstants.ERROR_RETURN;
Record recDestination = recScript.getTargetRecord(properties, Script.DESTINATION_RECORD);
if (recDestination == null)
    return DBConstants.ERROR_RETURN;
String strSourceField = (String)properties.get(Script.SOURCE);
String strDestField = (String)properties.get(Script.DESTINATION);
if (strDestField == null)
    strDestField = strSourceField;
if (strSourceField == null)
    return DBConstants.ERROR_RETURN;
BaseField fldSource = recSource.getField(strSourceField);
BaseField fldDest = recDestination.getField(strDestField);
if ((fldSource == null) || (fldDest == null))
    return DBConstants.ERROR_RETURN;
iErrorCode = fldDest.moveFieldToThis(fldSource);
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783641">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doSeekCommand</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Script recScript, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource><![CDATA[Record record = recScript.getTargetRecord(properties, DBParams.RECORD);
if (record == null)
    return DBConstants.ERROR_RETURN;
for (int iKeySeq = 0; iKeySeq < record.getKeyAreaCount(); iKeySeq++)
{
    String strKeyFieldName = record.getKeyArea(iKeySeq).getKeyField(0).getField(DBConstants.FILE_KEY_AREA).getFieldName(false, false);
    if (recScript.getProperty(strKeyFieldName) != null)
    {
        record.setKeyArea(iKeySeq);
        record.getField(strKeyFieldName).setString(recScript.getProperty(strKeyFieldName));
        try {
            if (record.seek(null))
                return DBConstants.NORMAL_RETURN;
        } catch (DBException ex) {
            ex.printStackTrace();
        }
    }
}
return DBConstants.ERROR_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783642">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>doCopyFilesCommand</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Script recScript, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource>return DBConstants.NORMAL_RETURN;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783643">
		<LastChanged>2010-02-18T06:27:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>processDetail</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Record parent, String strSourcePath, String strDestPath</MethodInterface>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource><![CDATA[boolean bSubsExist = false;
String strName;
Script recReplication = new Script(this);
recReplication.setKeyArea(Script.kParentFolderIDKey);
recReplication.addListener(new SubFileFilter(parent));
try   {
    strName = parent.getField(Script.kName).toString();
            while (recReplication.hasNext())
    { // Read through the pictures and create an index
        recReplication.next();
        bSubsExist = true;
        strName = recReplication.getField(Script.kName).toString();
        String strSource = recReplication.getField(Script.kSource).toString();
        String strDestination = recReplication.getField(Script.kDestination).toString();
        strSource = strSourcePath + strSource;
        strDestination = strDestPath + strDestination;
        this.processDetail(recReplication, strSource, strDestination);
    }
    recReplication.close();
} catch (DBException ex)    {
    ex.printStackTrace();
}
if (strSourcePath.length() > 0)
    if (Character.isLetterOrDigit(strSourcePath.charAt(strSourcePath.length() - 1)))
{
    System.out.println("From: " + strSourcePath + " To: " + strDestPath);
    File fileSource = new File(strSourcePath);
    File fileDest = new File(strDestPath);
    if (fileSource.exists())
    {
        if (fileDest.exists())
            fileDest.delete();
        else
            System.out.println("Target doesn't exist: " + strSourcePath);
        try   {
            FileInputStream inStream = new FileInputStream(fileSource);
            FileOutputStream outStream = new FileOutputStream(fileDest);
            org.jbundle.jbackup.util.Util.copyStream(inStream, outStream);
        } catch (FileNotFoundException ex)  {
            ex.printStackTrace();
        } catch (IOException ex)    {
            ex.printStackTrace();
        }
    }
}
return bSubsExist;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783644">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>runDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource><![CDATA[Record recReplication = this.getMainRecord();
if ((recReplication.getEditMode() == DBConstants.EDIT_NONE)
    || (recReplication.getEditMode() == DBConstants.EDIT_ADD))
        recReplication.getField(Script.kID).setValue(0);
String strSourcePath = "";
String strDestPath = "";
this.processDetail(recReplication, strSourcePath, strDestPath);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783645">
		<LastChanged>2009-11-22T23:17:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScriptCommandField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
    {DBConstants.BLANK, "(none)"}, 
    {Script.RUN, "Run script"}, 
    {Script.RUN_REMOTE, "Run remote script"}, 
    {Script.SEEK, "Read record"}, 
    {Script.COPY_RECORDS, "Copy Records"}, 
    {Script.COPY_FIELDS, "Copy Fields"},
    {Script.COPY_DATA, "Copy Data"},
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783646">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Script</MethodClassName>
		<LogicSource><![CDATA[if (m_recSubScript != null)
    m_recSubScript.free();
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783647">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Script</MethodClassName>
		<LogicSource><![CDATA[super;
PropertiesField fldProperties = (PropertiesField)this.getField(Script.kProperties);
fldProperties.addPropertiesFieldBehavior(this.getField(Script.kSource), SOURCE);
fldProperties.addPropertiesFieldBehavior(this.getField(Script.kDestination), DESTINATION);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783648">
		<LastChanged>2011-08-05T19:45:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getTargetRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>Map&lt;String,Object&gt; properties, String strParam</MethodInterface>
		<MethodClassName>Script</MethodClassName>
		<LogicSource><![CDATA[String strRecordName = (String)properties.get(strParam);
Record record = null;
if ((strRecordName != null) && (strRecordName.length() > 0))
{
    String strTableName = strRecordName;
    if (strTableName.indexOf('.') != -1)
        strTableName = strTableName.substring(strTableName.lastIndexOf('.') + 1);
    if (this.getRecordOwner() != null)  // Always
        record = this.getRecordOwner().getRecord(strTableName);
    if (record != null)
        return record;    // Already open
    if (strRecordName.indexOf('.') == -1)
        if (properties.get("package") != null)
            strRecordName = (String)properties.get("package") + '.' + strRecordName;
    if (strRecordName.indexOf('.') == -1)
    {
        ClassInfo recClassInfo = new ClassInfo(this.getRecordOwner());
        try {
            recClassInfo.getField(ClassInfo.kClassName).setString(strRecordName);
            recClassInfo.setKeyArea(ClassInfo.kClassNameKey);
            if (recClassInfo.seek(null))
                strRecordName = recClassInfo.getPackageName() + '.' + strRecordName;
        } catch (DBException ex) {
            ex.printStackTrace();
        } finally {
            recClassInfo.free();
        }
    }
    if (strRecordName.indexOf('.') != -1)
    {
       record = (Record)ClassServiceUtility.getClassService().makeObjectFromClassName(strRecordName);
        if (record != null)
            record.init(Utility.getRecordOwner(this));
    }
}
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783649">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getProperty</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>Script</MethodClassName>
		<LogicSource>return ((PropertiesField)this.getField(Script.kProperties)).getProperty(strKey);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783651">
		<LastChanged>2009-09-06T13:13:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>250</Sequence>
		<MethodName>doRunCommand</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Script recScript, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource><![CDATA[ProcessRunnerTask processRunner = new ProcessRunnerTask(this.getTask().getApplication(), null, null);
processRunner.setProperties(properties);
processRunner.run();	// Run and free when you are done
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783652">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>225</Sequence>
		<MethodName>doSubScriptCommands</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Script recScript, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = DBConstants.NORMAL_RETURN;
Script recSubScript = recScript.getSubScript();
try {
    recSubScript.close();
    while (recSubScript.hasNext())
    {
        recSubScript.next();
        iErrorCode = this.doCommand(recSubScript, properties);
        if (iErrorCode != DBConstants.NORMAL_RETURN)
            return iErrorCode;
    }
} catch (DBException ex) {
    ex.printStackTrace();
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783653">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getSubScript</MethodName>
		<LogicDescription>Create a record to read through this script's children</LogicDescription>
		<MethodReturns>Script</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Script</MethodClassName>
		<LogicSource><![CDATA[if (m_recSubScript == null)
{
    RecordOwner recordOwner = Utility.getRecordOwner(this);
    m_recSubScript = new Script(recordOwner);
    recordOwner.removeRecord(m_recSubScript);
    m_recSubScript.addListener(new SubFileFilter(this));
}
return m_recSubScript;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783654">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Anniversary</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(CalendarEntry.kCalendarEntryTypeID, CalendarEntry.ANNIVERSARY_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783655">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Appointment</MethodClassName>
		<LogicSource><![CDATA[super;

this.addListener(new SharedFileHandler(CalendarEntry.kCalendarEntryTypeID, CalendarEntry.APPOINTMENT_ID));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783734">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getExternal</MethodName>
		<LogicDescription><![CDATA[Do any of the conversion that has to be done for all message types.
@param trxMessage The raw internal trx message.
@return The new Internal message with additional/refined data.]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>String strParam</MethodInterface>
		<MethodClassName>MessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783735">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>putExternal</MethodName>
		<LogicDescription><![CDATA[Convert this external data format to the raw object and put it in the map.
Typically this method is overridden to handle specific params.
@param]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>String strParam, Object objValue</MethodInterface>
		<MethodClassName>MessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783832">
		<LastChanged>2011-08-18T11:29:56</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription><![CDATA[Check to make sure all the data is present to attempt a cost lookup.
Note: You are NOT returning the status, you are returning the status of the params,
The calling program will change the status if required.
@return DATA_REQUIRED if all the data is not present, DATA_VALID if the data is OKAY.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>MessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783833">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>getMessageKey</MethodName>
		<LogicDescription><![CDATA[Get a unique key that describes the data in this record.
You can use this key to see if any of the data has changed since the message was last sent.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>MessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783834">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>MessageFieldDesc</MethodName>
		<LogicDescription/>
		<MethodReturns>messageDataParent, map</MethodReturns>
		<MethodInterface>MessageDataParent messageDataParent, Map&lt;String,Object&gt; map</MethodInterface>
		<MethodClassName>MessageFieldDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783835">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription>Setup sub-Message Data</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783836">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription><![CDATA[Move the correct fields from this record to the map.
If this method is used, is must be overidden to move the correct fields.
@param record The record to get the data from.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>FieldList record</MethodInterface>
		<MethodClassName>MessageFieldDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783837">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription><![CDATA[Move the correct fields from this record to the map.
If this method is used, is must be overidden to move the correct fields.
@param record The record to get the data from.
@return The status of the data moved (by default VALID, or set to NOT_VALID).]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>FieldList record</MethodInterface>
		<MethodClassName>MessageFieldDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783838">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription>Move the data from this properyowner to this message</LogicDescription>
		<MethodReturns/>
		<MethodInterface>PropertyOwner propertyOwner</MethodInterface>
		<MethodClassName>MessageFieldDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783839">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>FieldList record</MethodInterface>
		<MethodClassName>MessageFieldDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783842">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getMessageDataDesc</MethodName>
		<LogicDescription>Get the data description for this param</LogicDescription>
		<MethodReturns>MessageDataDesc</MethodReturns>
		<MethodInterface>String strParam</MethodInterface>
		<MethodClassName>MessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783843">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>createMessageData</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseMessageRecordDesc</MethodReturns>
		<MethodInterface/>
		<MethodClassName>MessageLog</MethodClassName>
		<LogicSource><![CDATA[MessageRecordDesc messageData = null;
String strMessageDataClassName = this.getField(MessageLog.kMessageDataClassName).toString();
return MessageRecordDesc.createMessageRecordDesc(strMessageDataClassName, null, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783844">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getMessageProperty</MethodName>
		<LogicDescription>Get the data string from the message data from this (XPath) key</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>MessageLog</MethodClassName>
		<LogicSource><![CDATA[// todo(don) fix this! ((PropertiesField)this.getField(MessageLog.kMessageProperties)).getProperty(strKey);
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783849">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>MessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>MessageDataParent messageDataParent, String strKey</MethodInterface>
		<MethodClassName>MessageDataDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783850">
		<LastChanged>2011-08-14T13:18:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription><![CDATA[Move the map values to the correct record fields.
If this method is used, is must be overidden to move the correct fields.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>MessageDataDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783851">
		<LastChanged>2011-08-14T13:19:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription><![CDATA[Move the correct fields from this record to the map.
If this method is used, is must be overidden to move the correct fields.
@param record The record to get the data from.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>MessageDataDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783852">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>putRawProperties</MethodName>
		<LogicDescription>Move the data from this properyowner to this message.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>PropertyOwner propertyOwner</MethodInterface>
		<MethodClassName>MessageDataDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783853">
		<LastChanged>2011-08-14T13:20:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>initForMessage</MethodName>
		<LogicDescription><![CDATA[Initialize the fields in this record to prepare for this message.
Also, do any other preparation needed before sending this message.
@param record The record to initialize
@return An error code if there were any problems.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>MessageDataDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783854">
		<LastChanged>2011-08-14T13:20:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>checkRequestParams</MethodName>
		<LogicDescription><![CDATA[Check to make sure all the data is present to attempt a cost lookup.
Note: You are NOT returning the status, you are returning the status of the params,
The calling program will change the status if required.
@return DATA_REQUIRED if all the data is not present, DATA_VALID if the data is OKAY.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>MessageDataDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783855">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>moveRequestInfoToReply</MethodName>
		<LogicDescription>Move the pertinenent information from the request to this reply message.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseMessage messageRequest</MethodInterface>
		<MethodClassName>MessageDataDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783904">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassFieldsTypeField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
{INCLUDE_CLASS_PACKAGE, "Include class package"},
{INCLUDE_PACKAGE, "Include package"},
{INCLUDE_CLASS, "Include class"},
{CLASS_FIELD, "Class field"},
{NATIVE_FIELD, "Native field"},
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783905">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassFieldsTypeField</MethodClassName>
		<LogicSource><![CDATA[super;
if (iDataLength == DBConstants.DEFAULT_FIELD_LENGTH)
    m_iMaxLength = 1;
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783906">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassFieldsTypeField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = INCLUDE_CLASS_PACKAGE;
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783912">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription><![CDATA[Convert this source message to the ECXML format.
Typically you do not override this method, you override the getTransformer method
to supply a XSLT document to do the conversion.
@return The XML tree that conforms to the ECXML format.]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface/>
		<MethodClassName>JAXBTrxMessageOut</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783913">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>createReplyMessage</MethodName>
		<LogicDescription><![CDATA[Given this message in, create the reply message.
@param messageIn The incomming message
@return the (empty) reply message]]></LogicDescription>
		<MethodReturns>BaseMessage</MethodReturns>
		<MethodInterface>BaseMessage messageIn</MethodInterface>
		<MethodClassName>MessageScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16783975">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>setProperty</MethodName>
		<LogicDescription><![CDATA[Set this property.
@param strProperty The property key.
@param strValue The property value.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>String strProperty, String strValue</MethodInterface>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784002">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>getTitle</MethodName>
		<LogicDescription><![CDATA[Overidden to supply the title for this screen.
@return the screen title.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784014">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesField</MethodClassName>
		<LogicSource>return new Packages(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784037">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserGroupField</MethodClassName>
		<LogicSource>return new UserGroup(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784038">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LoginLevelField</MethodClassName>
		<LogicSource>return m_map;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784039">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserResourceField</MethodClassName>
		<LogicSource>return new UserResource(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784040">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoGridScreen</MethodClassName>
		<LogicSource>return new UserInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784041">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784042">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccessLevelField</MethodClassName>
		<LogicSource>return m_map;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784043">
		<LastChanged>2010-03-17T11:01:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

Record recUserInfo = this.getMainRecord();
recUserInfo.setKeyArea(UserInfo.kUserNameKey);

if (m_recHeader != null)
    ((ReferenceField)this.getScreenRecord().getField(UserScreenRecord.kUserGroupID)).setReference(m_recHeader);

recUserInfo.addListener(new ExtractRangeFilter(UserInfo.kUserName, this.getScreenRecord().getField(UserScreenRecord.kNameSort)));
recUserInfo.addListener(new CompareFileFilter(UserInfo.kUserGroupID, this.getScreenRecord().getField(UserScreenRecord.kUserGroupID), "=", null, true));

this.getScreenRecord().getField(UserScreenRecord.kNameSort).addListener(new FieldReSelectHandler(this));
this.getScreenRecord().getField(UserScreenRecord.kUserGroupID).addListener(new FieldReSelectHandler(this));

this.getMainRecord(). addListener(new SetupNewUserHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784044">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[toolScreen.getScreenRecord().getField(UserScreenRecord.kNameSort).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);
toolScreen.getScreenRecord().getField(UserScreenRecord.kUserGroupID).setupDefaultView(toolScreen.getNextLocation(ScreenConstants.RIGHT_WITH_DESC, ScreenConstants.SET_ANCHOR), toolScreen, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784045">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoGridScreen</MethodClassName>
		<LogicSource>return new UserScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784046">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserGroupFilter</MethodClassName>
		<LogicSource>return this.setupTablePopup(itsLocation, targetScreen, iDisplayFieldDesc, this.makeReferenceRecord(), true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784047">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserGroup</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = new UserPermissionGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == UserGroup.USER_INFO_DETAIL_SCREEN)
    screen = new UserInfoGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = new UserGroupScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
    screen = new UserGroupGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784048">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserGroupScreen</MethodClassName>
		<LogicSource>return new UserGroup(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784049">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserGroupGridScreen</MethodClassName>
		<LogicSource>return new UserGroup(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784050">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>UserInfoGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns>record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties</MethodReturns>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>UserInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[m_recHeader = recHeader;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784051">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPermissionScreen</MethodClassName>
		<LogicSource>return new UserPermission(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784052">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPermissionGridScreen</MethodClassName>
		<LogicSource>return new UserPermission(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784053">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>UserPermissionGridScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>UserPermissionGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784054">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserGroupScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, UserGroup.USER_DETAIL, UserGroup.USER_ICON, UserGroup.USER_DETAIL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784055">
		<LastChanged>2009-09-15T22:45:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserGroupScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(UserGroup.USER_DETAIL))
    return (this.onForm(null, UserGroup.USER_INFO_DETAIL_SCREEN, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784056">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserGroupGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, UserGroup.USER_DETAIL, UserGroup.USER_ICON, UserGroup.USER_DETAIL, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784057">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserGroupGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, UserGroup.USER_ICON, UserGroup.USER_DETAIL, null);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784058">
		<LastChanged>2009-09-15T22:44:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserGroupGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else if (strCommand.equalsIgnoreCase(UserGroup.USER_DETAIL))
    return (this.onForm(null, UserGroup.USER_INFO_DETAIL_SCREEN, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784059">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserResource</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = new UserPermissionGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = new UserResourceScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
    screen = new UserResourceGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784060">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserResourceScreen</MethodClassName>
		<LogicSource>return new UserResource(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784061">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserResourceScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784062">
		<LastChanged>2009-09-15T22:49:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserResourceScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784063">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserResourceGridScreen</MethodClassName>
		<LogicSource>return new UserResource(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784064">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserResourceGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784065">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserResourceGridScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784066">
		<LastChanged>2009-09-15T22:49:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserResourceGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (strCommand.equalsIgnoreCase(MenuConstants.FORMDETAIL))
    return (this.onForm(null, ScreenConstants.DETAIL_MODE, true, iCommandOptions, null) != null);
else
    return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784067">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPermissionGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strType = this.getProperty(HEADER_RECORD);
if (UserResource.kUserResourceFile.equalsIgnoreCase(strType))
    return new UserResource(this);
else
    return new UserGroup(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784068">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPermissionGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (this.getHeaderRecord() instanceof UserGroup)
    return new UserGroupHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);
else
    return new UserResourceHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784069">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserGroupHeaderScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784070">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserGroupHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784071">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserResourceHeaderScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784072">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserResourceHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784073">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPermissionGridScreen</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784074">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>250</Sequence>
		<MethodName>getScreenURL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPermissionGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strURL = super;
String strTypeParam = HEADER_RECORD;
String strType = this.getHeaderRecord().getTableNames(false);
strURL = this.addURLParam(strURL, strTypeParam, strType);
return strURL;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784075">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPermission</MethodClassName>
		<LogicSource><![CDATA[super;
this.addListener(new UpdateGroupPermissionHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784076">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateGroupPermissionHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.AFTER_UPDATE_TYPE)
    || (iChangeType == DBConstants.AFTER_ADD_TYPE)
    || (iChangeType == DBConstants.AFTER_DELETE_TYPE))
{
    int iGroupID = (int)this.getOwner().getField(UserPermission.kUserGroupID).getValue();
    if (m_iOldGroupID != -1)
        if (iGroupID != m_iOldGroupID)
            this.updateGroupPermission(m_iOldGroupID);
    this.updateGroupPermission(iGroupID);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784077">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateGroupPermissionHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setOldGroupID((int)this.getOwner().getField(UserPermission.kUserGroupID).getValue());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784078">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateGroupPermissionHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setOldGroupID(-1);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784079">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>setOldGroupID</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iOldGroupID</MethodInterface>
		<MethodClassName>UpdateGroupPermissionHandler</MethodClassName>
		<LogicSource>m_iOldGroupID = iOldGroupID;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784080">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateGroupPermissionHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recUserPermission != null)
    m_recUserPermission.free();
m_recUserPermission = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784081">
		<LastChanged>2010-11-26T14:12:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>updateGroupPermission</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iGroupID</MethodInterface>
		<MethodClassName>UpdateGroupPermissionHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recUserPermission == null)
    m_recUserPermission = new UserPermission(Utility.getRecordOwner(this.getOwner()));
Record m_recUserGroup = ((ReferenceField)m_recUserPermission.getField(UserPermission.kUserGroupID)).getReferenceRecord();
m_recUserGroup.setOpenMode(m_recUserGroup.getOpenMode() & ~DBConstants.OPEN_READ_ONLY); // Read and write
if (m_recUserPermission.getListener(SubFileFilter.class) == null)
    m_recUserPermission.addListener(new SubFileFilter(m_recUserGroup));
try {
    m_recUserGroup.addNew();
    m_recUserGroup.getCounterField().setValue(iGroupID);
    if (m_recUserGroup.seek(null))
    {
        m_recUserGroup.edit();
        
        StringBuffer sb = new StringBuffer();
        m_recUserPermission.close();
        while (m_recUserPermission.hasNext())
        {
            m_recUserPermission.next();
            
            Record recUserResource = ((ReferenceField)m_recUserPermission.getField(UserPermission.kUserResourceID)).getReference();
            String strResource = recUserResource.getField(UserResource.kResourceClass).toString();
            StringTokenizer tokenizer = new StringTokenizer(strResource, "\n\t ,");
            while (tokenizer.hasMoreTokens())
            {
                String strClass = tokenizer.nextToken();
            	int startThin = strClass.indexOf(Constants.THIN_SUBPACKAGE, 0);
            	if (startThin != -1)	// Remove the ".thin" reference
            		strClass = strClass.substring(0, startThin) + strClass.substring(startThin + Constants.THIN_SUBPACKAGE.length());
                if (strClass.length() > 0)
                {
                    sb.append(strClass).append('\t');
                    sb.append(m_recUserPermission.getField(UserPermission.kAccessLevel).toString()).append('\t');
                    sb.append(m_recUserPermission.getField(UserPermission.kLoginLevel).toString()).append("\t\n");
                }
            }
        }
        
        m_recUserGroup.getField(UserGroup.kAccessMap).setString(sb.toString());
        m_recUserGroup.set();
    }
} catch (DBException e) {
    e.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784082">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserGroupScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784083">
		<LastChanged>2009-06-05T22:39:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>LoginLevelField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = Integer.toString(DBConstants.LOGIN_USER);
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784084">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getDefault</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AccessLevelField</MethodClassName>
		<LogicSource><![CDATA[Object objDefault = super;
if (objDefault == null)
    objDefault = Integer.toString(DBConstants.WRITE_ACCESS);
return objDefault;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784085">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserResource</MethodClassName>
		<LogicSource><![CDATA[super;
this.addListener(new UpdateResourcePermissionHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784086">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateResourcePermissionHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.AFTER_UPDATE_TYPE)
    || (iChangeType == DBConstants.AFTER_ADD_TYPE)
    || (iChangeType == DBConstants.AFTER_DELETE_TYPE))
{
    if (this.getOwner().getField(UserResource.kResourceClass).isModified())
        this.updateResourcePermissions();
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784087">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>updateResourcePermissions</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateResourcePermissionHandler</MethodClassName>
		<LogicSource><![CDATA[UserPermission recUserPermission = new UserPermission(Utility.getRecordOwner(this.getOwner()));

recUserPermission.addListener(new SubFileFilter(this.getOwner()));

try {
    while (recUserPermission.hasNext())
    {
        recUserPermission.next();
        recUserPermission.edit();
        recUserPermission.getField(UserPermission.kUserResourceID).setModified(true);   // Fake a mod, so the group permissions will be updated
        recUserPermission.set();
    }
} catch (DBException ex) {
    ex.printStackTrace();
}

recUserPermission.free();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784089">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserLoginScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784090">
		<LastChanged>2010-03-02T05:28:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserLoginScreen</MethodClassName>
		<LogicSource><![CDATA[if (MenuConstants.LOGIN.equalsIgnoreCase(strCommand))
{
    Task task = this.getTask();
    if (task != null)
    {
        String strUserName = this.getRecord(UserScreenRecord.kUserScreenRecordFile).getField(UserScreenRecord.kuser).toString();
        String strPassword = this.getRecord(UserScreenRecord.kUserScreenRecordFile).getField(UserScreenRecord.kpassword).toString();

        String strOldUserID = this.getProperty(DBParams.USER_ID);
        int iErrorCode = task.getApplication().login(task, strUserName, strPassword, this.getProperty(DBParams.DOMAIN));
        if (iErrorCode == DBConstants.NORMAL_RETURN)
        {
            if (this.getRecord(UserScreenRecord.kUserScreenRecordFile).getField(UserScreenRecord.ksaveuser).getState() == true)
                if (((Application)task.getApplication()).getMuffinManager() != null)
                    if (((Application)task.getApplication()).getMuffinManager().isServiceAvailable())
                        if (this.getProperty(DBParams.USER_ID) != null)
                            if (!DBConstants.ANON_USER_ID.equalsIgnoreCase(this.getProperty(DBParams.USER_ID)))
                                ((Application)task.getApplication()).getMuffinManager().setMuffin(DBParams.USER_ID, this.getProperty(DBParams.USER_ID));
            if ((strOldUserID == null) || (!strOldUserID.equalsIgnoreCase(this.getProperty(DBParams.USER_ID))))
            {   // If user changes, clear history and go home
                return this.handleCommand(MenuConstants.HOME, sourceSField, iCommandOptions);
            }
            else
                return this.handleCommand(DBConstants.BACK, sourceSField, iCommandOptions);
        }
        else
        {   // Error - Get and display the error
            String strError = task.getLastError(iErrorCode);
            this.getRecord(UserScreenRecord.kUserScreenRecordFile).getField(UserScreenRecord.kStatusLine).setString(strError);
        }
    }
    // May want to add some code here to login if this is used in thick client
    return true;
}
else if (UserEntryScreen.CREATE_NEW_USER.equalsIgnoreCase(strCommand))
{
    ScreenLocation itsLocation = null;
    BasePanel parentScreen = this.getParentScreen();
    if ((iCommandOptions & ScreenConstants.USE_NEW_WINDOW) == ScreenConstants.USE_SAME_WINDOW)	// Use same window
        itsLocation = this.getScreenLocation();
    else
        parentScreen = Screen.makeWindow(this.getTask().getApplication());
    new UserEntryScreen(null, itsLocation, parentScreen, null, 0, null);
    // Add here todo (don)
    return true;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784091">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserLoginScreen</MethodClassName>
		<LogicSource><![CDATA[String strUserName = this.getProperty(DBParams.USER_NAME);
this.getRecord(UserScreenRecord.kUserScreenRecordFile).getField(UserScreenRecord.kuser).setString(strUserName);

String strMessage = "Login required";
if (this.getTask() != null)
    if (this.getTask().getApplication() != null)
{
    BaseApplication application = (BaseApplication)this.getTask().getApplication();
    strMessage = application.getResources(ResourceConstants.ERROR_RESOURCE, true).getString(strMessage);
    this.getRecord(UserScreenRecord.kUserScreenRecordFile).getField(UserScreenRecord.kStatusLine).setString(strMessage);
}

super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784092">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserLoginScreen</MethodClassName>
		<LogicSource>return new UserScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784093">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>checkSecurity</MethodName>
		<LogicDescription>Everyone can access this screen.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserLoginScreen</MethodClassName>
		<LogicSource>return DBConstants.NORMAL_RETURN;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784095">
		<LastChanged>2009-02-12T14:49:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>checkSecurity</MethodName>
		<LogicDescription><![CDATA[Does the current user have permission to access this screen.
@return NORMAL_RETURN if access is allowed, ACCESS_DENIED or LOGIN_REQUIRED otherwise.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784096">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserLoginScreen</MethodClassName>
		<LogicSource><![CDATA[ToolScreen screen = new ToolScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);
new SCannedBox(screen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), screen, null, ScreenConstants.DEFAULT_DISPLAY, MenuConstants.RESET);
new SCannedBox(screen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), screen, null, ScreenConstants.DEFAULT_DISPLAY, MenuConstants.LOGIN);
BaseApplication application = (BaseApplication)this.getTask().getApplication();
String strDesc = application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(UserEntryScreen.CREATE_NEW_USER);
String strCommand = Utility.addURLParam(null, DBParams.SCREEN, UserEntryScreen.class.getName());
new SCannedBox(screen.getNextLocation(ScreenConstants.RIGHT_OF_LAST_BUTTON_WITH_GAP, ScreenConstants.DONT_SET_ANCHOR), screen, null, ScreenConstants.DEFAULT_DISPLAY, null, strDesc, MenuConstants.FORM, strCommand, MenuConstants.FORM + "Tip");
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784098">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPasswordChange</MethodClassName>
		<LogicSource><![CDATA[this.getRecord(UserInfo.kUserInfoFile).getField(UserInfo.kUserName).setEnabled(false);
this.readCurrentUser();

super;

this.getMainRecord().addListener(new UserPasswordHandler(true));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784100">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>checkSecurity</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPasswordChange</MethodClassName>
		<LogicSource>return DBConstants.NORMAL_RETURN;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784101">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPasswordChange</MethodClassName>
		<LogicSource><![CDATA[ToolScreen screen = new ToolScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);
new SCannedBox(screen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), screen, null, ScreenConstants.DEFAULT_DISPLAY, MenuConstants.SUBMIT);
new SCannedBox(screen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), screen, null, ScreenConstants.DEFAULT_DISPLAY, MenuConstants.RESET);
String strDesc = "Create account";
new SCannedBox(screen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), screen, null, ScreenConstants.DEFAULT_DISPLAY, null, strDesc, MenuConstants.FORM, MenuConstants.FORM, MenuConstants.FORM + "Tip");
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784102">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPasswordChange</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784103">
		<LastChanged>2009-09-15T22:47:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPasswordChange</MethodClassName>
		<LogicSource><![CDATA[boolean bFlag = super;
if (MenuConstants.SUBMIT.equalsIgnoreCase(strCommand))
    if (bFlag)
    return super.doCommand(MenuConstants.HOME, sourceSField, iCommandOptions);
return bFlag;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784107">
		<LastChanged>2010-11-09T15:44:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserEntryScreen</MethodClassName>
		<LogicSource><![CDATA[String strMessage = "Create new user account";
String strTerms = this.getProperty("terms");	// Terms resource key
if (strTerms == null)
    strTerms = "terms";
if (this.getTask() != null)
    if (this.getTask().getApplication() != null)
{
    BaseApplication application = (BaseApplication)this.getTask().getApplication();
    strMessage = application.getResources(ResourceConstants.ERROR_RESOURCE, true).getString(strMessage);

    strTerms = application.getResources(ResourceConstants.DEFAULT_RESOURCE, true).getString(strTerms);
}
this.getRecord(UserScreenRecord.kUserScreenRecordFile).getField(UserScreenRecord.kStatusLine).setString(strMessage);
this.getRecord(UserScreenRecord.kUserScreenRecordFile).getField(UserScreenRecord.kTerms).setString(strTerms);

//x this.readCurrentUser();

super;

FieldListener listener = this.getMainRecord().getField(UserInfo.kUserName).getListener(MainFieldHandler.class);
if (listener != null)
    this.getMainRecord().getField(UserInfo.kUserName).removeListener(listener, true);   // Don't read current accounts

this.getMainRecord().addListener(new UserPasswordHandler(false));

this.addAutoLoginHandler();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784109">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserEntryScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784110">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>checkSecurity</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserEntryScreen</MethodClassName>
		<LogicSource>return DBConstants.NORMAL_RETURN;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784111">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPasswordHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.ADD_TYPE) || (iChangeType == DBConstants.UPDATE_TYPE))
{
    Record recUserInfo = this.getOwner();
    RecordOwner recordOwner = recUserInfo.getRecordOwner();
    Record recUserScreenRecord = recordOwner.getScreenRecord();
    Task task = recordOwner.getTask();

    if (m_bCheckOldPassword)
    {
        if (iChangeType == DBConstants.ADD_TYPE)
            return task.setLastError(task.getString("Can't add a new account on this screen."));
        if (!recUserInfo.getField(UserInfo.kPassword).equals(recUserScreenRecord.getField(UserScreenRecord.kCurrentPassword)))
        {
            return task.setLastError(task.getString("Error, current password was incorrect."));
        }
    }
    
    if ((recUserScreenRecord.getField(UserScreenRecord.kNewPassword1).isModified())
        || (recUserScreenRecord.getField(UserScreenRecord.kNewPassword2).isModified()))
    {
        if (recUserScreenRecord.getField(UserScreenRecord.kNewPassword1).equals(recUserScreenRecord.getField(UserScreenRecord.kNewPassword2)))
        {
            recUserInfo.getField(UserInfo.kPassword).moveFieldToThis(recUserScreenRecord.getField(UserScreenRecord.kNewPassword1));
        }
        else
        {
            return task.setLastError(task.getString("Error, new passwords are not equal."));
        }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784112">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPasswordHandler</MethodClassName>
		<LogicSource><![CDATA[Record recUserInfo = this.getOwner();
RecordOwner recordOwner = recUserInfo.getRecordOwner();
Record recUserScreenRecord = recordOwner.getScreenRecord();
recUserScreenRecord.getField(UserScreenRecord.kCurrentPassword).setModified(false);
recUserScreenRecord.getField(UserScreenRecord.kCurrentPassword).setData(null);

recUserScreenRecord.getField(UserScreenRecord.kNewPassword1).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
recUserScreenRecord.getField(UserScreenRecord.kNewPassword2).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
recUserScreenRecord.getField(UserScreenRecord.kNewPassword1).setModified(false);
recUserScreenRecord.getField(UserScreenRecord.kNewPassword2).setModified(false);

recUserScreenRecord.getField(UserScreenRecord.kStatusLine).setString(DBConstants.BLANK);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784113">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPasswordHandler</MethodClassName>
		<LogicSource><![CDATA[Record recUserInfo = this.getOwner();
RecordOwner recordOwner = recUserInfo.getRecordOwner();
Record recUserScreenRecord = recordOwner.getScreenRecord();
recUserScreenRecord.getField(UserScreenRecord.kCurrentPassword).setData(null);
recUserScreenRecord.getField(UserScreenRecord.kNewPassword1).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
recUserScreenRecord.getField(UserScreenRecord.kNewPassword2).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
recUserScreenRecord.getField(UserScreenRecord.kCurrentPassword).setModified(false);
recUserScreenRecord.getField(UserScreenRecord.kNewPassword1).setModified(false);
recUserScreenRecord.getField(UserScreenRecord.kNewPassword2).setModified(false);

recUserScreenRecord.getField(UserScreenRecord.kStatusLine).setString(DBConstants.BLANK);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784114">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>setOwner</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPasswordHandler</MethodClassName>
		<LogicSource><![CDATA[super;
if (owner != null)
{
    Record recUserInfo = this.getOwner();
    RecordOwner recordOwner = recUserInfo.getRecordOwner();
    Record recUserScreenRecord = recordOwner.getScreenRecord();
    // This will flag the password as changed:
    recUserScreenRecord.getField(UserScreenRecord.kNewPassword1).addListener(new ChangeOnChangeHandler(recUserInfo.getField(UserInfo.kPassword), true));
    recUserScreenRecord.getField(UserScreenRecord.kNewPassword2).addListener(new ChangeOnChangeHandler(recUserInfo.getField(UserInfo.kPassword), true));
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784115">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfo</MethodClassName>
		<LogicSource><![CDATA[if (UserInfo.VERBOSE_MAINT_SCREEN.equalsIgnoreCase(strCommand))
    return UserInfo.VERBOSE_MAINT_MODE;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784116">
		<LastChanged>2010-03-17T10:37:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfo</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ScreenConstants.DOC_MODE_MASK) == ScreenConstants.DETAIL_MODE)
    screen = new UserRegistrationGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = new UserEntryScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) == ScreenConstants.DISPLAY_MODE)
    screen = new UserInfoGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & UserInfo.VERBOSE_MAINT_MODE) == UserInfo.VERBOSE_MAINT_MODE)
    screen = new UserInfoScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
    screen = super.makeScreen(itsLocation, parentScreen, iDocMode, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784117">
		<LastChanged>2009-09-15T22:46:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[if ((MenuConstants.FORM.equalsIgnoreCase(strCommand))
    || (MenuConstants.FORMLINK.equalsIgnoreCase(strCommand)))
{
    return this.handleCommand(UserInfo.VERBOSE_MAINT_SCREEN, sourceSField, iCommandOptions);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784119">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>validUserProperty</MethodName>
		<LogicDescription>Is this a valid user property?</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strProperty</MethodInterface>
		<MethodClassName>UserInfo</MethodClassName>
		<LogicSource><![CDATA[if (DBParams.FRAMES.equalsIgnoreCase(strProperty))
    return true;
if (DBParams.MENUBARS.equalsIgnoreCase(strProperty))
    return true;
if (DBParams.NAVMENUS.equalsIgnoreCase(strProperty))
    return true;
if (DBParams.JAVA.equalsIgnoreCase(strProperty))
    return true;
if (DBParams.BANNERS.equalsIgnoreCase(strProperty))
    return true;
if (DBParams.LOGOS.equalsIgnoreCase(strProperty))
    return true;
if (DBParams.TRAILERS.equalsIgnoreCase(strProperty))
    return true;
if (DBParams.LANGUAGE.equalsIgnoreCase(strProperty))
    return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784120">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserEntryScreen</MethodClassName>
		<LogicSource><![CDATA[return new MaintToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC)
{
    public void setupMiddleSFields()
    {
        String strSubmitText = MenuConstants.SUBMIT;
        if (this.getTask() != null)
            if (this.getTask().getApplication() != null)
                strSubmitText = this.getTask().getApplication().getResources(ResourceConstants.MAIN_RESOURCE, true).getString(strSubmitText);
        new SCannedBox(this.getNextLocation(ScreenConstants.RIGHT_OF_LAST_BUTTON_WITH_GAP, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, strSubmitText, MenuConstants.SUBMIT, MenuConstants.SUBMIT, null);
        new SCannedBox(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, MenuConstants.RESET);
    }
};]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784121">
		<LastChanged>2009-09-15T22:44:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserEntryScreen</MethodClassName>
		<LogicSource><![CDATA[boolean bLogin = false;
if (MenuConstants.SUBMIT.equalsIgnoreCase(strCommand))
    if (this.getMainRecord().isModified())
        bLogin = true;
boolean bFlag = super;
if (MenuConstants.SUBMIT.equalsIgnoreCase(strCommand))
    if (bFlag)
        if (bLogin)
    return super.doCommand(MenuConstants.HOME, sourceSField, iCommandOptions);
return bFlag;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784122">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoBaseScreen</MethodClassName>
		<LogicSource>return new UserInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784123">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoBaseScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new UserControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784124">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoBaseScreen</MethodClassName>
		<LogicSource>return new UserScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784125">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoBaseScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.addMainKeyBehavior();
this.getMainRecord().getField(UserInfo.kUserGroupID).addListener(new InitFieldHandler(this.getRecord(UserControl.kUserControlFile).getField(UserControl.kAnonUserGroupID)));
((UserInfo)this.getMainRecord()).addPropertyListeners();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784126">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoBaseScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784127">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>doServletCommand</MethodName>
		<LogicDescription><![CDATA[Do the special HTML command.
This gives the screen a chance to change screens for special HTML commands.
You have a chance to change two things:
1. The information display line (this will display on the next screen... ie., submit was successful)
2. The error display line (if there was an error)
@return this or the new screen to display.]]></LogicDescription>
		<MethodReturns>BaseScreen</MethodReturns>
		<MethodInterface>BasePanel screenParent</MethodInterface>
		<MethodClassName>BaseScreen</MethodClassName>
		<LogicSource>return this;    // By default, don't do anything</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784128">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doServletCommand</MethodName>
		<LogicDescription><![CDATA[BaseScreen screen = super;    // Process params from previous screen

String strCommand = this.getProperty(DBParams.COMMAND);
BaseApplication application = (BaseApplication)this.getTask().getApplication();
String strDesc = application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(MenuConstants.LOGIN);
if (strDesc.equals(strCommand))
{
    String strUserName = this.getRecord(UserScreenRecord.kUserScreenRecordFile).getField(UserScreenRecord.kuser).toString();
    String strPassword = this.getRecord(UserScreenRecord.kUserScreenRecordFile).getField(UserScreenRecord.kpassword).toString();
    Task task = this.getTask();

    int iErrorCode = task.getApplication().login(task, strUserName, strPassword);
    if (iErrorCode == DBConstants.NORMAL_RETURN)
    {
        if (this.getTask().getStatusText(DBConstants.WARNING_MESSAGE) == null)
        {   // Normal return = logged in, go to main menu.
            this.free();
            return null;    // This will cause the main menu to display
        }
    }
    else
    {   // Error - Get and display the error
        String strError = task.getLastError(iErrorCode);
        this.getTask().setStatusText(strError, DBConstants.WARNING_MESSAGE);
        this.getRecord(UserScreenRecord.kUserScreenRecordFile).getField(UserScreenRecord.kpassword).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    }
}
strDesc = application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(UserEntryScreen.CREATE_NEW_USER);
if (strDesc.equals(strCommand))
{
    screen.free();
    screen = new UserEntryScreen(null, null, screenParent, null, 0, null);
    screen.setProperty(DBParams.SCREEN, UserEntryScreen.class.getName());
}
return screen;]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserLoginScreen</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = super;    // Process params from previous screen

String strCommand = this.getProperty(DBParams.COMMAND);
BaseApplication application = (BaseApplication)this.getTask().getApplication();
String strDesc = application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(MenuConstants.LOGIN);
if (strDesc.equals(strCommand))
{
    if (this.getTask().getStatusText(DBConstants.WARNING_MESSAGE) == null)
    {   // Normal return = logged in, go to main menu.
        this.free();
        return null;    // This will cause the main menu to display
    }
}
strDesc = application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(UserEntryScreen.CREATE_NEW_USER);
if (strDesc.equals(strCommand))
{
    screen.free();
    screen = new UserEntryScreen(null, null, screenParent, null, 0, null);
    screen.setProperty(DBParams.SCREEN, UserEntryScreen.class.getName());
}
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784129">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>doServletCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserEntryScreen</MethodClassName>
		<LogicSource><![CDATA[String strCommand = this.getProperty(DBParams.COMMAND);
if (strCommand != null)
    if (this.getTask() != null)
        if (this.getTask().getApplication() != null)
            if (strCommand.equalsIgnoreCase(this.getTask().getApplication().getResources(ResourceConstants.MAIN_RESOURCE, true).getString(MenuConstants.SUBMIT)))
                this.setProperty(DBParams.COMMAND, MenuConstants.SUBMIT);

BaseScreen screen = super;    // Process params from previous screen

if (MenuConstants.SUBMIT.equalsIgnoreCase(this.getProperty(DBParams.COMMAND)))
{
    if (this.getTask().getStatusText(DBConstants.WARNING_MESSAGE) == null)
    {   // Normal return = logged in, go to main menu.
        this.free();
        return null;    // This will cause the main menu to display
    }
    else
    {
        this.getScreenRecord().getField(UserScreenRecord.kNewPassword1).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
        this.getScreenRecord().getField(UserScreenRecord.kNewPassword2).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    }
}

return screen;    // By default, don't do anything]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784130">
		<LastChanged>2009-06-05T23:28:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>checkSecurity</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPreferenceScreen</MethodClassName>
		<LogicSource><![CDATA[int iLevel = Constants.LOGIN_USER;
try {
    iLevel = Integer.parseInt(this.getProperty(Params.SECURITY_LEVEL));
} catch (NumberFormatException ex) {
}

int iAccessAllowed = DBConstants.NORMAL_RETURN;

if (iLevel == Constants.LOGIN_USER)
    if (!DBConstants.ANON_USER_ID.equalsIgnoreCase(this.getProperty(DBParams.USER_ID)))
{
    if (this.getProperty(DBParams.USER_NAME) != null)
        iAccessAllowed = DBConstants.AUTHENTICATION_REQUIRED;   // If you have an account, you need to sign into it.
}

return iAccessAllowed;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784131">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPreferenceScreen</MethodClassName>
		<LogicSource><![CDATA[this.readCurrentUser();
super;
this.addAutoLoginHandler();
this.getMainRecord().addListener(new UpdatePreferencesHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784132">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>readCurrentUser</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>UserInfoBaseScreen</MethodClassName>
		<LogicSource><![CDATA[String strUserName = this.getProperty(DBParams.USER_NAME);
String strUserID = this.getProperty(DBParams.USER_ID);
boolean bUserFound = false;
if ((this.getMainRecord().getEditMode() == DBConstants.EDIT_CURRENT) || (this.getMainRecord().getEditMode() == DBConstants.EDIT_IN_PROGRESS))
{
    bUserFound = true;
}
else
{
    if ((strUserID != null) && (strUserID.length() > 0))
    {
        bUserFound = ((UserInfo)this.getMainRecord()).getUserInfo(strUserID, false);
        if (bUserFound)
            if (this.getMainRecord().getField(UserInfo.kReadOnlyRecord).getState() == true)
                bUserFound = false; // Can't change anonymous
    }
    if (!bUserFound)
        if ((strUserName != null) && (strUserName.length() > 0))
    {
        bUserFound = ((UserInfo)this.getMainRecord()).getUserInfo(strUserName, false);
        if (bUserFound)
            if (this.getMainRecord().getField(UserInfo.kReadOnlyRecord).getState() == true)
                bUserFound = false; // Can't change anonymous
    }
}
if (!bUserFound)
{
    try {
        this.getMainRecord().addNew();
    } catch (DBException e) {
        e.printStackTrace();
    }
    this.getMainRecord().getField(UserInfo.kUserName).setString(strUserName);
    this.getMainRecord().getField(UserInfo.kUserName).setModified(false);   // Don't force a write
}
else
{
    // TODO What do I do if this user exists?
}

return bUserFound;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784133">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbars</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPreferenceScreen</MethodClassName>
		<LogicSource><![CDATA[return new MaintToolbar(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC)
{
    public void setupMiddleSFields()
    {
        new SCannedBox(this.getNextLocation(ScreenConstants.RIGHT_OF_LAST_BUTTON_WITH_GAP, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, MenuConstants.SUBMIT);
        new SCannedBox(this.getNextLocation(ScreenConstants.RIGHT_OF_LAST_BUTTON, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, MenuConstants.RESET);
        String strDesc = UserPasswordChange.CHANGE_PASSWORD;
        String strCommand = Utility.addURLParam(null, DBParams.SCREEN, UserPasswordChange.class.getName());
        if (this.getProperty(DBParams.USER_NAME) == null)
        {
            strDesc = UserEntryScreen.CREATE_NEW_USER;
            strCommand = Utility.addURLParam(null, DBParams.SCREEN, UserEntryScreen.class.getName());
        }
        if (this.getTask() != null)
            if (this.getTask().getApplication() != null)
                strDesc = this.getTask().getApplication().getResources(ResourceConstants.MAIN_RESOURCE, true).getString(strDesc);
        new SCannedBox(this.getNextLocation(ScreenConstants.RIGHT_OF_LAST_BUTTON, ScreenConstants.DONT_SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, strDesc, MenuConstants.FORM, strCommand, MenuConstants.FORM + "Tip");
    }
};]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784134">
		<LastChanged>2009-09-15T23:27:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPreferenceScreen</MethodClassName>
		<LogicSource><![CDATA[if (UserPasswordChange.CHANGE_PASSWORD.equalsIgnoreCase(strCommand))
{
    ScreenLocation itsLocation = null;
    BasePanel parentScreen = this.getParentScreen();
    if ((iCommandOptions & ScreenConstants.USE_NEW_WINDOW) == ScreenConstants.USE_SAME_WINDOW)	// Use same window
        itsLocation = this.getScreenLocation();
    else
        parentScreen = Screen.makeWindow(this.getTask().getApplication());
    new UserPasswordChange(null, itsLocation, parentScreen, null, 0, null);
    return true;
}
else if (UserEntryScreen.CREATE_NEW_USER.equalsIgnoreCase(strCommand))
{
    ScreenLocation itsLocation = null;
    BasePanel parentScreen = this.getParentScreen();
    if ((iCommandOptions & ScreenConstants.USE_NEW_WINDOW) == ScreenConstants.USE_SAME_WINDOW)	// Use same window
        itsLocation = this.getScreenLocation();
    else
        parentScreen = Screen.makeWindow(this.getTask().getApplication());
    new UserEntryScreen(null, itsLocation, parentScreen, null, 0, null);
    // Add here todo (don)
    return true;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784135">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doServletCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPreferenceScreen</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = super;    // Process params from previous screen

String strCommand = this.getProperty(DBParams.COMMAND);
BaseApplication application = (BaseApplication)this.getTask().getApplication();
if (MenuConstants.SUBMIT.equals(strCommand))
{
    this.free();
    return null;    // This will cause the main menu to display
}
String strDesc = application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(UserPasswordChange.CHANGE_PASSWORD);
if (strDesc.equals(strCommand))
{
    screen.free();
    screen = new UserPasswordChange(null, null, screenParent, null, 0, null);
    screen.setProperty(DBParams.SCREEN, UserPasswordChange.class.getName());
}
strDesc = application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(UserEntryScreen.CREATE_NEW_USER);
if (strDesc.equals(strCommand))
{
    screen.free();
    screen = new UserEntryScreen(null, null, screenParent, null, 0, null);
    screen.setProperty(DBParams.SCREEN, UserEntryScreen.class.getName());
}
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784136">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addAutoLoginHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoBaseScreen</MethodClassName>
		<LogicSource><![CDATA[this.getMainRecord().addListener(new FileListener(null)
{
    public int doRecordChange(FieldInfo field, int iChangeType, boolean bDisplayOption)
    {   // Return an error to stop the change
        int iErrorCode = super.doRecordChange(field, iChangeType, bDisplayOption);
        if ((iChangeType == DBConstants.AFTER_ADD_TYPE) || (iChangeType == DBConstants.AFTER_UPDATE_TYPE))
            if (iErrorCode == DBConstants.NORMAL_RETURN)
        {
            Record recUserInfo = this.getOwner();
            Task task = recUserInfo.getTask();
            String strUserName = recUserInfo.getField(UserInfo.kID).toString();
            if ((strUserName == null) || (strUserName.length() == 0))
                strUserName = recUserInfo.getLastModified(DBConstants.BOOKMARK_HANDLE).toString();
            String strPassword = recUserInfo.getField(UserInfo.kPassword).toString();
            iErrorCode = task.getApplication().login(task, strUserName, strPassword, task.getProperty(DBParams.DOMAIN));   // Always okay
        }
        return iErrorCode;
    }
});]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784137">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>doServletCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserPasswordChange</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = super;    // Process params from previous screen

if (MenuConstants.SUBMIT.equalsIgnoreCase(this.getProperty(DBParams.COMMAND)))
{
    if (this.getTask().getStatusText(DBConstants.WARNING_MESSAGE) == null)
    {   // Normal return = logged in, go to main menu.
        this.free();
        return null;    // This will cause the main menu to display
    }
    else
    {
        this.getScreenRecord().getField(UserScreenRecord.kCurrentPassword).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
        this.getScreenRecord().getField(UserScreenRecord.kNewPassword1).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
        this.getScreenRecord().getField(UserScreenRecord.kNewPassword2).setData(null, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    }
}

return screen;    // By default, don't do anything]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784138">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>UserPasswordHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>boolean bCheckOldPassword</MethodInterface>
		<MethodClassName>UserPasswordHandler</MethodClassName>
		<LogicSource>m_bCheckOldPassword = bCheckOldPassword;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784139">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>log</MethodName>
		<LogicDescription>Add this log entry</LogicDescription>
		<MethodReturns/>
		<MethodInterface>int iUserID, int iUserLogTypeID, String strMessage</MethodInterface>
		<MethodClassName>UserLog</MethodClassName>
		<LogicSource><![CDATA[try {
    this.addNew();
    this.getField(UserLog.kUserID).setValue(iUserID);
    this.getField(UserLog.kUserLogTypeID).setValue(iUserLogTypeID);
    this.getField(UserLog.kMessage).setString(strMessage);
    this.add();
} catch (DBException ex) {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784140">
		<LastChanged>2009-04-09T12:59:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>addLinkTag</MethodName>
		<LogicDescription>Add a tag to this XML for the menu link</LogicDescription>
		<MethodReturns>StringBuffer</MethodReturns>
		<MethodInterface>StringBuffer sb</MethodInterface>
		<MethodClassName>Menus</MethodClassName>
		<LogicSource><![CDATA[int iIndex = sb.lastIndexOf(Utility.endTag(this.getTableNames(false)));
if (iIndex != -1)
{
    String strLink = Utility.encodeXML(this.getLink());
    String strHelpLink = strLink;
    if (strLink.indexOf('?') != -1)   // Always
        strHelpLink = "?" + DBParams.HELP + "=" + "&amp;" + strLink.substring(strLink.indexOf('?') + 1);
    sb.insert(iIndex,
            Utility.startTag(XMLTags.LINK) +
                strLink +
            Utility.endTag(XMLTags.LINK) + XmlUtilities.NEWLINE +
            Utility.startTag(XMLTags.HELPLINK) +
                strHelpLink +
            Utility.endTag(XMLTags.HELPLINK) + XmlUtilities.NEWLINE);
}
return sb;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784141">
		<LastChanged>2009-04-11T14:50:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getSubMenuXML</MethodName>
		<LogicDescription>Get the XML for this menu item and it's sub-menus</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Menus</MethodClassName>
		<LogicSource><![CDATA[StringBuffer sbMenuArea = new StringBuffer();

if (this.getEditMode() == Constants.EDIT_CURRENT)
{
    if (this.getField(Menus.kIconResource).isNull())
    {
        String strIcon = this.getField(Menus.kType).toString();
        if (strIcon.length() > 0)
            strIcon = strIcon.substring(0, 1).toUpperCase() + strIcon.substring(1);
        this.getField(Menus.kIconResource).setString(strIcon);
    }
    sbMenuArea.append(XmlUtilities.createXMLStringRecord(this));
    sbMenuArea = this.addLinkTag(sbMenuArea);
}

if (sbMenuArea.length() == 0)
    sbMenuArea.append(
            Utility.startTag(this.getTableNames(false)) +
            " <Name>Name</Name>" +
            " <Description>Description</Description>" +
            " <Program>Program</Program>" +
            " <Params>Params</Params>" +
            " <IconResource>IconResource</IconResource>" +
            " <Keywords>Keywords</Keywords>" +
            " <Html>Html</Html>" +
            Utility.endTag(this.getTableNames(false)));

StringBuffer sbContentArea = new StringBuffer();
sbContentArea.append(Utility.startTag(XMLTags.MENU_LIST));
try   {
    String strMenu = this.getField(Menus.kID).toString();
    this.setKeyArea(Menus.kParentFolderIDKey);
    FileListener behavior = new StringSubFileFilter(strMenu, Menus.kParentFolderID, null, -1, null, -1);
    this.addListener(behavior);
    this.close();
    while (this.hasNext())
    {
        this.next();
        if (this.getField(Menus.kIconResource).isNull())
        {
            String strIcon = this.getField(Menus.kType).toString();
            if (strIcon.length() > 0)
                strIcon = strIcon.substring(0, 1).toUpperCase() + strIcon.substring(1);
            this.getField(Menus.kIconResource).setString(strIcon);
        }
        StringBuffer sbMenuItem = new StringBuffer();
        sbMenuItem.append(XmlUtilities.createXMLStringRecord(this));
        sbMenuItem = this.addLinkTag(sbMenuItem);
        sbContentArea.append(sbMenuItem);
    }
    this.removeListener(behavior, true);
} catch (DBException ex)    {
    ex.printStackTrace();
}
sbContentArea.append(Utility.endTag(XMLTags.MENU_LIST));
sbMenuArea.insert(sbMenuArea.lastIndexOf(Utility.endTag(this.getTableNames(false))), sbContentArea);
return sbMenuArea.toString();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784142">
		<LastChanged>2010-10-19T14:16:01</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>AjaxScreenSession</MethodClassName>
		<LogicSource><![CDATA[if (properties == null)
    properties = new Hashtable<String,Object>();
this.setProperties(properties);

StringWriter stringWriter = new StringWriter();
PrintWriter out = new PrintWriter(stringWriter);

if (CREATE_SCREEN.equals(strCommand))
{
    BaseScreen screen = this.getScreen(properties);
    int iErrorCode = screen.checkSecurity();
    if ((iErrorCode != DBConstants.NORMAL_RETURN) && (iErrorCode != Constants.READ_ACCESS))
    {
        String strError = this.getTask().getLastError(iErrorCode);
        if ((strError == null)
            || (strError.length() == 0)
            || ((iErrorCode >= DBConstants.ACCESS_DENIED) && (iErrorCode <= DBConstants.CREATE_USER_REQUIRED)))
                strError = Integer.toString(iErrorCode);
        RemoteException ex = new RemoteException(strError);
        throw ex;
    }
    this.printScreen(screen, out);
}
else if (strCommand != null)
{
    if (strCommand.indexOf('=') != -1)
        Utility.parseArgs(properties, strCommand);
    else
        properties.put(DBParams.COMMAND, strCommand);
    
    BaseScreen screen = this.getScreen(properties);
    if (screen != null)
    {
        screen = screen.doServletCommand(m_topScreen);  // Move the input params to the record fields
        if (screen != null)
        {
            screen.processInputData(out);
            if (stringWriter.getBuffer().length() == 0)
                if (HtmlConstants.DISPLAY.equalsIgnoreCase((String)properties.get(HtmlConstants.FORMS)))
                    this.printScreen(screen, out);    // This is a report
        }
        else
        {   // Special case - command success, client needs to reset (to main menu)
            String strMessage = this.getTask().getStatusText(DBConstants.INFORMATION_MESSAGE);
            out.println(Utility.startTag(XMLTags.STATUS_TEXT));
            if (strMessage != null)
                out.println(Utility.startTag(XMLTags.TEXT) + strMessage + Utility.endTag(XMLTags.TEXT));
            out.println(Utility.startTag(XMLTags.ERROR) + "information" + Utility.endTag(XMLTags.ERROR));
            String strReturnCommand = Utility.addURLParam(null, XMLTags.MENU, DBConstants.BLANK);   // User's main menu
            strReturnCommand = Utility.addURLParam(strReturnCommand, DBParams.USER_NAME, this.getProperty(DBParams.USER_NAME));
            strReturnCommand = Utility.addURLParam(strReturnCommand, DBParams.AUTH_TOKEN, this.getProperty(DBParams.AUTH_TOKEN));
            out.println(Utility.startTag(DBParams.COMMAND) + Utility.encodeXML(strReturnCommand) + Utility.endTag(DBParams.COMMAND));
            out.println(Utility.endTag(XMLTags.STATUS_TEXT));
        }
    }
}

out.flush();
out.close();

return stringWriter.toString();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784144">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>createTopScreen</MethodName>
		<LogicDescription/>
		<MethodReturns>TopScreen</MethodReturns>
		<MethodInterface>RecordOwnerParent parent, FieldList recordMain, Object properties</MethodInterface>
		<MethodClassName>AjaxScreenSession</MethodClassName>
		<LogicSource>return new XmlScreen(parent, recordMain, properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784145">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdatePreferencesHandler</MethodClassName>
		<LogicSource><![CDATA[super;
m_properties = ((PropertiesField)this.getOwner().getField(UserInfo.kProperties)).getProperties();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784146">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdatePreferencesHandler</MethodClassName>
		<LogicSource><![CDATA[if (iChangeType == DBConstants.AFTER_UPDATE_TYPE)
{
    Map<String,Object> properties = ((PropertiesField)this.getOwner().getField(UserInfo.kProperties)).getProperties();
    if (properties != null)
    {
        if (m_properties != null)
        {
            for (String strProperty : m_properties.keySet())
            {
                Object objValue = m_properties.get(strProperty);
                if (!objValue.equals(properties.get(strProperty)))
                {
                    String strValue = null;
                    if (properties.get(strProperty) != null)
                        strValue = properties.get(strProperty).toString();
                    this.getOwner().getTask().getApplication().getSystemRecordOwner().setProperty(strProperty, strValue);
                    properties.remove(strProperty);
                }
            }                            
        }
        for (String strProperty : properties.keySet())
        {
            String strValue = properties.get(strProperty).toString();
            this.getOwner().getTask().getApplication().getSystemRecordOwner().setProperty(strProperty, strValue);
        }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784147">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>checkSecurity</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PropertiesInputGridScreen</MethodClassName>
		<LogicSource><![CDATA[return DBConstants.NORMAL_RETURN;	// Since this is always a screen control, no security is necessary]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784148">
		<LastChanged>2009-06-07T23:14:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getHiddenParams</MethodName>
		<LogicDescription><![CDATA[Get this screen's hidden params.
@returns a map of the hidden params]]></LogicDescription>
		<MethodReturns>Map&lt;String,Object&gt;</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ZScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784149">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>printZmlToolbarData</MethodName>
		<LogicDescription><![CDATA[Display this screen's toolbars in print format.
@param out print stream.
@param iPrintOptions The view specific options.
@exception DBException File exception.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>PrintWriter out, int iHtmlOptions</MethodInterface>
		<MethodClassName>ZScreenField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784150">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getScreen</MethodName>
		<LogicDescription/>
		<MethodReturns>BaseScreen</MethodReturns>
		<MethodInterface>Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>AjaxScreenSession</MethodClassName>
		<LogicSource><![CDATA[if (m_topScreen == null)
    m_topScreen = this.createTopScreen(this, null, null);
BaseScreen screen = null;
if (m_topScreen.getSFieldCount() > 0)
    screen = (BaseScreen)m_topScreen.getSField(0);
this.setProperties(properties);
BaseScreen newScreen = m_topScreen.getScreen(screen, this);
return newScreen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784155">
		<LastChanged>2010-02-25T16:06:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>printScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseScreen screen, PrintWriter out</MethodInterface>
		<MethodClassName>AjaxScreenSession</MethodClassName>
		<LogicSource><![CDATA[try {
    ResourceBundle reg = ((BaseApplication)this.getTask().getApplication()).getResources(HtmlConstants.XML_RESOURCE, false);
    String string = XmlUtilities.XML_LEAD_LINE;
    out.println(string);

    String strStylesheetPath = screen.getScreenFieldView().getStylesheetPath();
    if (strStylesheetPath != null)
    {
        string = "<?xml-stylesheet type=\"text/xsl\" href=\"" + strStylesheetPath + "\" ?>";
        out.println(string);
    }
    out.println(Utility.startTag(XMLTags.CONTENT_AREA));

    screen.printScreen(out, reg);

    out.println(Utility.endTag(XMLTags.CONTENT_AREA));
} catch (DBException ex) {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784160">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInitialProcess</MethodClassName>
		<LogicSource><![CDATA[super;

this.registerInitialProcesses();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784161">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInitialProcess</MethodClassName>
		<LogicSource><![CDATA[// Note, it usually not neccessary to be removed from my parent, as this is a simple process.
try   {
    super.free();
} catch (Exception ex)  {
    // Never
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784162">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>registerInitialProcesses</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageInitialProcess</MethodClassName>
		<LogicSource><![CDATA[MessageProcessInfo recMessageProcessInfo = new MessageProcessInfo(this);
try   {
     // Always register this generic processing queue.
    this.registerProcessForMessage(new BaseMessageFilter(MessageConstants.TRX_SEND_QUEUE, MessageConstants.INTERNET_QUEUE, null, null), null, null);
    recMessageProcessInfo.close();
    while (recMessageProcessInfo.hasNext())
    {
        recMessageProcessInfo.next();
        String strQueueName = recMessageProcessInfo.getQueueName(true);
        String strQueueType = recMessageProcessInfo.getQueueType(true);
        String strProcessClass = recMessageProcessInfo.getField(MessageProcessInfo.kProcessorClass).toString();
        Map<String,Object> properties = ((PropertiesField)recMessageProcessInfo.getField(MessageProcessInfo.kProperties)).getProperties();
        Record recMessageType = ((ReferenceField)recMessageProcessInfo.getField(MessageProcessInfo.kMessageTypeID)).getReference();
        if (recMessageType != null)
        {   // Start all processes that handle INcoming REQUESTs.
            String strMessageType = recMessageType.getField(MessageType.kCode).toString();
            Record recMessageInfo = ((ReferenceField)recMessageProcessInfo.getField(MessageProcessInfo.kMessageInfoID)).getReference();
            if (recMessageInfo != null)
            {
                Record recMessageInfoType = ((ReferenceField)recMessageInfo.getField(MessageInfo.kMessageInfoTypeID)).getReference();
                if (recMessageInfoType != null)
                {
                    String strMessageInfoType = recMessageInfoType.getField(MessageInfoType.kCode).toString();
                    if (MessageInfoType.REQUEST.equals(strMessageInfoType))
                        if (MessageType.MESSAGE_IN.equals(strMessageType))
                            if ((strQueueName != null) && (strQueueName.length() > 0))
                                this.registerProcessForMessage(new BaseMessageFilter(strQueueName, strQueueType, null, null), strProcessClass, properties);
                }
            }
        }
    }
    recMessageProcessInfo.close();
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    recMessageProcessInfo.free();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784163">
		<LastChanged>2010-03-02T05:24:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>registerProcessForMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseMessageFilter messageFilter, String strProcessClass, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>MessageInitialProcess</MethodClassName>
		<LogicSource><![CDATA[new TrxMessageListener(messageFilter, (Application)this.getTask().getApplication(), strProcessClass, properties);   // This listener was added to the filter
((MessageInfoApplication)this.getTask().getApplication()).getThickMessageManager().addMessageFilter(messageFilter);
// Note: No need to worry about cleanup... Freeing the message manager will free all these listeners.
if (properties != null)
    if (properties.get(MessageInfoApplication.AUTOSTART) != null)
        ((MessageInfoApplication)this.getTask().getApplication()).getThickMessageManager().sendMessage(new MapMessage(new BaseMessageHeader(messageFilter.getQueueName(), messageFilter.getQueueType(), this, null), properties));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784164">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>RecordOwnerParent taskParent, Record recordMain, Map&lt;String, Object&gt; properties</MethodInterface>
		<MethodClassName>BaseProcess</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784200">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getCount</MethodName>
		<LogicDescription>Get the current field count.</LogicDescription>
		<MethodReturns>double</MethodReturns>
		<MethodInterface/>
		<MethodClassName>SubCountHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784249">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ShortStringField</MethodClassName>
		<LogicSource><![CDATA[converter = new FieldLengthConverter(converter, 30);
return super.setupDefaultView(itsLocation, targetScreen, converter, iDisplayFieldDesc);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784251">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>45</Sequence>
		<MethodName>syncHeaderToMain</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.restoreScreenParam(MessageInfoScreenRecord.kMessageTypeID);
this.restoreScreenParam(MessageInfoScreenRecord.kProcessTypeID);
this.restoreScreenParam(MessageInfoScreenRecord.kMessageInfoTypeID);
this.restoreScreenParam(MessageInfoScreenRecord.kContactTypeID);
this.restoreScreenParam(MessageInfoScreenRecord.kRequestTypeID);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784269">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLog</MethodClassName>
		<LogicSource><![CDATA[super;
this.addListener(new CalcTimeoutTimeHandler(null));
this.addListener(new NotifyTimeoutProcessHandler(null));
this.addListener(new NoDeleteModifyHandler(true, false));   // Can't delete these]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784270">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalcTimeoutTimeHandler</MethodClassName>
		<LogicSource><![CDATA[switch (iChangeType)
{
    case DBConstants.ADD_TYPE:
    case DBConstants.UPDATE_TYPE:
        if (this.getOwner().getField(MessageLog.kLastChanged) != null)  // Always
            if (this.getOwner().getField(MessageLog.kTimeoutSeconds).getValue() > 0)
                if (this.getOwner().getField(MessageLog.kTimeoutTime).getValue() == 0)	// Don't change timeout after it was set
            {
                if (MessageStatus.SENT.equalsIgnoreCase(((ReferenceField)this.getOwner().getField(MessageLog.kMessageStatusID)).getReference().getField(MessageStatus.kCode).toString()))
                {
                    Calendar cal = ((DateTimeField)this.getOwner().getField(MessageLog.kLastChanged)).getCalendar();
                    int iSeconds = (int)this.getOwner().getField(MessageLog.kTimeoutSeconds).getValue();
                    cal.add(Calendar.SECOND, iSeconds);
                    ((DateTimeField)this.getOwner().getField(MessageLog.kTimeoutTime)).setCalendar(cal, bDisplayOption, DBConstants.SCREEN_MOVE);
                }
                else
                {   // Clear the timeout
                    ((DateTimeField)this.getOwner().getField(MessageLog.kTimeoutTime)).setData(null, bDisplayOption, DBConstants.SCREEN_MOVE);                    
                }
            }
        break;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784280">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTimeoutProcess</MethodClassName>
		<LogicSource>return new MessageLog(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784281">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTimeoutProcess</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().setKeyArea(MessageLog.kTimeoutKey);
int iMessageStatus = ((ReferenceField)this.getScreenRecord().getField(MessageTimeoutScreenRecord.kMessageStatusID)).getIDFromCode(MessageStatus.SENT);
this.getScreenRecord().getField(MessageTimeoutScreenRecord.kMessageStatusID).setValue(iMessageStatus);

this.getMainRecord().addListener(new SubFileFilter(this.getScreenRecord().getField(MessageTimeoutScreenRecord.kMessageStatusID), MessageLog.kMessageStatusID, null, -1, null, -1));
this.getScreenRecord().getField(MessageTimeoutScreenRecord.kStartTimeout).setToLimit(DBConstants.START_SELECT_KEY);
this.getMainRecord().addListener(new CompareFileFilter(this.getMainRecord().getField(MessageLog.kTimeoutTime), this.getScreenRecord().getField(MessageTimeoutScreenRecord.kStartTimeout), ">="));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784282">
		<LastChanged>2010-03-02T05:26:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTimeoutProcess</MethodClassName>
		<LogicSource><![CDATA[MessageLog recMessageLog = (MessageLog)this.getMainRecord();
try {
    Date timeTimeout = null;
    while (recMessageLog.hasNext())
    {
        recMessageLog.next();
        
        timeTimeout = ((DateTimeField)recMessageLog.getField(MessageLog.kTimeoutTime)).getDateTime();
        if (timeTimeout == null)
            continue;   // Never
        if (timeTimeout.getTime() > System.currentTimeMillis())
            break;

        String strTrxID = recMessageLog.getCounterField().toString();
        recMessageLog.edit();
        int iErrorStatus = ((ReferenceField)recMessageLog.getField(MessageLog.kMessageStatusID)).getIDFromCode(MessageStatus.ERROR);
        recMessageLog.getField(MessageLog.kMessageStatusID).setValue(iErrorStatus);
        recMessageLog.set();
        
        this.processMessageTimeout(strTrxID);
    }
    if (recMessageLog.getEditMode() == DBConstants.EDIT_CURRENT)
        if (timeTimeout != null)    // Always
    {   // More to process, schedule it for later
        BaseMessageManager messageManager = ((Application)getTask().getApplication()).getMessageManager();
        Map<String,Object> properties = new Hashtable<String,Object>();
        properties.put(PrivateTaskScheduler.TIME_TO_RUN, timeTimeout);
        properties.put(PrivateTaskScheduler.NO_DUPLICATE, Constants.TRUE);
        properties.put(DBParams.PROCESS, MessageTimeoutProcess.class.getName());
        if (messageManager != null)
            messageManager.sendMessage(new MapMessage(new BaseMessageHeader(MessageTimeoutProcess.TIMEOUT_QUEUE_NAME, MessageConstants.INTRANET_QUEUE, this, null), properties));
    }
} catch (DBException ex) {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784283">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTimeoutProcess</MethodClassName>
		<LogicSource>return new MessageTimeoutScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784284">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>processMessageTimeout</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strTrxID</MethodInterface>
		<MethodClassName>MessageTimeoutProcess</MethodClassName>
		<LogicSource><![CDATA[MessageLog recMessageLog = (MessageLog)this.getMainRecord();
BaseMessage message = recMessageLog.createMessage(strTrxID);
String strMessageError = "Message timeout";
BaseMessage messageReply = BaseMessageProcessor.processErrorMessage(this, message, strMessageError);
if (messageReply != null)    // No reply if null.
{
    BaseMessageTransport transport = this.getMessageTransport(message);
    transport.setupReplyMessage(messageReply, message, MessageInfoType.REPLY, MessageType.MESSAGE_IN);
    transport.processIncomingMessage(messageReply, message);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784286">
		<LastChanged>2010-03-02T05:26:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>NotifyTimeoutProcessHandler</MethodClassName>
		<LogicSource><![CDATA[if ((iChangeType == DBConstants.AFTER_ADD_TYPE) || (iChangeType == DBConstants.AFTER_UPDATE_TYPE))
    if (!this.getOwner().getField(MessageLog.kTimeoutTime).isNull())
{
    Date timeTimeout = ((DateTimeField)this.getOwner().getField(MessageLog.kTimeoutTime)).getDateTime();
    Date timeNow = new Date();
    if (timeTimeout != null)
    {
        if ((m_lastTime == null)
            || (m_lastTime.getTime() <= timeNow.getTime() + EXTRA_TIME_MS))
        {   // All the waiting tasks have been run, ping the process to start up again.
            BaseMessageManager messageManager = ((Application)this.getOwner().getTask().getApplication()).getMessageManager();
            Map<String,Object> properties = new Hashtable<String,Object>();
            properties.put(PrivateTaskScheduler.TIME_TO_RUN, timeTimeout);
            properties.put(PrivateTaskScheduler.NO_DUPLICATE, Constants.TRUE);
            properties.put(DBParams.PROCESS, MessageTimeoutProcess.class.getName());
            if (messageManager != null)
                messageManager.sendMessage(new MapMessage(new BaseMessageHeader(MessageTimeoutProcess.TIMEOUT_QUEUE_NAME, MessageConstants.INTRANET_QUEUE, this, null), properties));
        }
    }
    m_lastTime = timeTimeout;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784287">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarEntryCalendarScreen</MethodClassName>
		<LogicSource><![CDATA[super;
BaseApplication application = (BaseApplication)this.getTask().getApplication();
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(CalendarEntryTypeField.APPOINTMENT), CalendarEntryTypeField.APPOINTMENT, CalendarEntryTypeField.APPOINTMENT, null);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(CalendarEntryTypeField.ANNIVERSARY), CalendarEntryTypeField.ANNIVERSARY, CalendarEntryTypeField.ANNIVERSARY, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784288">
		<LastChanged>2009-09-15T22:38:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarEntryCalendarScreen</MethodClassName>
		<LogicSource><![CDATA[Record recordMain = null;
int iDocMode = ScreenConstants.MAINT_MODE;
boolean bReadCurrentRecord = false;
Map<String,Object> properties = null;
if (CalendarEntryTypeField.APPOINTMENT.equalsIgnoreCase(strCommand))
{
    recordMain = new Appointment(this);
    this.onForm(recordMain, iDocMode, bReadCurrentRecord, iCommandOptions, properties);
    return true;
}
if (CalendarEntryTypeField.ANNIVERSARY.equalsIgnoreCase(strCommand))
{
    recordMain = new AnnivMaster(this);
    this.onForm(recordMain, iDocMode, bReadCurrentRecord, iCommandOptions, properties);
    return true;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784290">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageStatusField</MethodClassName>
		<LogicSource><![CDATA[ScreenField screenField = null;
this.makeReferenceRecord();  // Get/make the record that describes the referenced class.

screenField = this.setupIconView(itsLocation, targetScreen, converter, iDisplayFieldDesc, false);

itsLocation = targetScreen.getNextLocation(ScreenConstants.RIGHT_OF_LAST_BUTTON_WITH_GAP, ScreenConstants.DONT_SET_ANCHOR);
iDisplayFieldDesc = ScreenConstants.DONT_DISPLAY_DESC;
screenField = super.setupDefaultView(itsLocation, targetScreen, converter, iDisplayFieldDesc);

return screenField;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784296">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogScreen</MethodClassName>
		<LogicSource><![CDATA[BaseApplication application = (BaseApplication)this.getTask().getApplication();

String strMessageScreen = application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(MessageLog.SOURCE_SCREEN);
String strMessageScreenTip = application.getResources(ResourceConstants.MAIN_RESOURCE, false).getString(MessageLog.SOURCE_SCREEN + DBConstants.TIP);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strMessageScreen, MessageLog.SOURCE_ICON, MessageLog.SOURCE_SCREEN, strMessageScreenTip);

strMessageScreen = application.getResources(ResourceConstants.MAIN_RESOURCE, true).getString(MessageLog.MESSAGE_SCREEN);
strMessageScreenTip = application.getResources(ResourceConstants.MAIN_RESOURCE, false).getString(MessageLog.MESSAGE_SCREEN + DBConstants.TIP);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, strMessageScreen, MessageLog.MESSAGE_ICON, MessageLog.MESSAGE_SCREEN, strMessageScreenTip);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784297">
		<LastChanged>2011-08-14T13:19:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>handlePutRawRecordData</MethodName>
		<LogicDescription><![CDATA[Move the correct fields from ALL the detail records to the map.
Typically, you override this and loop through the records in the table.
If this method is used, is must be overidden to move the correct fields.
@param record The record to get the data from.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>MessageDataDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784299">
		<LastChanged>2011-08-18T11:30:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>setNodeIndex</MethodName>
		<LogicDescription><![CDATA[Position to this node in the tree.
@param iNodeIndex The node to position to.
@param record The record I am moving data to. If this is null, don't position/setup the data.
@return An error code.]]></LogicDescription>
		<MethodReturns>Rec</MethodReturns>
		<MethodInterface>int iNodeIndex, FieldList record</MethodInterface>
		<MethodClassName>MessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784311">
		<LastChanged>2011-08-18T11:29:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>setDataIndex</MethodName>
		<LogicDescription><![CDATA[Position to this node in the tree.
@param iNodeIndex The node to position to.
@param record The record I am moving data to. If this is null, don't position/setup the data.
@return An error code.]]></LogicDescription>
		<MethodReturns>Rec</MethodReturns>
		<MethodInterface>int iNodeIndex, Rec record</MethodInterface>
		<MethodClassName>MessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784324">
		<LastChanged>2011-08-18T11:29:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>createSubDataRecord</MethodName>
		<LogicDescription><![CDATA[Create the sub-detail record.
@param record The base record
@return The new sub-record (or the base record if there is no new sub-record)]]></LogicDescription>
		<MethodReturns>Rec</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>MessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784325">
		<LastChanged>2011-08-18T11:29:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,600</Sequence>
		<MethodName>createSubNodeRecord</MethodName>
		<LogicDescription><![CDATA[Create the sub-detail record.
@param record The base record
@return The new sub-record (or the base record if there is no new sub-record)]]></LogicDescription>
		<MethodReturns>Rec</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>MessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784326">
		<LastChanged>2011-08-18T11:28:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,700</Sequence>
		<MethodName>readCurrentRecord</MethodName>
		<LogicDescription><![CDATA[Read the record described at the current data location.
@param record The record to read from.
@return null if error, otherwise return the record]]></LogicDescription>
		<MethodReturns>Rec</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>MessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784331">
		<LastChanged>2011-08-18T11:28:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,800</Sequence>
		<MethodName>freeSubNodeRecord</MethodName>
		<LogicDescription><![CDATA[Free the sub-detail record.
@param record The record to free
@return True if successful]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>MessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784334">
		<LastChanged>2011-08-18T14:41:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>160</Sequence>
		<MethodName>isSingleDetail</MethodName>
		<LogicDescription>Does this message only include a single booking detail item?</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>BaseMessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784335">
		<LastChanged>2011-08-18T11:28:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,900</Sequence>
		<MethodName>isCurrentNodeRecord</MethodName>
		<LogicDescription><![CDATA[Am I using the current record as the data record?
@return true if I am]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Rec record</MethodInterface>
		<MethodClassName>MessageRecordDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784366">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>sendData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DWsdlAccessScreen</MethodClassName>
		<LogicSource><![CDATA[res.setContentType("text/xml");
PrintWriter out = res.getWriter();
this.printXML(req, out);
out.flush();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784367">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>printXML</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>HttpServletRequest req, PrintWriter out</MethodInterface>
		<MethodClassName>DWsdlAccessScreen</MethodClassName>
		<LogicSource><![CDATA[ServletTask task = (ServletTask)this.getTask();
Map<String,Object> properties = task.getRequestProperties(task.getServletRequest(), true);

CreateWSDL wsdl = null;
if ("1.1".equalsIgnoreCase(this.getProperty(WSDL_VERSION)))
    wsdl = new CreateWSDL11(task, null, properties);
else
    wsdl = new CreateWSDL20(task, null, properties);    // Default
Object data = wsdl.createMarshallableObject();
String xml = wsdl.getXML(data);
out.println(xml);
wsdl.free();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784368">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>sendData</MethodName>
		<LogicDescription><![CDATA[Process an HTML get or post.
You must override this method.
@param req The servlet request.
@param res The servlet response object.
@exception ServletException From inherited class.
@exception IOException From inherited class.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>HttpServletRequest req, HttpServletResponse res</MethodInterface>
		<MethodClassName>DDataAccessScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows>ServletException, IOException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784369">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource>return new MessageProcessInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784370">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>createMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource>return null;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784371">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getXML</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Object root</MethodInterface>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource><![CDATA[if (root != null)
{
    try {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        String strSOAPPackage = this.getSOAPPackage();

        Marshaller m = JaxbContexts.getJAXBContexts().getMarshaller(strSOAPPackage);

        synchronized (m)
        {
            m.marshal( root, out );
        }
        String strXML = out.toString(Constants.STRING_ENCODING);
        return strXML;
    } catch (IOException ex)  {
        ex.printStackTrace();   // Never
    } catch (JAXBException ex)   {
        ex.printStackTrace();
    } catch (java.lang.IllegalArgumentException ex)   {
        ex.printStackTrace();
    }
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784372">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>scanProcesses</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Object typeObject, OperationType type</MethodInterface>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource><![CDATA[String strTargetVersion = this.getProperty("version");
if (strTargetVersion == null)
    strTargetVersion = this.getDefaultVersion();
Record recMessageTransport = ((ReferenceField)this.getRecord(MessageControl.kMessageControlFile).getField(MessageControl.kWebMessageTransportID)).getReference();
MessageVersion recMessageVersion = ((MessageControl)this.getRecord(MessageControl.kMessageControlFile)).getMessageVersion(strTargetVersion);
MessageProcessInfo recMessageProcessInfo = new MessageProcessInfo(this);
recMessageProcessInfo.setKeyArea(MessageProcessInfo.kMessageInfoIDKey);
try   {
     // Always register this generic processing queue.
    recMessageProcessInfo.close();
    while (recMessageProcessInfo.hasNext())
    {
        recMessageProcessInfo.next();
        String strQueueName = recMessageProcessInfo.getQueueName(true);
        String strQueueType = recMessageProcessInfo.getQueueType(true);
        String strProcessClass = recMessageProcessInfo.getField(MessageProcessInfo.kProcessorClass).toString();
        Map<String,Object> properties = ((PropertiesField)recMessageProcessInfo.getField(MessageProcessInfo.kProperties)).getProperties();
        Record recMessageType = ((ReferenceField)recMessageProcessInfo.getField(MessageProcessInfo.kMessageTypeID)).getReference();
        if (recMessageType != null)
        {   // Start all processes that handle INcoming REQUESTs.
            String strMessageType = recMessageType.getField(MessageType.kCode).toString();
            Record recMessageInfo = ((ReferenceField)recMessageProcessInfo.getField(MessageProcessInfo.kMessageInfoID)).getReference();
            if (recMessageInfo != null)
            {
                Record recMessageInfoType = ((ReferenceField)recMessageInfo.getField(MessageInfo.kMessageInfoTypeID)).getReference();
                if (recMessageInfoType != null)
                {
                    String strMessageInfoType = recMessageInfoType.getField(MessageInfoType.kCode).toString();
                    if (MessageInfoType.REQUEST.equals(strMessageInfoType))
                        if (MessageType.MESSAGE_IN.equals(strMessageType))
                            if ((strQueueName != null) && (strQueueName.length() > 0))
                    {
                        Record recMessageTransportInfo = this.getRecord(MessageTransportInfo.kMessageTransportInfoFile);
                        recMessageTransportInfo.setKeyArea(MessageTransportInfo.kMessageProcessInfoIDKey);
                        recMessageTransportInfo.getField(MessageTransportInfo.kMessageProcessInfoID).moveFieldToThis(recMessageProcessInfo.getField(MessageProcessInfo.kID));
                        recMessageTransportInfo.getField(MessageTransportInfo.kMessageTransportID).moveFieldToThis(recMessageTransport.getField(MessageTransport.kID));
                        recMessageTransportInfo.getField(MessageTransportInfo.kMessageVersionID).moveFieldToThis(recMessageVersion.getField(MessageVersion.kID));
                        if (recMessageTransportInfo.seek(DBConstants.EQUALS))
                        {
                            this.addProcessForWSDL(strTargetVersion, typeObject, recMessageProcessInfo, type);
                        }
                    }
                }
            }
        }
    }
    recMessageProcessInfo.close();
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    recMessageProcessInfo.free();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784373">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>addProcessForWSDL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strVersion, Object typeObject, MessageProcessInfo recMessageProcessInfo, OperationType type</MethodInterface>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource>// Override this!</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784374">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageControl</MethodClassName>
		<LogicSource><![CDATA[super;
Map<String,Object> map = Utility.arrayToMap(DESCRIPTIONS);
((PropertiesField)this.getField(MessageControl.kProperties)).setMapKeyDescriptions(map);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784375">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource><![CDATA[super;
new MessageControl(this);
new MessageTransportInfo(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784376">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,100</Sequence>
		<MethodName>getControlProperty*1</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource>return this.getControlProperty(strKey, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784377">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,200</Sequence>
		<MethodName>getControlProperty*2</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey, String strDefaultValue</MethodInterface>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource><![CDATA[String strValue = ((PropertiesField)this.getRecord(MessageControl.kMessageControlFile).getField(MessageControl.kProperties)).getProperty(strKey);
if (strValue == null)
{
    if (strDefaultValue == null)
        strDefaultValue = this.getDefaultValue(strKey);
    strValue = strDefaultValue;
}
return strValue;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784378">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,300</Sequence>
		<MethodName>getDefaultValue</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource><![CDATA[if (DESCRIPTIONS == null)
    DESCRIPTIONS = Utility.arrayToMap(DEFAULTS);
return (String)DESCRIPTIONS.get(strKey);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784379">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,400</Sequence>
		<MethodName>getURIProperty*1</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource>return this.getURIProperty(strKey, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784380">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,500</Sequence>
		<MethodName>getURIProperty*2</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey, String strDefaultValue</MethodInterface>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource><![CDATA[String strValue = this.getControlProperty(strKey, strDefaultValue);
return this.getURIValue(strValue);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784388">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,100</Sequence>
		<MethodName>getMessageIn</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageInfo</MethodReturns>
		<MethodInterface>MessageProcessInfo recMessageProcessInfo</MethodInterface>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource>return (MessageInfo)((ReferenceField)recMessageProcessInfo.getField(MessageProcessInfo.kMessageInfoID)).getReference();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784389">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,200</Sequence>
		<MethodName>getMessageOut</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageInfo</MethodReturns>
		<MethodInterface>MessageProcessInfo recMessageProcessInfo</MethodInterface>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource><![CDATA[MessageProcessInfo recMessageProcessInfo2 =  (MessageProcessInfo)((ReferenceField)recMessageProcessInfo.getField(MessageProcessInfo.kReplyMessageProcessInfoID)).getReference();
if (recMessageProcessInfo2 != null)
    return (MessageInfo)((ReferenceField)recMessageProcessInfo2.getField(MessageProcessInfo.kMessageInfoID)).getReference();
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784391">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,490</Sequence>
		<MethodName>isNewType</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String name</MethodInterface>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource>return names.add(name);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784394">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,100</Sequence>
		<MethodName>fixName</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String name</MethodInterface>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource><![CDATA[for (int i = 0; i < name.length(); i++)
{
    if (Character.isWhitespace(name.charAt(i)))
            name = name.substring(0, i) + name.substring(i + 1);
}
return name;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784401">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>setProperty</MethodName>
		<LogicDescription><![CDATA[Set this property in the MessageDetailTarget
@return false if this is not supported]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strKey, String strProperty</MethodInterface>
		<MethodClassName>MessageDetailTarget</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784409">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>getProperty</MethodName>
		<LogicDescription>Get this record property</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>MessageDetailTarget</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784415">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetWSDL</MethodClassName>
		<LogicSource><![CDATA[String strClassName = this.getProperty(MenuConstants.RECORD);
Record record = Record.makeRecordFromClassName(strClassName, this);
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784416">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetWSDL</MethodClassName>
		<LogicSource><![CDATA[super;
new MessageInfo(this);
new MessageProcessInfo(this);
new MessageDetail(this);
new ContactType(this);
new MessageTransport(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784417">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetWSDL</MethodClassName>
		<LogicSource><![CDATA[super.addListeners();
Record record = this.getMainRecord();
record.setKeyArea(DBConstants.MAIN_KEY_AREA);
record.getCounterField().setString(this.getProperty(DBConstants.OBJECT_ID));
try {
    if (!record.seek(null))
        return; // Never;

    ContactType recContactType = (ContactType)this.getRecord(ContactType.kContactTypeFile);
    recContactType = recContactType.getContactType(record);
    Record recMessageDetail = this.getRecord(MessageDetail.kMessageDetailFile);
    recMessageDetail.setKeyArea(MessageDetail.kContactTypeIDKey);
    recMessageDetail.addListener(new SubFileFilter(recContactType.getField(ContactType.kID), MessageDetail.kContactTypeID, (BaseField)record.getCounterField(), MessageDetail.kPersonID, null, -1));

} catch (DBException e) {
    e.printStackTrace();
    return;
}

MessageTransport recMessageTransport = (MessageTransport)this.getRecord(MessageTransport.kMessageTransportFile);
recMessageTransport = recMessageTransport.getMessageTransport(MessageTransport.SOAP);   // For now - Only SOAP]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784418">
		<LastChanged>2011-10-12T16:49:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetWSDL</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();
try {
    Writer out = new StringWriter();
    MessageDetailTarget messageDetailTarget = (MessageDetailTarget)this.getMainRecord();
    String strSite = messageDetailTarget.getProperty(TrxMessageHeader.DESTINATION_PARAM);
    String strWSDLPath = messageDetailTarget.getProperty(TrxMessageHeader.WSDL_PATH);
    strWSDLPath = this.getFullPath(strSite, strWSDLPath);
    //x strWSDLPath = "http://www.tourloco.com:8181/tour/tourapphtml?datatype=wsdl&version=b2007";
    Utility.transferURLStream(strWSDLPath, null, null, out);
    out.flush();
    out.close();

    record.edit();
    this.processWSDLXML(out.toString());
    record.set();
    
    if (this.getProperty(TrxMessageHeader.REGISTRY_ID) != null)    // The return Queue ID
    {
        Application app = (Application)this.getTask().getApplication();
    
        Integer intFilterID = new Integer(this.getProperty(TrxMessageHeader.REGISTRY_ID));
        TrxMessageHeader messageHeader = new TrxMessageHeader(MessageConstants.TRX_RECEIVE_QUEUE, MessageConstants.INTERNET_QUEUE, null);
        messageHeader.setRegistryIDMatch(intFilterID);
        Map<String,Object> map = new Hashtable<String,Object>();
        map.put(DBConstants.OBJECT_ID, this.getProperty(DBConstants.OBJECT_ID));
        BaseMessage message = new MapMessage(messageHeader, map);
        // Tell the sender that I've finished (not required)
        app.getMessageManager().sendMessage(message);
    }
} catch (IOException e) {
    e.printStackTrace();
} catch (DBException e) {
    e.printStackTrace();
    return;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784435">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>Test11000123450</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Test</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784436">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>Test122</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Test</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784437">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>Test110001234567</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Test2</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784438">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>Test223</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>Test2</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784448">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>isDirectTransport*1</MethodName>
		<LogicDescription>Is this transport a direct type?</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>MessageTransport</MethodClassName>
		<LogicSource>return MessageTransport.isDirectTransport(this.getField(MessageTransport.kCode).toString());</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784449">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>310</Sequence>
		<MethodName>isDirectTransport*2</MethodName>
		<LogicDescription>Is this transport code a direct type?</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strTransportCode</MethodInterface>
		<MethodClassName>MessageTransport</MethodClassName>
		<LogicSource><![CDATA[if ((MessageTransport.DIRECT.equalsIgnoreCase(strTransportCode))
    || (MessageTransport.SERVER.equalsIgnoreCase(strTransportCode))
    || (MessageTransport.CLIENT.equalsIgnoreCase(strTransportCode)))
        return true;    // These are the direct types
return false;    // The others are not direct]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784465">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>mergeData</MethodName>
		<LogicDescription><![CDATA[Merge my changed data back into field that I just restored from disk.
@param objData The value this field held before I refreshed from disk.
@return The setData error code.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Object objData</MethodInterface>
		<MethodClassName>BaseField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784486">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>mergeKey</MethodName>
		<LogicDescription><![CDATA[Merge my changed data back into field that I just restored from disk.
@param objData The value this field held before I refreshed from disk.
@return The setData error code.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey, String strReadValue, String strCurrentValue</MethodInterface>
		<MethodClassName>PropertiesField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784492">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>clearStatusText</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PropertiesInputGridScreen</MethodClassName>
		<LogicSource>// Don't call super - Don't let property screen changes clear the status message.</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784504">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getContactTypeFromID</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strContactTypeID</MethodInterface>
		<MethodClassName>ContactType</MethodClassName>
		<LogicSource><![CDATA[if (Utility.isNumeric(strContactTypeID))
{
    int iOldKeyArea = this.getDefaultOrder();
    this.setKeyArea(ContactType.kIDKey);
    this.getCounterField().setString(strContactTypeID);
    try   {
        if (this.seek(null))
            strContactTypeID = this.getField(ContactType.kCode).toString();
    } catch (DBException ex)    {
        ex.printStackTrace();
    } finally {
        this.setKeyArea(iOldKeyArea);
    }
}  
return strContactTypeID;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784505">
		<LastChanged>2010-10-19T14:14:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>36</Sequence>
		<MethodName>checkSecurity</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
if ((iErrorCode == DBConstants.NORMAL_RETURN) || (iErrorCode == Constants.READ_ACCESS))
{   // Okay, their group can access this screen, but can this user access this data?
    String strUserContactType = this.getProperty(DBParams.CONTACT_TYPE);
    String strUserContactID = this.getProperty(DBParams.CONTACT_ID);

    String strContactTypeID = this.getScreenRecord().getField(MessageLogScreenRecord.kContactTypeID).toString();
    if ((strContactTypeID == null) || (strContactTypeID.length() == 0))
        if ((strUserContactType != null) && (strUserContactType.length() > 0))
    {
        if (!Utility.isNumeric(strUserContactType))
        {
            ContactType recContactType = (ContactType)((ReferenceField)this.getScreenRecord().getField(MessageLogScreenRecord.kContactTypeID)).getReferenceRecord(this);
            strUserContactType = Integer.toString(recContactType.getIDFromCode(strUserContactType));
        }
        this.getScreenRecord().getField(MessageLogScreenRecord.kContactTypeID).setString(strContactTypeID = strUserContactType);
    }
    String strContactID = this.getScreenRecord().getField(MessageLogScreenRecord.kContactID).toString();
    if ((strContactID == null) || (strContactID.length() == 0))
        if ((strUserContactID != null) && (strUserContactID.length() > 0))
            this.getScreenRecord().getField(MessageLogScreenRecord.kContactID).setString(strContactID = strUserContactID);
    iErrorCode = this.checkContactSecurity(strContactTypeID, strContactID);
}
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784506">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>37</Sequence>
		<MethodName>isContactDisplay</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>MessageLogGridScreen</MethodClassName>
		<LogicSource><![CDATA[String strUserContactType = this.getProperty(DBParams.CONTACT_TYPE);
String strUserContactID = this.getProperty(DBParams.CONTACT_ID);

String strContactType = ((ReferenceField)this.getScreenRecord().getField(MessageLogScreenRecord.kContactTypeID)).getReference().getField(ContactType.kCode).toString();
String strContactID = this.getScreenRecord().getField(MessageLogScreenRecord.kContactID).toString();

if ((strUserContactID != null) && (strUserContactID.equals(strContactID)))
    if ((strUserContactType != null) && (strUserContactType.equals(strContactType)))
        return true;
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784524">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,050</Sequence>
		<MethodName>getDefaultVersion</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource><![CDATA[Record recMessageVersion = ((ReferenceField)this.getRecord(MessageControl.kMessageControlFile).getField(MessageControl.kDefaultVersionID)).getReference();
if (recMessageVersion != null)
    if ((recMessageVersion.getEditMode() == DBConstants.EDIT_CURRENT) || (recMessageVersion.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
        return recMessageVersion.getField(MessageVersion.kCode).toString();
return "2007B"; // Never]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784525">
		<LastChanged>2010-02-03T01:40:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>createMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource><![CDATA[wsdlFactory = new org.w3._2006._01.wsdl.ObjectFactory();

// create a wsdl object
DescriptionType descriptionType = wsdlFactory.createDescriptionType();
JAXBElement<DescriptionType> root = wsdlFactory.createDescription(descriptionType);
String targetNamespace = this.getNamespace();  // Location of this document
descriptionType.setTargetNamespace(targetNamespace);

// Create the service type
this.addServiceType(descriptionType);

// Create the bindings type
this.addBindingType(descriptionType);

// Create the interface type
this.addInterfaceType(descriptionType);

// Create the types (import the OTA specs)
this.addTypeTypes(descriptionType);

return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784526">
		<LastChanged>2011-08-05T19:39:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>250</Sequence>
		<MethodName>getSOAPPackage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource>return "org.w3._2006._01.wsdl";//org.w3._2001.xmlschema: (String)((TrxMessageHeader)this.getMessage().getMessageHeader()).get(SOAPMessageTransport.SOAP_PACKAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784527">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>250</Sequence>
		<MethodName>getSOAPPackage</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784528">
		<LastChanged>2010-02-03T01:40:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>addServiceType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>DescriptionType descriptionType</MethodInterface>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource><![CDATA[String interfacens;
String interfacename;
QName qname;
String name;

ServiceType serviceType = wsdlFactory.createServiceType();
descriptionType.getImportOrIncludeOrTypes().add(wsdlFactory.createService(serviceType));

name = this.getControlProperty(MessageControl.SERVICE_NAME);
serviceType.setName(name);
interfacens = this.getNamespace();;
interfacename = this.getControlProperty(MessageControl.INTERFACE_NAME);
qname = new QName(interfacens, interfacename);
serviceType.setInterface(qname);
EndpointType endpointType = wsdlFactory.createEndpointType();
serviceType.getEndpointOrFeatureOrProperty().add(wsdlFactory.createEndpoint(endpointType));
String address = this.getURIValue(this.getRecord(MessageControl.kMessageControlFile).getField(MessageControl.kWebServicesServer).toString());  // Important - This is the web services URL
endpointType.setAddress(address);
interfacens = this.getNamespace();;
interfacename = this.getControlProperty(MessageControl.BINDING_NAME);
qname = new QName(interfacens, interfacename);
endpointType.setBinding(qname);
name = this.getControlProperty(MessageControl.ENDPOINT_NAME);
endpointType.setName(name);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784529">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>addBindingType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>DescriptionType descriptionType</MethodInterface>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource><![CDATA[String interfacens;
String interfacename;
QName qname;
String value;
String name;

// Create the bindings type
BindingType bindingType = wsdlFactory.createBindingType();
descriptionType.getImportOrIncludeOrTypes().add(wsdlFactory.createBinding(bindingType));
name = this.getControlProperty(MessageControl.BINDING_NAME);
bindingType.setName(name);
interfacens = this.getNamespace();
interfacename = this.getControlProperty(MessageControl.INTERFACE_NAME);
qname = new QName(interfacens, interfacename);
bindingType.setInterface(qname);
bindingType.setType(this.getControlProperty(WSOAP_BINDING_URI));
interfacens = this.getControlProperty(SOAP_SENDING_URI);
interfacename = "protocol";
qname = new QName(interfacens, interfacename);
value = this.getControlProperty(SOAP_URI);
bindingType.getOtherAttributes().put(qname, value);

this.addBindingOperationTypes(bindingType);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784530">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,250</Sequence>
		<MethodName>addBindingOperationTypes</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BindingType bindingType</MethodInterface>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource>this.scanProcesses(bindingType, OperationType.BINDING_OPERATIONS);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784531">
		<LastChanged>2010-02-03T01:41:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,270</Sequence>
		<MethodName>addBindingOperationType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strVersion, BindingType bindingType, MessageProcessInfo recMessageProcessInfo</MethodInterface>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource><![CDATA[String interfacens;
String interfacename;
QName qname;
String value;

BindingOperationType bindingOperationType = wsdlFactory.createBindingOperationType();
bindingType.getOperationOrFaultOrFeature().add(wsdlFactory.createBindingTypeOperation(bindingOperationType));
interfacens = this.getNamespace();
interfacename = this.fixName(recMessageProcessInfo.getField(MessageProcessInfo.kDescription).toString());
qname = new QName(interfacens, interfacename);
bindingOperationType.setRef(qname);
interfacens = this.getURIProperty(WSOAP_BINDING_URI);
interfacename = "code";
qname = new QName(interfacens, interfacename);
value = this.getURIProperty(SOAP_RESPONSE_URI);
bindingOperationType.getOtherAttributes().put(qname, value);
BindingOperationFaultType bindingOperationFaultType = wsdlFactory.createBindingOperationFaultType();
bindingOperationFaultType.setRef(qname);
interfacens = this.getURIProperty(SOAP_SENDING_URI);
interfacename = "mep";
qname = new QName(interfacens, interfacename);
value = this.getURIProperty(SOAP_RESPONSE_URI);
bindingOperationType.getOtherAttributes().put(qname, value);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784532">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>addInterfaceType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>DescriptionType descriptionType</MethodInterface>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource><![CDATA[// Create the interfaces
InterfaceType interfaceType = wsdlFactory.createInterfaceType();
descriptionType.getImportOrIncludeOrTypes().add(wsdlFactory.createInterface(interfaceType));
String interfaceName = this.getControlProperty(MessageControl.INTERFACE_NAME);
interfaceType.setName(interfaceName);

this.addInterfaceOperationTypes(interfaceType);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784533">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,350</Sequence>
		<MethodName>addInterfaceOperationTypes</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>InterfaceType interfaceType</MethodInterface>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource>this.scanProcesses(interfaceType, OperationType.INTERFACE_OPERATIONS);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784534">
		<LastChanged>2010-02-03T01:41:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,370</Sequence>
		<MethodName>addInterfaceOperationType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strVersion, InterfaceType interfaceType, MessageProcessInfo recMessageProcessInfo</MethodInterface>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource><![CDATA[InterfaceOperationType interfaceOperationType = wsdlFactory.createInterfaceOperationType();
interfaceType.getOperationOrFaultOrFeature().add(wsdlFactory.createInterfaceTypeOperation(interfaceOperationType));
String name = this.fixName(recMessageProcessInfo.getField(MessageProcessInfo.kDescription).toString());
interfaceOperationType.setName(name);
String pattern = this.getURIProperty(MESSAGE_PATTERN_URI);
interfaceOperationType.setPattern(pattern);
boolean safe = SAFE_DEFAULT;
String safeValue = ((PropertiesField)recMessageProcessInfo.getField(MessageProcessInfo.kProperties)).getProperty(MessageProcessInfo.SAFE);
if (safeValue != null)
    safe = Boolean.parseBoolean(safeValue);
interfaceOperationType.setSafe(safe);
String style = ((PropertiesField)recMessageProcessInfo.getField(MessageProcessInfo.kProperties)).getProperty(MESSAGE_STYLE_URI);
if (style == null)
    style = this.getURIProperty(MESSAGE_STYLE_URI);
interfaceOperationType.setStyle(style);
MessageInfo recMessageInfo = this.getMessageIn(recMessageProcessInfo);
if (recMessageInfo != null)
{
    MessageRefType messageRefType = wsdlFactory.createMessageRefType();
    JAXBElement<MessageRefType> interfaceOperationTypeInput = wsdlFactory.createInterfaceOperationTypeInput(messageRefType);
    interfaceOperationType.getInputOrOutputOrInfault().add(interfaceOperationTypeInput);
    name = this.fixName(recMessageInfo.getField(MessageInfo.kDescription).toString());
    String code = recMessageInfo.getField(MessageInfo.kCode).toString();
    if (code == null)
        code = name;
    String element = ((PropertiesField)recMessageInfo.getField(MessageInfo.kMessageProperties)).getProperty(MessageInfo.ELEMENT);
    if (element == null)
        if (code != null)
            element = code;
    String messageLabel = "In";
    messageRefType.setElement(element);
    messageRefType.setMessageLabel(messageLabel);
    messageRefType = wsdlFactory.createMessageRefType();
}
recMessageInfo = this.getMessageOut(recMessageProcessInfo);
if (recMessageInfo != null)
{
    MessageRefType messageRefType = wsdlFactory.createMessageRefType();
    JAXBElement<MessageRefType> interfaceOperationTypeOutput = wsdlFactory.createInterfaceOperationTypeOutput(messageRefType);
    interfaceOperationType.getInputOrOutputOrInfault().add(interfaceOperationTypeOutput);
    name = this.fixName(recMessageInfo.getField(MessageInfo.kDescription).toString());
    String code = recMessageInfo.getField(MessageInfo.kCode).toString();
    if (code == null)
        code = name;
    String element = ((PropertiesField)recMessageInfo.getField(MessageInfo.kMessageProperties)).getProperty(MessageInfo.ELEMENT);
    if (element == null)
        if (code != null)
            element = code;
    String messageLabel = "Out";
    messageRefType.setElement(element);
    messageRefType.setMessageLabel(messageLabel);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784535">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>addTypeTypes</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>DescriptionType descriptionType</MethodInterface>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource><![CDATA[TypesType typesType = wsdlFactory.createTypesType();
descriptionType.getImportOrIncludeOrTypes().add(wsdlFactory.createTypes(typesType));

this.scanProcesses(typesType, OperationType.TYPES_OPERATIONS);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784536">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,450</Sequence>
		<MethodName>addTypeType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String version, TypesType typesType, MessageProcessInfo recMessageProcessInfo</MethodInterface>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource><![CDATA[if (schemaFactory == null)
    schemaFactory = new org.w3._2001.xmlschema.ObjectFactory();
// Create the types (import the OTA specs)
MessageInfo recMessageInfo = this.getMessageIn(recMessageProcessInfo);
if (recMessageInfo != null)
{
    String name = this.fixName(recMessageInfo.getField(MessageInfo.kDescription).toString());
    if (this.isNewType(name))
    {
        this.addSchema(version, typesType, recMessageInfo);
    }
}
recMessageInfo = this.getMessageOut(recMessageProcessInfo);
if (recMessageInfo != null)
{
    String name = this.fixName(recMessageInfo.getField(MessageInfo.kDescription).toString());
    if (this.isNewType(name))
    {
        this.addSchema(version, typesType, recMessageInfo);
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784537">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,470</Sequence>
		<MethodName>addSchema</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String version, TypesType typesType, MessageInfo recMessageInfo</MethodInterface>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource><![CDATA[String name = this.fixName(recMessageInfo.getField(MessageInfo.kDescription).toString());

Import importel = schemaFactory.createImport();
typesType.getAny().add(importel);
String code = recMessageInfo.getField(MessageInfo.kCode).toString();
if (code == null)
    code = name;
String namespace = ((PropertiesField)recMessageInfo.getField(MessageInfo.kMessageProperties)).getProperty(MessageInfo.NAMESPACE);
String element = ((PropertiesField)recMessageInfo.getField(MessageInfo.kMessageProperties)).getProperty(MessageInfo.ELEMENT);
String schemaLocation = ((PropertiesField)recMessageInfo.getField(MessageInfo.kMessageProperties)).getProperty(MessageInfo.SCHEMA_LOCATION);

if (namespace == null)
    namespace = this.getMessageControl().getNamespaceFromVersion(version);
if (element == null)
    if (code != null)
        element = code;
if (schemaLocation == null)
    if (code != null)
        schemaLocation = code + ".xsd";
schemaLocation = this.getMessageControl().getSchemaLocation(version, schemaLocation);
if (namespace != null)
    importel.setNamespace(namespace);
importel.setSchemaLocation(schemaLocation);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784538">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>addProcessForWSDL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource><![CDATA[if (type == OperationType.BINDING_OPERATIONS)
    this.addBindingOperationType(strVersion, (BindingType)typeObject, recMessageProcessInfo);
else if (type == OperationType.INTERFACE_OPERATIONS)
    this.addInterfaceOperationType(strVersion, (InterfaceType)typeObject, recMessageProcessInfo);
else if (type == OperationType.TYPES_OPERATIONS)
    this.addTypeType(strVersion, (TypesType)typeObject, recMessageProcessInfo);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784539">
		<LastChanged>2011-08-05T19:38:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getSOAPPackage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource>return "org.xmlsoap.schemas.wsdl:org.xmlsoap.schemas.wsdl.soap:org.w3._2001.xmlschema";//(String)((TrxMessageHeader)this.getMessage().getMessageHeader()).get(SOAPMessageTransport.SOAP_PACKAGE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784540">
		<LastChanged>2010-02-03T01:37:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>createMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[wsdlFactory = new org.xmlsoap.schemas.wsdl.ObjectFactory();

// create a wsdl object
TDefinitions TDefinitions = wsdlFactory.createTDefinitions();
JAXBElement<TDefinitions> root = wsdlFactory.createDefinitions(TDefinitions);
String targetNamespace = this.getNamespace();  // Location of this document
TDefinitions.setTargetNamespace(targetNamespace);

// Create the service type
    this.addService(TDefinitions);
    
  // Create the bindings type
this.addBindingsType(TDefinitions);

// Create the service type
this.addPort(TDefinitions);

// Create the service type
this.addMessageTypes(TDefinitions);

// Create the interface type
this.addTypeTypes(TDefinitions);

return root;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784541">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>addBindingsType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>TDefinitions definitions</MethodInterface>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[String interfacens;
String interfacename;
QName qname;
String value;
String name;

if (soapFactory == null)
    soapFactory = new org.xmlsoap.schemas.wsdl.soap.ObjectFactory();

// Create the bindings type
TBinding binding = wsdlFactory.createTBinding();
definitions.getAnyTopLevelOptionalElement().add(binding);
name = this.getControlProperty(MessageControl.BINDING_NAME);
binding.setName(name);
interfacens = this.getNamespace();
interfacename = this.getControlProperty(MessageControl.INTERFACE_NAME);
qname = new QName(interfacens, interfacename);
binding.setType(qname);
//?LocalElement localElement = schemaFactory.createLocalElement();
//?TBinding.getAny().add(localElement);
org.xmlsoap.schemas.wsdl.soap.TBinding tBinding = soapFactory.createTBinding();
binding.getAny().add(soapFactory.createBinding(tBinding));
interfacens = this.getControlProperty(SOAP_URI);
tBinding.setTransport(interfacens);
tBinding.setStyle(org.xmlsoap.schemas.wsdl.soap.TStyleChoice.DOCUMENT);

this.addBindingOperationTypes(binding);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784542">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>addBindingOperationTypes</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>TBinding bindingType</MethodInterface>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource>this.scanProcesses(bindingType, OperationType.BINDING_OPERATIONS);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784543">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>addBindingOperationType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strVersion, TBinding binding, MessageProcessInfo recMessageProcessInfo</MethodInterface>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[String interfacename;

TBindingOperation bindingOperationType = wsdlFactory.createTBindingOperation();
binding.getOperation().add(bindingOperationType);
interfacename = this.fixName(recMessageProcessInfo.getField(MessageProcessInfo.kDescription).toString());
bindingOperationType.setName(interfacename);
interfacename = this.fixName(recMessageProcessInfo.getField(MessageProcessInfo.kCode).toString());
if (interfacename == null)
    interfacename = this.getURIValue(this.getRecord(MessageControl.kMessageControlFile).getField(MessageControl.kWebServicesServer).toString());  // Important - This is the web services URL

org.xmlsoap.schemas.wsdl.soap.TOperation tBinding = soapFactory.createTOperation();
bindingOperationType.getAny().add(soapFactory.createOperation(tBinding));
tBinding.setSoapAction(interfacename);
tBinding.setStyle(org.xmlsoap.schemas.wsdl.soap.TStyleChoice.DOCUMENT);

TBindingOperationMessage message = wsdlFactory.createTBindingOperationMessage();
bindingOperationType.setInput(message);
org.xmlsoap.schemas.wsdl.soap.TBody body = soapFactory.createTBody();
message.getAny().add(soapFactory.createBody(body));
body.setUse(org.xmlsoap.schemas.wsdl.soap.UseChoice.LITERAL);

message = wsdlFactory.createTBindingOperationMessage();
bindingOperationType.setOutput(message);
body = soapFactory.createTBody();
message.getAny().add(soapFactory.createBody(body));
body.setUse(org.xmlsoap.schemas.wsdl.soap.UseChoice.LITERAL);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784544">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>addPort</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>TDefinitions description</MethodInterface>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[// Create the interfaces
TPortType interfaceType = wsdlFactory.createTPortType();
description.getAnyTopLevelOptionalElement().add(interfaceType);
String interfaceName = this.getControlProperty(MessageControl.INTERFACE_NAME);
interfaceType.setName(interfaceName);

this.addInterfaceOperationTypes(interfaceType);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784545">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>addInterfaceOperationTypes</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>TPortType interfaceType</MethodInterface>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource>this.scanProcesses(interfaceType, OperationType.INTERFACE_OPERATIONS);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784546">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>addInterfaceOperationType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strVersion, TPortType interfaceType, MessageProcessInfo recMessageProcessInfo</MethodInterface>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[TOperation interfaceOperationType = wsdlFactory.createTOperation();
interfaceType.getOperation().add(interfaceOperationType);
String name = this.fixName(recMessageProcessInfo.getField(MessageProcessInfo.kDescription).toString());
interfaceOperationType.setName(name);
String pattern = this.getURIProperty(MESSAGE_PATTERN_URI);
//xinterfaceOperationType.setPattern(pattern);
boolean safe = SAFE_DEFAULT;
String safeValue = ((PropertiesField)recMessageProcessInfo.getField(MessageProcessInfo.kProperties)).getProperty(MessageProcessInfo.SAFE);
if (safeValue != null)
    safe = Boolean.parseBoolean(safeValue);
//xinterfaceOperationType.setSafe(safe);
String style = ((PropertiesField)recMessageProcessInfo.getField(MessageProcessInfo.kProperties)).getProperty(MESSAGE_STYLE_URI);
if (style == null)
    style = this.getURIProperty(MESSAGE_STYLE_URI);
//xinterfaceOperationType.setStyle(style);
MessageInfo recMessageInfo = this.getMessageIn(recMessageProcessInfo);
if (recMessageInfo != null)
{
    TParam messageRefType = wsdlFactory.createTParam();
    interfaceOperationType.getAny().add(wsdlFactory.createTOperationInput(messageRefType));
    name = this.fixName(recMessageInfo.getField(MessageInfo.kDescription).toString());
    String interfacens = this.getNamespace();
    QName qname = new QName(interfacens, name);
    String code = recMessageInfo.getField(MessageInfo.kCode).toString();
    if (code == null)
        code = name;
    String element = ((PropertiesField)recMessageInfo.getField(MessageInfo.kMessageProperties)).getProperty(MessageInfo.ELEMENT);
    if (element == null)
        if (code != null)
            element = code;
    String messageLabel = "In";
    messageRefType.setMessage(qname);
}
recMessageInfo = this.getMessageOut(recMessageProcessInfo);
if (recMessageInfo != null)
{
    TParam messageRefType = wsdlFactory.createTParam();
    interfaceOperationType.getAny().add(wsdlFactory.createTOperationOutput(messageRefType));
    name = this.fixName(recMessageInfo.getField(MessageInfo.kDescription).toString());
    String interfacens = this.getNamespace();
    QName qname = new QName(interfacens, name);
    String code = recMessageInfo.getField(MessageInfo.kCode).toString();
    if (code == null)
        code = name;
    String element = ((PropertiesField)recMessageInfo.getField(MessageInfo.kMessageProperties)).getProperty(MessageInfo.ELEMENT);
    if (element == null)
        if (code != null)
            element = code;
    String messageLabel = "Out";
    messageRefType.setMessage(qname);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784547">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,000</Sequence>
		<MethodName>addTypeTypes</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>TDefinitions descriptionType</MethodInterface>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[if (schemaFactory == null)
    schemaFactory = new org.w3._2001.xmlschema.ObjectFactory();

names.clear();
TTypes types = wsdlFactory.createTTypes();
descriptionType.getAnyTopLevelOptionalElement().add(types);

// This code is LAME, but for wsdl1.1, import doesn't work
org.w3._2001.xmlschema.Schema schema = schemaFactory.createSchema();
types.getAny().add(schema);
String strVersion = this.getProperty("version");
if (strVersion == null)
    strVersion = this.getDefaultVersion();
schema.setId(this.getMessageControl().getIdFromVersion(strVersion));
schema.setVersion(this.getMessageControl().getNumericVersionFromVersion(strVersion));
schema.setElementFormDefault(FormChoice.QUALIFIED);
this.scanProcesses(types, OperationType.TYPES_OPERATIONS);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784548">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,100</Sequence>
		<MethodName>addTypeType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String version, TTypes TTypes, MessageProcessInfo recMessageProcessInfo</MethodInterface>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[// Create the types (import the OTA specs)
MessageInfo recMessageInfo = this.getMessageIn(recMessageProcessInfo);
if (recMessageInfo != null)
{
    String name = this.fixName(recMessageInfo.getField(MessageInfo.kDescription).toString());
    if (this.isNewType(name))
    {
        this.addSchema(version, TTypes, recMessageInfo);
    }
}
recMessageInfo = this.getMessageOut(recMessageProcessInfo);
if (recMessageInfo != null)
{
    String name = this.fixName(recMessageInfo.getField(MessageInfo.kDescription).toString());
    if (this.isNewType(name))
    {
        this.addSchema(version, TTypes, recMessageInfo);
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784549">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,200</Sequence>
		<MethodName>addSchema</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String version, TTypes types, MessageInfo recMessageInfo</MethodInterface>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[String name = this.fixName(recMessageInfo.getField(MessageInfo.kDescription).toString());

Import importel = schemaFactory.createImport();
org.w3._2001.xmlschema.Schema schema = (org.w3._2001.xmlschema.Schema)types.getAny().get(0);    // LAME
schema.getIncludeOrImportOrRedefine().add(importel);
String code = recMessageInfo.getField(MessageInfo.kCode).toString();
if (code == null)
    code = name;
String namespace = ((PropertiesField)recMessageInfo.getField(MessageInfo.kMessageProperties)).getProperty(MessageInfo.NAMESPACE);
String element = ((PropertiesField)recMessageInfo.getField(MessageInfo.kMessageProperties)).getProperty(MessageInfo.ELEMENT);
String schemaLocation = ((PropertiesField)recMessageInfo.getField(MessageInfo.kMessageProperties)).getProperty(MessageInfo.SCHEMA_LOCATION);

if (namespace == null)
    namespace = this.getMessageControl().getNamespaceFromVersion(version);
if (element == null)
    if (code != null)
        element = code;
if (schemaLocation == null)
    if (code != null)
        schemaLocation = code + ".xsd";
schemaLocation = this.getMessageControl().getSchemaLocation(version, schemaLocation);
if (namespace != null)
    importel.setNamespace(namespace);
importel.setSchemaLocation(schemaLocation);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784550">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,000</Sequence>
		<MethodName>addProcessForWSDL</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[if (type == OperationType.BINDING_OPERATIONS)
    this.addBindingOperationType(strVersion, (TBinding)typeObject, recMessageProcessInfo);
else if (type == OperationType.INTERFACE_OPERATIONS)
    this.addInterfaceOperationType(strVersion, (TPortType)typeObject, recMessageProcessInfo);
else if (type == OperationType.MESSAGE_OPERATIONS)
    this.addMessageType(strVersion, (TDefinitions)typeObject, recMessageProcessInfo);
else if (type == OperationType.TYPES_OPERATIONS)
    this.addTypeType(strVersion, (TTypes)typeObject, recMessageProcessInfo);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784551">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>addMessageTypes</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>TDefinitions descriptionType</MethodInterface>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[names.clear();
this.scanProcesses(descriptionType, OperationType.MESSAGE_OPERATIONS);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784552">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,100</Sequence>
		<MethodName>addMessageType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String version, TDefinitions descriptionType, MessageProcessInfo recMessageProcessInfo</MethodInterface>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[// Create the types (import the OTA specs)
MessageInfo recMessageInfo = this.getMessageIn(recMessageProcessInfo);
if (recMessageInfo != null)
{
    String name = this.fixName(recMessageInfo.getField(MessageInfo.kDescription).toString());
    if (this.isNewType(name))
    {
        this.addMessage(version, descriptionType, recMessageInfo);
    }
}
recMessageInfo = this.getMessageOut(recMessageProcessInfo);
if (recMessageInfo != null)
{
    String name = this.fixName(recMessageInfo.getField(MessageInfo.kDescription).toString());
    if (this.isNewType(name))
    {
        this.addMessage(version, descriptionType, recMessageInfo);
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784553">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,200</Sequence>
		<MethodName>addMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String version, TDefinitions descriptionType, MessageInfo recMessageInfo</MethodInterface>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[TMessage messageType = wsdlFactory.createTMessage();
descriptionType.getAnyTopLevelOptionalElement().add(messageType);
String strMessageName = this.fixName(recMessageInfo.getField(MessageInfo.kDescription).toString());
messageType.setName(strMessageName);
TPart TPart = wsdlFactory.createTPart();        
messageType.getPart().add(TPart);
TPart.setName(strMessageName);
String interfacens = this.getNamespace();
String interfacename = this.fixName(recMessageInfo.getField(MessageInfo.kCode).toString());
QName qname = new QName(interfacens, interfacename);
TPart.setElement(qname);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784554">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>addService</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>TDefinitions descriptionType</MethodInterface>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[String interfacens;
String interfacename;
QName qname;
String name;

if (soapFactory == null)
    soapFactory = new org.xmlsoap.schemas.wsdl.soap.ObjectFactory();

TService service = wsdlFactory.createTService();
descriptionType.getAnyTopLevelOptionalElement().add(service);

name = this.getControlProperty(MessageControl.SERVICE_NAME);
service.setName(name);

interfacens = this.getNamespace();
interfacename = this.getControlProperty(MessageControl.BINDING_NAME);
qname = new QName(interfacens, interfacename);

TPort port = wsdlFactory.createTPort();
service.getPort().add(port);
port.setName(name + "Port");
port.setBinding(qname);

org.xmlsoap.schemas.wsdl.soap.TAddress tAddress = soapFactory.createTAddress();
port.getAny().add(soapFactory.createAddress(tAddress));

String address = this.getURIValue(this.getRecord(MessageControl.kMessageControlFile).getField(MessageControl.kWebServicesServer).toString());  // Important - This is the web services URL
tAddress.setLocation(address);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784558">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreateWSDL20</MethodClassName>
		<LogicSource><![CDATA[super;
wsdlFactory = null;
DEFAULTS = DEFAULTS_2_0;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784559">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[super;
wsdlFactory = null;
DEFAULTS = DEFAULTS_1_1;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784560">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>7,000</Sequence>
		<MethodName>getXML</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreateWSDL11</MethodClassName>
		<LogicSource><![CDATA[String strXML = super;
// NOTE: This is a lame hack to remove the 'part' attribute that is added in a JAXB bug
Reader reader = new StringReader(strXML);

Writer stringWriter = new StringWriter();

String strTransformer = WSDL_TRANSFORMER;
Reader readerxsl = new StringReader(strTransformer);

Utility.transformMessage(reader, stringWriter, readerxsl);

return stringWriter.toString();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784563">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>processWSDLXML</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strWSDL</MethodInterface>
		<MethodClassName>GetWSDL</MethodClassName>
		<LogicSource><![CDATA[GetWSDLBase getWSDLBase = null;
boolean bVersion20 = true;
if (strWSDL.lastIndexOf("definitions>") >= strWSDL.length() - 20)
    bVersion20 = false; // wsdl1.1
if (bVersion20)
    getWSDLBase = new GetWSDL20(this, null, null);
else
    getWSDLBase = new GetWSDL11(this, null, null);
getWSDLBase.processWSDLXML(strWSDL);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784564">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>getFullPath</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strSite, String strPath</MethodInterface>
		<MethodClassName>GetWSDL</MethodClassName>
		<LogicSource><![CDATA[if (strSite != null)
{
    if (strPath != null)
        if (strPath.startsWith("/"))
            strPath = strSite + strPath;
}
return strPath;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784565">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>processWSDLXML</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strWSDL</MethodInterface>
		<MethodClassName>GetWSDLBase</MethodClassName>
		<LogicSource>// Override this!</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784566">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>unmarshalThisMessage</MethodName>
		<LogicDescription/>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>String strXMLBody</MethodInterface>
		<MethodClassName>GetWSDLBase</MethodClassName>
		<LogicSource><![CDATA[try {
    Reader inStream = new StringReader(strXMLBody);

    Object msg = this.unmarshalRootElement(inStream);

    inStream.close();
    
    return msg;
} catch(Throwable ex) {
    ex.printStackTrace();
}
return null;    // Error]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784567">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>unmarshalRootElement</MethodName>
		<LogicDescription/>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>Reader inStream</MethodInterface>
		<MethodClassName>GetWSDLBase</MethodClassName>
		<LogicSource><![CDATA[try {
    // create a JAXBContext capable of handling classes generated into
    // the primer.po package
    String strSOAPPackage = this.getSOAPPackage();
    if (strSOAPPackage != null)
    {
        // create an Unmarshaller
        Unmarshaller u = JaxbContexts.getJAXBContexts().getUnmarshaller(strSOAPPackage);
        
        // unmarshal a po instance document into a tree of Java content
        // objects composed of classes from the primer.po package.
        Object obj = null;
        synchronized (u)
        {
            obj = u.unmarshal( inStream );
        }
        return obj;
    }
//+} catch (XMLStreamException ex)  {
//+    ex.printStackTrace();
} catch (JAXBException ex)  {
    ex.printStackTrace();
}

return null;]]></LogicSource>
		<LogicThrows>UnmarshalException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784568">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>getSOAPPackage</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>GetWSDLBase</MethodClassName>
		<LogicSource><![CDATA[String strPackage = null;   // Override this!
//strPackage = (String)((TrxMessageHeader)this.getMessage().getMessageHeader()).get(SOAPMessageTransport.SOAP_PACKAGE);
return strPackage;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784569">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>updateMessageProcessInfo</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String elementIn, String elementOut, String elementFault, boolean bIsSafe, String address</MethodInterface>
		<MethodClassName>GetWSDLBase</MethodClassName>
		<LogicSource><![CDATA[MessageInfo recMessageInfo = this.getMessageInfo(elementIn);   // Note: Message IN for them is Message Out for me
if (recMessageInfo != null)
{
    MessageProcessInfo recMessageProcessInfo = (MessageProcessInfo)this.getRecord(MessageProcessInfo.kMessageProcessInfoFile);
    FileListener listener = new SubFileFilter(recMessageInfo);
    recMessageProcessInfo.addListener(listener);
    recMessageProcessInfo.setKeyArea(MessageProcessInfo.kMessageInfoIDKey);
    recMessageProcessInfo.close();
    try {
        while (recMessageProcessInfo.hasNext())
        {
            recMessageProcessInfo.next();
            if (!MessageType.MESSAGE_OUT.equalsIgnoreCase(((ReferenceField)recMessageProcessInfo.getField(MessageProcessInfo.kMessageTypeID)).getReference().getField(MessageType.kCode).toString()))
                continue;
            boolean safe = CreateWSDL.SAFE_DEFAULT;
            String safeValue = ((PropertiesField)recMessageProcessInfo.getField(MessageProcessInfo.kProperties)).getProperty(MessageProcessInfo.SAFE);
            if (safeValue != null)
                safe = Boolean.parseBoolean(safeValue);
            if (safeValue != null)
                if (safe != bIsSafe)
                    continue;
            
            Record recMessageProcessInfo2 = ((ReferenceField)recMessageProcessInfo.getField(MessageProcessInfo.kReplyMessageProcessInfoID)).getReference();
            if (recMessageProcessInfo2 != null)
                if ((recMessageProcessInfo2.getEditMode() == DBConstants.EDIT_IN_PROGRESS) || (recMessageProcessInfo2.getEditMode() == DBConstants.EDIT_CURRENT))
                {
                    Record recMessageInfo2 = ((ReferenceField)recMessageProcessInfo2.getField(MessageProcessInfo.kMessageInfoID)).getReference();
                    if (recMessageInfo2 != null)
                    {
                        if (elementOut != null)
                            if (elementOut.equalsIgnoreCase(recMessageInfo2.getField(MessageInfo.kCode).getString()))
                            {
                                Map<String,Object> map = null;
                                if (address != null)
                                {
                                    map = new Hashtable<String,Object>();
                                    String site = this.getSiteFromAddress(address, null);
                                    map.put(TrxMessageHeader.DESTINATION_PARAM, site);
                                    map.put(TrxMessageHeader.DESTINATION_MESSAGE_PARAM, this.getPathFromAddress(address, site));
                                }
                                this.updateMessageDetail(recMessageProcessInfo, map);   // Found
                            }
                    }
                }
        }
    } catch (DBException e) {
        e.printStackTrace();
    } finally {
        recMessageProcessInfo.removeListener(listener, true);
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784570">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,000</Sequence>
		<MethodName>getMessageInfo</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageInfo</MethodReturns>
		<MethodInterface>String element</MethodInterface>
		<MethodClassName>GetWSDLBase</MethodClassName>
		<LogicSource><![CDATA[MessageInfo recMessageInfo = (MessageInfo)this.getRecord(MessageInfo.kMessageInfoFile);
recMessageInfo.setKeyArea(MessageInfo.kCodeKey);
recMessageInfo.getField(MessageInfo.kCode).setString(element);
try {
    if (recMessageInfo.seek(null))
    {
        return recMessageInfo;
    }
} catch (DBException e) {
    e.printStackTrace();
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784571">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,000</Sequence>
		<MethodName>addAddressToTarget</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String address</MethodInterface>
		<MethodClassName>GetWSDLBase</MethodClassName>
		<LogicSource><![CDATA[if (address != null)
{
    MessageDetailTarget messageDetailTarget = (MessageDetailTarget)this.getMainRecord();
    String site = messageDetailTarget.getProperty(TrxMessageHeader.DESTINATION_PARAM);
    site = this.getSiteFromAddress(address, site);
    if (!messageDetailTarget.setProperty(TrxMessageHeader.DESTINATION_PARAM, site))
        address = null; // This type doesn't take properties (never)
    messageDetailTarget.setProperty(TrxMessageHeader.DESTINATION_MESSAGE_PARAM, this.getPathFromAddress(address, site));
    String wsdlPath = messageDetailTarget.getProperty(TrxMessageHeader.WSDL_PATH);
    wsdlPath = this.getPathFromAddress(wsdlPath, site);
    if (wsdlPath != null)
        messageDetailTarget.setProperty(TrxMessageHeader.WSDL_PATH, wsdlPath);
}
return address;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784572">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>6,000</Sequence>
		<MethodName>updateMessageDetail</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>MessageProcessInfo recMessageProcessInfo, Map&lt;String,Object&gt; map</MethodInterface>
		<MethodClassName>GetWSDLBase</MethodClassName>
		<LogicSource><![CDATA[MessageDetail recMessageDetail = (MessageDetail)this.getRecord(MessageDetail.kMessageDetailFile);
MessageTransport recMessageTransport = (MessageTransport)this.getRecord(MessageTransport.kMessageTransportFile);

try {
    recMessageDetail.addNew();
    
    recMessageDetail.getField(MessageDetail.kMessageProcessInfoID).moveFieldToThis((BaseField)recMessageProcessInfo.getCounterField());
    recMessageDetail.getField(MessageDetail.kMessageTransportID).moveFieldToThis((BaseField)recMessageTransport.getCounterField());
    if (recMessageDetail.seek(null))
        recMessageDetail.edit();
    else
        recMessageDetail.addNew();
    
    recMessageDetail.getField(MessageDetail.kMessageProcessInfoID).moveFieldToThis((BaseField)recMessageProcessInfo.getCounterField());
    recMessageDetail.getField(MessageDetail.kMessageTransportID).moveFieldToThis((BaseField)recMessageTransport.getCounterField());
    String site = (map == null) ? null : (String)map.get(TrxMessageHeader.DESTINATION_PARAM);
    ((PropertiesField)recMessageDetail.getField(MessageDetail.kProperties)).setProperty(TrxMessageHeader.DESTINATION_PARAM, site);
    String wspath = (map == null) ? null : (String)map.get(TrxMessageHeader.DESTINATION_MESSAGE_PARAM);
    ((PropertiesField)recMessageDetail.getField(MessageDetail.kProperties)).setProperty(TrxMessageHeader.DESTINATION_MESSAGE_PARAM, wspath);
    
    if (recMessageDetail.getEditMode() == DBConstants.EDIT_ADD)
        recMessageDetail.add();
    else
        recMessageDetail.set();
} catch (DBException e) {
    e.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784573">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>7,000</Sequence>
		<MethodName>getSiteFromAddress</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String url, String site</MethodInterface>
		<MethodClassName>GetWSDLBase</MethodClassName>
		<LogicSource><![CDATA[int iStart = url.indexOf("//") + 2;
iStart = url.indexOf('/', iStart);
if (iStart == -1)
    iStart = url.length();
if ((site != null) && (site.length() > 0))
    if (!url.equalsIgnoreCase(site))
        return site; // Return this site if different from URL
return url.substring(0, iStart);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784574">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>8,000</Sequence>
		<MethodName>getPathFromAddress</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String url, String site</MethodInterface>
		<MethodClassName>GetWSDLBase</MethodClassName>
		<LogicSource><![CDATA[int iStart = url.indexOf("//") + 2;
iStart = url.indexOf('/', iStart);
if (iStart == -1)
    iStart = url.length();
if ((site != null) && (site.length() > 0))
    if (!url.substring(0, iStart).equalsIgnoreCase(site))
        return url; // Return full path if site is different
return url.substring(iStart);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784575">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>processWSDLXML</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetWSDL20</MethodClassName>
		<LogicSource><![CDATA[JAXBElement<DescriptionType> root = (JAXBElement)this.unmarshalThisMessage(strWSDL);
String address = this.processInterfaceTypes((DescriptionType)root.getValue(), false);
address = this.addAddressToTarget(address);
if (address == null)
    this.processInterfaceTypes((DescriptionType)root.getValue(), true); // Set the individual addresses]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784576">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getSOAPPackage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetWSDL20</MethodClassName>
		<LogicSource><![CDATA[String strPackage = super.getSOAPPackage();
if (strPackage == null)
    strPackage = "org.w3._2001.xmlschema:org.w3.wsdl20";
return strPackage;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784577">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>processInterfaceTypes</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>DescriptionType descriptionType, boolean addAddress</MethodInterface>
		<MethodClassName>GetWSDL20</MethodClassName>
		<LogicSource><![CDATA[String allAddress = DBConstants.BLANK;

for (Object nextElement : descriptionType.getImportOrIncludeOrTypes())
{
    Object nextType = null;
    if (nextElement instanceof JAXBElement)
        nextType = ((JAXBElement)nextElement).getValue();
    // Create the service type
    if (nextType instanceof InterfaceType)
    {
        String address = this.processInterfaceType(descriptionType, (InterfaceType)nextType, addAddress);
        if (allAddress != null)
        {
            if (allAddress == DBConstants.BLANK)
                allAddress = address;
            else if (!allAddress.equalsIgnoreCase(address))
                allAddress = null;  // null = not all address are the same
        }
    }
}

return allAddress;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784578">
		<LastChanged>2010-02-03T01:44:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>processInterfaceType</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>DescriptionType descriptionType, InterfaceType interfaceType, boolean addAddress</MethodInterface>
		<MethodClassName>GetWSDL20</MethodClassName>
		<LogicSource><![CDATA[String interfaceName = interfaceType.getName();
String allAddress = DBConstants.BLANK;

for (Object nextElement : interfaceType.getOperationOrFaultOrFeature())
{
    Object interfaceOperationType = null;
    if (nextElement instanceof JAXBElement)
        interfaceOperationType = ((JAXBElement)nextElement).getValue();
    if (interfaceOperationType instanceof InterfaceOperationType)
    {
        String address = this.processInterfaceOperationType(descriptionType, interfaceName, (InterfaceOperationType)interfaceOperationType, addAddress);
        if (allAddress != null)
        {
            if (allAddress == DBConstants.BLANK)
                allAddress = address;
            else if (!allAddress.equalsIgnoreCase(address))
                allAddress = null;  // null = not all address are the same
        }
    }
}

return allAddress;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784579">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>processInterfaceOperationType</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>DescriptionType descriptionType, String interfaceName, InterfaceOperationType interfaceOperationType, boolean addAddress</MethodInterface>
		<MethodClassName>GetWSDL20</MethodClassName>
		<LogicSource><![CDATA[String name = interfaceOperationType.getName();
String patern = interfaceOperationType.getPattern();
String style = interfaceOperationType.getStyle();
boolean bIsSafe = interfaceOperationType.isSafe();
MessageRefType messageIn = null;
MessageRefType messageOut = null;
MessageRefType messageFault = null;

for (Object nextElement : interfaceOperationType.getInputOrOutputOrInfault())
{
    Object inputOrOutputType = null;
    if (nextElement instanceof JAXBElement)
        inputOrOutputType = ((JAXBElement)nextElement).getValue();
    if (inputOrOutputType instanceof MessageRefType)
    {
        if ("In".equalsIgnoreCase(((MessageRefType)inputOrOutputType).getMessageLabel()))
            messageIn = (MessageRefType)inputOrOutputType;
        else if ("Out".equalsIgnoreCase(((MessageRefType)inputOrOutputType).getMessageLabel()))
            messageOut = (MessageRefType)inputOrOutputType;
        else
            messageFault = (MessageRefType)inputOrOutputType;
    }
}

BindingType binding = this.getBindingFromInterfaceName(descriptionType, interfaceName);

EndpointType endpointType = this.getServiceEndpointFromInterfaceNBinding(descriptionType, interfaceName, binding);

String address = endpointType.getAddress();

// Note: Here I should probably go through the types and find the type, but I just do the quick and dirty
String element = messageIn.getElement();
String messageLabel = messageIn.getMessageLabel();
String elementOut = messageOut.getElement();

this.updateMessageProcessInfo(element, elementOut, null, bIsSafe, addAddress ? address : null);

return address;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784580">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>getBindingFromInterfaceName</MethodName>
		<LogicDescription/>
		<MethodReturns>BindingType</MethodReturns>
		<MethodInterface>DescriptionType descriptionType, String interfaceName</MethodInterface>
		<MethodClassName>GetWSDL20</MethodClassName>
		<LogicSource><![CDATA[for (Object nextElement : descriptionType.getImportOrIncludeOrTypes())
{
    Object nextType = null;
    if (nextElement instanceof JAXBElement)
        nextType = ((JAXBElement)nextElement).getValue();
    // Create the service type
    if (nextType instanceof BindingType)
    {
        QName qname = ((BindingType)nextType).getInterface();
        if (interfaceName.equalsIgnoreCase(qname.getLocalPart()))
            return (BindingType)nextType;
    }
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784581">
		<LastChanged>2010-02-03T01:45:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,000</Sequence>
		<MethodName>getServiceEndpointFromInterfaceNBinding</MethodName>
		<LogicDescription/>
		<MethodReturns>EndpointType</MethodReturns>
		<MethodInterface>DescriptionType descriptionType, String interfaceName, BindingType binding</MethodInterface>
		<MethodClassName>GetWSDL20</MethodClassName>
		<LogicSource><![CDATA[for (Object nextElement : descriptionType.getImportOrIncludeOrTypes())
{
    Object nextType = null;
    if (nextElement instanceof JAXBElement)
        nextType = ((JAXBElement)nextElement).getValue();
    // Create the service type
    if (nextType instanceof ServiceType)
    {
        QName qname = ((ServiceType)nextType).getInterface();
        if (qname != null)
            if (interfaceName.equalsIgnoreCase(qname.getLocalPart()))
        {
            for (Object nextElement2 : ((ServiceType)nextType).getEndpointOrFeatureOrProperty())
            {
                Object endpoint = null;
                if (nextElement2 instanceof JAXBElement)
                    endpoint = ((JAXBElement)nextElement2).getValue();
                if (endpoint instanceof EndpointType)
                {
                    EndpointType endpointType = (EndpointType)endpoint;
                    String address = endpointType.getAddress();
                    QName qname2 = endpointType.getBinding();
                    String ns = qname2.getNamespaceURI();
                    String name = qname2.getLocalPart();
                    if (name.equalsIgnoreCase(binding.getName()))
                        return endpointType;
                }
            }
        }
    }
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784582">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>processWSDLXML</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetWSDL11</MethodClassName>
		<LogicSource><![CDATA[JAXBElement<TDefinitions> root = (JAXBElement)this.unmarshalThisMessage(strWSDL);
String address = this.processInterfaceTypes((TDefinitions)root.getValue(), false);
address = this.addAddressToTarget(address);
if (address == null)
    this.processInterfaceTypes((TDefinitions)root.getValue(), true); // Set the individual addresses]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784583">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getSOAPPackage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>GetWSDL11</MethodClassName>
		<LogicSource><![CDATA[String strPackage = super.getSOAPPackage();
if (strPackage == null)
    strPackage = "org.w3._2001.xmlschema:org.w3.wsdl11";
return strPackage;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784584">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>processInterfaceTypes</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>TDefinitions descriptionType, boolean addAddress</MethodInterface>
		<MethodClassName>GetWSDL11</MethodClassName>
		<LogicSource><![CDATA[String allAddress = DBConstants.BLANK;

for (TDocumented nextElement : descriptionType.getAnyTopLevelOptionalElement())
{
    // Create the service type
    if (nextElement instanceof TPortType)
    {
        String address = this.processPortType(descriptionType, (TPortType)nextElement, addAddress);
        if (allAddress != null)
        {
            if (allAddress == DBConstants.BLANK)
                allAddress = address;
            else if (!allAddress.equalsIgnoreCase(address))
                allAddress = null;  // null = not all address are the same
        }
    }
}

return allAddress;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784585">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>processPortType</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>TDefinitions descriptionType, TPortType interfaceType, boolean addAddress</MethodInterface>
		<MethodClassName>GetWSDL11</MethodClassName>
		<LogicSource><![CDATA[String interfaceName = interfaceType.getName();
String allAddress = DBConstants.BLANK;

for (TOperation nextElement : interfaceType.getOperation())
{
    {
        String address = this.processInterfaceOperationType(descriptionType, interfaceName, nextElement, addAddress);
        if (allAddress != null)
        {
            if (allAddress == DBConstants.BLANK)
                allAddress = address;
            else if (!allAddress.equalsIgnoreCase(address))
                allAddress = null;  // null = not all address are the same
        }
    }
}

return allAddress;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784586">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>4,000</Sequence>
		<MethodName>processInterfaceOperationType</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>TDefinitions descriptionType, String interfaceName, TOperation interfaceOperationType, boolean addAddress</MethodInterface>
		<MethodClassName>GetWSDL11</MethodClassName>
		<LogicSource><![CDATA[String name = interfaceOperationType.getName();
TParam messageIn = null;
TParam messageOut = null;
TParam messageFault = null;

for (Object nextElement : interfaceOperationType.getRest())
{
    Object inputOrOutputType = null;
    if (nextElement instanceof JAXBElement)
        inputOrOutputType = ((JAXBElement)nextElement).getValue();
    if (inputOrOutputType instanceof TParam)
    {
        String strName = ((JAXBElement)nextElement).getName().getLocalPart();
        if ("Input".equalsIgnoreCase(strName))
            messageIn = (TParam)inputOrOutputType;
        else if ("Output".equalsIgnoreCase(strName))
            messageOut = (TParam)inputOrOutputType;
        else
            messageFault = (TParam)inputOrOutputType;
    }
}

TBinding binding = this.getBindingFromInterfaceName(descriptionType, interfaceName);

String address = this.getServiceEndpointFromInterfaceNBinding(descriptionType, name, binding);
boolean bIsSafe = true;
// Note: Here I should probably go through the types and find the type, but I just do the quick and dirty
String element = this.getElementNameFromMessageName(descriptionType, messageIn);
String elementOut = this.getElementNameFromMessageName(descriptionType, messageOut);

this.updateMessageProcessInfo(element, elementOut, null, bIsSafe, addAddress ? address : null);

return address;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784587">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5,000</Sequence>
		<MethodName>getElementNameFromMessageName</MethodName>
		<LogicDescription>Search through the messages for this one and return the element name.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>TDefinitions descriptionType, TParam message</MethodInterface>
		<MethodClassName>GetWSDL11</MethodClassName>
		<LogicSource><![CDATA[QName qName = message.getMessage();
String name = qName.getLocalPart();
for (TDocumented nextElement : descriptionType.getAnyTopLevelOptionalElement())
{
    // Create the service type
    if (nextElement instanceof TMessage)
    {
        String msgName = ((TMessage)nextElement).getName();
        for (TPart part : ((TMessage)nextElement).getPart())
        {
            if (name.equals(part.getName()))
            {
                return part.getElement().getLocalPart();
            }
        }
    }
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784588">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>6,000</Sequence>
		<MethodName>getBindingFromInterfaceName</MethodName>
		<LogicDescription/>
		<MethodReturns>TBinding</MethodReturns>
		<MethodInterface>TDefinitions descriptionType, String interfaceName</MethodInterface>
		<MethodClassName>GetWSDL11</MethodClassName>
		<LogicSource><![CDATA[for (TDocumented nextElement : descriptionType.getAnyTopLevelOptionalElement())
{
    // Create the service type
    if (nextElement instanceof TBinding)
    {
        QName qname = ((TBinding)nextElement).getType();
        if (interfaceName.equalsIgnoreCase(qname.getLocalPart()))
            return (TBinding)nextElement;
    }
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784589">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>7,000</Sequence>
		<MethodName>getServiceEndpointFromInterfaceNBinding</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>TDefinitions descriptionType, String interfaceName, TBinding binding</MethodInterface>
		<MethodClassName>GetWSDL11</MethodClassName>
		<LogicSource><![CDATA[for (TBindingOperation nextElement : binding.getOperation())
{
    String name = nextElement.getName();
    if (interfaceName.equalsIgnoreCase(name))
    {
        for (Object op : nextElement.getAny())
        {
            if (op instanceof org.w3c.dom.Element)
            {
                String strName = ((org.w3c.dom.Element)op).getLocalName();
                if ("operation".equalsIgnoreCase(strName))
                {
                    String ops = ((org.w3c.dom.Element)op).getAttribute("soapAction");
                    if (ops != null)
                        return ops;
                }
            }                    
        }
    }
}
// Not found in there, return the default address
for (TDocumented nextElement : descriptionType.getAnyTopLevelOptionalElement())
{
    // Create the service type
    if (nextElement instanceof TService)
    {
        for (TPort port : ((TService)nextElement).getPort())
        {
            String portBindingName = port.getBinding().getLocalPart();
            String bindingName = binding.getName();
            if (bindingName.equals(portBindingName))
            {
                for (Object op : port.getAny())
                {
                    if (op instanceof org.w3c.dom.Element)
                    {
                        String strName = ((org.w3c.dom.Element)op).getLocalName();
                        if ("address".equalsIgnoreCase(strName))
                        {
                            String ops = ((org.w3c.dom.Element)op).getAttribute("location");
                            if (ops != null)
                                return ops;
                        }
                    }                            
                }
            }
        }
    }
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784590">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getNamespaceFromVersion</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String version</MethodInterface>
		<MethodClassName>MessageControl</MethodClassName>
		<LogicSource><![CDATA[MessageVersion recMessageVersion = this.getMessageVersion(version);
String namespace = this.getField(MessageControl.kBaseNamespace).toString();
if (namespace == null)
    namespace = DBConstants.BLANK;
if ((recMessageVersion != null) && (!recMessageVersion.getField(MessageVersion.kNamespace).isNull()))
        namespace += recMessageVersion.getField(MessageVersion.kNamespace).toString();
return namespace;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784591">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>getSchemaLocation*1</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String version, String schemaLocation</MethodInterface>
		<MethodClassName>MessageControl</MethodClassName>
		<LogicSource><![CDATA[if (schemaLocation != null)
    if ((schemaLocation.startsWith("http")) || (schemaLocation.startsWith("/")))
        return schemaLocation;
MessageVersion recMessageVersion = this.getMessageVersion(version);
return this.getSchemaLocation(recMessageVersion, schemaLocation);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784592">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,000</Sequence>
		<MethodName>fixVersion</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String version</MethodInterface>
		<MethodClassName>MessageControl</MethodClassName>
		<LogicSource><![CDATA[if (version != null)
    if (version.length() > 0)
{
    version = version.toUpperCase();
    if (Character.isLetter(version.charAt(0)))
        version = version.substring(1, version.length()) + version.substring(0, 1); // Move letter to start
}
return version;]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784593">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getDefaultNamespace</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>MessageControl</MethodClassName>
		<LogicSource>return this.getNamespaceFromVersion(null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784594">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>6,000</Sequence>
		<MethodName>getMessageControl</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageControl</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource><![CDATA[MessageControl recMessageControl = (MessageControl)this.getRecord(MessageControl.kMessageControlFile);
return recMessageControl;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784595">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>getNumericVersionFromVersion</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String version</MethodInterface>
		<MethodClassName>MessageControl</MethodClassName>
		<LogicSource><![CDATA[MessageVersion recMessageVersion = this.getMessageVersion(version);
String numericVersion = DBConstants.BLANK;
if ((recMessageVersion != null) && (!recMessageVersion.getField(MessageVersion.kNamespace).isNull()))
    numericVersion = recMessageVersion.getField(MessageVersion.kNumericVersion).toString();
if ((numericVersion == null) || (numericVersion.length() == 0))
    numericVersion = "1.000";
return numericVersion;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784596">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>getIdFromVersion</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String version</MethodInterface>
		<MethodClassName>MessageControl</MethodClassName>
		<LogicSource><![CDATA[MessageVersion recMessageVersion = this.getMessageVersion(version);
String idVersion = DBConstants.BLANK;
if ((idVersion != null) && (!recMessageVersion.getField(MessageVersion.kNamespace).isNull()))
    idVersion = recMessageVersion.getField(MessageVersion.kVersionID).toString();
if ((idVersion == null) || (idVersion.length() == 0))
    idVersion = "OTA" + version;
return idVersion;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784597">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>7,000</Sequence>
		<MethodName>getNamespace</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource><![CDATA[String strTargetVersion = this.getProperty("version");
if (strTargetVersion == null)
    strTargetVersion = this.getDefaultVersion();
return this.getMessageControl().getNamespaceFromVersion(strTargetVersion);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784606">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>applyMappedFilter</MethodName>
		<LogicDescription><![CDATA[Create the filter and apply it to this/a record and record the record to traverse.
@return The record to traverse (with filters applied).]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784607">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>moveDataToThin</MethodName>
		<LogicDescription><![CDATA[Move the data in this record to the thin version.
@param fieldList]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record record, FieldList fieldList</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784608">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,300</Sequence>
		<MethodName>freeMappedRecord</MethodName>
		<LogicDescription><![CDATA[Free this mapped record.
@param record The record to free.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784611">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,250</Sequence>
		<MethodName>moveFieldToThin</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>FieldInfo fieldInfo, BaseField field, Record record</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource><![CDATA[Move the data in this record to the thin version.
@param fieldInfo The destination thin field.
@param field The source field (or null to auto-find)
@param record The source record (or null if field supplied)]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784616">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageVersionField</MethodClassName>
		<LogicSource>return new MessageVersion(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784617">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>initField</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageVersionField</MethodClassName>
		<LogicSource>return this.setValue(MessageVersion.NO_VERSION, bDisplayOption, DBConstants.INIT_MOVE);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784618">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getMessageVersion*1</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageVersion</MethodReturns>
		<MethodInterface/>
		<MethodClassName>MessageControl</MethodClassName>
		<LogicSource>return (MessageVersion)((ReferenceField)this.getField(MessageControl.kDefaultVersionID)).getReferenceRecord();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784619">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,150</Sequence>
		<MethodName>getMessageVersion*2</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageVersion</MethodReturns>
		<MethodInterface>String version</MethodInterface>
		<MethodClassName>MessageControl</MethodClassName>
		<LogicSource><![CDATA[MessageVersion recMessageVersion = this.getMessageVersion();
recMessageVersion.setKeyArea(MessageVersion.kCodeKey);
version = MessageControl.fixVersion(version);
recMessageVersion.getField(MessageVersion.kCode).setString(version);
try {
    if (version != null)
        if (recMessageVersion.seek(DBConstants.EQUALS))
    {
        return recMessageVersion;
    }
} catch (DBException e) {
    e.printStackTrace();
}
return (MessageVersion)((ReferenceField)this.getField(MessageControl.kDefaultVersionID)).getReference();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784620">
		<LastChanged>2011-08-05T19:10:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,600</Sequence>
		<MethodName>getURIValue</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strValue</MethodInterface>
		<MethodClassName>CreateWSDL</MethodClassName>
		<LogicSource><![CDATA[String strBaseURI = ((PropertiesField)this.getRecord(MessageControl.kMessageControlFile).getField(MessageControl.kProperties)).getProperty(MessageControl.BASE_NAMESPACE_URI);
if (strBaseURI == null)
{
    strBaseURI = this.getProperty(DBParams.BASE_URL);   // Defaults to same site as wsdl
    if (strBaseURI != null)
        if (strBaseURI.endsWith("/"))
            strBaseURI = strBaseURI.substring(0, strBaseURI.length() - 1);
}
if (strBaseURI != null)
    if (strBaseURI.indexOf("http://") != 0)
        strBaseURI = "http://" + strBaseURI;
if (strBaseURI != null)
{
    if (strValue == null)
        strValue = strBaseURI;
    else if ((strValue.indexOf("http://") != 0)
        || (strValue.startsWith("/")))
            strValue = strBaseURI + strValue;
}
return strValue;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784621">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,275</Sequence>
		<MethodName>getMessageControl</MethodName>
		<LogicDescription/>
		<MethodReturns>MessageControl</MethodReturns>
		<MethodInterface/>
		<MethodClassName>MessageProcessInfo</MethodClassName>
		<LogicSource><![CDATA[if (m_recMessageControl == null)
    {
    RecordOwner recordOwner = Utility.getRecordOwner(this);
    m_recMessageControl = new MessageControl(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recMessageControl);    // Set it is not on the recordowner's list
    this.addListener(new FreeOnFreeHandler(m_recMessageControl));
}
return m_recMessageControl;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784627">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>getSchemaLocation*2</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>MessageVersion recMessageVersion, String schemaLocation</MethodInterface>
		<MethodClassName>MessageControl</MethodClassName>
		<LogicSource><![CDATA[String location = this.getField(MessageControl.kBaseSchemaLocation).toString();
if (location == null)
    location = DBConstants.BLANK;
else if (!location.endsWith("/"))
    location += "/";
if ((recMessageVersion != null) && (!recMessageVersion.getField(MessageVersion.kSchemaLocation).isNull()))
    location = location + recMessageVersion.getField(MessageVersion.kSchemaLocation).toString();
else
    location = location + recMessageVersion.getField(MessageVersion.kCode).toString();
if (location != null)
{
    if (!location.endsWith("/"))
        location += "/";
    return location + schemaLocation;
}
return schemaLocation;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784628">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>3,000</Sequence>
		<MethodName>getVersionFromSchemaLocation</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String schemaLocation</MethodInterface>
		<MethodClassName>MessageControl</MethodClassName>
		<LogicSource><![CDATA[MessageVersion recMessageVersion = this.getMessageVersion();
recMessageVersion.close();
try {
    while (recMessageVersion.hasNext())
    {
        recMessageVersion.next();
        String messageSchemaLocation = this.getSchemaLocation(recMessageVersion, DBConstants.BLANK);
        if (schemaLocation.startsWith(messageSchemaLocation))
            return recMessageVersion.getField(MessageVersion.kCode).toString();
    }
} catch (DBException e) {
    e.printStackTrace();
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784629">
		<LastChanged>2010-03-26T00:56:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>addMessageProperties</MethodName>
		<LogicDescription><![CDATA[Add the version properties to this message.
NOTE: The properties are added ONLY if the don't currently exist in the info properties]]></LogicDescription>
		<MethodReturns>TrxMessageHeader</MethodReturns>
		<MethodInterface>TrxMessageHeader trxMessageHeader, MessageControl recMessageControl</MethodInterface>
		<MethodClassName>MessageVersion</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> mapHeaderMessageInfo = trxMessageHeader.getMessageInfoMap();

Map<String,Object> propMessageTransportInfo = ((PropertiesField)this.getField(MessageVersion.kProperties)).loadProperties();
if (mapHeaderMessageInfo != null)
    Utility.putAllIfNew(mapHeaderMessageInfo, propMessageTransportInfo);
else
    mapHeaderMessageInfo = propMessageTransportInfo;
if (mapHeaderMessageInfo == null)
    mapHeaderMessageInfo = new HashMap<String,Object>();
if (!this.getField(MessageVersion.kCode).isNull())
    mapHeaderMessageInfo.put(VERSION, this.getField(MessageVersion.kCode).toString());
if (!this.getField(MessageVersion.kID).isNull())
    mapHeaderMessageInfo.put(VERSION_ID, this.getField(MessageVersion.kID).toString());
if (recMessageControl != null)
    if ((recMessageControl.getEditMode() == DBConstants.EDIT_CURRENT) || (recMessageControl.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
        if (mapHeaderMessageInfo.get(TrxMessageHeader.SCHEMA_LOCATION) != null)
    {
        String strSchemaLocation = (String)mapHeaderMessageInfo.get(TrxMessageHeader.SCHEMA_LOCATION);
        if (strSchemaLocation.indexOf('/') == -1)
        {   // Need to get the full location
            if (strSchemaLocation.indexOf('.') == -1)
                strSchemaLocation = strSchemaLocation + ".xsd";
        strSchemaLocation = recMessageControl.getSchemaLocation(this, strSchemaLocation);
        mapHeaderMessageInfo.put(TrxMessageHeader.SCHEMA_LOCATION, strSchemaLocation);
        }
    }
trxMessageHeader.setMessageInfoMap(mapHeaderMessageInfo);

return trxMessageHeader;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784639">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription/>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface/>
		<MethodClassName>XmlbeansTrxMessageOut</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784640">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>XmlbeansTrxMessageOut</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseMessage message, Object root</MethodInterface>
		<MethodClassName>XmlbeansTrxMessageOut</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784643">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>unmarshalRootElement</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>XmlbeansTrxMessageIn</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784644">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>XmlbeansTrxMessageIn</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784645">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BaseXmlTrxMessageIn</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseMessage message, SOAPMessage soapMessage</MethodInterface>
		<MethodClassName>BaseXmlTrxMessageIn</MethodClassName>
		<LogicSource><![CDATA[Initialize new BaseTrxMessage.
This is used for outgoing EC transactions where you have the jaxb message and you need to convert it.
@param objRawMessage The (optional) raw data of the message.]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784646">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>unmarshalRootElement</MethodName>
		<LogicDescription><![CDATA[Create the root element for this message.
You must override this.
@return The root element.]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>Reader inStream, BaseXmlTrxMessageIn soapTrxMessage</MethodInterface>
		<MethodClassName>BaseXmlTrxMessageIn</MethodClassName>
		<LogicSource/>
		<LogicThrows>Exception</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784647">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription><![CDATA[Convert the external form to the internal message form.
You must override this method.
@param root The root object of the marshallable object.
@return The error code.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Object root</MethodInterface>
		<MethodClassName>BaseXmlTrxMessageIn</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784661">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertInternalToMarshallableObject</MethodName>
		<LogicDescription><![CDATA[Convert this source message to the ECXML format.
Typically you do not override this method, you override the getTransformer method
to supply a XSLT document to do the conversion.
@param recordOwner TODO
@param source The source XML document.
@return The XML tree that conforms to the ECXML format.]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>RecordOwner recordOwner</MethodInterface>
		<MethodClassName>BaseConvertToNative</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784662">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>unmarshalRootElement</MethodName>
		<LogicDescription><![CDATA[Create the root element for this message.
You must override this.
@return The root element.]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>Reader inStream, BaseXmlTrxMessageIn soapTrxMessage</MethodInterface>
		<MethodClassName>BaseConvertToMessage</MethodClassName>
		<LogicSource/>
		<LogicThrows>Exception</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784663">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>unmarshalRootElement*2</MethodName>
		<LogicDescription><![CDATA[Create the root element for this message.
You SHOULD override this if the unmarshaller has a native method to unmarshall a dom node.
@return The root element.]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>Node node, BaseXmlTrxMessageIn soapTrxMessage</MethodInterface>
		<MethodClassName>BaseConvertToMessage</MethodClassName>
		<LogicSource/>
		<LogicThrows>Exception</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784664">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>convertMarshallableObjectToInternal</MethodName>
		<LogicDescription><![CDATA[Convert the external form to the internal message form.
You must override this method.
@param root The root object of the marshallable object.
@param recordOwner The recordowner
@return The error code.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Object root, RecordOwner recordOwner</MethodInterface>
		<MethodClassName>BaseConvertToMessage</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784665">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BaseConvertToNative</MethodName>
		<LogicDescription><![CDATA[This is the base class for a transaction which is sent externally.
The two main sub-classes of this class are InternalTrxMessage and ExternalTrxMessage.
An InternalTrxMessage is the data I create internally to send to the destination. It
usually contains all the relative information needed to send to the destination.
An ExternalTrxMessage is the message converted to a format that the receiver can
understand (such as ebXML).]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>ExternalTrxMessageOut message</MethodInterface>
		<MethodClassName>BaseConvertToNative</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784666">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getDOM</MethodName>
		<LogicDescription><![CDATA[Convert this tree to a DOM object.
Currently this is lame because I convert the tree to text, then to DOM.
In the future, jaxb will be able to convert directly.
@return The dom tree.]]></LogicDescription>
		<MethodReturns>Node</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseConvertToNative</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784667">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BaseConvertToMessage</MethodName>
		<LogicDescription><![CDATA[Initialize new BaseTrxMessage.
This is used for outgoing EC transactions where you have the jaxb message and you need to convert it.
@param objRawMessage The (optional) raw data of the message.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>ExternalTrxMessageIn message</MethodInterface>
		<MethodClassName>BaseConvertToMessage</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784699">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getRecordFromDescription*1</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>BaseField field, String strDesc</MethodInterface>
		<MethodClassName>BaseFixData</MethodClassName>
		<LogicSource><![CDATA[Record recSecond = ((ReferenceField)field).getReferenceRecord();
return BaseFixData.getRecordFromDescription(strDesc, null, recSecond);]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784700">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getRecordFromDescription*2</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>String strDesc, String strFieldName, Record recSecond</MethodInterface>
		<MethodClassName>BaseFixData</MethodClassName>
		<LogicSource><![CDATA[if ((strDesc == null) || (strDesc.length() == 0))
    return null;
BaseField fldSecond = null;
if (strFieldName != null)
    fldSecond = recSecond.getField(strFieldName);
if (fldSecond == null)
    fldSecond = recSecond.getField("Name");
if (fldSecond == null)
    fldSecond = recSecond.getField("Description");
if (fldSecond == null)
    return null;
recSecond.setKeyArea(fldSecond);
fldSecond.setString(strDesc);
try {
    if (recSecond.seek(DBConstants.EQUALS))
        return recSecond;
} catch (DBException e) {
    e.printStackTrace();
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784701">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getRecordFromCode*1</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>BaseField field, String strDesc</MethodInterface>
		<MethodClassName>BaseFixData</MethodClassName>
		<LogicSource>return BaseFixData.getRecordFromCode(field, strDesc, null);</LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784702">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>getRecordFromCode*2</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>BaseField field, String strDesc, String strFieldName</MethodInterface>
		<MethodClassName>BaseFixData</MethodClassName>
		<LogicSource><![CDATA[Record recSecond = ((ReferenceField)field).getReferenceRecord();
return BaseFixData.getRecordFromCode(field, strDesc, strFieldName, recSecond);]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784703">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getRecordFromCode*3</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>BaseField field, String strDesc, String strFieldName, Record recSecond</MethodInterface>
		<MethodClassName>BaseFixData</MethodClassName>
		<LogicSource><![CDATA[if ((strDesc == null) || (strDesc.length() == 0))
    return null;
BaseField fldSecond = null;
if (strFieldName != null)
    fldSecond = recSecond.getField(strFieldName);
if (fldSecond == null)
    fldSecond = recSecond.getField("Code");
if (fldSecond == null)
    return null;
recSecond.setKeyArea(fldSecond);
fldSecond.setString(strDesc);
try {
    if (recSecond.seek(DBConstants.EQUALS))
        return recSecond;
} catch (DBException e) {
    e.printStackTrace();
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784704">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>fixCapitalization*1</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseField field</MethodInterface>
		<MethodClassName>BaseFixData</MethodClassName>
		<LogicSource><![CDATA[String string = field.toString();
string = BaseFixData.fixCapitalization(string);
field.setString(string);]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784705">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>fixCapitalization*2</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String string</MethodInterface>
		<MethodClassName>BaseFixData</MethodClassName>
		<LogicSource><![CDATA[if (string != null)
{
    for (int i = 0; i < string.length(); i++)
    {
        if (Character.isLowerCase(string.charAt(i)))
            return string;  // Already lower case
    }
    StringBuffer sb = new StringBuffer();
    boolean bPreviousSpace = true;
    for (int i = 0; i < string.length(); i++)
    {
        Character character = string.charAt(i);
        if (!bPreviousSpace)
        {
            character = Character.toLowerCase(character);
        }
        bPreviousSpace = false;
        if (Character.isSpaceChar(character))
            bPreviousSpace = true;
        if (!Character.isLetterOrDigit(character))
            bPreviousSpace = true;
        if (character == 'c')
            if (i > 0)
                if (string.charAt(i - 1) == 'M')
                    bPreviousSpace = true;  // McName
        if (!bPreviousSpace)
            bPreviousSpace = BaseFixData.checkAbreviations(string, i);
        sb.append(character);
    }
    string = sb.toString();
}        
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784706">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>checkAbreviations</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String string, int i</MethodInterface>
		<MethodClassName>BaseFixData</MethodClassName>
		<LogicSource><![CDATA[// Check first character
for (int index = 0; index < ABREVIATIONS.length; index++)
{
    if (ABREVIATIONS[index].length() > 1)
        if (string.charAt(i) == ABREVIATIONS[index].charAt(0))
            if (string.length() > i + 1)
                if (string.charAt(i+1) == ABREVIATIONS[index].charAt(1))
                    if (string.length() > i + 2)
                        if (string.charAt(i+2) == ABREVIATIONS[index].charAt(2))
                            return true;
}
// Check second character
for (int index = 0; index < ABREVIATIONS.length; index++)
{
    if (ABREVIATIONS[index].length() > 2)
        if (i > 0)
            if (string.charAt(i-1) == ABREVIATIONS[index].charAt(0))
                if (string.charAt(i) == ABREVIATIONS[index].charAt(1))
                    if (string.length() > i + 1)
                        if (string.charAt(i+1) == ABREVIATIONS[index].charAt(2))
                            return true;
}
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784707">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeData</MethodClassName>
		<LogicSource><![CDATA[Record recDest = this.getMainRecord();
Iterator<Record> source = this.getSource();

while (source.hasNext())
{
    Record recSource = source.next();
    
    this.mergeSourceRecord(recSource, recDest);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784708">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>mergeSourceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recSource, Record recDest</MethodInterface>
		<MethodClassName>MergeData</MethodClassName>
		<LogicSource><![CDATA[try {
    boolean bFound = this.readDestRecord(recSource, recDest);
    if (!bFound)
        recDest.addNew();
    else
        recDest.edit();
    this.mergeSourceData(recSource, recDest, bFound);
    if (recDest.isModified())
    {
        if (recDest.getEditMode() == DBConstants.EDIT_ADD)
        {
            boolean bAutoSequence = true;
            if (!recDest.getCounterField().isNull())
                bAutoSequence = false;
            recDest.setAutoSequence(bAutoSequence);
            recDest.add();
            recDest.setAutoSequence(true);
        }
        else if (recDest.getEditMode() == DBConstants.EDIT_IN_PROGRESS)
            recDest.set();
    }
} catch (DBException e) {
    e.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784709">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>mergeSourceData</MethodName>
		<LogicDescription><![CDATA[Merge this source record with the destination record.
@param recSource
@param recDest]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record recSource, Record recDest, boolean bFound</MethodInterface>
		<MethodClassName>MergeData</MethodClassName>
		<LogicSource><![CDATA[for (int iFieldSeq = 0; iFieldSeq < recSource.getFieldCount(); iFieldSeq++)
{
    BaseField fldSource = recSource.getField(iFieldSeq);
    BaseField fldDest = recDest.getField(fldSource.getFieldName());
    if (fldDest != null)
        if (!fldSource.isNull())
            fldDest.moveFieldToThis(fldSource);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784710">
		<LastChanged>2010-04-12T02:10:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>readDestRecord</MethodName>
		<LogicDescription><![CDATA[Given this source record, read the destination record.
@param recSource The source record
@param recDest The destination record
@return True if found]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>FieldList recSource, Record recDest</MethodInterface>
		<MethodClassName>MergeData</MethodClassName>
		<LogicSource><![CDATA[FieldInfo fldSecond = recSource.getField("Name");
if (fldSecond == null)
    fldSecond = recSource.getField("Description");
if (fldSecond == null)
    return false;
recDest = BaseFixData.getRecordFromDescription(fldSecond.toString(), fldSecond.getFieldName(), recDest);
return (recDest != null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784711">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>getSource</MethodName>
		<LogicDescription/>
		<MethodReturns>Iterator&lt;Record&gt;</MethodReturns>
		<MethodInterface/>
		<MethodClassName>MergeData</MethodClassName>
		<LogicSource><![CDATA[// Override typically
return new RecordSource(this.getMergeRecord());]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784712">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScanData</MethodClassName>
		<LogicSource><![CDATA[Record record = this.getMainRecord();

try {
    while (record.hasNext())
    {
        record.next();
        
        record.edit();
        this.fixRecord(record);
        record.set();
    }
} catch (DBException e) {
    e.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784713">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>fixRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>ScanData</MethodClassName>
		<LogicSource>// Override this to fix data</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784727">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>BaseSource</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Reader reader, Record record</MethodInterface>
		<MethodClassName>BaseSource</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784728">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Reader reader, Record record</MethodInterface>
		<MethodClassName>BaseSource</MethodClassName>
		<LogicSource><![CDATA[m_reader = reader;
m_record = record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784729">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>hasNext</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseSource</MethodClassName>
		<LogicSource><![CDATA[try {
    if (!this.parseNextLine())
    {
        try {
            m_record.addNew();
        } catch (DBException e) {
            e.printStackTrace();
        }
        m_record.close();
        m_reader.close();
        return false;
    }
} catch (IOException e) {
    e.printStackTrace();
}

return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784730">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>parseNextLine</MethodName>
		<LogicDescription>Parse the next line and return false at EOF.</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseSource</MethodClassName>
		<LogicSource>return false;   // EOF // Override this</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784731">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>next</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseSource</MethodClassName>
		<LogicSource>return this.moveDataToRecord();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784732">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>moveDataToRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseSource</MethodClassName>
		<LogicSource><![CDATA[return null;	// Override this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784733">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>remove</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseSource</MethodClassName>
		<LogicSource>// Not used</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784735">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>parseNextLine</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HtmlSource</MethodClassName>
		<LogicSource><![CDATA[if (firstTime)
{
    firstTime = false;
    
 // Obtain an instance of an XMLReader implementation from a system property
    try {
        XMLReader parser = org.xml.sax.helpers.XMLReaderFactory.createXMLReader();
    
        // Set the ContentHandler...
        parser.setContentHandler( m_handler );

           // Parse the file...
        parser.parse( new InputSource( m_reader ));

    } catch (IOException e) {
        e.printStackTrace();
    } catch (SAXException e) {
        e.printStackTrace();
    }
    
    m_record.close();
}
try {
    return m_record.hasNext();
} catch (DBException e) {
    e.printStackTrace();
}
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784736">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>moveDataToRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HtmlSource</MethodClassName>
		<LogicSource><![CDATA[try {
    return m_record.next();
} catch (DBException e) {
    e.printStackTrace();
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784737">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getSource</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeHtml</MethodClassName>
		<LogicSource><![CDATA[String strURL = this.getProperty("source");
if (strURL == null)
    return null;

Reader reader = null;
try {
    URL url = new URL(strURL);
    InputStream inputStream = url.openStream();
    InputStreamReader inStream = new InputStreamReader(inputStream);
    reader = inStream;
} catch (FileNotFoundException e) {
    e.printStackTrace();
} catch (UnsupportedEncodingException e) {
    e.printStackTrace();
} catch (MalformedURLException e) {
    e.printStackTrace();
} catch (IOException e) {
    e.printStackTrace();
}

Record record = this.getMergeRecord();
SaxHtmlHandler handler = this.getSaxHandler(record);
return new HtmlSource(reader, record, handler);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784738">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>250</Sequence>
		<MethodName>getMergeRecord</MethodName>
		<LogicDescription>Get the record to fill with the merge data</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>MergeData</MethodClassName>
		<LogicSource><![CDATA[if (m_recMerge == null)
    m_recMerge = this.openMergeRecord();
return m_recMerge;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784739">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,600</Sequence>
		<MethodName>doCopyDataCommand</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Script recScript, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource><![CDATA[String strURL = (String)properties.get(Script.SOURCE);
String strDest = (String)properties.get(Script.DESTINATION);
if ((strURL != null) && (strDest != null))
    Utility.transferURLStream(strURL, strDest);
return DBConstants.NORMAL_RETURN;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784741">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>HtmlSource</MethodName>
		<LogicDescription/>
		<MethodReturns>reader, record</MethodReturns>
		<MethodInterface>Reader reader, Record record, SaxHtmlHandler handler</MethodInterface>
		<MethodClassName>HtmlSource</MethodClassName>
		<LogicSource>m_handler = handler;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784742">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>openMergeRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MergeHtml</MethodClassName>
		<LogicSource><![CDATA[Record record = super;
if (record == null)
    record = new EmptyMemoryRecord(this); // Usually
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784743">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getSaxHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>SaxHtmlHandler</MethodReturns>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>MergeHtml</MethodClassName>
		<LogicSource>return new SaxHtmlHandler(record);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784744">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SaxHtmlHandler</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>SaxHtmlHandler</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784745">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>SaxHtmlHandler</MethodClassName>
		<LogicSource>m_record = record;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784746">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>startDocument</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String namespaceURI, String localName, String qName, Attributes attr</MethodInterface>
		<MethodClassName>SaxHtmlHandler</MethodClassName>
		<LogicSource><![CDATA[startTable = false;
col = 0;
row = 0;]]></LogicSource>
		<LogicThrows>SAXException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784747">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>endDocument</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String namespaceURI, String localName, String qName</MethodInterface>
		<MethodClassName>SaxHtmlHandler</MethodClassName>
		<LogicSource>// No code</LogicSource>
		<LogicThrows>SAXException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784748">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>startElement</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String namespaceURI, String localName, String qName, Attributes attr</MethodInterface>
		<MethodClassName>SaxHtmlHandler</MethodClassName>
		<LogicSource><![CDATA[if (localName.equalsIgnoreCase(TABLE))
{
    String strClass = attr.getValue("", "class");
    if (strClass != null)
        if (strClass.equalsIgnoreCase("table-in"))  // NO NO NO
        {
            startTable = true;
            row = -1;
        }
}
else if (startTable)
{
    if (localName.equalsIgnoreCase(TR))
    {
        row++;
        col = -1;
    }
    else if (localName.equalsIgnoreCase(TD))
    {
        col++;
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784749">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>endElement</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String namespaceURI, String localName, String qName</MethodInterface>
		<MethodClassName>SaxHtmlHandler</MethodClassName>
		<LogicSource><![CDATA[if (localName.equalsIgnoreCase(TABLE))
{
    if (startTable)
        if (m_record.getEditMode() == DBConstants.EDIT_ADD)
        {
            try {
                m_record.add();
            } catch (DBException e) {
                e.printStackTrace();
            }
        }
    startTable = false;
}]]></LogicSource>
		<LogicThrows>SAXException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784750">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>characters</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>char[] ch, int start, int length</MethodInterface>
		<MethodClassName>SaxHtmlHandler</MethodClassName>
		<LogicSource><![CDATA[if (startTable)
{
    try {
        String string = new String(ch, start, length);
        for (int i = string.length() - 1; i >= 0; i--)
        {   // Trim trailing spaces
            int x = Character.getNumericValue(string.charAt(i));
            if ((Character.isWhitespace(string.charAt(i))) || (x == -1))
                string = string.substring(0, string.length() - 1);
            else
                break;
        }
        if (row == 0)
        {
            new StringField(m_record, string, -1, string, null);
        }
        else
        {
            if (col == 0)
            {
                if (m_record.getEditMode() == DBConstants.EDIT_ADD)
                    m_record.add();
                m_record.addNew();
            }
            m_record.getField(col + 1).setString(string);
        }
    } catch (DBException e) {
        e.printStackTrace();
    }
}]]></LogicSource>
		<LogicThrows>SAXException</LogicThrows>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784761">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseFixData</MethodClassName>
		<LogicSource><![CDATA[if (this.getProperty("recordClass") != null)
{
        String strClassName = this.getProperty("recordClass");
        if (strClassName != null)
            return Record.makeRecordFromClassName(strClassName, this);
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784762">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fixRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FixCapitalization</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getProperty("field") != null)
{
    BaseField field = this.getMainRecord().getField(this.getProperty("field").toString());
    if (field != null)
        this.fixCapitalization(field);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784766">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>RecordSource</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>RecordSource</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784767">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>hasNext</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>RecordSource</MethodClassName>
		<LogicSource><![CDATA[try {
    return m_record.hasNext();
} catch (DBException ex) {
    ex.printStackTrace();
    return false;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784768">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>next</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>RecordSource</MethodClassName>
		<LogicSource><![CDATA[try {
    return m_record.next();
} catch (DBException ex) {
    ex.printStackTrace();
    return null;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784769">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>remove</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RecordSource</MethodClassName>
		<LogicSource>// Not used</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784770">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>RecordSource</MethodClassName>
		<LogicSource>m_record = record;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784771">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>275</Sequence>
		<MethodName>openMergeRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>MergeData</MethodClassName>
		<LogicSource><![CDATA[String strClassName = this.getProperty("mergeRecordClass");
if (strClassName != null)
    return Record.makeRecordFromClassName(strClassName, this);
return null;    // Or override this]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784825">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>SetupExcludePackagesHandler</MethodName>
		<LogicDescription/>
		<MethodReturns>null</MethodReturns>
		<MethodInterface>BaseField fldExcludePackages</MethodInterface>
		<MethodClassName>SetupExcludePackagesHandler</MethodClassName>
		<LogicSource>m_fldExcludePackages = (XmlField)fldExcludePackages;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784826">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetupExcludePackagesHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recPackagesTree != null)
    m_recPackagesTree.free();
m_recPackagesTree = null;
if (m_recPackagesExclude != null)
    m_recPackagesExclude.free();
m_recPackagesExclude = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784827">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetupExcludePackagesHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recPackagesExclude == null)
{
    RecordOwner recordOwner = Utility.getRecordOwner(this.getOwner());
    m_recPackagesExclude = new Packages(recordOwner);
    if (recordOwner != null)
        recordOwner.removeRecord(m_recPackagesExclude);
}

StringBuffer sb = new StringBuffer();
sb.append("<excludes>\n");
this.scanTreeForExcludes(sb, this.getOwner().getField(Packages.kID).toString());
sb.append("</excludes>");

m_fldExcludePackages.setString(sb.toString());
    
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784828">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>scanTreeForExcludes</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>StringBuffer sb, String strParentFolderID</MethodInterface>
		<MethodClassName>SetupExcludePackagesHandler</MethodClassName>
		<LogicSource><![CDATA[m_recPackagesExclude.setKeyArea(Packages.kParentFolderIDKey);
StringSubFileFilter listener = null;
m_recPackagesExclude.addListener(listener = new StringSubFileFilter(strParentFolderID, Packages.kParentFolderID, null, -1, null, -1));
try {
    java.util.List<String> list = new ArrayList<String>();
    m_recPackagesExclude.close();
    while (m_recPackagesExclude.hasNext())
    {
        m_recPackagesExclude.next();
        if (m_recPackagesExclude.getField(Packages.kExclude).getState() == true)
            sb.append("<exclude>" + this.getTree(m_recPackagesExclude) + "</exclude>\n");
        list.add(m_recPackagesExclude.getField(Packages.kID).toString());
    }
    m_recPackagesExclude.removeListener(listener, true);
    listener = null;
    for (String strFolderID : list)
    {
        this.scanTreeForExcludes(sb, strFolderID);
    }
} catch (DBException ex) {
    ex.printStackTrace();
    if (listener != null)
        m_recPackagesExclude.removeListener(listener, true);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784829">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getTree</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Record recPackages</MethodInterface>
		<MethodClassName>SetupExcludePackagesHandler</MethodClassName>
		<LogicSource><![CDATA[try {
    if (m_recPackagesTree == null)
    {
        RecordOwner recordOwner = Utility.getRecordOwner(this.getOwner());
        m_recPackagesTree = new Packages(recordOwner);
        if (recordOwner != null)
            recordOwner.removeRecord(m_recPackagesTree);
    }
    String strPackagesTree = recPackages.getField(Packages.kName).toString();
    m_recPackagesTree.addNew();
    m_recPackagesTree.getField(Packages.kID).moveFieldToThis(recPackages.getField(Packages.kParentFolderID));
    while ((m_recPackagesTree.getField(Packages.kID).getValue() > 0) && (m_recPackagesTree.seek(null)))
    {
        strPackagesTree = m_recPackagesTree.getField(Packages.kName).toString() + '.' + strPackagesTree;
        m_recPackagesTree.getField(Packages.kID).moveFieldToThis(m_recPackagesTree.getField(Packages.kParentFolderID));
    }
    return strPackagesTree;
    
} catch (DBException ex) {
    ex.printStackTrace();
    return null;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784843">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>getDatabaseType</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>Record</MethodClassName>
		<LogicSource><![CDATA[Get the database type.
Always override this method.
@return The database type (LOCAL/REMOTE/SCREEN/etc)]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784853">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>910</Sequence>
		<MethodName>doMergeData</MethodName>
		<LogicDescription><![CDATA[Merge my changed data back into field that I just restored from disk.
@param objData The value this field held before I refreshed from disk.
@return The setData error code.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>Object objData</MethodInterface>
		<MethodClassName>BaseField</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784854">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassProjectField</MethodClassName>
		<LogicSource>return new ClassProject(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784855">
		<LastChanged>2009-02-26T01:52:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>makeRecordFromRecordName</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>String strRecordName, RecordOwner recordOwner</MethodInterface>
		<MethodClassName>ContactType</MethodClassName>
		<LogicSource><![CDATA[int iOldKeyArea = this.getDefaultOrder();
try {
    this.addNew();
    this.setKeyArea(ContactType.kCodeKey);
    this.getField(ContactType.kCode).setString(strRecordName);
    if (this.seek(DBConstants.EQUALS))
        return this.makeContactRecord(recordOwner);
} catch (DBException ex) {
    this.setKeyArea(iOldKeyArea);
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784856">
		<LastChanged>2010-03-17T10:11:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>makeContactRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>RecordOwner recordOwner</MethodInterface>
		<MethodClassName>ContactType</MethodClassName>
		<LogicSource><![CDATA[String strRecordClass = this.getField(ContactType.kRecordClass).toString();
return Record.makeRecordFromClassName(strRecordClass, recordOwner, true, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784857">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupDefaultView</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseStatusSelect</MethodClassName>
		<LogicSource>return this.setupPopupView(itsLocation, targetScreen, converter, iDisplayFieldDesc, true);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784865">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>BaseMessageHeader messageHeader, Object data</MethodInterface>
		<MethodClassName>BaseMessage</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784871">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getDatabaseName</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>DatabaseInfo</MethodClassName>
		<LogicSource>return m_strDatabaseName;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784873">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>setDatabaseName</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strDatabaseName</MethodInterface>
		<MethodClassName>DatabaseInfo</MethodClassName>
		<LogicSource>m_strDatabaseName = strDatabaseName;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784875">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DatabaseInfoScreen</MethodClassName>
		<LogicSource><![CDATA[DatabaseInfo record = new DatabaseInfo();
record.setDatabaseName("main");
record.init(this);
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784876">
		<LastChanged>2010-02-12T10:41:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DatabaseInfoScreen</MethodClassName>
		<LogicSource><![CDATA[this.getMainRecord().getField(DatabaseInfo.kName).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(DatabaseInfo.kDescription).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(DatabaseInfo.kVersion).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(DatabaseInfo.kStartID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(DatabaseInfo.kEndID).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
this.getMainRecord().getField(DatabaseInfo.kBaseDatabase).setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784877">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DatabaseInfoScreen</MethodClassName>
		<LogicSource><![CDATA[super;

DatabaseInfo record = (DatabaseInfo)this.getMainRecord();
record.removeListener(record.getListener(ControlFileHandler.class), true);
record.getField(DatabaseInfo.kName).addListener(new DatabaseInfoNameHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784878">
		<LastChanged>2009-11-18T23:30:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DatabaseInfoNameHandler</MethodClassName>
		<LogicSource><![CDATA[if (iMoveMode == DBConstants.SCREEN_MOVE)
{
    String strName = this.getOwner().toString();
    int iType = 0;
    iType = DBConstants.REMOTE | DBConstants.SHARED_DATA;
    DatabaseInfo record = (DatabaseInfo)this.getOwner().getRecord();
    if (strName.length() == 0)
    {
        
    }
    else
    {
        record.close();
        BaseTable table = record.getTable();
        record.setTable(null);
        table.setRecord(null);
        table.free();
        record.setDatabaseName(strName);
        if (iType != 0)
        	record.setDatabaseType(iType);
        try {
            record.open();
            record.setKeyArea(DatabaseInfo.kIDKey);
            record.getField(DatabaseInfo.kID).setValue(1);
            if (!record.seek(DBConstants.EQUALS))
            {
                record.addNew();
                this.getOwner().setString(strName);
            }
        } catch (DBException e) {
            e.printStackTrace();
        }
    }
    
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784879">
		<LastChanged>2009-02-12T14:49:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DatabaseInfo</MethodClassName>
		<LogicSource><![CDATA[// Don't auto-init local fields
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784880">
		<LastChanged>2009-04-03T12:46:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>HelpPageField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
{"", "(Default)"}, 
{MenuConstants.HELP_PANE, "Side pane"},
{MenuConstants.HELP_WEB, "Web page"},
{MenuConstants.HELP_WINDOW, "Java window"},
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784881">
		<LastChanged>2009-10-10T17:35:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>550</Sequence>
		<MethodName>moveThisFile*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>LineNumberReader reader, File fileDestDir, String strDestName</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource><![CDATA[try {
    File fileDest = new File(fileDestDir, strDestName);
    fileDest.createNewFile();
    FileOutputStream fileOut = new FileOutputStream(fileDest);
    m_writer = new PrintWriter(fileOut);

    this.moveSourceToDest(reader, m_writer);
            
    m_writer.close();
    fileOut.close();
        
} catch (FileNotFoundException ex)  {
    ex.printStackTrace();
} catch (IOException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784882">
		<LastChanged>2009-10-10T17:32:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>RecordOwnerParent parent, String strSourcePrefix</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource><![CDATA[m_parent = parent;
m_strSourcePrefix = strSourcePrefix;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784883">
		<LastChanged>2009-10-10T17:39:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>getProperty</MethodName>
		<LogicDescription><![CDATA[Get this property (from my parent ConvertCode class).
@param strProperty the property key
@return The value]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strProperty</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource>return m_parent.getProperty(strProperty);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784884">
		<LastChanged>2009-05-15T03:22:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>isWaiting</MethodName>
		<LogicDescription>Is this status waiting for an event to occur?</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>int iStatusID</MethodInterface>
		<MethodClassName>BaseStatus</MethodClassName>
		<LogicSource><![CDATA[switch (iStatusID)
{
    case REQUEST_SENT:
    case DATA_REQUIRED:
        return true;
    case NULL_STATUS:
    case NO_STATUS:
    case PROPOSAL:
    case ACCEPTED:
    case CANCELED:
    case OKAY:
    case NOT_USED:
    case ERROR:
    case MANUAL_REQUEST_REQUIRED:
    case MANUAL_REQUEST_SENT:
    case NOT_VALID:
    case DATA_VALID:
    default:
        return false;        
}]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784885">
		<LastChanged>2009-05-23T03:33:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseStatusField</MethodClassName>
		<LogicSource><![CDATA[return new BaseStatus(recordOwner);	// Note: Even though this is a abstract field, sometimes I need a concrete record]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784886">
		<LastChanged>2009-06-05T12:51:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserContactHandler</MethodClassName>
		<LogicSource><![CDATA[super;
this.setRespondsToMode(DBConstants.INIT_MOVE, false);
this.setRespondsToMode(DBConstants.READ_MOVE, false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784887">
		<LastChanged>2009-06-05T13:33:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>fieldChanged</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserContactHandler</MethodClassName>
		<LogicSource><![CDATA[UserField field = (UserField)this.getOwner();
Person recPerson = (Person)field.getRecord();
if (field.isNull())
{
    
}
else
{
    ContactType recContactType = this.getContactType(recPerson);
    if (recContactType != null)
    {   // Always
        UserInfo recUserInfo = (UserInfo)field.getReference();
        if (recUserInfo != null)
            if ((recUserInfo.getEditMode() == DBConstants.EDIT_CURRENT) || (recUserInfo.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
            {
                recUserInfo.addPropertyListeners();
                int iOldOpenMode = recUserInfo.setOpenMode(recUserInfo.getOpenMode() & ~DBConstants.OPEN_READ_ONLY);
                try {
                    recUserInfo.edit();
                    recUserInfo.getField(UserInfo.kContactTypeID).moveFieldToThis(recContactType.getCounterField());
                    recUserInfo.getField(UserInfo.kContactID).moveFieldToThis(recPerson.getCounterField());
                    recUserInfo.set();
                } catch (DBException ex) {
                    ex.printStackTrace();
                } finally {
                    recUserInfo.setOpenMode(iOldOpenMode);
                }
            }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784888">
		<LastChanged>2009-06-05T12:58:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getContactType</MethodName>
		<LogicDescription/>
		<MethodReturns>ContactType</MethodReturns>
		<MethodInterface>Person recPerson</MethodInterface>
		<MethodClassName>UserContactHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recContactType == null)
{
    m_recContactType = new ContactType(Utility.getRecordOwner(this.getOwner().getRecord()));
    if (m_recContactType.getRecordOwner() != null)
        m_recContactType.getRecordOwner().removeRecord(m_recContactType);
}
return m_recContactType.getContactType(recPerson);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784889">
		<LastChanged>2009-06-05T12:52:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserContactHandler</MethodClassName>
		<LogicSource><![CDATA[if (m_recContactType != null)
    m_recContactType.free();
m_recContactType = null;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784890">
		<LastChanged>2009-06-07T14:58:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getHiddenParams</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserLoginScreen</MethodClassName>
		<LogicSource><![CDATA[Map<String, Object> mapParams = super;
if (this.getTask() instanceof ServletTask)
    mapParams = ((ServletTask)this.getTask()).getRequestProperties(((ServletTask)this.getTask()).getServletRequest(), false);
mapParams.remove(DBParams.USER_NAME);
mapParams.remove(DBParams.USER_ID);
return mapParams;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784891">
		<LastChanged>2009-06-07T15:00:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>950</Sequence>
		<MethodName>getHiddenParams</MethodName>
		<LogicDescription><![CDATA[Get this screen's hidden params.
@return This screens hidden params.
]]></LogicDescription>
		<MethodReturns>Map&lt;String, Object&gt;</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource><![CDATA[Map<String, Object> mapParams = new Hashtable<String, Object>();
return mapParams;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784892">
		<LastChanged>2010-02-18T06:24:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MessageTransport</MethodClassName>
		<LogicSource><![CDATA[super;
        
((PasswordPropertiesField)this.getField(kProperties)).addPasswordProperty(org.jbundle.base.message.trx.transport.email.MessageReceivingPopClientProcess.POP3_PASSWORD);
((PasswordPropertiesField)this.getField(kProperties)).addPasswordProperty(org.jbundle.base.message.trx.transport.email.EmailMessageTransport.SMTP_PASSWORD);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784893">
		<LastChanged>2009-07-04T03:39:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>getSFieldCount</MethodName>
		<LogicDescription><![CDATA[Number of Screen Fields in this screen.
@return screen field count.]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BasePanel</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784894">
		<LastChanged>2009-11-26T20:49:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>free</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource><![CDATA[if (m_recordOwnerCollection != null)
	m_recordOwnerCollection.free();
m_recordOwnerCollection = null;
// Need to add code here]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784895">
		<LastChanged>2009-10-10T17:33:56</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>450</Sequence>
		<MethodName>setSourceFile</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>File fileSource</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource>m_fileSource = fileSource;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784896">
		<LastChanged>2009-10-10T17:37:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>575</Sequence>
		<MethodName>setPrintWriter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>PrintWriter writer</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource>m_writer = writer;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784897">
		<LastChanged>2009-10-10T17:38:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>585</Sequence>
		<MethodName>moveSourceToDest</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>LineNumberReader reader, PrintWriter dataOut</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource><![CDATA[try {
    String string;
    while ((string = reader.readLine()) != null)
    {
        string = this.convertString(string);
        if (string != null)
        {
            dataOut.write(string);
            dataOut.println();
        }
    }
} catch (FileNotFoundException ex)  {
    ex.printStackTrace();
} catch (IOException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784898">
		<LastChanged>2009-10-10T17:39:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getProperties</MethodName>
		<LogicDescription/>
		<MethodReturns>Map&lt;String, Object&gt;</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource>return m_parent.getProperties();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784899">
		<LastChanged>2009-10-10T17:40:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>retrieveUserProperties</MethodName>
		<LogicDescription/>
		<MethodReturns>PropertyOwner</MethodReturns>
		<MethodInterface>String strRegistrationKey</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource>return m_parent.retrieveUserProperties(strRegistrationKey);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784900">
		<LastChanged>2009-10-10T17:40:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>setProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Map&lt;String, Object&gt; properties</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource>m_parent.setProperties(properties);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784901">
		<LastChanged>2009-10-10T17:40:52</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>setProperty</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strProperty, String strValue</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource>m_parent.setProperty(strProperty, strValue);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784902">
		<LastChanged>2009-10-10T17:41:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>getTask</MethodName>
		<LogicDescription/>
		<MethodReturns>Task</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource>return m_parent.getTask();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784903">
		<LastChanged>2009-10-13T15:22:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new ProgramControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784904">
		<LastChanged>2009-11-19T00:00:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getDatabaseType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DatabaseInfo</MethodClassName>
		<LogicSource><![CDATA[if (m_iDatabaseType == 0)
	return DBConstants.REMOTE | DBConstants.SHARED_DATA;
else
	return m_iDatabaseType;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784905">
		<LastChanged>2009-10-14T21:03:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>setDatabaseType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int iDatabaseType</MethodInterface>
		<MethodClassName>DatabaseInfo</MethodClassName>
		<LogicSource>m_iDatabaseType = iDatabaseType;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784906">
		<LastChanged>2009-10-16T14:33:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>moveSourceToDest</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>XslImportScanListener</MethodClassName>
		<LogicSource><![CDATA[m_bSkipTag = false;
m_bSkipTemplate = false;
m_setMatches = new HashSet<String>();
m_setNames = new HashSet<String>();
try {
	this.scanTemplates(reader);
    reader.close();

    FileInputStream fileIn = new FileInputStream(m_fileSource);
    InputStreamReader inStream = new InputStreamReader(fileIn);
    reader = new LineNumberReader(inStream);
    
} catch (FileNotFoundException ex)  {
    ex.printStackTrace();
} catch (IOException ex)    {
    ex.printStackTrace();
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784907">
		<LastChanged>2009-10-16T14:40:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>scanTemplates</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>LineNumberReader reader</MethodInterface>
		<MethodClassName>XslImportScanListener</MethodClassName>
		<LogicSource><![CDATA[try {
    String string;
    boolean bTemplate = false;
    while ((string = reader.readLine()) != null)
    {
    	if (string.indexOf("<xsl:template ") != -1)
    		bTemplate = true;
    	if (bTemplate)
    	{
    		int iStart = string.indexOf("match=\"") + 7;
    		int iEnd = string.indexOf('\"', iStart);
    		if (iStart != 6)
    			if (iEnd != -1)
    			{
    				String strMatch = string.substring(iStart, iEnd);
    				this.addMatch(strMatch, false);
    			}            		
    		iStart = string.indexOf("name=\"") + 6;
    		iEnd = string.indexOf('\"', iStart);
    		if (iStart != 5)
    			if (iEnd != -1)
    			{
    				String strName = string.substring(iStart, iEnd);
    				this.addName(strName, false);
    			}            		
    	}
    	if (string.indexOf(">") != -1)
    		bTemplate = false;
    }
} catch (FileNotFoundException ex)  {
    ex.printStackTrace();
} catch (IOException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784908">
		<LastChanged>2009-10-16T14:34:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addMatch</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strMatch, boolean bAddAll</MethodInterface>
		<MethodClassName>XslImportScanListener</MethodClassName>
		<LogicSource><![CDATA[m_setMatches.add(strMatch);
if (bAddAll)
	if (m_parent instanceof XslImportScanListener)
		((XslImportScanListener)m_parent).addMatch(strMatch, bAddAll);	// Make sure no one else adds it
System.out.println("match " + strMatch);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784909">
		<LastChanged>2009-10-16T14:34:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>addName</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strName, boolean bAddAll</MethodInterface>
		<MethodClassName>XslImportScanListener</MethodClassName>
		<LogicSource><![CDATA[m_setNames.add(strName);
if (bAddAll)
	if (m_parent instanceof XslImportScanListener)
		((XslImportScanListener)m_parent).addName(strName, bAddAll);	// Make sure no one else adds it
System.out.println("name " + strName);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784910">
		<LastChanged>2009-10-16T14:35:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>isMatch</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strMatch</MethodInterface>
		<MethodClassName>XslImportScanListener</MethodClassName>
		<LogicSource><![CDATA[if (m_setMatches.contains(strMatch))
	return true;
if (m_parent instanceof XslImportScanListener)
	return ((XslImportScanListener)m_parent).isMatch(strMatch);
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784911">
		<LastChanged>2009-10-16T14:35:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>isName</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String strName</MethodInterface>
		<MethodClassName>XslImportScanListener</MethodClassName>
		<LogicSource><![CDATA[if (m_setNames.contains(strName))
	return true;
if (m_parent instanceof XslImportScanListener)
	return ((XslImportScanListener)m_parent).isName(strName);
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784912">
		<LastChanged>2009-10-16T14:36:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>130</Sequence>
		<MethodName>convertString</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>XslImportScanListener</MethodClassName>
		<LogicSource><![CDATA[if (string.indexOf("<xsl:import") != -1)
{
	int iStart = string.indexOf("href=\"") + 6;
	int iEnd = string.indexOf('\"', iStart);
	if (iStart != 5)
		if (iEnd != -1)
		{
			String strFilename = string.substring(iStart, iEnd);
			
			m_writer.write("<!-- " + "Import inlined from: " + strFilename + " - Do not modify this generated file." + "-->");
			m_writer.println();

			this.writeImport(strFilename);
		}
	return null;
}
if (Boolean.FALSE.toString().equals(this.getProperty(ROOT_FILE)))
{
	if (string.indexOf("xsl:stylesheet") != -1)
		m_bSkipTag = true;
	if (string.indexOf("<?xml version=") != -1)
		m_bSkipTag = true;
//    		if (string.indexOf("<xsl:output method=") != -1)
//    			m_bSkipTag = true;
}
if (m_bSkipTag)
{
	if (string.indexOf('>') != -1)
		m_bSkipTag = false;
	return null;
}
if (string.indexOf("<xsl:template ") != -1)
{
	int iStart = string.indexOf("match=\"") + 7;
	int iEnd = string.indexOf('\"', iStart);
	if (iStart != 6)
		if (iEnd != -1)
		{
			String strMatch = string.substring(iStart, iEnd);
			if (m_parent instanceof XslImportScanListener)
				m_bSkipTemplate = ((XslImportScanListener)m_parent).isMatch(strMatch);
			if (!m_bSkipTemplate)
				if (m_parent instanceof XslImportScanListener)
					((XslImportScanListener)m_parent).addMatch(strMatch, true);	// Make sure no one else adds it
			if (m_bSkipTemplate)
				System.out.println("Skip match " + strMatch);

		}            		
	iStart = string.indexOf("name=\"") + 6;
	iEnd = string.indexOf('\"', iStart);
	if (iStart != 5)
		if (iEnd != -1)
		{
			String strName = string.substring(iStart, iEnd);
			if (m_parent instanceof XslImportScanListener)
				m_bSkipTemplate = ((XslImportScanListener)m_parent).isName(strName);
			if (!m_bSkipTemplate)
				if (m_parent instanceof XslImportScanListener)
					((XslImportScanListener)m_parent).addName(strName, true);	// Make sure no one else adds it
			if (m_bSkipTemplate)
				System.out.println("Skip name " + strName);
		}            		
}
if (m_bSkipTemplate)
{
	if (string.indexOf("</xsl:template>") != -1)
		m_bSkipTemplate = false;
	return null;
}
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784913">
		<LastChanged>2010-04-09T21:41:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>writeImport</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String strFilename</MethodInterface>
		<MethodClassName>XslImportScanListener</MethodClassName>
		<LogicSource><![CDATA[strFilename = this.getProperty(org.jbundle.app.program.manual.convert.ConvertCode.DIR_PREFIX) + this.getProperty(org.jbundle.app.program.manual.convert.ConvertCode.SOURCE_DIR) + '/' + strFilename;
System.out.println(strFilename);
try {
	File fileSource = new File(strFilename);
    FileInputStream fileIn = new FileInputStream(fileSource);
    InputStreamReader inStream = new InputStreamReader(fileIn);
    LineNumberReader reader = new LineNumberReader(inStream);

    PrintWriter dataOut = m_writer;

    XslImportScanListener listener = new XslImportScanListener(this, m_strSourcePrefix);
    listener.setPrintWriter(dataOut);
    listener.setSourceFile(fileSource);
    Map<String,Object> oldProperties = m_parent.getProperties();
    Map<String,Object> newProperties = new HashMap<String,Object>(oldProperties);
    m_parent.setProperties(newProperties);
    m_parent.setProperty(ROOT_FILE, Boolean.FALSE.toString());
    listener.moveSourceToDest(reader, dataOut);
    listener.free();
    m_parent.setProperties(oldProperties);
    
    reader.close();
    
} catch (FileNotFoundException ex)  {
    ex.printStackTrace();
} catch (IOException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784914">
		<LastChanged>2009-10-16T14:55:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>main</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String[] args</MethodInterface>
		<MethodClassName>XMLScanListener</MethodClassName>
		<LogicSource><![CDATA[if ((args == null) || (args.length < 1))
    System.exit(0);
String strDirIn = args[0];
String strDirOut = null;
if (args.length > 1)
    strDirOut = args[1];
else
    strDirOut = strDirIn;
String strConvert = null;
if (args.length > 2)
    strConvert = args[2];
Task taskParent = null;	// Fix this!
Map<String, Object> properties = new HashMap<String, Object>();
properties.put(ConvertCode.DEST_DIR, strDirOut);
properties.put(ConvertCode.SOURCE_DIR, strDirIn);
ConvertCode convert = new ConvertCode(taskParent, null, properties);
convert.setScanListener(new XMLScanListener(convert, strConvert));
convert.run();]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784915">
		<LastChanged>2009-10-16T15:05:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>XMLScanListener</MethodClassName>
		<LogicSource><![CDATA[super;

try {
    StreamSource streamTransformer = null;
    TransformerFactory tFact = TransformerFactory.newInstance();
    if (strSourcePrefix == null)
        strSourcePrefix = this.getProperty(ConvertCode.CONVERTER_PATH);
    if (strSourcePrefix != null)
        streamTransformer = this.getTransformerStream(strSourcePrefix);
    if (streamTransformer == null)
        streamTransformer = this.getTransformerStream();
    m_transformer = tFact.newTransformer(streamTransformer);
 
} catch (TransformerConfigurationException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784916">
		<LastChanged>2009-10-16T14:57:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>getTransformerStream</MethodName>
		<LogicDescription/>
		<MethodReturns>StreamSource</MethodReturns>
		<MethodInterface/>
		<MethodClassName>XMLScanListener</MethodClassName>
		<LogicSource><![CDATA[Reader reader = new StringReader(XSL_CONVERT);
StreamSource stylesource = new StreamSource(reader);
return stylesource;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784917">
		<LastChanged>2009-10-16T14:58:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>getTransformerStream*2</MethodName>
		<LogicDescription/>
		<MethodReturns>StreamSource</MethodReturns>
		<MethodInterface>String strDocument</MethodInterface>
		<MethodClassName>XMLScanListener</MethodClassName>
		<LogicSource><![CDATA[StreamSource source = null;
if (strDocument.indexOf(':') == -1)
{   // See if it is a file name
    try {   // First try it as a filename
        FileReader reader = new FileReader(strDocument);
        if (reader != null)
            source = new StreamSource(reader);
    } catch (IOException ex)    {
        source = null;
    }                    
}
if (source == null)
{
    try {
        URL url = new URL(strDocument);
        InputStream is = url.openStream();
        source = new StreamSource(is);
    } catch (IOException ex)    {
        source = null;
    }
}
return source;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784918">
		<LastChanged>2009-12-04T04:57:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>moveThisFile</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>XMLScanListener</MethodClassName>
		<LogicSource><![CDATA[try   {
    fileDestDir.mkdirs();
    FileInputStream fileIn = new FileInputStream(fileSource);
    InputStreamReader inStream = new InputStreamReader(fileIn);
    StreamSource source = new StreamSource(inStream);

    System.out.println(fileDestDir + " " + strDestName);
    File fileDest = new File(fileDestDir, strDestName);
    fileDest.createNewFile();
    FileOutputStream fileOut = new FileOutputStream(fileDest);
    PrintWriter dataOut = new PrintWriter(fileOut);
    StreamResult dest = new StreamResult(dataOut);

    m_transformer.transform(source, dest);
    
    dataOut.close();
    fileOut.close();

    inStream.close();
    fileIn.close();
} catch (TransformerException ex)  {
    ex.printStackTrace();
} catch (FileNotFoundException ex)  {
    ex.printStackTrace();
} catch (IOException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784919">
		<LastChanged>2009-10-17T01:15:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>filterDirectory</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarScanListener</MethodClassName>
		<LogicSource><![CDATA[boolean bProcessFile = super;
if (bProcessFile == false)
    return bProcessFile;
String strName = file.getName();
for (String strMonth : m_rgstrMonths)
{
    if (strName.equalsIgnoreCase(strMonth))
        return false;
}
if (Utility.isNumeric(strName))
{
    int iYear = Integer.parseInt(strName);
    if ((iYear > 1990) && (iYear < 2020))
        return false;
}
return bProcessFile;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784920">
		<LastChanged>2009-10-17T01:17:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>filterFile</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarScanListener</MethodClassName>
		<LogicSource><![CDATA[boolean bProcessFile = super;
if (bProcessFile == false)
    return bProcessFile;
if ((this.getProperty(ConvertCode.DEST_DIR) != null) && (!this.getProperty(ConvertCode.DEST_DIR).equalsIgnoreCase(this.getProperty(ConvertCode.SOURCE_DIR))))
    return bProcessFile;
String s = this.getNewCalendarPath(file);
return (s != null);   // Skip if no new path (Only if moving to the same directory)]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784921">
		<LastChanged>2009-12-04T04:57:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>moveThisFile</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarScanListener</MethodClassName>
		<LogicSource><![CDATA[fileDestDir.mkdirs();
String strNewDir = this.getNewCalendarPath(fileSource);
if (strNewDir != null)
{
    fileDestDir = new File(fileDestDir, strNewDir);
    fileDestDir.mkdirs();
}
File fileDest = new File(fileDestDir, strDestName);
if (fileSource.renameTo(fileDest))
	return;
if (true)
{
    System.out.println("Warning, system does not support move file");
    return;
}
super;
if (strNewDir == null)
    return;   // Moving to a different dir = move all.
fileSource.delete();    // Moving to the same dir (into the new directory) means delete to old file at the root]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784922">
		<LastChanged>2009-10-16T15:12:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>moveSourceToDest</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarScanListener</MethodClassName>
		<LogicSource>super;</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784923">
		<LastChanged>2009-10-16T23:32:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>85</Sequence>
		<MethodName>getNewCalendarPath</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>File file</MethodInterface>
		<MethodClassName>CalendarScanListener</MethodClassName>
		<LogicSource><![CDATA[StringTokenizer st = new StringTokenizer(file.getName());
int iPlace = 0, iMonth = 0, iYear = 0;
while (st.hasMoreTokens())
{
    String strToken = st.nextToken();
    if (strToken.length() > 2)
        break;  // Not a date
    if (!Utility.isNumeric(strToken))
        break;  // Not a date
    if (strToken.indexOf('.') != -1)
        break;
    int iNumber = Integer.parseInt(strToken);
    iPlace++;
    if (iPlace == 1)
    { // Month
        if ((iNumber < 1) || (iNumber > 12))
            break;  // Invalid month
        iMonth = iNumber;
    }
    else if (iPlace == 2)
    { // day
        if ((iNumber < 1) || (iNumber > 31))
            break;  // Invalid day
    }
    else if (iPlace == 3)
    { // Year
        if ((iNumber < 1) || (iNumber > 2020))
            break;  // Invalid year
        iYear = iNumber;
        if (iYear <= 20)
        	iYear = iYear + 2000;
        return Integer.toString(iYear) + '/' + m_rgstrMonths[iMonth - 1];
    }
}
return null;	// Not formatted correctly]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784924">
		<LastChanged>2009-10-17T00:39:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CalendarScanListener</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getProperty(ConvertCode.SOURCE_DIR) != null)
    if ((this.getProperty(ConvertCode.SOURCE_DIR) + "out").equalsIgnoreCase(this.getProperty(ConvertCode.DEST_DIR)))
        this.setProperty(ConvertCode.DEST_DIR, this.getProperty(ConvertCode.DEST_DIR).substring(0, this.getProperty(ConvertCode.DEST_DIR).length() - 3));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784925">
		<LastChanged>2009-11-15T21:12:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoGridScreen</MethodClassName>
		<LogicSource>return new ClassInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784926">
		<LastChanged>2009-11-15T21:12:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784927">
		<LastChanged>2010-06-24T23:48:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>getTableNames</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DatabaseInfo</MethodClassName>
		<LogicSource><![CDATA[if (m_tableName == null)
{
	String strDatabaseName = "";
	if (this.getDatabaseName() != null)
		if (!this.getDatabaseName().endsWith("_" + this.getDatabaseName()))
			strDatabaseName = "_" + this.getDatabaseName();
	return Record.formatTableNames(kDatabaseInfoFile, bAddQuotes) + strDatabaseName;
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784928">
		<LastChanged>2009-11-18T23:29:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getTableNames</MethodName>
		<LogicDescription><![CDATA[Get the name of this table.
Override this to supply the name of the table.
Note: This is almost always overidden (except for mapped files)
@param bAddQuotes if the table name contains spaces, add quotes.
@return The name of this table.]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>boolean bAddQuotes</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784929">
		<LastChanged>2009-11-26T20:48:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,700</Sequence>
		<MethodName>addRecordOwner</MethodName>
		<LogicDescription><![CDATA[Add this record owner to my list.
@param recordOwner The record owner to add]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>RecordOwnerParent recordOwner</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource><![CDATA[if (m_recordOwnerCollection == null)
    	m_recordOwnerCollection = new RecordOwnerCollection(this);
    return m_recordOwnerCollection.addRecordOwner(recordOwner);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784930">
		<LastChanged>2009-11-26T20:48:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,800</Sequence>
		<MethodName>removeRecordOwner</MethodName>
		<LogicDescription><![CDATA[Remove this record owner to my list.
@param recordOwner The record owner to remove.]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>RecordOwnerParent recordOwner</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource><![CDATA[if (m_recordOwnerCollection != null)
	return m_recordOwnerCollection.removeRecordOwner(recordOwner);
return false;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784934">
		<LastChanged>2010-06-04T21:46:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processThisRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ExportRecordsToXmlProcess</MethodClassName>
		<LogicSource><![CDATA[boolean bPhysicalName = true;
if (DBConstants.TRUE.equalsIgnoreCase(this.getProperty("useDatabaseName")))
    bPhysicalName = false;
String strFilename = record.getArchiveFilename(bPhysicalName);
if (this.getProperty(ConvertCode.DIR_PREFIX) != null)
    strFilename = Utility.addToPath(this.getProperty(ConvertCode.DIR_PREFIX), strFilename);

String strMode = this.getProperty("mode");
boolean bExport = true;
if (strMode != null) if (strMode.equalsIgnoreCase("import"))
    bExport = false;
if (bExport)
{
    if ((record.getOpenMode() & DBConstants.OPEN_DONT_CREATE) == DBConstants.OPEN_DONT_CREATE)
    {   // Make sure the record exists
        try {
            record.open();
            record.hasNext();
            record.close();
        } catch (DBException e) {
            return; // Record doesn't exist
        }
        if (this.getProperty("locale") != null)
        {
            if (!record.getTable().getDatabase().getDatabaseName(false).endsWith("_" + this.getProperty("locale").toString()))
                return;     // If locale is set, only do locale tables
        }
    }
}
else
{ // Import must have file.
    if (!(new File(strFilename).exists()))
        return;
        if (this.getProperty("locale") != null)
        {
            if (!record.getTable().getDatabase().getDatabaseName(false).endsWith("_" + this.getProperty("locale").toString()))
                return;     // If locale is set, only do locale tables
        }
}
if (record != null)
{
    XmlInOut xml = new XmlInOut(this, null, null);    //0 v
    boolean bSuccess = false;
    if (bExport)
        bSuccess = xml.exportXML(record, strFilename);
    else
        bSuccess = xml.importXML(record, strFilename, null);
    xml.free();
    if (!bSuccess)
    {
        // Ignore (for now)
    }
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784937">
		<LastChanged>2009-12-03T16:35:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ExportRecordsToXmlScreen</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> properties = null; // Properties are in the calling task.
ExportRecordsToXmlProcess process = new ExportRecordsToXmlProcess(this.getTask(), this.getMainRecord(), properties);
process.run();
process.free();
BasePanel panel = this.getRootScreen();
panel.free();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784938">
		<LastChanged>2009-12-03T16:33:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ExportRecordsToXmlScreen</MethodClassName>
		<LogicSource>return new FileHdr(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784940">
		<LastChanged>2011-05-10T22:52:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>main</MethodName>
		<LogicDescription>Standalone support (pass args: record=Rec package=pkg).</LogicDescription>
		<MethodReturns/>
		<MethodInterface>String[] args</MethodInterface>
		<MethodClassName>ExportRecordsToXmlProcess</MethodClassName>
		<LogicSource><![CDATA[Map<String,Object> properties = null;
if (args != null)
{
    properties = new Hashtable<String,Object>();
    Utility.parseArgs(properties, args);
}
Application app = new MainApplication(null, properties, null);
String strProcess = Utility.addURLParam(null, DBParams.PROCESS, ExportRecordsToXmlProcess.class.getName());
app.getTaskScheduler().addTask(new ProcessRunnerTask(app, strProcess, null));   //org.jbundle.personal.manual.ExportPictureRecord"));]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784941">
		<LastChanged>2009-12-03T17:33:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProcessRecords</MethodClassName>
		<LogicSource>return new FileHdr(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784942">
		<LastChanged>2010-02-11T11:51:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProcessRecords</MethodClassName>
		<LogicSource><![CDATA[super;
new ClassInfo(this);
new ClassProject(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784943">
		<LastChanged>2009-12-03T17:36:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>190</Sequence>
		<MethodName>disableAllListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>BaseProcessRecords</MethodClassName>
		<LogicSource><![CDATA[record.setEnableListeners(false);   // Disable all file behaviors
record.setEnableFieldListeners(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784945">
		<LastChanged>2009-12-03T18:00:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>moveThisFile</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DeleteScanListener</MethodClassName>
		<LogicSource>fileSource.delete();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784946">
		<LastChanged>2010-04-23T14:17:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription><![CDATA[ Run Method.
 Process the files (import/export)
 Params:
  - archiveFolder - Target dir
    or
  - sourcePrefix + sourceDir = Target dir
  Database mods (standard):
  - dbPrefix - User file prefix
  - dbSuffix - User file suffix
  - locale - Localization filter (language)
 Filters:
   - package - Package regex
   - type - File type (SHARED, USER, or null is ALL)
   - project - Project name regex or ID.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseProcessRecords</MethodClassName>
		<LogicSource><![CDATA[String packageName = this.getProperty("package");
ClassProject classProject = (ClassProject)this.getRecord(ClassProject.kClassProjectFile);
if (packageName != null) if (packageName.length() > 0)
{
    String projectID = this.getProperty("project");
    if (projectID != null) if (projectID.length() > 0)
    { // Usually
        classProject.getField(ClassProject.kID).setString(projectID);
        try {
            if (classProject.seek(DBConstants.EQUALS))
                packageName = classProject.getFullPackage(ClassProject.CodeType.BASE, packageName);
        } catch (DBException e) {
            e.printStackTrace();
        }
    }
}
// Note: I need to scan the classproject file now, because I will be turning on base table access in a second
try {
    classProjectPackages = new HashMap<String,String>();
    classProjectNames = new HashMap<String,String>();
    classProjectIDs = new HashMap<String,String>();
    classProject.close();
    while (classProject.hasNext())
    {
        classProject.next();
        String classPackageName = classProject.getFullPackage(ClassProject.CodeType.BASE, DBConstants.BLANK);
        classProjectPackages.put(classProject.getField(ClassProject.kID).toString(), classPackageName);
        classProjectNames.put(classProject.getField(ClassProject.kName).toString(), classProject.getField(ClassProject.kID).toString());
        classProjectIDs.put(classProject.getField(ClassProject.kID).toString(), classProject.getField(ClassProject.kName).toString());
    }
} catch (DBException e) {
    e.printStackTrace();
}

// String archivePrefix = this.getProperty(ConvertCode.DIR_PREFIX); // This is added automatically in getArchiveFilename
String archiveFolder = this.getProperty(DBConstants.ARCHIVE_FOLDER);
if (archiveFolder == null)
    archiveFolder = this.getProperty(ConvertCode.SOURCE_DIR);

String strPrefix = this.getProperty(DBConstants.DB_USER_PREFIX);
String strSuffix = this.getProperty(DBConstants.SUB_SYSTEM_LN_SUFFIX);
String strLocale = this.getProperty("locale");  // DBParams.LANGUAGE);  // Don't use language, must specify locale

Map<String,Object> appProperties = new HashMap<String,Object>();
appProperties.putAll(this.getTask().getApplication().getProperties());

if (archiveFolder != null)
    this.getTask().getApplication().setProperty(DBConstants.ARCHIVE_FOLDER, archiveFolder);
if (strPrefix != null)
    this.getTask().getApplication().setProperty(DBConstants.DB_USER_PREFIX, strPrefix);
if (strSuffix != null)
    this.getTask().getApplication().setProperty(DBConstants.SUB_SYSTEM_LN_SUFFIX, strSuffix);
if (strLocale != null)
    this.getTask().getApplication().setProperty(DBParams.LANGUAGE, strLocale);
for (String key : this.getProperties().keySet())
{
    if (key.endsWith(BaseDatabase.DBSHARED_PARAM_SUFFIX))
        this.getTask().getApplication().setProperty(key, this.getProperty(key));
    if (key.endsWith(BaseDatabase.DBUSER_PARAM_SUFFIX))
        this.getTask().getApplication().setProperty(key, this.getProperty(key));
}
// Base table access only
String oldBaseTableProperty = this.getTask().getApplication().getProperty(DBConstants.BASE_TABLE_ONLY);
this.getTask().getApplication().setProperty(DBConstants.BASE_TABLE_ONLY, DBConstants.TRUE);

String strRecord = this.getProperty(DBParams.RECORD);
if ((strRecord == null) || (strRecord.length() == 0))
    this.processAllRecords(packageName);
else
    this.processThisRecord(this.getThisRecord(strRecord, packageName, null));        // Import the data
// Restore properties
this.getTask().getApplication().setProperties(appProperties);
this.getTask().getApplication().setProperty(DBConstants.BASE_TABLE_ONLY, oldBaseTableProperty);   // Make sure system record owner property is reset also]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784947">
		<LastChanged>2009-12-04T03:34:20</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>processThisRecord</MethodName>
		<LogicDescription>Process this record</LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>BaseProcessRecords</MethodClassName>
		<LogicSource>// Override this!</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784948">
		<LastChanged>2010-04-23T14:18:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>processAllRecords</MethodName>
		<LogicDescription>Export/import/process the records in this record class.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>String strPackage</MethodInterface>
		<MethodClassName>BaseProcessRecords</MethodClassName>
		<LogicSource><![CDATA[Map<String,String> mapDatabaseList = new HashMap<String,String>();
FileHdr recFileHdr = (FileHdr)this.getMainRecord();
recFileHdr.setKeyArea(FileHdr.kFileNameKey);
recFileHdr.close();
try   {
    Record recClassInfo = this.getRecord(ClassInfo.kClassInfoFile);
    while (recFileHdr.hasNext())
    {
        recFileHdr.next();
        String strRecord = recFileHdr.getField(FileHdr.kFileName).toString();
        if ((strRecord == null) || (strRecord.length() == 0))
            continue;
        if (!recFileHdr.isPhysicalFile())
            continue;
        if (recFileHdr.getField(FileHdr.kDatabaseName).isNull())
            continue;

        recClassInfo.setKeyArea(ClassInfo.kClassNameKey);
        recClassInfo.getField(ClassInfo.kClassName).setString(strRecord);
        if (recClassInfo.seek(null))
        {                    
            String strClassPackage = this.getFullPackageName(recClassInfo.getField(ClassInfo.kClassProjectID).toString(), recClassInfo.getField(ClassInfo.kClassPackage).toString());
            if (this.includeRecord(recFileHdr, recClassInfo, strPackage))
                this.processThisRecord(this.getThisRecord(strRecord, strClassPackage, null));

            mapDatabaseList.put(recFileHdr.getField(FileHdr.kDatabaseName).toString(), strClassPackage);
        }
    }
    // Now export any control records
    recFileHdr.close();
    while (recFileHdr.hasNext())
    {
        recFileHdr.next();
        String strRecord = recFileHdr.getField(FileHdr.kFileName).toString();
        if ((strRecord == null) || (strRecord.length() == 0))
            continue;
        if (!recFileHdr.isPhysicalFile())
            continue;
        if (!recFileHdr.getField(FileHdr.kDatabaseName).isNull())
            continue;

        recClassInfo.setKeyArea(ClassInfo.kClassNameKey);
        recClassInfo.getField(ClassInfo.kClassName).setString(strRecord);
        if (recClassInfo.seek(null))
        {
            if (recClassInfo.getField(ClassInfo.kBaseClassName).toString().equalsIgnoreCase("QueryRecord"))
                continue;
            if (recClassInfo.getField(ClassInfo.kBaseClassName).toString().indexOf("Query") != -1)
                continue;
            String strClassPackage = this.getFullPackageName(recClassInfo.getField(ClassInfo.kClassProjectID).toString(), recClassInfo.getField(ClassInfo.kClassPackage).toString());
            if (strPackage != null)
                if (strClassPackage != null)
                    if (!strClassPackage.matches(strPackage))
                        continue;
            if (!"DatabaseInfo".equalsIgnoreCase(strRecord))
                continue;   // Hack
            strRecord = strClassPackage + "." + strRecord;
            for (String strDBName : mapDatabaseList.keySet())
            {
                String strClassPkg = mapDatabaseList.get(strDBName);
                if (strClassPkg != null)
                {
                    Record record = this.getThisRecord(strRecord, strClassPkg, strDBName);
                    if (record != null)
                        this.processThisRecord(record);
                }
            }
        }
    }
} catch (DBException ex)    {
    ex.printStackTrace();
}
return;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784949">
		<LastChanged>2010-10-19T14:07:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>getThisRecord</MethodName>
		<LogicDescription>Get this record</LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>String strRecord, String strPackage, String strDBName</MethodInterface>
		<MethodClassName>BaseProcessRecords</MethodClassName>
		<LogicSource><![CDATA[String strRecordClass = strRecord;
if (!strRecordClass.contains("."))
    strRecordClass = strPackage + '.' + strRecordClass;
Record record = Record.makeRecordFromClassName(strRecordClass, this, false, true);

String strMode = this.getProperty("mode");
boolean bExport = false;
if (strMode != null) if (strMode.equalsIgnoreCase("export"))
    bExport = true;

if (bExport)
    record.setOpenMode(record.getOpenMode() | DBConstants.OPEN_DONT_CREATE);

if (this.getProperty("locale") != null)
    if (this.getRecord(FileHdr.kFileHdrFile).getEditMode() == DBConstants.EDIT_CURRENT)
        strDBName = this.getRecord(FileHdr.kFileHdrFile).getField(FileHdr.kDatabaseName).toString() + '_' + this.getProperty("locale");
if (strDBName != null)
    if (strPackage != null)
        if (!strRecordClass.matches(strPackage))
            if (record instanceof DatabaseInfo) // Always
{
    ((DatabaseInfo)record).setDatabaseName(strDBName);
    record.setOpenMode(record.getOpenMode() | DBConstants.OPEN_DONT_CREATE);
}
record.init(this);

return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784951">
		<LastChanged>2009-12-04T03:40:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>processThisRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PurgeRecordsProcess</MethodClassName>
		<LogicSource><![CDATA[if (record != null)
{   // Delete all the records
    this.disableAllListeners(record);
    if ((record.getDatabaseType() & (DBConstants.BASE_TABLE_CLASS | DBConstants.SHARED_TABLE)) == (DBConstants.BASE_TABLE_CLASS | DBConstants.SHARED_TABLE))
        this.initSharedRecord(record);
    record.close();
    try {
		while (record.hasNext())
		{
		    record.next();
		    record.edit();
		    record.remove();
		}
	} catch (DBException e) {
		e.printStackTrace();
	}
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784952">
		<LastChanged>2009-12-09T19:59:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,400</Sequence>
		<MethodName>doRemoteCommand</MethodName>
		<LogicDescription><![CDATA[Do a remote command.
@param strCommand The command
@param properties The properties for the command
@return The return value or Boolean.FALSE if not handled.]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>String strCommand, Map&lt;String, Object&gt; properties</MethodInterface>
		<MethodClassName>Record</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784953">
		<LastChanged>2009-12-17T07:25:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UpdateRecordProcess</MethodClassName>
		<LogicSource><![CDATA[String strClassName = this.getProperty(DBParams.RECORD);
Record record = Record.makeRecordFromClassName(strClassName, this);
String strObjectID = this.getProperty(DBConstants.OBJECT_ID);

try {
	record.addNew();
	record.getCounterField().setString(strObjectID);
	if (record.seek(DBConstants.EQUALS))
	{
		String strField = this.getProperty(DBParams.FIELD);
		String strValue = this.getProperty(DBParams.VALUE);
		if ("[random]".equalsIgnoreCase(strValue))
			strValue = Double.toString(Math.random());
		BaseField field = record.getField(strField);
		if (field != null)
		{
			record.edit();
			field.setString(strValue);
			record.set();
		}
	}
} catch (DBException e) {
	e.printStackTrace();
}

record.free();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784954">
		<LastChanged>2009-12-17T07:26:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RemoteRecordProcess</MethodClassName>
		<LogicSource><![CDATA[String strClassName = this.getProperty(DBParams.RECORD);
Record record = Record.makeRecordFromClassName(strClassName, this);
String strCommand = this.getProperty(DBParams.COMMAND);
Map<String,Object> properties = new HashMap<String,Object>();

try {
	record.handleRemoteCommand(strCommand, properties);
} catch (RemoteException e) {
	e.printStackTrace();
} catch (DBException e) {
	e.printStackTrace();
}        
record.free();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784955">
		<LastChanged>2010-02-03T10:46:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassProjectScreen</MethodClassName>
		<LogicSource>return new ClassProject(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784956">
		<LastChanged>2010-02-03T10:46:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassProjectGridScreen</MethodClassName>
		<LogicSource>return new ClassProject(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784957">
		<LastChanged>2010-02-03T10:47:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassProjectGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784958">
		<LastChanged>2010-02-04T04:56:34</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassProjectGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, ClassProject.CLASS_DETAIL_SCREEN, MenuConstants.FORMDETAIL, ClassProject.CLASS_DETAIL_SCREEN, ClassProject.CLASS_DETAIL_SCREEN);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, ClassProject.RESOURCE_DETAIL_SCREEN, MenuConstants.FORMDETAIL, ClassProject.RESOURCE_DETAIL_SCREEN, ClassProject.RESOURCE_DETAIL_SCREEN);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784959">
		<LastChanged>2010-02-04T05:00:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addNavButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassProjectGridScreen</MethodClassName>
		<LogicSource><![CDATA[new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, ClassProject.CLASS_DETAIL_SCREEN, ClassProject.CLASS_DETAIL_SCREEN);
new SCannedBox(this.getNextLocation(ScreenConstants.FIRST_SCREEN_LOCATION, ScreenConstants.SET_ANCHOR), this, null, ScreenConstants.DEFAULT_DISPLAY, null, null, MenuConstants.FORMDETAIL, ClassProject.RESOURCE_DETAIL_SCREEN, ClassProject.RESOURCE_DETAIL_SCREEN);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784960">
		<LastChanged>2010-02-04T04:55:01</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>makeScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassProject</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = null;
if ((iDocMode & ClassProject.CLASS_DETAIL_MODE) == ClassProject.CLASS_DETAIL_MODE)
    screen = new ClassInfoGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ClassProject.RESOURCE_DETAIL_MODE) == ClassProject.RESOURCE_DETAIL_MODE)
    screen = new ResourceGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DETAIL_MODE) == ScreenConstants.DETAIL_MODE)
    screen = new ClassProjectGridScreen(this, null, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MAINT_MODE) == ScreenConstants.MAINT_MODE)
    screen = new ClassProjectScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.DISPLAY_MODE) != 0)
    screen = new ClassProjectGridScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else if ((iDocMode & ScreenConstants.MENU_MODE) != 0)
    screen = new ClassProjectScreen(this, itsLocation, parentScreen, null, iDocMode | ScreenConstants.DONT_DISPLAY_FIELD_DESC, properties);
else
    screen = super.makeScreen(itsLocation, parentScreen, iDocMode, properties);
return screen;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784961">
		<LastChanged>2010-02-03T11:06:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ClassProjectGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ClassProjectGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784962">
		<LastChanged>2010-02-03T11:13:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ClassInfoGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ClassInfoGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784963">
		<LastChanged>2010-02-03T11:15:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoGridScreen</MethodClassName>
		<LogicSource>return new ClassProject(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784964">
		<LastChanged>2010-02-03T11:47:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassProjectScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784965">
		<LastChanged>2010-02-16T03:40:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getFileName</MethodName>
		<LogicDescription><![CDATA[Get the path to this file name.
@param strFileName The filename to find (If blank, just get the path to the root package; If null, path to project source).
@param strPackage The relative package to this file name (If null, no package, if blank, default package path)
@param codeType The code type 
@param fullPath If true, full path; if false relative to top-level project
@return The path to this package]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strFileName, String strPackage, CodeType codeType, boolean fullPath, boolean sourcePath</MethodInterface>
		<MethodClassName>ClassProject</MethodClassName>
		<LogicSource><![CDATA[Record recProgramControl = this.getRecordOwner().getRecord(ProgramControl.kProgramControlFile);
if (recProgramControl == null)
    recProgramControl = new ProgramControl(Utility.getRecordOwner(this));

String packagePath = DBConstants.BLANK;
if (strPackage != null)
{
	strPackage = this.getFullPackage(codeType, strPackage);
	packagePath = strPackage.replace('.', '/') + "/";
}

String strFileRoot = DBConstants.BLANK;
if (fullPath)
{
    strFileRoot = recProgramControl.getField(ProgramControl.kBaseDirectory).toString();
    if (!strFileRoot.endsWith("/"))
        strFileRoot += "/";
}
String strSourcePath = null;
if (sourcePath)
    strSourcePath = recProgramControl.getField(ProgramControl.kSourceDirectory).toString();
else
    strSourcePath = recProgramControl.getField(ProgramControl.kClassDirectory).toString();
if ((this.getEditMode() == DBConstants.EDIT_CURRENT) || (this.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
{
    String strSrcPath = this.getPath(codeType, false);
    if (strSrcPath.length() > 0)
    {
        if (!strSrcPath.endsWith("/"))
            strSrcPath += "/";
        if (!strSrcPath.endsWith(strSourcePath))
            strSourcePath = strSrcPath + strSourcePath;
        else
            strSourcePath = strSrcPath;
    }
}

if (strFileName == null)
	strFileName = DBConstants.BLANK;
if (strFileName.length() > 0)
	if (strFileName.indexOf(".") == -1)
{
    if (codeType == CodeType.RESOURCE_PROPERTIES)
        strFileName = strFileName + ".properties";
    else
        strFileName = strFileName + ".java";
}
strFileName = strFileRoot + strSourcePath + packagePath + strFileName;
return strFileName;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784966">
		<LastChanged>2010-02-03T13:39:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassProjectHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784967">
		<LastChanged>2010-02-03T13:41:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoGridScreen</MethodClassName>
		<LogicSource>return new ClassProjectHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784968">
		<LastChanged>2010-02-04T04:53:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>commandToDocType</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassProject</MethodClassName>
		<LogicSource><![CDATA[if (CLASS_DETAIL_SCREEN.equalsIgnoreCase(strCommand))
    return CLASS_DETAIL_MODE;
if (RESOURCE_DETAIL_SCREEN.equalsIgnoreCase(strCommand))
    return RESOURCE_DETAIL_MODE;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784969">
		<LastChanged>2010-02-05T14:25:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getPath</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>CodeType codeType, boolean bPackagePath</MethodInterface>
		<MethodClassName>ClassProject</MethodClassName>
		<LogicSource><![CDATA[String strSrcPath = DBConstants.BLANK;
if (!bPackagePath)
	strSrcPath = this.getField(ClassProject.kName).toString();
String pathChar = bPackagePath ? "." : "/";
switch (codeType)
{
case BASE:
	if (!bPackagePath) if (!this.getField(ClassProject.kProjectPath).isNull())
        strSrcPath = this.getField(ClassProject.kProjectPath).toString();
    if (bPackagePath) if (!this.getField(ClassProject.kPackageName).isNull())
        strSrcPath = this.getField(ClassProject.kPackageName).toString();
    break;
case THIN:
	if (!bPackagePath) if (!this.getField(ClassProject.kThinProjectPath).isNull())
        strSrcPath = this.getField(ClassProject.kThinProjectPath).toString();
    if (bPackagePath) if (!this.getField(ClassProject.kThinPackage).isNull())
        strSrcPath = this.getField(ClassProject.kThinPackage).toString();
    break;
case RESOURCE_PROPERTIES:
case RESOURCE_CODE:
	if (!bPackagePath) if (!this.getField(ClassProject.kResProjectPath).isNull())
        strSrcPath = this.getField(ClassProject.kResProjectPath).toString();
    if (bPackagePath) if (!this.getField(ClassProject.kResourcePackage).isNull())
        strSrcPath = this.getField(ClassProject.kResourcePackage).toString();
    break;
}

if (strSrcPath == null)
    strSrcPath = DBConstants.BLANK;

if (this.getField(ClassProject.kParentFolderID).getValue() != 0)
{ // Continue up the chain
    ClassProject classProject = (ClassProject)((ReferenceField)this.getField(ClassProject.kParentFolderID)).getReference();
    if (classProject != null)
        if ((classProject.getEditMode() == DBConstants.EDIT_CURRENT) || (classProject.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
    {
        String basePath = classProject.getPath(codeType, bPackagePath);
        if (basePath != null) if (basePath.length() > 0)
        {
            if (".".equals(pathChar))
                if ((strSrcPath.length() > 0) && (!strSrcPath.startsWith(".")))
                    basePath = DBConstants.BLANK; // The src path is not relative, start at the root
            if ((basePath.endsWith(pathChar)) || (basePath.length() == 0))
                pathChar = DBConstants.BLANK;
            if (pathChar.length() > 0)
            {
                if (strSrcPath.startsWith(pathChar))
                    strSrcPath = strSrcPath.substring(1);
                if (basePath.endsWith(pathChar))
                    basePath = basePath.substring(0, basePath.length() - 1);
            }
            if ((strSrcPath.length() == 0) || (basePath.length() == 0))
            	pathChar = DBConstants.BLANK;
            strSrcPath = basePath + pathChar + strSrcPath;
        }
    }
}
return strSrcPath;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784970">
		<LastChanged>2010-02-03T15:12:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoGridScreen</MethodClassName>
		<LogicSource>return new ClassInfoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784971">
		<LastChanged>2010-02-03T15:24:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

    // Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(ClassInfoScreenRecord.kClassProjectID)).syncReference(this.getHeaderRecord());
this.getScreenRecord().getField(ClassInfoScreenRecord.kClassProjectID).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new ExtractRangeFilter(ClassInfo.kClassName, this.getScreenRecord().getField(ClassInfoScreenRecord.kName)));
this.getScreenRecord().getField(ClassInfoScreenRecord.kName).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new ExtractRangeFilter(ClassInfo.kClassPackage, this.getScreenRecord().getField(ClassInfoScreenRecord.kPackage)));
this.getScreenRecord().getField(ClassInfoScreenRecord.kPackage).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784972">
		<LastChanged>2010-02-03T15:14:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoGridScreen</MethodClassName>
		<LogicSource>return this.getRecord(ClassProject.kClassProjectFile);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784973">
		<LastChanged>2010-02-03T15:14:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassInfoGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784974">
		<LastChanged>2010-02-03T15:28:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassProjectHeaderScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.setEnabled(true);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784975">
		<LastChanged>2010-02-11T11:56:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>getFullPackage</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>CodeType codeType, String packageName</MethodInterface>
		<MethodClassName>ClassProject</MethodClassName>
		<LogicSource><![CDATA[if (packageName == null)
    packageName = DBConstants.BLANK;
if (packageName.length() > 0)
    if (!packageName.startsWith("."))
        return packageName;

Record programControl = null;
if (this.getRecordOwner() != null)
    programControl = this.getRecordOwner().getRecord(ProgramControl.kProgramControlFile);
Record programControlTemp = null;
if (programControl == null)
    programControl = programControlTemp = new ProgramControl(Utility.getRecordOwner(this));

String startPackage = DBConstants.ROOT_PACKAGE.substring(0, DBConstants.ROOT_PACKAGE.length() - 1);
if (codeType == CodeType.BASE)
	if (!programControl.getField(ProgramControl.kPackageName).isNull())
{
	if (programControl.getField(ProgramControl.kThinPackage).toString().startsWith("."))
		startPackage = startPackage + programControl.getField(ProgramControl.kPackageName).toString();
	else
		startPackage = programControl.getField(ProgramControl.kPackageName).toString();
}
if (codeType == CodeType.THIN)
{
	if (!programControl.getField(ProgramControl.kThinPackage).isNull())
	{
		if (programControl.getField(ProgramControl.kThinPackage).toString().startsWith("."))
			startPackage = startPackage + programControl.getField(ProgramControl.kThinPackage).toString();
		else
			startPackage = programControl.getField(ProgramControl.kThinPackage).toString();
	}
	else
		startPackage = startPackage + ".thin";
}
if ((codeType == CodeType.RESOURCE_CODE) || (codeType == CodeType.RESOURCE_PROPERTIES))
{
	if (!programControl.getField(ProgramControl.kResourcePackage).isNull())
	{
		if (programControl.getField(ProgramControl.kResourcePackage).toString().startsWith("."))
			startPackage = startPackage + programControl.getField(ProgramControl.kResourcePackage).toString();
		else
			startPackage = programControl.getField(ProgramControl.kResourcePackage).toString();
	}
	else
		startPackage = startPackage + ".res";
}

String fullPackage = this.getPath(codeType, true);
if (fullPackage == null)
    fullPackage = DBConstants.BLANK;
if ((fullPackage.length() == 0) || (fullPackage.startsWith(".")))
    fullPackage = startPackage + fullPackage;
if (fullPackage.endsWith("."))
    fullPackage = fullPackage.substring(0, fullPackage.length() - 1);
if (packageName.startsWith("."))
    packageName = packageName.substring(1);

if (programControlTemp != null)
	programControlTemp.free();

if (fullPackage.length() == 0)
    return packageName;
else if (packageName.length() == 0)
    return fullPackage;
return fullPackage + '.' + packageName;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784976">
		<LastChanged>2010-02-04T03:50:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>ResourceGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>ResourceGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784977">
		<LastChanged>2010-02-04T03:51:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceGridScreen</MethodClassName>
		<LogicSource>return new ClassProject(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784978">
		<LastChanged>2010-02-04T03:51:25</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addScreenRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceGridScreen</MethodClassName>
		<LogicSource>return new ClassInfoScreenRecord(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784979">
		<LastChanged>2010-02-04T03:52:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceGridScreen</MethodClassName>
		<LogicSource>return this.getRecord(ClassProject.kClassProjectFile);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784980">
		<LastChanged>2010-02-04T03:52:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceGridScreen</MethodClassName>
		<LogicSource>return new ClassProjectHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784981">
		<LastChanged>2010-02-04T03:56:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ResourceGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;

    // Link the screen field to the passed in record
((ReferenceField)this.getScreenRecord().getField(ClassInfoScreenRecord.kClassProjectID)).syncReference(this.getHeaderRecord());
this.getScreenRecord().getField(ClassInfoScreenRecord.kClassProjectID).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new ExtractRangeFilter(Resource.kDescription, this.getScreenRecord().getField(ClassInfoScreenRecord.kName)));
this.getScreenRecord().getField(ClassInfoScreenRecord.kName).addListener(new FieldReSelectHandler(this));

this.getMainRecord().addListener(new ExtractRangeFilter(Resource.kLocation, this.getScreenRecord().getField(ClassInfoScreenRecord.kPackage)));
this.getScreenRecord().getField(ClassInfoScreenRecord.kPackage).addListener(new FieldReSelectHandler(this));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784982">
		<LastChanged>2010-02-04T05:18:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ClassProjectScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, ClassProject.CLASS_DETAIL_SCREEN, MenuConstants.FORMDETAIL, ClassProject.CLASS_DETAIL_SCREEN, ClassProject.CLASS_DETAIL_SCREEN);
new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, ClassProject.RESOURCE_DETAIL_SCREEN, MenuConstants.FORMDETAIL, ClassProject.RESOURCE_DETAIL_SCREEN, ClassProject.RESOURCE_DETAIL_SCREEN);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784983">
		<LastChanged>2010-02-05T15:56:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getPackageName</MethodName>
		<LogicDescription>Get the full class name</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource><![CDATA[String packageName = this.getField(ClassInfo.kClassPackage).toString();
ClassProject classProject = (ClassProject)((ReferenceField)this.getField(ClassInfo.kClassProjectID)).getReference();
if (classProject != null)
    if ((classProject.getEditMode() == DBConstants.EDIT_IN_PROGRESS) || (classProject.getEditMode() == DBConstants.EDIT_CURRENT))
        packageName = classProject.getFullPackage(ClassProject.CodeType.BASE, packageName);
return packageName;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784984">
		<LastChanged>2010-02-06T13:00:46</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>logAddRecord</MethodName>
		<LogicDescription><![CDATA[Log that this record has been added.
Call this from the end of record.init
@param record the record that is being added.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record record, int iSystemID</MethodInterface>
		<MethodClassName>AnalysisLog</MethodClassName>
		<LogicSource><![CDATA[try {
    this.getTable().setProperty(DBParams.SUPRESSREMOTEDBMESSAGES, DBConstants.TRUE);
    this.getTable().getDatabase().setProperty(DBParams.MESSAGES_TO_REMOTE, DBConstants.FALSE);

    this.addNew();
    this.getField(AnalysisLog.kSystemID).setValue(iSystemID);
    this.getField(AnalysisLog.kObjectID).setValue(Debug.getObjectID(record, false));
    this.getField(AnalysisLog.kClassName).setString(Debug.getClassName(record));
    this.getField(AnalysisLog.kDatabaseName).setString(record.getDatabaseName());
    ((DateTimeField)this.getField(AnalysisLog.kInitTime)).setValue(DateTimeField.currentTime());
    this.getField(AnalysisLog.kRecordOwner).setString(Debug.getClassName(record.getRecordOwner()));
    this.getField(AnalysisLog.kStackTrace).setString(Debug.getStackTrace());
    this.add();
} catch (DBException ex) {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784985">
		<LastChanged>2010-02-06T13:01:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>logRemoveRecord</MethodName>
		<LogicDescription><![CDATA[Log that this record has been freed.
Call this from the end of record.free
@param record the record that is being added.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Record record, int iSystemID</MethodInterface>
		<MethodClassName>AnalysisLog</MethodClassName>
		<LogicSource><![CDATA[try {
    this.getTable().setProperty(DBParams.SUPRESSREMOTEDBMESSAGES, DBConstants.TRUE);
    this.getTable().getDatabase().setProperty(DBParams.MESSAGES_TO_REMOTE, DBConstants.FALSE);

    this.addNew();
    this.getField(AnalysisLog.kSystemID).setValue(iSystemID);
    this.getField(AnalysisLog.kObjectID).setValue(Debug.getObjectID(record, true));
    this.setKeyArea(AnalysisLog.kObjectIDKey);
    if (this.seek(null))
    {
        this.edit();
        ((DateTimeField)this.getField(AnalysisLog.kFreeTime)).setValue(DateTimeField.currentTime());
        if (this.getField(AnalysisLog.kRecordOwner).isNull())
            this.getField(AnalysisLog.kRecordOwner).setString(Debug.getClassName(record.getRecordOwner()));
        this.set();
    }
    else
    {
    // Ignore for now    System.exit(1);
    }
} catch (DBException ex) {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784986">
		<LastChanged>2010-02-06T13:04:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>readClassInfo</MethodName>
		<LogicDescription><![CDATA[Read the ClassInfoService record
@param recordOwner The record owner to use to create the this record AND to optionally get the classinfo.
@param className if non-null read this class name, if null, use the recordowner properties to figure out the class.
@param getRecord If true, read the record.
]]></LogicDescription>
		<MethodReturns>ClassInfoService</MethodReturns>
		<MethodInterface>RecordOwner recordOwner, String className</MethodInterface>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource><![CDATA[String strParamRecord = null;
String strParamScreenType = null;
String strParamMenu = null;
String strParamHelp = null;

if (className == null)
{
	strParamRecord = recordOwner.getProperty(DBParams.RECORD);      // Display record
	className = recordOwner.getProperty(DBParams.SCREEN);      // Display screen
	strParamScreenType = recordOwner.getProperty(DBParams.COMMAND);     // Display record
	strParamMenu = recordOwner.getProperty(DBParams.MENU);      // Display record
	strParamHelp = recordOwner.getProperty(DBParams.HELP);      // Display record
}

if (className == null)
	className = DBConstants.BLANK;
if ((className.length() == 0) || (className.equals("Screen")) || (className.equals("GridScreen")))
{
    if (strParamRecord != null) if (strParamRecord.length() > 0)
    	className = strParamRecord;  // Use desc of record class if standard screen
}

try {
    this.setKeyArea(DBConstants.PRIMARY_KEY);
    if (className.lastIndexOf('.') != -1)
    	className = className.substring(className.lastIndexOf('.') + 1);
    this.getField(ClassInfo.kClassName).setString(className);
    boolean bSuccess = false;
    this.setKeyArea(ClassInfo.kClassNameKey);
    if (className.length() > 0)
        bSuccess = this.seek("=");
    if (!bSuccess)
    {   // Not found, use standard screen maintenance screen
        if ((strParamMenu != null) && (strParamMenu.length() > 0))
            this.getField(ClassInfo.kClassName).setString("MenuScreen");
        else if ((strParamRecord != null) && (strParamRecord.length() > 0))
        {
            if ((strParamScreenType != null) && (strParamScreenType.length() > 0) && (strParamScreenType.equalsIgnoreCase(ThinMenuConstants.FORM)))
                this.getField(ClassInfo.kClassName).setString("Screen");
            else
                this.getField(ClassInfo.kClassName).setString("GridScreen");
        }
        else
            this.getField(ClassInfo.kClassName).setString(strParamHelp);
        if (!bSuccess)
				bSuccess = this.seek("=");
    }
} catch (DBException e) {
	e.printStackTrace();
	return null;
}
return this;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784987">
		<LastChanged>2010-02-06T13:05:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>getClassName</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource>return this.getField(ClassInfo.kClassName).toString();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784988">
		<LastChanged>2010-02-06T13:04:54</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,300</Sequence>
		<MethodName>getClassExplain</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource>return this.getField(ClassInfo.kClassExplain).toString();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784989">
		<LastChanged>2010-02-06T13:05:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>getClassHelp</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource>return this.getField(ClassInfo.kClassHelp).toString();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784990">
		<LastChanged>2010-02-06T13:05:37</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,600</Sequence>
		<MethodName>getSeeAlso</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource>return this.getField(ClassInfo.kSeeAlso).toString();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784991">
		<LastChanged>2010-02-06T13:05:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>getClassDesc</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource>return this.getField(ClassInfo.kClassDesc).toString();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784992">
		<LastChanged>2010-02-06T13:06:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,700</Sequence>
		<MethodName>getTechnicalInfo</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource>return this.getField(ClassInfo.kTechnicalInfo).toString();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784993">
		<LastChanged>2010-02-06T13:06:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,500</Sequence>
		<MethodName>getClassType</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource>return this.getField(ClassInfo.kClassType).toString();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784994">
		<LastChanged>2010-02-06T13:07:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,100</Sequence>
		<MethodName>printHtmlTechInfo</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>PrintWriter out, String strTag, String strParams, String strData</MethodInterface>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource><![CDATA[FieldData fieldInfo = new FieldData(Utility.getRecordOwner(this));

String strClass = this.getClassName();
fieldInfo.setKeyArea(FieldData.kFieldFileNameKey);
fieldInfo.addListener(new StringSubFileFilter(strClass, FieldData.kFieldFileName, null, -1, null, -1));
try   {
    out.println("<table border=1>");
    out.println("<tr>");
    out.println("<th>" + fieldInfo.getField(FieldData.kFieldName).getFieldDesc() + "</th>");
    out.println("<th>" + fieldInfo.getField(FieldData.kFieldClass).getFieldDesc() + "</th>");
    out.println("<th>" + fieldInfo.getField(FieldData.kBaseFieldName).getFieldDesc() + "</th>");
    out.println("<th>" + fieldInfo.getField(FieldData.kMaximumLength).getFieldDesc() + "</th>");
    out.println("<th>" + fieldInfo.getField(FieldData.kFieldDescription).getFieldDesc() + "</th>");
    out.println("</tr>");
    while (fieldInfo.hasNext())
    {
        fieldInfo.next();
        out.println("<tr>");
        out.println("<td>&nbsp;" + fieldInfo.getField(FieldData.kFieldName).toString() + "</td>");
        out.println("<td>&nbsp;" + fieldInfo.getField(FieldData.kFieldClass).toString() + "</td>");
        out.println("<td>&nbsp;" + fieldInfo.getField(FieldData.kBaseFieldName).toString() + "</td>");
        out.println("<td>&nbsp;" + fieldInfo.getField(FieldData.kMaximumLength).toString() + "</td>");
        out.println("<td>&nbsp;" + fieldInfo.getField(FieldData.kFieldDescription).toString() + "</td>");
        out.println("</tr>");
    }
    out.println("</table>");
} catch (DBException ex)    {
    ex.printStackTrace();
}

fieldInfo.free();
fieldInfo = null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784995">
		<LastChanged>2010-02-06T13:08:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>2,200</Sequence>
		<MethodName>printScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>PrintWriter out, ResourceBundle reg</MethodInterface>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource><![CDATA[String strClassXML = XmlUtilities.createXMLStringRecord(this);

if (strClassXML == null)
    strClassXML = DBConstants.BLANK;

String strOptXML = DBConstants.BLANK;
FileHdr fileHdr = new FileHdr(null);
fileHdr.setKeyArea(FileHdr.kFileNameKey);
fileHdr.getField(FileHdr.kFileName).moveFieldToThis(this.getField(ClassInfo.kClassName));
try   {
    if (fileHdr.seek("="))
    {
        strOptXML = XmlUtilities.createXMLStringRecord(fileHdr);
        FieldData fieldInfo = new FieldData(null);
        fieldInfo.setKeyArea(FieldData.kFieldFileNameKey);
        fieldInfo.addListener(new SubFileFilter(this.getField(ClassInfo.kClassName), FieldData.kFieldFileName, null, -1, null, -1));
        strOptXML += Utility.startTag(XMLTags.FIELD_LIST);
        while (fieldInfo.hasNext())
        {
            fieldInfo.next();
            strOptXML += XmlUtilities.createXMLStringRecord(fieldInfo);
        }
        strOptXML += Utility.endTag(XMLTags.FIELD_LIST);
        fieldInfo.free();

        KeyInfo keyInfo = new KeyInfo(null);
        keyInfo.setKeyArea(KeyInfo.kKeyFilenameKey);
        keyInfo.addListener(new SubFileFilter(this.getField(ClassInfo.kClassName), KeyInfo.kKeyFilename, null, -1, null, -1));
        strOptXML += Utility.startTag(XMLTags.KEY_LIST);
        while (keyInfo.hasNext())
        {
            keyInfo.next();
            strOptXML += XmlUtilities.createXMLStringRecord(keyInfo);
        }
        strOptXML += Utility.endTag(XMLTags.KEY_LIST);
        keyInfo.free();
    }
} catch (DBException ex)    {
    ex.printStackTrace();
    strOptXML = DBConstants.BLANK;
}
fileHdr.free();

String strContentArea =
            strClassXML +
            strOptXML;
out.println(strContentArea);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784996">
		<LastChanged>2010-02-06T13:08:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,800</Sequence>
		<MethodName>isValidRecord</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource>return ((this.getEditMode() == DBConstants.EDIT_IN_PROGRESS) || (this.getEditMode() == DBConstants.EDIT_CURRENT));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784997">
		<LastChanged>2010-02-10T12:06:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScanPackagesProcess</MethodClassName>
		<LogicSource><![CDATA[Packages recPackages = (Packages)this.getMainRecord();
ProgramControl recPackagesControl = (ProgramControl)this.getRecord(ProgramControl.kProgramControlFile);
try {
    recPackagesControl.edit();
    recPackagesControl.getField(ProgramControl.kLastPackageUpdate).setValue(DateTimeField.currentTime());

    this.scanProjects(0);

    recPackages.setKeyArea(Packages.kIDKey);
    recPackages.close();
    while (recPackages.hasNext())
    {
        recPackages.next();
        Date timePackages = ((DateTimeField)recPackages.getField(Packages.kLastUpdated)).getDateTime();
        Date timeUpdated = ((DateTimeField)recPackagesControl.getField(ProgramControl.kLastPackageUpdate)).getDateTime();
        boolean bManual = recPackages.getField(Packages.kManual).getState();
        if (((timePackages == null) || (timePackages.before(timeUpdated)))
            && (bManual == false))
        {
            recPackages.edit();
            recPackages.remove();
        }
    }
    recPackagesControl.set();
} catch (DBException ex)    {
    ex.printStackTrace();
} finally {
    recPackagesControl.free();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784998">
		<LastChanged>2010-03-17T15:22:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>scanProjects</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>int parentProjectID</MethodInterface>
		<MethodClassName>ScanPackagesProcess</MethodClassName>
		<LogicSource><![CDATA[ClassProject classProject = new ClassProject(this);
try {
    classProject.addNew();
    classProject.setKeyArea(ClassProject.kIDKey);
    classProject.getField(ClassProject.kID).setValue(parentProjectID);
    if (classProject.seek(null))
    {
    	if (isBaseDatabase(classProject))
    		this.scanAllPackages(classProject);
    }
    IntegerField field = new IntegerField(null, null, -1, null, null);
    field.setValue(parentProjectID);
    classProject.addNew();
    classProject.close();
    classProject.setKeyArea(ClassProject.kParentFolderIDKey);
    classProject.addListener(new SubFileFilter(field, ClassProject.kParentFolderID, null, -1, null, -1));
    while (classProject.hasNext())
    {
        classProject.next();
        this.scanProjects((int)classProject.getField(ClassProject.kID).getValue());
    }
    field.free();
} catch (DBException e) {
    e.printStackTrace();
} finally {
    classProject.free();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16784999">
		<LastChanged>2010-02-09T05:44:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScanPackagesProcess</MethodClassName>
		<LogicSource>return new Packages(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785000">
		<LastChanged>2010-02-10T12:06:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ScanPackagesProcess</MethodClassName>
		<LogicSource><![CDATA[super;
new ProgramControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785001">
		<LastChanged>2010-02-10T06:18:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addMasterListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ProgramControl</MethodClassName>
		<LogicSource><![CDATA[super;
this.getField(ProgramControl.kLastPackageUpdate).setEnabled(false);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785002">
		<LastChanged>2010-03-06T04:20:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesGridScreen</MethodClassName>
		<LogicSource><![CDATA[if (Packages.SCAN.equalsIgnoreCase(strCommand))
{
    Map<String,Object> properties = new HashMap<String,Object>();
    properties.put(DBParams.PROCESS, ScanPackagesProcess.class.getName());
    Application app = (Application)this.getTask().getApplication();
    String strProcess = Utility.propertiesToURL(null, properties);
    
    app.getTaskScheduler().addTask(new ProcessRunnerTask(app, strProcess, null));
    return true;	// Handled
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785003">
		<LastChanged>2010-03-06T04:20:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesScreen</MethodClassName>
		<LogicSource><![CDATA[if (Packages.SCAN.equalsIgnoreCase(strCommand))
{
    Map<String,Object> properties = new HashMap<String,Object>();
    properties.put(DBParams.PROCESS, ScanPackagesProcess.class.getName());
    Application app = (Application)this.getTask().getApplication();
    String strProcess = Utility.propertiesToURL(null, properties);
    
    app.getTaskScheduler().addTask(new ProcessRunnerTask(app, strProcess, null));
    return true;	// Handled
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785004">
		<LastChanged>2010-02-27T06:38:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>350</Sequence>
		<MethodName>directoryContainsFiles</MethodName>
		<LogicDescription><![CDATA[Get the projectID if this directory has any files in it.
Otherwise, return 0 meaning I don't have to specify this package]]></LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>File fileDir</MethodInterface>
		<MethodClassName>PackagesScanListener</MethodClassName>
		<LogicSource><![CDATA[boolean containsFiles = false;
File[] files = fileDir.listFiles();
if (files != null)
{
    for (File file : files)
    {
        if (!file.isDirectory())
            containsFiles = true;
    }
}
return containsFiles;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785005">
		<LastChanged>2010-02-13T07:08:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>scanAllPackages</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>ClassProject classProject</MethodInterface>
		<MethodClassName>ScanPackagesProcess</MethodClassName>
		<LogicSource><![CDATA[this.setProperty("projectID", classProject.getField(ClassProject.kID).toString());

this.scanPackages(classProject, ClassProject.CodeType.RESOURCE_CODE);
this.scanPackages(classProject, ClassProject.CodeType.RESOURCE_PROPERTIES);
this.scanPackages(classProject, ClassProject.CodeType.THIN);
this.scanPackages(classProject, ClassProject.CodeType.BASE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785006">
		<LastChanged>2010-04-23T14:21:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>getFullPackageName</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String classProjectID, String classPackageName</MethodInterface>
		<MethodClassName>BaseProcessRecords</MethodClassName>
		<LogicSource><![CDATA[if (classProjectID == null)
    return DBConstants.BLANK;
String packageName = classProjectPackages.get(classProjectID);
if (packageName == null)
    return null;    // This class is not accessible
if (packageName.startsWith("."))
    packageName = Constants.ROOT_PACKAGE.substring(0, Constants.ROOT_PACKAGE.length() - 1) + packageName;
if (classPackageName == null)
    classPackageName = DBConstants.BLANK;
if (classPackageName.startsWith("."))
    packageName = packageName + classPackageName;
else if (classPackageName.length() > 0)
    packageName = classPackageName;
return packageName;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785007">
		<LastChanged>2010-02-12T11:59:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>isBaseDatabase</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Record record</MethodInterface>
		<MethodClassName>ScanPackagesProcess</MethodClassName>
		<LogicSource><![CDATA[BaseDatabase database = record.getTable().getDatabase();
boolean isBaseDB = true;
int counter = (int)record.getCounterField().getValue();
String startingID = database.getProperty(BaseDatabase.STARTING_ID);
String endingID = database.getProperty(BaseDatabase.ENDING_ID);
if (startingID != null)
	if (counter < Integer.parseInt(Converter.stripNonNumber(startingID)))
		isBaseDB = false;
if (endingID != null)
	if (counter > Integer.parseInt(Converter.stripNonNumber(endingID)))
		isBaseDB = false;
return isBaseDB;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785008">
		<LastChanged>2010-02-13T06:45:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CodeTypeField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
        {"BASE", "Base"}, 
        {"THIN", "Thin"},
        {"RESOURCE_CODE", "Resource code"},
        {"RESOURCE_PROPERTIES", "Resource properties"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785009">
		<LastChanged>2010-02-13T06:54:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getCodeType</MethodName>
		<LogicDescription/>
		<MethodReturns>ClassProject.CodeType</MethodReturns>
		<MethodInterface/>
		<MethodClassName>CodeTypeField</MethodClassName>
		<LogicSource><![CDATA[String code = this.toString();
if ("BASE".equalsIgnoreCase(code))
    return ClassProject.CodeType.BASE;
if ("THIN".equalsIgnoreCase(code))
    return ClassProject.CodeType.THIN;
if ("RESOURCE_CODE".equalsIgnoreCase(code))
    return ClassProject.CodeType.RESOURCE_CODE;
if ("RESOURCE_PROPERTIES".equalsIgnoreCase(code))
    return ClassProject.CodeType.RESOURCE_PROPERTIES;
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785010">
		<LastChanged>2010-02-13T06:55:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>setCodeType</MethodName>
		<LogicDescription/>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>ClassProject.CodeType codeType</MethodInterface>
		<MethodClassName>CodeTypeField</MethodClassName>
		<LogicSource><![CDATA[String codeString = null;
if (codeType == ClassProject.CodeType.BASE)
    codeString = "BASE";
if (codeType == ClassProject.CodeType.THIN)
    codeString = "THIN";
if (codeType == ClassProject.CodeType.RESOURCE_CODE)
    codeString = "RESOURCE_CODE";
if (codeType == ClassProject.CodeType.RESOURCE_PROPERTIES)
    codeString = "RESOURCE_PROPERTIES";
return this.setString(codeString);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785011">
		<LastChanged>2010-02-16T03:42:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>350</Sequence>
		<MethodName>scanPackages</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>ClassProject classProject, ClassProject.CodeType codeType</MethodInterface>
		<MethodClassName>ScanPackagesProcess</MethodClassName>
		<LogicSource><![CDATA[String projectClassDirectory = classProject.getFileName(null, null, codeType, true, false);
Packages recPackages = (Packages)this.getMainRecord();
Map<String, Object> prop = new HashMap<String, Object>();
prop.put(ConvertCode.SOURCE_DIR, projectClassDirectory);
prop.put(ConvertCode.DEST_DIR, null);
prop.put("codeType", codeType);

Task taskParent = this.getTask();
ConvertCode convert = new ConvertCode(taskParent, null, prop);
convert.setScanListener(new PackagesScanListener(convert, recPackages));
convert.run();    	]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785012">
		<LastChanged>2010-02-14T02:47:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>195</Sequence>
		<MethodName>addReportFooting</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReport</MethodClassName>
		<LogicSource>return new PackagesReportFooting(null, null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785013">
		<LastChanged>2010-02-14T02:49:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReportFooting</MethodClassName>
		<LogicSource>return new ClassProject(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785014">
		<LastChanged>2010-02-14T02:48:32</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReportFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785015">
		<LastChanged>2010-02-14T03:31:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PackagesReportFooting</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785016">
		<LastChanged>2010-02-16T06:14:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getPopupMap</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>PartTypeField</MethodClassName>
		<LogicSource><![CDATA[String string[][] = {
        {"", "default"},
        {"manual", "manual"},
        {"images","images"}
};
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785017">
		<LastChanged>2010-02-17T05:20:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderScreen</MethodClassName>
		<LogicSource><![CDATA[this.getMainRecord().setKeyArea(BaseFolder.kParentFolderIDKey);
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785018">
		<LastChanged>2010-02-17T05:24:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addSubFileFilter</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>FolderGridScreen</MethodClassName>
		<LogicSource><![CDATA[// Override this if it is not correct.
SubFileFilter listener = null;
this.getMainRecord().setKeyArea(BaseFolder.kParentFolderIDKey);
this.getMainRecord().addListener(listener = new SubFileFilter(this.getHeaderRecord()));
if (this.getMainRecord().getKeyArea().getField(DBConstants.MAIN_KEY_FIELD).isNullable() == false)
{
    listener.setFilterIfNull(true);
    listener.setAddNewHeaderOnAdd(false);
}
// Set it back
if (DBConstants.TRUE.equalsIgnoreCase(this.getProperty("fakeHeader")))
    this.setProperty(DBParams.HEADER_OBJECT_ID, DBConstants.BLANK);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785019">
		<LastChanged>2010-02-19T06:25:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>run</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>WriteResources</MethodClassName>
		<LogicSource>this.writeResources();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785020">
		<LastChanged>2010-02-19T06:25:29</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>WriteResources</MethodClassName>
		<LogicSource>return new Registration(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785021">
		<LastChanged>2010-02-19T06:25:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>WriteResources</MethodClassName>
		<LogicSource><![CDATA[super;
new Resource(this);
new ProgramControl(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785022">
		<LastChanged>2010-02-19T06:26:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>WriteResources</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord().getField(Registration.kResourceID).addListener(new ReadSecondaryHandler(this.getRecord(Resource.kResourceFile)));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785023">
		<LastChanged>2010-02-27T09:42:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>writeResources</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>WriteResources</MethodClassName>
		<LogicSource><![CDATA[StreamOut out = null;
Record registration = this.getMainRecord();
Resource resource = (Resource)this.getRecord(Resource.kResourceFile);

String strCurrentFileName = "none";
String strCurrentLanguage = "none";
String strCurrentLocale = "none";
try   {
    registration.setKeyArea(Registration.kResourceIDKey);
    registration.close();
    boolean bFirstTime = true;
    boolean bResourceListBundle = true;
    while (registration.hasNext())
    {
        registration.next();

        String strFileName = resource.getField(Resource.kCode).toString();
        String strLanguage = registration.getField(Registration.kLanguage).toString();
        String strLocale = registration.getField(Registration.kLocale).toString();
        
        if ((!strCurrentFileName.equals(strFileName))
            || (!strCurrentLanguage.equals(strLanguage))
            || (!strCurrentLocale.equals(strLocale)))
        { // New file
            if (out != null)
                this.printEndFile(out, strCurrentFileName, bResourceListBundle);   // End file stuff
            out = null;

            if (ResourceTypeField.PROPERTIES.equals(resource.getField(Resource.kType).getString()))
                bResourceListBundle = false;
            else
                bResourceListBundle = true;

                // Start new file
            strCurrentFileName = strFileName;
            strCurrentLanguage = strLanguage;
            strCurrentLocale = strLocale;
            String packageName = resource.getField(Resource.kLocation).toString();
            strFileName += "Resources";
            if (strLanguage != null)
                if (strLanguage.length() > 0)
                    strFileName += "_" + strLanguage;
            if (strLocale != null)
                if (strLocale.length() > 0)
                    strFileName += "_" + strLocale;
            ClassProject recClassProject = (ClassProject)((ReferenceField)resource.getField(Resource.kClassProjectID)).getReference();
            strFileName = strFileName.replace('.', '/');
            String basePackageName = packageName;
            if (basePackageName.startsWith("." + DBConstants.RES_SUBPACKAGE.substring(0, DBConstants.RES_SUBPACKAGE.length() - 1)))
                basePackageName = basePackageName.substring(DBConstants.RES_SUBPACKAGE.length()); // Get rid of ".res".. it will be added back later
            String strFullFileName = recClassProject.getFileName(strFileName, basePackageName, bResourceListBundle ? ClassProject.CodeType.RESOURCE_CODE : ClassProject.CodeType.RESOURCE_PROPERTIES, true, true);
            packageName = recClassProject.getFullPackage(bResourceListBundle ? ClassProject.CodeType.RESOURCE_CODE : ClassProject.CodeType.RESOURCE_PROPERTIES, packageName);
            out = this.createFile(strFullFileName);
            out.writeit(this.getStartSourceCode(packageName, strFileName, resource.getField(Resource.kDescription).toString(), bResourceListBundle));
            if (bResourceListBundle)
            {
                out.writeit("   static final Object[][] contents = {\n");
                out.writeit("     // LOCALIZE THIS\n");
            }
            bFirstTime = true;
        }
        if (!bFirstTime)
        {
            if (bResourceListBundle)
                out.writeit(",\n");
            else
                out.writeit("\n");
        }
        bFirstTime = false;
        this.writeDetailLine(registration, out, bResourceListBundle);
    }
    if (out != null)
        this.printEndFile(out, strCurrentFileName, bResourceListBundle);   // End file stuff
    out = null;
} catch (DBException ex)    {
    ex.printStackTrace();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785024">
		<LastChanged>2010-02-19T06:26:44</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>150</Sequence>
		<MethodName>writeDetailLine</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record registration, StreamOut out, boolean bResourceListBundle</MethodInterface>
		<MethodClassName>WriteResources</MethodClassName>
		<LogicSource><![CDATA[String strKey = registration.getField(Registration.kKeyValue).toString();
String strValue = registration.getField(Registration.kObjectValue).toString();
strValue = WriteResources.fixPropertyValue(strValue, bResourceListBundle);
if (bResourceListBundle)
    out.writeit("\t{\"" + strKey + "\", " + strValue + "}");
else
    out.writeit(WriteResources.fixPropertyKey(strKey) + "=" + strValue);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785025">
		<LastChanged>2010-02-19T06:28:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>printEndFile</MethodName>
		<LogicDescription><![CDATA[@param out
@param strFileName
@param bResourceListBundle]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>StreamOut out, String strFileName, boolean bResourceListBundle</MethodInterface>
		<MethodClassName>WriteResources</MethodClassName>
		<LogicSource><![CDATA[if (strFileName != null)
{	// This is kind of lame, I write duplication resources for the base resource. I should have a resource chain.
	Resource recResource = new Resource(this);
	try {
		recResource.getField(Resource.kCode).setString(strFileName);
		recResource.setKeyArea(Resource.kCodeKey);
		if (recResource.seek(DBConstants.EQUALS))
		{
			if (!recResource.getField(Resource.kBaseResourceID).isNull())
			{	// There is an base resource - add the base resources
				Record recBaseResource = ((ReferenceField)recResource.getField(Resource.kBaseResourceID)).getReference();
				Registration recBaseRegistration = new Registration(this);
				recBaseRegistration.addListener(new SubFileFilter(recBaseResource));
				Registration recRegistration = new Registration(this);
				while (recBaseRegistration.hasNext())
				{
					recBaseRegistration.next();
					recRegistration.addNew();
					recRegistration.setKeyArea(Registration.kCodeKey);
					recRegistration.getField(Registration.kResourceID).moveFieldToThis(recResource.getField(Resource.kID));
					recRegistration.getField(Registration.kCode).moveFieldToThis(recResource.getField(Resource.kCode));
					recRegistration.getField(Registration.kLanguage).moveFieldToThis(recBaseRegistration.getField(Registration.kLanguage));
					recRegistration.getField(Registration.kLocale).moveFieldToThis(recBaseRegistration.getField(Registration.kLocale));
					recRegistration.getField(Registration.kKeyValue).moveFieldToThis(recBaseRegistration.getField(Registration.kKeyValue));
		            if (!recRegistration.seek(DBConstants.EQUALS))
		            {	// If this base registration doesn't exist in the main registration file, add it.
	                    if (bResourceListBundle)
	                        out.writeit(",\n");
	                    else
	                        out.writeit("\n");
		            	this.writeDetailLine(recBaseRegistration, out, bResourceListBundle);
		            }
				}
				recBaseRegistration.free();
				recRegistration.free();
			}
		}
	} catch (DBException e) {
		e.printStackTrace();
	} finally {
		recResource.free();
	}
}
if (bResourceListBundle)
{
    out.writeit("");
    out.writeit("\t\t// END OF MATERIAL TO LOCALIZE\n");
    out.writeit("\t};\n");
    out.writeit("}\n");
}
out.free();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785026">
		<LastChanged>2010-02-19T06:28:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>createFile</MethodName>
		<LogicDescription/>
		<MethodReturns>StreamOut</MethodReturns>
		<MethodInterface>String strFullFileName</MethodInterface>
		<MethodClassName>WriteResources</MethodClassName>
		<LogicSource><![CDATA[StreamOut streamOut = null;
try   {
    File file = new File(strFullFileName);
    String pathName = file.getParent();
    File fileDir = new File(pathName);
    fileDir.mkdirs();
    streamOut = new StreamOut(strFullFileName);
} catch (IOException ex)    {
    ex.printStackTrace();
    streamOut = null;
}
return streamOut;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785027">
		<LastChanged>2010-02-27T09:42:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>400</Sequence>
		<MethodName>getStartSourceCode</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String packagePath, String strFileName, String strDescription, boolean bResourceListBundle</MethodInterface>
		<MethodClassName>WriteResources</MethodClassName>
		<LogicSource><![CDATA[String string;
if (bResourceListBundle)
{
    string =
        "package " + packagePath + ";\n"
        + "/**\n"
        + " * @(#)" + strFileName + ".java  0.00 1-Jan-10 Don Corley\n"
        + " *\n"
        + " * Copyright © 2010 tourgeek.com. All Rights Reserved.\n"
        + " *   don@donandann.com\n"
        + " */\n"
        + "import java.util.*;\n"
        + "\n"
        + "/**\n"
        + " * " + strFileName + " - Resources.\n"
        + strDescription + "\n"
        + " */\n"
        + "public class " + strFileName + " extends ListResourceBundle\n"
        + "{\n"
        + "\tpublic Object[][] getContents() {\n"
        + "\t\treturn contents;\n"
        + "\t}\n";
}
else
    string = "# " + strFileName + " property file" + "\n" + "# " + strDescription + "\n";
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785028">
		<LastChanged>2010-02-19T06:58:24</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,100</Sequence>
		<MethodName>fixPropertyKey</MethodName>
		<LogicDescription>Fix the property key.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String strKey</MethodInterface>
		<MethodClassName>WriteResources</MethodClassName>
		<LogicSource><![CDATA[strKey = strKey.replace(" ", "\\ ");
return strKey;]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785029">
		<LastChanged>2010-02-19T06:58:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,200</Sequence>
		<MethodName>fixPropertyValue</MethodName>
		<LogicDescription>Clean up this long string and convert it to a java quoted string.</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String string, boolean bResourceListBundle</MethodInterface>
		<MethodClassName>WriteResources</MethodClassName>
		<LogicSource><![CDATA[if (string == null)
    string = Constants.BLANK;
StringBuffer strBuff = new StringBuffer();
StringReader stringReader = new StringReader(string);
LineNumberReader lineReader = new LineNumberReader(stringReader);
boolean bFirstTime = true;
String strLine;
try   {
    while ((strLine = lineReader.readLine()) != null)
    {
        if (!bFirstTime)
        {
            if (bResourceListBundle)
                strBuff.append(" + \"\\n\" +" + "\n\t\t");
            else
                strBuff.append("\\n\\\n");
        }
        if (bResourceListBundle)
            strBuff.append('\"');
        if (!bFirstTime)
        	if (!bResourceListBundle)
        		if (strLine.startsWith(" "))
        			strBuff.append("\\");	// Escape out the first space for properties files
        strBuff.append(WriteResources.encodeLine(strLine, bResourceListBundle));
        if (bResourceListBundle)
            strBuff.append("\"");
        bFirstTime = false;
    }
} catch (IOException ex)    {
    ex.printStackTrace(); // Never
}
return strBuff.toString();]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785030">
		<LastChanged>2010-02-19T06:58:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,400</Sequence>
		<MethodName>encodeLine</MethodName>
		<LogicDescription>Encode the utf-16 characters in this line to escaped java strings</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String string, boolean bResourceListBundle</MethodInterface>
		<MethodClassName>WriteResources</MethodClassName>
		<LogicSource><![CDATA[if (string == null)
    return string;
for (int i = 0; i < string.length(); i++)
{
    if (((string.charAt(i) == '\"') || (string.charAt(i) == '\\'))
     || ((!bResourceListBundle) && (string.charAt(i) == ':')))
    {   // must preceed these special characters with a "\"
        string = string.substring(0, i) + "\\" + string.substring(i);
        i++;
    }
    else if (string.charAt(i) > 127)
    {
        String strHex = "0123456789ABCDEF";
        String strOut = "\\u";
        strOut += strHex.charAt((string.charAt(i) & 0xF000) >> 12);
        strOut += strHex.charAt((string.charAt(i) & 0xF00) >> 8);
        strOut += strHex.charAt((string.charAt(i) & 0xF0) >> 4);
        strOut += strHex.charAt(string.charAt(i) & 0xF);
        string = string.substring(0, i) + strOut + string.substring(i + 1);
        i = i + strOut.length() - 1;
    }
}
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785031">
		<LastChanged>2010-02-20T08:01:26</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseFolderGridScreen</MethodClassName>
		<LogicSource><![CDATA[super;
if (m_recHeader != null)
    this.removeRecord(m_recHeader);	// Special - for folders, header should NOT be in the record list (since the detail record is the same record class)]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785032">
		<LastChanged>2010-03-08T08:33:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,150</Sequence>
		<MethodName>getFullClassName</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface/>
		<MethodClassName>ClassInfo</MethodClassName>
		<LogicSource><![CDATA[String className = this.getField(ClassInfo.kClassName).toString();
ClassProject classProject = (ClassProject)((ReferenceField)this.getField(ClassInfo.kClassProjectID)).getReference();
String packageName = classProject.getFullPackage(ClassProject.CodeType.BASE, this.getField(ClassInfo.kClassPackage).toString());
if (!packageName.endsWith("."))
	if (!className.endsWith("."))
		className = "." + className;
return packageName + className;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785033">
		<LastChanged>2010-03-17T10:29:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserRegistrationGridScreen</MethodClassName>
		<LogicSource>return new UserRegistration(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785034">
		<LastChanged>2010-03-17T10:31:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserRegistrationGridScreen</MethodClassName>
		<LogicSource>return new UserInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785035">
		<LastChanged>2010-03-17T10:31:31</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>getHeaderRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserRegistrationGridScreen</MethodClassName>
		<LogicSource>return this.getRecord(UserInfo.kUserInfoFile);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785036">
		<LastChanged>2010-03-17T10:32:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>makeSubScreen</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserRegistrationGridScreen</MethodClassName>
		<LogicSource>return new UserInfoHeaderScreen(null, this, null, ScreenConstants.DONT_DISPLAY_FIELD_DESC);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785037">
		<LastChanged>2010-03-17T10:33:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>setupSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoHeaderScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785038">
		<LastChanged>2010-03-17T10:39:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>5</Sequence>
		<MethodName>UserRegistrationGridScreen*2</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Record recHeader, Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map&lt;String,Object&gt; properties</MethodInterface>
		<MethodClassName>UserRegistrationGridScreen</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785039">
		<LastChanged>2010-03-17T10:55:12</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>addToolbarButtons</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoScreen</MethodClassName>
		<LogicSource>new SCannedBox(toolScreen.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.SET_ANCHOR), toolScreen, null, ScreenConstants.DEFAULT_DISPLAY, null, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, MenuConstants.FORMDETAIL, null);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785040">
		<LastChanged>2010-03-17T12:06:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>doRecordChange</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetupNewUserHandler</MethodClassName>
		<LogicSource><![CDATA[if (iChangeType == DBConstants.AFTER_ADD_TYPE)
{
	UserInfo userTemplate = this.getUserTemplate();
	if (userTemplate != null)
	{
		Record userInfo = this.getOwner();
		Object bookmark = userInfo.getLastModified(DBConstants.BOOKMARK_HANDLE);
		RecordOwner recordOwner = Utility.getRecordOwner(this.getOwner());
		UserRegistration userRegistration = new UserRegistration(recordOwner);
		UserRegistration newUserRegistration = new UserRegistration(recordOwner);
		userRegistration.addListener(new SubFileFilter(userTemplate));
		try {
			while (userRegistration.hasNext())
			{
				userRegistration.next();
				newUserRegistration.addNew();
				newUserRegistration.moveFields(userRegistration, null, bDisplayOption, DBConstants.INIT_MOVE, true, false, false);
				newUserRegistration.getField(UserRegistration.kID).initField(bDisplayOption);
				newUserRegistration.getField(UserRegistration.kUserID).setData(bookmark);
				newUserRegistration.add();
			}
		} catch (DBException e) {
			e.printStackTrace();
		}
	}
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785041">
		<LastChanged>2010-03-17T11:01:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoScreen</MethodClassName>
		<LogicSource><![CDATA[super;
this.getMainRecord(). addListener(new SetupNewUserHandler(null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785042">
		<LastChanged>2010-03-17T12:07:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>doNewRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SetupNewUserHandler</MethodClassName>
		<LogicSource><![CDATA[UserInfo userTemplate = this.getUserTemplate();
if (userTemplate != null)
{
	Record userInfo = this.getOwner();
    boolean[] fileListenerStates = userInfo.setEnableListeners(false);
    Object[] fieldListenerStates = userInfo.setEnableFieldListeners(false);
    userInfo.moveFields(userTemplate, null, bDisplayOption, DBConstants.INIT_MOVE, false, false, false);
    userInfo.getField(UserInfo.kID).initField(bDisplayOption);
    userInfo.getField(UserInfo.kFirstName).initField(bDisplayOption);
    userInfo.getField(UserInfo.kLastName).initField(bDisplayOption);
    userInfo.getField(UserInfo.kUserName).initField(bDisplayOption);
    userInfo.getField(UserInfo.kPassword).initField(bDisplayOption);
    userInfo.getField(UserInfo.kID).setModified(false);
    userInfo.getField(UserInfo.kFirstName).setModified(false);
    userInfo.getField(UserInfo.kLastName).setModified(false);
    userInfo.getField(UserInfo.kUserName).setModified(false);
    userInfo.getField(UserInfo.kPassword).setModified(false);
    userInfo.setEnableListeners(fileListenerStates);
    userInfo.setEnableFieldListeners(fieldListenerStates);
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785043">
		<LastChanged>2010-03-17T11:12:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>getUserTemplate</MethodName>
		<LogicDescription/>
		<MethodReturns>UserInfo</MethodReturns>
		<MethodInterface/>
		<MethodClassName>SetupNewUserHandler</MethodClassName>
		<LogicSource><![CDATA[if (userControl == null)
    userControl = new UserControl(Utility.getRecordOwner(this.getOwner()));
if (userControl != null)
    if ((userControl.getEditMode() == DBConstants.EDIT_CURRENT) || (userControl.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
{
    UserInfo userInfo = (UserInfo)((ReferenceField)userControl.getField(UserControl.kTemplateUserID)).getReference();
    if (userInfo != null)
        if ((userInfo.getEditMode() == DBConstants.EDIT_CURRENT) || (userInfo.getEditMode() == DBConstants.EDIT_IN_PROGRESS))
        	return userInfo;
}
return null;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785044">
		<LastChanged>2010-03-20T03:00:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>addPayloadProperties</MethodName>
		<LogicDescription><![CDATA[Utility to add the standard payload properties to the message
@param msg The parser specific message
@param message The standardized message]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>Object msg, BaseMessage message</MethodInterface>
		<MethodClassName>BaseConvertToMessage</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785045">
		<LastChanged>2010-03-20T03:02:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>setPayloadProperties</MethodName>
		<LogicDescription><![CDATA[Move the standard payload properties from the message to the xml.
@param message The standarized message
@param msg The native parser message]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>BaseMessage message, Object msg</MethodInterface>
		<MethodClassName>BaseConvertToNative</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785046">
		<LastChanged>2011-05-05T22:40:40</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SwitchDatabaseMenuScreen</MethodClassName>
		<LogicSource><![CDATA[if (properties != null)
{
    Task task = parentScreen.getTask();
    BaseApplication app = (BaseApplication)task.getApplication();

    properties.remove(DBParams.SCREEN);
    boolean isSameProperties = true;
    for (String key : properties.keySet())
    {
        if ((properties.get(key) == null) || (DBConstants.BLANK.equals(properties.get(key))))
            if (app.getProperty(key) != null)
                properties.put(key, app.getProperty(key));  // Blank property means use old property
        if (properties.get(key).equals(app.getProperty(key)))
            continue;
        isSameProperties = false;
    }
    if (!isSameProperties)
    {
        app.removeTask(task);
        task.setApplication(null); 
        Environment env = app.getEnvironment();
        Map<String,Object> appProps = env.getDefaultApplication().getProperties();
        if ((appProps != null) && (properties != null))
        { // Merge starting properties
            String[] propNames = {DBParams.CONNECTION_TYPE, DBParams.CODEBASE, DBParams.REMOTE_HOST, DBParams.USER_NAME, DBParams.USER_ID, DBParams.LOCAL, DBParams.REMOTE, DBParams.TABLE};
            Iterator<String> i = appProps.keySet().iterator();
            while (i.hasNext())
            {
                String key = i.next();
                for (String s : propNames)
                {
                    if (s.equalsIgnoreCase(key))
                        properties.put(key, appProps.get(key));
                }
                
            }
        }
        env.removeApplication(app);
        env.free();
        env = new Environment(properties);
        app = new MainApplication(env, properties, null);
        app.addTask(task, null);
        task.setApplication(app);
    }
}
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785047">
		<LastChanged>2010-04-18T10:36:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>checkSecurity</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SwitchDatabaseMenuScreen</MethodClassName>
		<LogicSource><![CDATA[if ((this.getClass() == SwitchDatabaseMenuScreen.class) &&
        (!Application.LOGIN_REQUIRED.equalsIgnoreCase(this.getProperty(Params.SECURITY_MAP))) && (!Application.CREATE_USER_REQUIRED.equalsIgnoreCase(this.getProperty(Params.SECURITY_MAP))))
    return DBConstants.NORMAL_RETURN;        // For now... allow access to all menus (unless I'm asking for a login)
else if (this.getProperty(DBParams.HELP) != null)
    return DBConstants.NORMAL_RETURN;   // If this is a help (menu) screen, allow access
return super.checkSecurity();           // If you override this class, use the standard security]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785048">
		<LastChanged>2010-04-23T14:23:06</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>patternToRegex</MethodName>
		<LogicDescription>Kind of convert file filter to regex</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String string</MethodInterface>
		<MethodClassName>BaseProcessRecords</MethodClassName>
		<LogicSource><![CDATA[if (string != null)
    if (!string.contains("["))
        if (!string.contains("{"))  // If it has one of these, it probably is a regex.
{
    string = string.replace(".", "\\.");
    string = string.replace("*", ".*");
}
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785049">
		<LastChanged>2010-10-19T14:08:39</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>includeRecord</MethodName>
		<LogicDescription>Include this record?</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>Record recFileHdr, Record recClassInfo, String strPackage</MethodInterface>
		<MethodClassName>BaseProcessRecords</MethodClassName>
		<LogicSource><![CDATA[String strProject = this.getProperty("project");
String strType = this.getProperty("type");
String[] classLists = null;
String classList = this.getProperty("classList");
if (classList != null)
	classLists = classList.split(",");

if (recClassInfo.getField(ClassInfo.kBaseClassName).toString().equalsIgnoreCase("QueryRecord"))
    return false;
if (recClassInfo.getField(ClassInfo.kBaseClassName).toString().indexOf("Query") != -1)
    return false;

String strClassPackage = this.getFullPackageName(recClassInfo.getField(ClassInfo.kClassProjectID).toString(), recClassInfo.getField(ClassInfo.kClassPackage).toString());
String strClassProject = classProjectIDs.get(recClassInfo.getField(ClassInfo.kClassProjectID).toString());
String strClassType = recFileHdr.getField(FileHdr.kType).toString();

if (strClassPackage != null)
    if (strPackage != null)
        if (!strClassPackage.matches(this.patternToRegex(strPackage)))
            return false;

if (strClassType != null)
    if (strType != null)
        if (!strClassType.toUpperCase().contains(strType.toUpperCase()))
            return false;

if (classLists != null)
{
	String className = recClassInfo.getField(ClassInfo.kClassName).toString();
	boolean match = false;
	for (String classMatch : classLists)
	{
		if (className.equalsIgnoreCase(classMatch))
			match = true;
	}
	if (!match)
		return false;
}

if (strClassProject == null)
    return false;   // Never
if (strProject != null)
    return strClassProject.matches(this.patternToRegex(strProject));   // Does the project name pattern match?
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785050">
		<LastChanged>2010-04-29T10:42:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource><![CDATA[Record record = super;
if (record == null)
    record = new Script(this);
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785051">
		<LastChanged>2010-04-29T10:43:10</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>getRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>RunScriptProcess</MethodClassName>
		<LogicSource><![CDATA[Record record = super;
if (record == null)
    if (Script.kScriptFile.equalsIgnoreCase(strFileName))
        record = new Script(this);
return record;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785052">
		<LastChanged>2010-04-29T10:45:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>getMainRecord</MethodName>
		<LogicDescription><![CDATA[Get the main record for this screen.
@return The main record (or null if none).]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseRecordOwner</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785053">
		<LastChanged>2010-04-29T10:45:59</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getRecord</MethodName>
		<LogicDescription><![CDATA[Lookup this record for this recordowner.
@param The record's name.
@return The record with this name (or null if not found).]]></LogicDescription>
		<MethodReturns>Record</MethodReturns>
		<MethodInterface>String strFileName</MethodInterface>
		<MethodClassName>BaseRecordOwner</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785054">
		<LastChanged>2010-05-05T03:58:08</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>makeReferenceRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenusField</MethodClassName>
		<LogicSource>return new Menus(recordOwner);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785057">
		<LastChanged>2010-05-25T14:51:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>filterFile</MethodName>
		<LogicDescription>If this file should be processed, return true.</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>File file</MethodInterface>
		<MethodClassName>ScanListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785058">
		<LastChanged>2010-05-25T14:51:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>moveThisFile</MethodName>
		<LogicDescription>Do whatever processing that needs to be done on this file.</LogicDescription>
		<MethodReturns/>
		<MethodInterface>File file, File fileDestDirectory, String strDestFilename</MethodInterface>
		<MethodClassName>ScanListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785059">
		<LastChanged>2010-05-25T14:52:07</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>filterDirectory</MethodName>
		<LogicDescription>If this file should be processed, return true.</LogicDescription>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>File file</MethodInterface>
		<MethodClassName>ScanListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785060">
		<LastChanged>2010-05-25T15:13:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>processThisDirectory</MethodName>
		<LogicDescription><![CDATA[Do whatever processing that needs to be done on this directory.
@param objDirID The parent object id
@return The new parent object id]]></LogicDescription>
		<MethodReturns>Object</MethodReturns>
		<MethodInterface>File file, Object objDirID</MethodInterface>
		<MethodClassName>ScanListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785061">
		<LastChanged>2010-05-25T14:52:53</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>postProcessThisDirectory</MethodName>
		<LogicDescription><![CDATA[Do whatever processing that needs to be done on this directory after processing the files.
@param objDirID The parent object id
@return The new parent object id]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>File fileDir, Object objDirID</MethodInterface>
		<MethodClassName>ScanListener</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785062">
		<LastChanged>2010-05-25T14:54:38</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ImportXMLScanListener</MethodClassName>
		<LogicSource><![CDATA[super;
inout = new XmlInOut((RecordOwner)parent, null, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785063">
		<LastChanged>2010-05-25T14:55:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>15</Sequence>
		<MethodName>main</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String[] args</MethodInterface>
		<MethodClassName>ImportXMLScanListener</MethodClassName>
		<LogicSource><![CDATA[if ((args == null) || (args.length < 1))
    System.exit(0);
String strDirIn = args[0];
Map<String, Object> properties = new HashMap<String, Object>();
properties.put(ConvertCode.SOURCE_DIR, strDirIn);
properties.put(DBParams.TABLE, DBParams.JDBC);
properties.put(DBParams.LOCAL, DBParams.JDBC);
properties.put(DBParams.REMOTE, DBParams.JDBC);
Environment env = new Environment(properties);
MainApplication app = new MainApplication(env, properties, null);
ProcessRunnerTask task = new ProcessRunnerTask(app, null, properties);
ConvertCode convert = new ConvertCode(task, null, properties);
convert.setScanListener(new ImportXMLScanListener(convert, null));
convert.run();]]></LogicSource>
		<LogicThrows/>
		<Protection>public static</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785064">
		<LastChanged>2010-05-25T14:55:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>filterFile</MethodName>
		<LogicDescription>If this file should be processed, return true.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ImportXMLScanListener</MethodClassName>
		<LogicSource><![CDATA[String strName = file.getName();
if (!strName.endsWith(".xml"))
    return false;
return super.filterFile(file);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785065">
		<LastChanged>2011-08-05T19:45:55</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>moveThisFile</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>ImportXMLScanListener</MethodClassName>
		<LogicSource><![CDATA[// Step 1 - Find the class name for this file:
String className = fileSource.getPath().replace('/', '.');
if (className.endsWith(".xml"))
	className = className.substring(0, className.length() - 4);
boolean classFound = false;
Record record = null;
String databaseName = null;
Map<String,String> oldProperties = new HashMap<String,String>();

if (className.endsWith("DatabaseInfo"))
{
	record = new DatabaseInfo();
	databaseName = this.getDatabaseInfoDatabaseName(className);
    ((DatabaseInfo)record).setDatabaseName(databaseName);
    if (databaseName.indexOf('_') != -1)
    {
    	String tableName = "DatabaseInfo_" + databaseName.substring(0, databaseName.indexOf('_'));
        record.setTableNames(tableName);
    }
    record.init(this.m_parent);
    this.saveOldProperties(oldProperties, record);
}
else
{
    while (!classFound)
    {
       record = (Record)ClassServiceUtility.getClassService().makeObjectFromClassName(className);
       if (record != null)
       {
            record.init(this.m_parent);
            classFound = true;
       }
       else
       {
           if (className.indexOf('.') == -1)
           {
               System.out.println("Class not found: " + fileSource.toString());
               return;
           }
           databaseName = className.substring(0, className.indexOf('.'));
           className = className.substring(className.indexOf('.') + 1);
        }
    }
    this.saveOldProperties(oldProperties, record);
    databaseName = this.fixDatabaseName(databaseName, record, oldProperties);
}

String recordDBName = record.getDatabaseName();
System.out.println("Process import: " + className + " (" + databaseName + ") to " + record.getRecordName() + " (" + recordDBName + ")");
if (!inout.importXML(record, fileSource.getPath(), null))
	System.exit(1);

this.restoreOldProperties(oldProperties, record);
record.free();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785066">
		<LastChanged>2010-12-03T03:55:14</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>40</Sequence>
		<MethodName>fixDatabaseName</MethodName>
		<LogicDescription><![CDATA[Clean up the database name;
@param databaseName
@return]]></LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String databaseName, Record record, Map&lt;String,String&gt; oldProperties</MethodInterface>
		<MethodClassName>ImportXMLScanListener</MethodClassName>
		<LogicSource><![CDATA[if (databaseName.endsWith(BaseDatabase.SHARED_SUFFIX))
	databaseName = databaseName.substring(0, databaseName.length() - BaseDatabase.SHARED_SUFFIX.length());
else if (databaseName.endsWith(BaseDatabase.USER_SUFFIX))
	databaseName = databaseName.substring(0, databaseName.length() - BaseDatabase.USER_SUFFIX.length());
String recordDBName = record.getDatabaseName();
if (record instanceof DatabaseInfo)
	recordDBName = "DatabaseInfo";
if (!databaseName.startsWith(recordDBName))
{	// Typically user name
	this.getTask().setProperty(DBConstants.DB_USER_PREFIX, databaseName.substring(0, databaseName.indexOf('_')));
	databaseName = databaseName.substring(databaseName.indexOf('_') + 1);
}
if (!databaseName.endsWith(recordDBName))
{
	String suffix = databaseName.substring(databaseName.lastIndexOf('_') + 1);
	if (suffix.length() == 2)
	{	// Typically language
    	this.getTask().setProperty(DBParams.LANGUAGE, suffix);
    	databaseName = databaseName.substring(0, databaseName.lastIndexOf('_'));
    	suffix = databaseName.substring(databaseName.lastIndexOf('_') + 1);       		
	}
    if (!databaseName.endsWith(recordDBName))
    {
    	databaseName = databaseName.substring(0, databaseName.lastIndexOf('_'));
    	if ((record.getDatabaseType() & DBConstants.USER_DATA) != 0)
    		this.getTask().setProperty(record.getDatabaseName() + BaseDatabase.DBUSER_PARAM_SUFFIX, suffix);
    	else
    		this.getTask().setProperty(record.getDatabaseName() + BaseDatabase.DBSHARED_PARAM_SUFFIX, suffix);
    	suffix = databaseName.substring(databaseName.lastIndexOf('_') + 1); //?      		
    }
    if (!databaseName.endsWith(recordDBName))
    {
    	this.getTask().setProperty(DBConstants.SUB_SYSTEM_LN_SUFFIX, suffix);
    	databaseName = databaseName.substring(0, databaseName.lastIndexOf('_'));
    }
}
return databaseName;]]></LogicSource>
		<LogicThrows/>
		<Protection>private</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785067">
		<LastChanged>2010-05-25T14:57:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>50</Sequence>
		<MethodName>getDatabaseInfoDatabaseName</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String className</MethodInterface>
		<MethodClassName>ImportXMLScanListener</MethodClassName>
		<LogicSource><![CDATA[String databaseName = className.substring(0, className.length() - 1 - "DatabaseInfo".length());
databaseName = databaseName.substring(databaseName.lastIndexOf('.') + 1);
if (databaseName.endsWith(BaseDatabase.SHARED_SUFFIX))
	databaseName = databaseName.substring(0, databaseName.length() - BaseDatabase.SHARED_SUFFIX.length());
if (databaseName.endsWith(BaseDatabase.USER_SUFFIX))
	databaseName = databaseName.substring(0, databaseName.length() - BaseDatabase.USER_SUFFIX.length());
return databaseName;]]></LogicSource>
		<LogicThrows/>
		<Protection>private</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785068">
		<LastChanged>2010-05-25T14:58:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>60</Sequence>
		<MethodName>saveOldProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Map&lt;String,String&gt; oldProperties, Record record</MethodInterface>
		<MethodClassName>ImportXMLScanListener</MethodClassName>
		<LogicSource><![CDATA[this.saveOldProperty(oldProperties, record.getDatabaseName() + BaseDatabase.DBSHARED_PARAM_SUFFIX);
this.saveOldProperty(oldProperties, record.getDatabaseName() + BaseDatabase.DBUSER_PARAM_SUFFIX);
this.saveOldProperty(oldProperties, DBConstants.DB_USER_PREFIX);
this.saveOldProperty(oldProperties, DBConstants.SUB_SYSTEM_LN_SUFFIX);
this.saveOldProperty(oldProperties, DBParams.LANGUAGE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785069">
		<LastChanged>2010-05-25T14:58:42</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>70</Sequence>
		<MethodName>saveOldProperty</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Map&lt;String,String&gt; oldProperties, String param</MethodInterface>
		<MethodClassName>ImportXMLScanListener</MethodClassName>
		<LogicSource>oldProperties.put(param, this.getTask().getProperty(param));</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785070">
		<LastChanged>2010-05-25T14:59:04</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>restoreOldProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Map&lt;String,String&gt; oldProperties, Record record</MethodInterface>
		<MethodClassName>ImportXMLScanListener</MethodClassName>
		<LogicSource><![CDATA[this.restoreOldProperty(oldProperties, record.getDatabaseName() + BaseDatabase.DBSHARED_PARAM_SUFFIX);
this.restoreOldProperty(oldProperties, record.getDatabaseName() + BaseDatabase.DBUSER_PARAM_SUFFIX);
this.restoreOldProperty(oldProperties, DBConstants.DB_USER_PREFIX);
this.restoreOldProperty(oldProperties, DBConstants.SUB_SYSTEM_LN_SUFFIX);
this.restoreOldProperty(oldProperties, DBParams.LANGUAGE);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785071">
		<LastChanged>2010-05-25T14:59:30</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>90</Sequence>
		<MethodName>restoreOldProperty</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>Map&lt;String,String&gt; oldProperties, String param</MethodInterface>
		<MethodClassName>ImportXMLScanListener</MethodClassName>
		<LogicSource>this.getTask().setProperty(param, oldProperties.get(param));</LogicSource>
		<LogicThrows/>
		<Protection>private</Protection>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785072">
		<LastChanged>2010-05-25T15:02:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>350</Sequence>
		<MethodName>postProcessThisDirectory</MethodName>
		<LogicDescription><![CDATA[Do whatever processing that needs to be done on this directory.
@return caller specific information about this directory.]]></LogicDescription>
		<MethodReturns/>
		<MethodInterface>File fileDir, Object objDirID</MethodInterface>
		<MethodClassName>BaseScanListener</MethodClassName>
		<LogicSource>// By default don't process directories</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785073">
		<LastChanged>2010-05-25T15:23:49</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>postProcessThisDirectory</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DeleteScanListener</MethodClassName>
		<LogicSource><![CDATA[if (DBConstants.TRUE.equalsIgnoreCase(this.getProperty("deleteDir")))
	fileDir.delete();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785075">
		<LastChanged>2010-05-27T16:37:22</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DateOffsetScanListener</MethodClassName>
		<LogicSource><![CDATA[super;
if (this.getProperty("dayOffset") != null)
    dayOffset = Integer.parseInt(this.getProperty("dayOffset"));
if (this.getProperty("monthOffset") != null)
    monthOffset = Integer.parseInt(this.getProperty("monthOffset"));
if (this.getProperty("yearOffset") != null)
    yearOffset = Integer.parseInt(this.getProperty("yearOffset"));
if (this.getProperty("endOfMonthFields") != null)
{
    String fields = this.getProperty("endOfMonthFields");
    eomFields = fields.split(",");
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785076">
		<LastChanged>2011-09-09T15:14:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>convertString</MethodName>
		<LogicDescription>Do any string conversion on the file text</LogicDescription>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>String string</MethodInterface>
		<MethodClassName>DateOffsetScanListener</MethodClassName>
		<LogicSource><![CDATA[if (string != null)
{
    int startTag = string.indexOf('<');
    int endTag = string.indexOf('>');
    if (startTag > -1)
        if (endTag > startTag)
    {
        String tag = string.substring(startTag + 1, endTag);
        boolean bDateField = tag.toUpperCase().contains("DATE");
        if (eomFields != null)
        {
        	for (String token : eomFields)
        	{
                if (tag.equals(token))
                	bDateField = true;
        	}
        }
        if (bDateField)
        {
            int endData = string.indexOf('<', endTag);
            if (endData != -1)
            {
                String dateString = string.substring(endTag + 1, endData);
                Date date = new Date();
                int type = this.parseDate(dateString, date);
                if (type != 0)
                {
                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(date);
                    if (yearOffset != 0)
                    {
                        calendar.add(Calendar.YEAR, yearOffset);                                
                    }
                    int day = 0;
                    if (monthOffset != 0)
                    {
                        calendar.add(Calendar.DAY_OF_MONTH, 1);
                        day = calendar.get(Calendar.DAY_OF_MONTH);  // Just want to see if this was the end of the month
                        calendar.add(Calendar.DAY_OF_MONTH, -1);     // Restore original date
                        calendar.add(Calendar.MONTH, monthOffset);  // Add the month offset
                        if (eomFields != null)
                        {
                            for (String token : eomFields)
                            {
                                if (tag.equals(token))
                                {
                                    if (day == 1)
                                    {   // end of (next) month
                                        calendar.add(Calendar.DAY_OF_MONTH, 5);     // next month
                                        calendar.set(Calendar.DAY_OF_MONTH, 1);     // First of next month
                                        calendar.add(Calendar.DAY_OF_MONTH, -1);    // End of month
                                    }
                                }
                            }
                        }
                    }
                    if (dayOffset != 0)
                    {
                        calendar.add(Calendar.DAY_OF_MONTH, dayOffset);                                
                    }
                    date = calendar.getTime();
                    
                    String newDateString = this.formatDate(date, type);
                    if (newDateString != null)
                        string = string.substring(0, endTag + 1) + newDateString + string.substring(endData);
                }
            }
        }
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785077">
		<LastChanged>2010-05-27T16:39:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>200</Sequence>
		<MethodName>parseDate</MethodName>
		<LogicDescription><![CDATA[Decode date time value and set the field value.
@param field
@return]]></LogicDescription>
		<MethodReturns>int</MethodReturns>
		<MethodInterface>String strValue, Date date</MethodInterface>
		<MethodClassName>DateOffsetScanListener</MethodClassName>
		<LogicSource><![CDATA[int type = 0;
if (strValue == null)
    return type;

Date parsedDate = null;
try {
        parsedDate = XmlUtilities.dateTimeFormat.parse(strValue);
        type = DBConstants.DATE_TIME_FORMAT;
} catch (ParseException e) {
}

try {
    if (parsedDate == null)
    {
        parsedDate = XmlUtilities.dateFormat.parse(strValue);
        type = DBConstants.DATE_ONLY_FORMAT;
    }
} catch (ParseException e) {
}

try {
    if (parsedDate == null)
    {
        parsedDate = XmlUtilities.timeFormat.parse(strValue);
        type = DBConstants.TIME_ONLY_FORMAT;
    }
} catch (ParseException e) {
}

if (parsedDate != null)
    date.setTime(parsedDate.getTime());
else
    type = 0;

return type;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785078">
		<LastChanged>2010-05-27T16:39:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>300</Sequence>
		<MethodName>formatDate</MethodName>
		<LogicDescription/>
		<MethodReturns>String</MethodReturns>
		<MethodInterface>Date date, int type</MethodInterface>
		<MethodClassName>DateOffsetScanListener</MethodClassName>
		<LogicSource><![CDATA[String string = null;
if (type == DBConstants.DATE_TIME_FORMAT)
    string = XmlUtilities.dateTimeFormat.format(date);
else if (type == DBConstants.DATE_ONLY_FORMAT)
    string = XmlUtilities.dateFormat.format(date);
else if (type == DBConstants.TIME_ONLY_FORMAT)
    string = XmlUtilities.timeFormat.format(date);
return string;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785080">
		<LastChanged>2010-10-20T12:44:23</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseRegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[super;
new Menus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785081">
		<LastChanged>2010-11-05T11:35:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>30</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseRegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[super;

this.getMainRecord().addListener(new FileListener(null)
{
    public int doRecordChange(FieldInfo field, int iChangeType, boolean bDisplayOption)
    {   // Return an error to stop the change
        if (iChangeType == DBConstants.AFTER_ADD_TYPE)
        {
        	strMessage = DBConstants.BLANK;
            afterAdd();
            if ((strMessage != null) && (strMessage.toUpperCase().startsWith("ERROR")))
            	return getTask().setLastError(strMessage);
        }
        return super.doRecordChange(field, iChangeType, bDisplayOption);
    }
});

BaseMessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager();
if (messageManager != null)
{
    Object source = this;
    BaseMessageFilter filter = new BaseMessageFilter(MessageConstants.TRX_RETURN_QUEUE, MessageConstants.INTERNET_QUEUE, source, null);
    filter.addMessageListener(this);
    messageManager.addMessageFilter(filter);
    m_intRegistryID = filter.getRegistryID();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785082">
		<LastChanged>2010-11-05T08:50:33</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>doCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseRegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[boolean bSuccess = super;
if (MenuConstants.SUBMIT.equalsIgnoreCase(strCommand))
    if (bSuccess)
{
//this.setupUserInfo();   // Success, set up their databases
}
return bSuccess;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785083">
		<LastChanged>2010-11-05T08:50:48</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>doServletCommand</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseRegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[BaseScreen screen = super;    // Process params from previous screen

if (MenuConstants.SUBMIT.equalsIgnoreCase(this.getProperty(DBParams.COMMAND)))
{
//  if (screen == null)
//      this.setupUserInfo();   // Success, set up their databases
}

return screen;    // By default, don't do anything]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785084">
		<LastChanged>2010-10-20T12:46:17</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>500</Sequence>
		<MethodName>afterAdd</MethodName>
		<LogicDescription>Set up the new site after the user information is added.</LogicDescription>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseRegistrationScreen</MethodClassName>
		<LogicSource>this.setupUserInfo();</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785085">
		<LastChanged>2011-10-13T00:02:19</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>setupUserProperties</MethodName>
		<LogicDescription/>
		<MethodReturns>RunRemoteProcessMessageData</MethodReturns>
		<MethodInterface>Map&lt;String, Object&gt; properties</MethodInterface>
		<MethodClassName>BaseRegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[try {
    Record recUser = this.getMainRecord();
    
    String processClassName = (String)properties.get(RunRemoteProcessMessageData.PROCESS_CLASS_NAME);
    
    // Step 1 - Get the web site prefix
    String sitePrefix = (String)properties.get(MenusMessageData.SITE_PREFIX);
    String fullSitePrefix = sitePrefix;
    String strDomain = (String)properties.get(DBParams.DOMAIN);
    if (strDomain == null)
    {
        strDomain = this.getProperty(DBParams.DOMAIN);
        if ((strDomain == null) || (strDomain.length() == 0))
            strDomain = DEFAULT_DOMAIN;
        if (strDomain.indexOf('.') != strDomain.lastIndexOf('.'))
            strDomain = strDomain.substring(strDomain.indexOf('.') + 1);
    }
    String homeMenu = (String)properties.get(MenusMessageData.SITE_HOME_MENU);

    // Next, Create a main site menu for this new domain.
    Record recMenus = this.getRecord(Menus.kMenusFile);
    recMenus.addNew();
    String siteTemplate = (String)properties.get(SITE_TEMPLATE_CODE_PARAM);
    recMenus.getField(Menus.kCode).setString(siteTemplate);
    int iOldOrder = recMenus.getDefaultOrder();
    recMenus.setKeyArea(Menus.kCodeKey);
    BaseBuffer buffer = null;
    if (recMenus.seek(null))
    {
        buffer = new VectorBuffer(null);
        buffer.fieldsToBuffer(recMenus);
    }
    else
        return null;        // Error - Site template does not exist
    recMenus.setKeyArea(iOldOrder);
    
    recMenus.addNew();
    if (buffer != null)     // Always
        buffer.bufferToFields(recMenus, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    
    recMenus.getField(Menus.kSequence).setValue(100);
    String siteNameTemplate = (String)properties.get(SITE_NAME_TEMPLATE_PARAM);
    if (siteNameTemplate == null)
        siteNameTemplate = "{0}''s Demo site";
    String siteName = MessageFormat.format(siteNameTemplate, sitePrefix.toUpperCase().substring(0,1) + sitePrefix.substring(1));
    recMenus.getField(Menus.kName).setString(siteName);
    ((PropertiesField)recMenus.getField(Menus.kParams)).setProperty(MAIN_USER_PARAM, recUser.getField(UserInfo.kUserName).toString());
    String templateArchivePath = ((PropertiesField)recMenus.getField(Menus.kParams)).getProperty(DBConstants.USER_ARCHIVE_FOLDER);
    if ((templateArchivePath == null) || (templateArchivePath.length() == 0))
        templateArchivePath = Utility.addToPath(DEFAULT_ARCHIVE_FOLDER, CURRENT_TEST_DATA_DIR);
    
    int iErrorCode = DBConstants.DUPLICATE_KEY;
    int iCounter = 0;
    while (iErrorCode == DBConstants.DUPLICATE_KEY)
    {
        try {
            fullSitePrefix = sitePrefix;
            if (iCounter > 0)
                fullSitePrefix += Integer.toString(iCounter);

            recMenus.getField(Menus.kCode).setString(fullSitePrefix + '.' + strDomain);

            recMenus.add();
            iErrorCode = DBConstants.NORMAL_RETURN;
        } catch (DBException ex) {
            iErrorCode = ex.getErrorCode();
            if (iErrorCode != DBConstants.DUPLICATE_KEY)
            {
                ex.printStackTrace();
                return null;     // Error
            }
            iCounter++;
            if (iCounter >= 100)
                break;
        }
    }
    // Now we have this user's domain: sitePrefix
    
    // Update the user's account to show they own this new domain
    if (iErrorCode == DBConstants.NORMAL_RETURN)
    {
        iOldOrder = recUser.getDefaultOrder();
        recUser.setKeyArea(UserInfo.kIDKey);
        recUser.edit();
        ((PropertiesField)recUser.getField(UserInfo.kProperties)).setProperty(MenusMessageData.DOMAIN_NAME, recMenus.getField(Menus.kCode).toString());
        ((PropertiesField)recUser.getField(UserInfo.kProperties)).setProperty(DBParams.HOME, homeMenu);
        recUser.set();
        recUser.setKeyArea(iOldOrder);
    }
    
    TreeMessage message = new TreeMessage(null, null);
    RunRemoteProcessMessageData runRemoteProcessRequest = new RunRemoteProcessMessageData(message, null);

    CreateSiteMessageData createSiteRequest = new CreateSiteMessageData(runRemoteProcessRequest, null);
    runRemoteProcessRequest.addMessageDataDesc(createSiteRequest);
    MessageRecordDesc userInfoMessageData = (MessageRecordDesc)createSiteRequest.getMessageDataDesc(UserInfo.kUserInfoFile);
    MessageRecordDesc menusMessageData = (MessageRecordDesc)createSiteRequest.getMessageDataDesc(Menus.kMenusFile);
    
    String user = this.getProperty(DBParams.USER_NAME);
    String auth = this.getProperty(DBParams.AUTH_TOKEN);
    runRemoteProcessRequest.put(RunRemoteProcessMessageData.PROCESS_CLASS_NAME, processClassName);
    runRemoteProcessRequest.put(DBParams.USER_NAME, user);
    runRemoteProcessRequest.put(DBParams.AUTH_TOKEN, auth);
    
    userInfoMessageData.putRawRecordData(recUser);  // User, password

    menusMessageData.put(MenusMessageData.DOMAIN_NAME, fullSitePrefix + '.' + strDomain);
    menusMessageData.put(MenusMessageData.SITE_PREFIX, fullSitePrefix);
    menusMessageData.put(MenusMessageData.SITE_NAME, siteName);
    menusMessageData.put(MenusMessageData.XSL_TEMPLATE_PATH, templateArchivePath);
    menusMessageData.put(MenusMessageData.SITE_TEMPLATE_MENU, siteTemplate);
    menusMessageData.put(MenusMessageData.SITE_HOME_MENU, homeMenu);

    return runRemoteProcessRequest;
    
} catch (DBException ex) {
    return null;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785088">
		<LastChanged>2010-10-20T12:49:13</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>displayError</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>DBException ex</MethodInterface>
		<MethodClassName>BaseRegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[if ((ex instanceof DatabaseException) && (ex.getErrorCode() == Constants.DUPLICATE_KEY))
	this.displayError("Account already exists, sign-in using this user name", DBConstants.WARNING_MESSAGE);
else
	super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785089">
		<LastChanged>2010-10-20T13:31:47</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>openOtherRecords</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseSetupSiteProcess</MethodClassName>
		<LogicSource><![CDATA[super;
new Menus(this);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785090">
		<LastChanged>2011-10-13T00:06:05</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>setupUserInfo</MethodName>
		<LogicDescription/>
		<MethodReturns>StandardMessageResponseData</MethodReturns>
		<MethodInterface>CreateSiteMessageData siteMessageData</MethodInterface>
		<MethodClassName>BaseSetupSiteProcess</MethodClassName>
		<LogicSource><![CDATA[MessageRecordDesc userInfoMessageData = (MessageRecordDesc)siteMessageData.getMessageDataDesc(UserInfo.kUserInfoFile);
MessageRecordDesc menusMessageData = (MessageRecordDesc)siteMessageData.getMessageDataDesc(Menus.kMenusFile);

TreeMessage replyMessage = new TreeMessage(null, null);
StandardMessageResponseData runRemoteProcessResponse = new StandardMessageResponseData(replyMessage, null);
try {
    Record recUser = this.getMainRecord();
    recUser.addNew();
    recUser.setKeyArea(UserInfo.kUserNameKey);
    recUser.getField(UserInfo.kUserName).setString((String)userInfoMessageData.get(UserInfo.USER_NAME));
    if (recUser.seek(null))
        recUser.edit();
    else
        recUser.addNew(); // If user doesn't exist, create it
    userInfoMessageData.getRawRecordData(recUser);  // User username, password
    ((PropertiesField)recUser.getField(UserInfo.kProperties)).setProperty(DBParams.HOME, (String)menusMessageData.get(MenusMessageData.SITE_HOME_MENU));
    ((PropertiesField)recUser.getField(UserInfo.kProperties)).setProperty(MenusMessageData.DOMAIN_NAME, (String)menusMessageData.get(MenusMessageData.DOMAIN_NAME));
    if (recUser.getEditMode() == DBConstants.EDIT_ADD)
        recUser.add();
    else
        recUser.set();
    
    Record recMenus = this.getRecord(Menus.kMenusFile);

    // First read the template menu record
    String siteTemplate = (String)menusMessageData.get(MenusMessageData.SITE_TEMPLATE_MENU);
    recMenus.getField(Menus.kCode).setString(siteTemplate);
    int iOldOrder = recMenus.getDefaultOrder();
    recMenus.setKeyArea(Menus.kCodeKey);
    BaseBuffer buffer = null;
    if (recMenus.seek(null))
    {
        buffer = new VectorBuffer(null);
        buffer.fieldsToBuffer(recMenus);
    }
    else
    {
        runRemoteProcessResponse.setMessage("Error: Site template not found: " + siteTemplate);
        return runRemoteProcessResponse;
    }

    // Next, create the new menu for this domain (using template record info)
    recMenus.addNew();
    recMenus.setKeyArea(Menus.kCodeKey);
    recMenus.getField(Menus.kCode).setString((String)menusMessageData.get(MenusMessageData.DOMAIN_NAME));
    if (recMenus.seek(null))
        recMenus.edit();    // If it already exists, I must be on the same machine that sent me this message!
    else
    {
        recMenus.addNew();  // If it doesn't exist, create it
        if (buffer != null)     // Always
            buffer.bufferToFields(recMenus, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
    }
    
    recMenus.getField(Menus.kSequence).setValue(100);
    
    // Create customized xslt stylesheet
    String homeDir = System.getProperty("user.home") + File.separator + ".tourapp";
    recMenus.getField(Menus.kCode).setString((String)menusMessageData.get(MenusMessageData.DOMAIN_NAME));

    String fullSitePrefix = (String)menusMessageData.get(MenusMessageData.SITE_PREFIX);
    String siteName = (String)menusMessageData.get(MenusMessageData.SITE_NAME);
    String templateArchivePath = (String)menusMessageData.get(MenusMessageData.XSL_TEMPLATE_PATH);
    String siteHomeCode = (String)menusMessageData.get(MenusMessageData.SITE_HOME_MENU);
    recMenus.getField(Menus.kName).setString(siteName);

    String destArchivePath  = templateArchivePath;
    if (destArchivePath.lastIndexOf(File.separator) != -1)  // Always
        destArchivePath = destArchivePath.substring(destArchivePath.lastIndexOf(File.separator) + 1); // Dest archive dir
    destArchivePath  = Utility.addToPath(homeDir, fullSitePrefix + File.separator + destArchivePath);

    ((PropertiesField)recMenus.getField(Menus.kParams)).setProperty(DBConstants.USER_ARCHIVE_FOLDER, destArchivePath);
    ((PropertiesField)recMenus.getField(Menus.kParams)).setProperty(DBConstants.DB_USER_PREFIX, fullSitePrefix + "_");

    String templateFilename = ((PropertiesField)recMenus.getField(Menus.kParams)).getProperty(MenusMessageData.XSL_TEMPLATE_PATH);
    if ((templateFilename == null) || (templateFilename.length() == 0))
        templateFilename = this.getProperty(MenusMessageData.XSL_TEMPLATE_PATH);
    if ((templateFilename == null) || (templateFilename.length() == 0))
        templateFilename = "docs/styles/xsl/program/fixdemotemplate.xsl";
    ((PropertiesField)recMenus.getField(Menus.kParams)).setProperty(MenusMessageData.XSL_TEMPLATE_PATH, templateFilename);

    if (recMenus.getEditMode() == DBConstants.EDIT_ADD)
        recMenus.add();
    else
        recMenus.set();

    this.createCustomArchive(destArchivePath, homeDir, templateArchivePath, templateFilename);

    // Make sure the user's account has been added to their new database
    BaseApplication app = (BaseApplication)this.getTask().getApplication();

    Map<String,Object> properties = new Hashtable<String,Object>();
    if (app.getProperties() != null)
        properties.putAll(app.getProperties());
    properties.put(DBConstants.DB_USER_PREFIX, fullSitePrefix + "_");
    properties.put(DBConstants.LOAD_INITIAL_DATA, DBConstants.TRUE);
    properties.put(DBConstants.USER_ARCHIVE_FOLDER, destArchivePath);
    BaseApplication appTemp = new BaseApplication(app.getEnvironment(), properties, null);
    Task task = new AutoTask(appTemp, null, null);
    BaseProcess recordOwner = new BaseProcess(task, null, null);
    UserInfo recUserNew = new UserInfo(recordOwner);
    // Also add this user as an admin
    recUserNew.addNew();
    recUserNew.moveFields(recUser, null, DBConstants.DISPLAY, DBConstants.SCREEN_MOVE, false, false, false);
    if (properties.get(BaseRegistrationScreen.ADMIN_HOME_MENU_CODE) != null)
        ((PropertiesField)recUserNew.getField(UserInfo.kProperties)).setProperty(DBParams.HOME, properties.get(BaseRegistrationScreen.ADMIN_HOME_MENU_CODE).toString());
    UserGroup recUserGroup = new UserGroup(this);
    recUserGroup.setKeyArea(UserGroup.kDescriptionKey);
    recUserGroup.getField(UserGroup.kDescription).setString("Admin");
    if (recUserGroup.seek(">="))
        recUserNew.getField(UserInfo.kUserGroupID).moveFieldToThis(recUserGroup.getCounterField());
    recUserGroup.free();
    recUserNew.add();
    
    // Set all the new users with the same password
    recUserNew.addNew();
    boolean[] rgbEnabled = recUserNew.setEnableListeners(false);
    Object[] rgbfldEnabled = recUserNew.setEnableFieldListeners(false);
    recUserNew.close();
    while (recUserNew.hasNext())
    {
        recUserNew.next();
        if (recUserNew.getField(UserInfo.kID).getValue() == 1)
            continue; // Anonymous user
        recUserNew.edit();
        recUserNew.getField(UserInfo.kPassword).moveFieldToThis(recUser.getField(UserInfo.kPassword), DBConstants.DISPLAY, DBConstants.SCREEN_MOVE);
        recUserNew.set();
    }
    recUserNew.setEnableListeners(rgbEnabled);
    recUserNew.setEnableFieldListeners(rgbfldEnabled);
    
    String strFreeIfDone = this.getEnvironment().getProperty(DBParams.FREEIFDONE);
    this.getEnvironment().setProperty(DBParams.FREEIFDONE, DBConstants.FALSE);
    appTemp.free();
    this.getEnvironment().setProperty(DBParams.FREEIFDONE, strFreeIfDone);
   
    recMenus.setKeyArea(iOldOrder);
    
    runRemoteProcessResponse.setMessage("Okay: " + fullSitePrefix);
    return runRemoteProcessResponse;
} catch (DBException ex) {
    ex.printStackTrace();
    runRemoteProcessResponse.setMessage("Error: " + ex.getMessage());
    return runRemoteProcessResponse;
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785091">
		<LastChanged>2010-10-27T06:11:41</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>800</Sequence>
		<MethodName>createCustomArchive</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>String destArchivePath, String homePath, String templateArchivePath, String templateFilename</MethodInterface>
		<MethodClassName>BaseSetupSiteProcess</MethodClassName>
		<LogicSource><![CDATA[Record recUser = this.getMainRecord();
Map<String,String> map = new HashMap<String,String>();
map.put("${email}", recUser.getField(UserInfo.kUserName).toString());
Date date = new Date();   // Today
DateField dateField = new DateField(null, null, -1, null, null);
dateField.setDate(date, DBConstants.DISPLAY, DBConstants.INIT_MOVE);
map.put("${today}", dateField.toString());
dateField.free();

URL url = this.getTask().getApplication().getResourceURL(templateFilename, null);
StringBuilder sb = new StringBuilder(Utility.transferURLStream(url.toString(), null));
sb = Utility.replace(sb, map);
String templateFile = Utility.addToPath(destArchivePath, "fixdemo.xsl");
PrintWriter out = null;
try {
    File file = new File(templateFile);
    file.getParentFile().getParentFile().mkdirs();  // .tourapp
    file.getParentFile().mkdirs();  // Folder
    file.createNewFile();
    out = new PrintWriter(file);
} catch (FileNotFoundException e) {} catch (IOException e) {
    e.printStackTrace();
}
if (out != null)
{
    out.print(sb);
    out.close();
    
    // First, make sure the base demo files exist in the file system
    String workDir = templateArchivePath;
    if (workDir.lastIndexOf(File.separator) != -1)  // Always
        workDir = workDir.substring(workDir.lastIndexOf(File.separator) + 1);
    String workDirPath = Utility.addToPath(homePath, workDir);
    this.populateSourceDir(templateArchivePath, workDirPath);
    
    // Run the xslt against the base demo files.
    Map<String, Object> properties = new HashMap<String, Object>();
    properties.put("sourceDir", workDirPath);
    properties.put("destDir", destArchivePath);
    properties.put("extension", "xml");
    properties.put("filter", ".*");   // Hack (filter is a bad name since it it used in many places)
    properties.put("listenerClass", XMLScanListener.class.getName());
    properties.put("converterPath", templateFile);
    BaseProcess process = new ConvertCode(this.getTask(), null, properties);
    process.run();
    process.free();
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785092">
		<LastChanged>2011-10-12T16:43:18</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>populateSourceDir</MethodName>
		<LogicDescription/>
		<MethodReturns>boolean</MethodReturns>
		<MethodInterface>String templateDir, String srcDir</MethodInterface>
		<MethodClassName>BaseSetupSiteProcess</MethodClassName>
		<LogicSource><![CDATA[URL fromDirUrl = this.getTask().getApplication().getResourceURL(templateDir, null);
if ("http".equalsIgnoreCase(fromDirUrl.getProtocol()))
{
    String packageName = templateDir + "/main_user/org/jbundle/main/user/db";
    packageName = packageName.replace('/', '.');
    Bundle bundle = ClassServiceUtility.getClassService().getClassFinder(null).findBundle(packageName, null);

    if (bundle == null)
        return false;   // Couldn't file files
    OsgiJnlpServlet.transferBundleFiles(bundle, templateDir, srcDir);
}
else if (!"file".equalsIgnoreCase(fromDirUrl.getProtocol()))
    return false;
String fromDir = fromDirUrl.getFile();
File fromDirFile = new File(fromDir);
File srcDirFile = new File(srcDir);
Map<String, Object> properties = new HashMap<String, Object>();
properties.put("extension", "xml");
properties.put("filter", ".*");   // Hack (filter is a bad name since it it used in many places)
if (srcDirFile.exists())
{
    long srcModified = srcDirFile.lastModified();
    long fromModified = fromDirFile.lastModified();
    if (srcModified > fromModified)
        return true;    // It's already set up and current!
    // Delete the directory so I can replace it with new data
    properties.put("sourceDir", srcDir);
    properties.put("destDir", srcDir);
    properties.put("listenerClass", DeleteScanListener.class.getName());
    properties.put("deleteDir", DBConstants.TRUE);
    BaseProcess process = new ConvertCode(this.getTask(), null, properties);
    process.run();
    process.free();
}
properties.put("sourceDir", fromDir);
properties.put("destDir", srcDir);
properties.put("listenerClass", BaseScanListener.class.getName());
BaseProcess process = new ConvertCode(this.getTask(), null, properties);
process.run();
process.free();
return true;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785093">
		<LastChanged>2010-10-20T13:34:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>openMainRecord</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseSetupSiteProcess</MethodClassName>
		<LogicSource>return new UserInfo(this);</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785094">
		<LastChanged>2011-10-12T16:19:16</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>700</Sequence>
		<MethodName>getSiteProperties</MethodName>
		<LogicDescription/>
		<MethodReturns>Map&lt;String, Object&gt;</MethodReturns>
		<MethodInterface/>
		<MethodClassName>BaseRegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[Map<String, Object> properties = new HashMap<String, Object>();

Record recUser = this.getMainRecord();

String sitePrefix = ((PropertiesField)recUser.getField(UserInfo.kProperties)).getProperty(MenusMessageData.SITE_PREFIX);
if (sitePrefix == null)
{
    sitePrefix = recUser.getField(UserInfo.kUserName).toString();
    if (sitePrefix.indexOf('@') != -1)
        sitePrefix = sitePrefix.substring(0, sitePrefix.indexOf('@'));
    sitePrefix = sitePrefix.toLowerCase();
    sitePrefix = sitePrefix.replace('.', '-');
}
properties.put(MenusMessageData.SITE_PREFIX, sitePrefix);

String siteTemplate = this.getProperty(SITE_TEMPLATE_CODE_PARAM);
if (siteTemplate == null)
    siteTemplate = SITE_TEMPLATE_CODE;
properties.put(SITE_TEMPLATE_CODE_PARAM, siteTemplate);

String homeCode = this.getProperty(MenusMessageData.SITE_HOME_MENU);
if (homeCode == null)
    homeCode = HOME_MENU_CODE;
properties.put(MenusMessageData.SITE_HOME_MENU, homeCode);

String siteHomeCode = this.getProperty(MenusMessageData.SITE_TEMPLATE_MENU);
if (siteHomeCode == null)
    siteHomeCode = DEFAULT_SITE_HOME_CODE;
properties.put(MenusMessageData.SITE_TEMPLATE_MENU, siteHomeCode);

String processClassName = this.getProperty(RunRemoteProcessMessageData.PROCESS_CLASS_NAME);
if (processClassName == null)
	processClassName = BaseSetupSiteProcess.class.getName();
properties.put(RunRemoteProcessMessageData.PROCESS_CLASS_NAME, processClassName);

String destination = this.getProperty(TrxMessageHeader.DESTINATION_PARAM);
if (destination == null)
	destination = "http://www.tourgeek.com:8181/xmlws";
properties.put(TrxMessageHeader.DESTINATION_PARAM, destination);        

String userHomeMenu = this.getProperty(ADMIN_HOME_MENU_CODE);
if (userHomeMenu == null)
	userHomeMenu = DEFAULT_ADMIN_HOME_MENU;
properties.put(ADMIN_HOME_MENU_CODE, userHomeMenu);

return properties;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785095">
		<LastChanged>2010-10-27T14:58:11</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getSiteProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>DemoRegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[Map<String, Object> properties = super;

String strDomain = this.getProperty(DBParams.DOMAIN);
if ((strDomain == null) || (strDomain.length() == 0))
    strDomain = DEFAULT_DOMAIN;
if (strDomain.indexOf('.') != strDomain.lastIndexOf('.'))
    strDomain = strDomain.substring(strDomain.indexOf('.') + 1);
strDomain = "demo." + strDomain;	// Demo sub-domain
properties.put(DBParams.DOMAIN, strDomain);

return properties;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785096">
		<LastChanged>2011-10-12T16:48:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>getSiteProperties</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SiteRegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[Map<String, Object> properties = super;

properties.put(BaseRegistrationScreen.SITE_TEMPLATE_CODE_PARAM, DEFAULT_SITE_TEMPLATE);
properties.put(BaseRegistrationScreen.SITE_NAME_TEMPLATE_PARAM, "{0} Site");
properties.put(MenusMessageData.SITE_TEMPLATE_MENU, "site");
properties.put(MenusMessageData.SITE_HOME_MENU, "siteStart");
properties.put(TrxMessageHeader.DESTINATION_PARAM, "http://tour-0020.tourgeek.com:8181/xmlws");

return properties;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785097">
		<LastChanged>2010-11-05T08:56:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseSetupSiteProcess</MethodClassName>
		<LogicSource><![CDATA[RunRemoteProcessMessageData runRemoteProcessMessageData = (RunRemoteProcessMessageData)message.getMessageDataDesc(null);
if (runRemoteProcessMessageData == null)
	message.addMessageDataDesc(runRemoteProcessMessageData = new RunRemoteProcessMessageData(null, null));
CreateSiteMessageData siteMessageData = (CreateSiteMessageData)runRemoteProcessMessageData.getMessageDataDesc(CreateSiteMessageData.CREATE_SITE);
if (siteMessageData == null)
	runRemoteProcessMessageData.addMessageDataDesc(siteMessageData = new CreateSiteMessageData(runRemoteProcessMessageData, null));
StandardMessageResponseData reply = this.setupUserInfo(siteMessageData);
if (reply == null)
	return null;
return reply.getMessage();]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785098">
		<LastChanged>2010-11-05T08:51:21</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>600</Sequence>
		<MethodName>setupUserInfo</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseRegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[MessageProcessInfo recMessageProcessInfo = null;
try {
    Record recUser = this.getMainRecord();
    Object bookmark = recUser.getLastModified(DBConstants.BOOKMARK_HANDLE);
    recUser = recUser.setHandle(bookmark, DBConstants.BOOKMARK_HANDLE);
    if ((recUser == null) ||
        (recUser.getEditMode() == DBConstants.EDIT_NONE) || (recUser.getEditMode() == DBConstants.EDIT_ADD))
            return;     // Never

    Map<String, Object> properties = this.getSiteProperties();
    RunRemoteProcessMessageData createSiteRequest = this.setupUserProperties(properties);

    recMessageProcessInfo = new MessageProcessInfo(this);
    recMessageProcessInfo.setKeyArea(MessageProcessInfo.kCodeKey);
    recMessageProcessInfo.getField(MessageProcessInfo.kCode).setString("RunRemoteProcessRQ");
    if (recMessageProcessInfo.seek(null))
    {
        TrxMessageHeader trxMessageHeader = recMessageProcessInfo.createProcessMessageHeader(null, MessageTransport.XML);
        if (trxMessageHeader == null)
            return;
        trxMessageHeader.put(TrxMessageHeader.DESTINATION_PARAM, properties.get(TrxMessageHeader.DESTINATION_PARAM));
        trxMessageHeader.put(MessageTransport.MANUAL_RESPONSE_PARAM, DBConstants.TRUE);    // For testing, allow manual requests
        if (m_intRegistryID != null)
            trxMessageHeader.put(TrxMessageHeader.REGISTRY_ID, m_intRegistryID);    // The return Queue ID
        BaseMessage message = createSiteRequest.getMessage();
        message.setMessageHeader(trxMessageHeader);
        if (!MessageTransport.DIRECT.equalsIgnoreCase((String)trxMessageHeader.get(MessageTransport.SEND_MESSAGE_BY_PARAM)))
        {
            BaseMessageManager messageManager = ((Application)this.getTask().getApplication()).getMessageManager();
            if (messageManager != null)
                messageManager.sendMessage(message);
        }
    }
} catch (DBException ex) {
    ex.printStackTrace();
} finally {
    recMessageProcessInfo.free();
}
    
synchronized (this)
{
   try {
	   waiting = true;
	   this.wait(40000);
   } catch (InterruptedException ex) {
	   ex.printStackTrace();
   }
   if (waiting)
	   strMessage = "Error: Timeout on message call";
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785099">
		<LastChanged>2010-11-05T09:04:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreateSiteMessageData</MethodClassName>
		<LogicSource><![CDATA[if (strKey == null)
    strKey = CREATE_SITE;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785100">
		<LastChanged>2010-10-28T06:57:50</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>CreateSiteMessageData</MethodClassName>
		<LogicSource><![CDATA[super;

this.addMessageDataDesc(new UserInfoMessageData(this, null));
this.addMessageDataDesc(new MenusMessageData(this, null));]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785101">
		<LastChanged>2010-10-28T06:59:03</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface>MessageDataParent messageDataParent, String strKey</MethodInterface>
		<MethodClassName>MessageDataDesc</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785105">
		<LastChanged>2010-10-28T07:06:28</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenusMessageData</MethodClassName>
		<LogicSource><![CDATA[if (strKey == null)
    strKey = Menus.kMenusFile;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785106">
		<LastChanged>2010-10-28T07:06:57</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>MenusMessageData</MethodClassName>
		<LogicSource><![CDATA[super;

for (String key: PROPERTIES)
{
    this.addMessageFieldDesc(key, String.class, MessageFieldDesc.REQUIRED, null);
}]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785107">
		<LastChanged>2010-10-28T07:08:45</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>10</Sequence>
		<MethodName>init</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoMessageData</MethodClassName>
		<LogicSource><![CDATA[if (strKey == null)
    strKey = UserInfo.kUserInfoFile;
super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785108">
		<LastChanged>2010-10-28T07:09:15</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>80</Sequence>
		<MethodName>setupMessageDataDesc</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoMessageData</MethodClassName>
		<LogicSource><![CDATA[super;

this.addMessageFieldDesc(UserInfo.USER_NAME, String.class, MessageFieldDesc.REQUIRED, null);
this.addMessageFieldDesc(UserInfo.PASSWORD, String.class, MessageFieldDesc.REQUIRED, null);]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785109">
		<LastChanged>2010-10-28T07:09:35</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>120</Sequence>
		<MethodName>putRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
this.putRawFieldData(record.getField(UserInfo.USER_NAME));
this.putRawFieldData(record.getField(UserInfo.PASSWORD));
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785110">
		<LastChanged>2010-10-28T07:09:51</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>getRawRecordData</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserInfoMessageData</MethodClassName>
		<LogicSource><![CDATA[int iErrorCode = super;
this.getRawFieldData(record.getField(UserInfo.USER_NAME));
this.getRawFieldData(record.getField(UserInfo.PASSWORD));
return iErrorCode;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785111">
		<LastChanged>2010-11-05T08:52:56</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>900</Sequence>
		<MethodName>handleMessage</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>BaseRegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[if (message != null)
    if (message.getMessageHeader().getRegistryIDMatch() != null)    // My private message
{
    strMessage = (String)message.get(StandardMessageResponseData.MESSAGE);
    synchronized (this)
    {
    	waiting = false;
    	this.notify();
    }
}
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785112">
		<LastChanged>2010-11-05T08:59:09</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>100</Sequence>
		<MethodName>processMessage</MethodName>
		<LogicDescription>Process this message and return a reply</LogicDescription>
		<MethodReturns>BaseMessage</MethodReturns>
		<MethodInterface>BaseMessage message</MethodInterface>
		<MethodClassName>BaseMessageProcess</MethodClassName>
		<LogicSource/>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785113">
		<LastChanged>2010-11-09T15:45:58</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>20</Sequence>
		<MethodName>addListeners</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SiteRegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[this.setProperty("terms", "terms");	// Terms resource key (change for different terms)

super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785114">
		<LastChanged>2010-11-09T16:09:02</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addOtherSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SiteRegistrationScreen</MethodClassName>
		<LogicSource><![CDATA[super;

// Subdomain field
UserInfo recUserInfo = (UserInfo)this.getRecord(UserInfo.kUserInfoFile);
BaseField field = new StringField(recUserInfo, "Sub-Domain", 10, null, null);
field.setVirtual(true);

recUserInfo.addPropertiesFieldBehavior(field, MenusMessageData.SITE_PREFIX);

field.setupDefaultView(this.getNextLocation(ScreenConstants.NEXT_LOGICAL, ScreenConstants.ANCHOR_DEFAULT), this, ScreenConstants.DEFAULT_DISPLAY);
new SStaticString(this.getNextLocation(ScreenConstants.RIGHT_OF_LAST, ScreenConstants.DONT_SET_ANCHOR), this, "xxxxx.tourgeek.com");]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785115">
		<LastChanged>2010-11-09T15:48:43</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>110</Sequence>
		<MethodName>addOtherSFields</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>UserEntryScreen</MethodClassName>
		<LogicSource>// override this to add other screen fields</LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785116">
		<LastChanged>2011-09-12T11:44:00</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>filterFile</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SourceHeaderScanListener</MethodClassName>
		<LogicSource><![CDATA[String strName = file.getName();
if (!strName.endsWith(".java"))
    return false;
return super;]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
	<LogicFile ID="16785117">
		<LastChanged>2011-09-12T14:07:36</LastChanged>
		<Deleted>N</Deleted>
		<Sequence>1,000</Sequence>
		<MethodName>moveSourceToDest</MethodName>
		<LogicDescription/>
		<MethodReturns/>
		<MethodInterface/>
		<MethodClassName>SourceHeaderScanListener</MethodClassName>
		<LogicSource><![CDATA[try {
    String string;
    while ((string = reader.readLine()) != null)
    {
    	if (string.indexOf("/*") != -1)
    		foundComment = true;
    	if (!foundPackage)
    	{
    		if (string.indexOf("package") == -1)
        	{
    			if (string.indexOf("/*") != -1)
    				continue;
    			if (string.indexOf("*/") != -1)
    				continue;
    			if (string.indexOf("opyright") != -1)
    				continue;
        		beforePackage = beforePackage + this.convertString(string) + lineSeparator;
        		continue;
        	}
    		else
        	{
        		foundPackage = true;
                dataOut.write("/*" + lineSeparator);
        		dataOut.write(beforePackage);
                dataOut.write(" * Copyright © 2011 jbundle.org. All rights reserved." + lineSeparator);
                dataOut.write(" */" + lineSeparator);
        	}
    	}
        string = this.convertString(string);
        if (string != null)
        {
            dataOut.write(string + lineSeparator);
        }
    }
	if (!foundPackage)
		dataOut.write(beforePackage);
} catch (FileNotFoundException ex)  {
    ex.printStackTrace();
} catch (IOException ex)    {
    ex.printStackTrace();
}
]]></LogicSource>
		<LogicThrows/>
		<Protection/>
		<CopyFrom/>
	</LogicFile>
</file>