<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>jbundle-config-web-reactor</artifactId>
		<groupId>org.jbundle.config.web</groupId>
		<version>0.7.7-SNAPSHOT</version>
	</parent>

	<artifactId>jbundle-config-web-webbundle</artifactId>

	<name>jbundle-config-web-webbundle - Hybrid osgi webapp</name>
	<description>Hybrid web osgi webbundle</description>

	<packaging>war</packaging>

	<properties>
		<dev.home>/usr/local/java</dev.home>
		<jbundlePackage>org.jbundle.webbundle</jbundlePackage>
	</properties>

	<build>
		<plugins>
			<plugin> <!-- Need to use this plugin to build war files -->
				<artifactId>maven-war-plugin</artifactId>
				<groupId>org.apache.maven.plugins</groupId>
				<configuration>
					<archive>
						<!-- add bundle plugin generated manifest to the war -->
						<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF
						</manifestFile>
						<!--
							For some reason, adding Bundle-ClassPath in maven-bundle-plugin
							confuses that plugin and it generates wrong Import-Package, etc.
							So, we generate it here.
						-->
						<manifestEntries>
							<Bundle-ClassPath>WEB-INF/classes/</Bundle-ClassPath>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<configuration>
					<supportedProjectTypes>
						<supportedProjectType>jar</supportedProjectType>
						<supportedProjectType>bundle</supportedProjectType>
						<supportedProjectType>war</supportedProjectType>
					</supportedProjectTypes>
					<instructions>
						<Export-Package>org.jbundle.webbundle.*;version=${project.version},</Export-Package>
            <Private-Package>
                org.jbundle.thin.base.util.osgi.bootstrap,	<!-- Except, Do copy this code in -->
            </Private-Package>
            <Import-Package>
            	*;resolution:=optional,
                org.osgi.framework;resolution:=optional, <!-- I Don't explicitly reference this, but I need to check to see if this exists to enable OSGi -->
			    org.jbundle.thin.base.util.osgi.service;resolution:=optional, <!-- This allows me to start it once I deploy it -->
            </Import-Package>
            <Bundle-Activator>org.jbundle.thin.base.util.osgi.bootstrap.ClassServiceBootstrap</Bundle-Activator>
						<!-- This is the context root of this application -->
						<Web-ContextPath>/${project.artifactId}</Web-ContextPath>
						<!--
							Bundle-ClassPath without "." confuses bundle plugin. So, leave it
							unspecified (i.e., default to ".") and we shall generate it using
							war-plugin's manifest customization
							<Bundle-ClassPath>WEB-INF/classes/</Bundle-ClassPath>
						-->
					</instructions>
				</configuration>
				<executions>
					<execution>
						<id>bundle-manifest</id>
						<phase>process-classes</phase>
						<goals>
							<goal>manifest</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<configuration>
					<connectors>
						<connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
							<port>8888</port>
							<maxIdleTime>30000</maxIdleTime>
						</connector>
					</connectors>
					<webAppSourceDirectory>${project.build.directory}/${project.artifactId}-${project.version}
					</webAppSourceDirectory>
					<contextPath>/</contextPath>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>move-dojo-resources</id> <!--  Copy dojo resources before packaging starts. -->
						<phase>process-resources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<artifactItems>
						<artifactItem>
							<groupId>org.dojotoolkit</groupId>
							<artifactId>dojo</artifactId>
							<version>${dojoVersion}</version>
							<type>zip</type>
							<outputDirectory>${project.build.directory}</outputDirectory>
						</artifactItem>
						<artifactItem>
							<groupId>org.jbundle.res</groupId>
							<artifactId>org.jbundle.res.images</artifactId>
							<version>${project.version}</version>
			                <classifier>root</classifier>
							<type>jar</type>
							<outputDirectory>${project.build.directory}/${project.build.finalName}
							</outputDirectory>
						</artifactItem>
						<artifactItem>
							<groupId>org.jbundle.res</groupId>
							<artifactId>org.jbundle.res.docs</artifactId>
							<version>${project.version}</version>
			                <classifier>root</classifier>
							<type>jar</type>
							<outputDirectory>${project.build.directory}/${project.build.finalName}
							</outputDirectory>
							<excludes>docs\/programmer\/**,docs\/help\/specifications\/**,docs\/test\/**
							</excludes>
						</artifactItem>
						<artifactItem>
							<groupId>org.jbundle.config.web</groupId>
							<artifactId>jbundle-config-web-jnlp</artifactId>
							<version>${project.version}</version>
							<classifier>bin</classifier>
							<type>zip</type>
							<outputDirectory>${project.build.directory}/${project.build.finalName}
							</outputDirectory>
						</artifactItem>
						<!--
							artifactItem> <groupId>org.jbundle.config</groupId>
							<artifactId>org.jbundle.config.web.cocoon</artifactId>
							<version>${project.version}</version> <type>war</type>
							<outputDirectory>${project.build.directory}/${project.build.finalName}</outputDirectory>
							</artifactItem -->
					</artifactItems>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/${project.build.finalName}/docs/styles/js
							</outputDirectory>
							<resources>
								<resource>
									<directory>${project.build.directory}/dojo-${dojoVersion}
									</directory>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>

		<resources>
			<!--
				resource> <directory>${dev.home}/lib/dojo</directory>
				<targetPath>${basedir}/target/${project.artifactId}-${project.version}/docs/styles/js</targetPath>
				</resource -->
			<resource>
				<directory>${dev.home}/lib/sha</directory>
				<targetPath>${basedir}/target/${project.artifactId}-${project.version}/docs/styles/js/sha
				</targetPath>
			</resource>
		</resources>

	</build>

	<dependencies>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.core</artifactId>
			<scope>provided</scope> <!-- This better be provided -->
		</dependency>

		<dependency>
			<groupId>org.jbundle.config.dep</groupId>
			<artifactId>jbundle-config-dep-all</artifactId>
			<version>0.7.7-SNAPSHOT</version>
			<type>pom</type>
			<scope>provided</scope>	<!-- Hey this is OSGi -->
		</dependency>
		<dependency>
			<groupId>org.jbundle.util.webapp</groupId>
			<artifactId>org.jbundle.util.webapp.redirect</artifactId>
			<version>0.9.1-SNAPSHOT</version>
			<classifier>classes</classifier>
			<scope>provided</scope>	<!-- Hey this is OSGi -->
		</dependency>
		<dependency>
			<groupId>jardiff</groupId>
			<artifactId>jardiff</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.mojo.webstart</groupId> <!-- Hopefully this will become available from java.net -->
			<artifactId>webstart-jnlp-servlet</artifactId>
		</dependency>

	    <dependency>
	      <groupId>org.jbundle.thin.base</groupId>
	      <artifactId>org.jbundle.thin.base.util.osgi</artifactId>
	      <version>0.7.7-SNAPSHOT</version>
	    </dependency>
	</dependencies>

</project>
